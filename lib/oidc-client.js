(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _Log = __webpack_require__(/*! ./src/Log.js */ "./src/Log.js");

var _OidcClient = __webpack_require__(/*! ./src/OidcClient.js */ "./src/OidcClient.js");

var _OidcClientSettings = __webpack_require__(/*! ./src/OidcClientSettings.js */ "./src/OidcClientSettings.js");

var _WebStorageStateStore = __webpack_require__(/*! ./src/WebStorageStateStore.js */ "./src/WebStorageStateStore.js");

var _InMemoryWebStorage = __webpack_require__(/*! ./src/InMemoryWebStorage.js */ "./src/InMemoryWebStorage.js");

var _UserManager = __webpack_require__(/*! ./src/UserManager.js */ "./src/UserManager.js");

var _AccessTokenEvents = __webpack_require__(/*! ./src/AccessTokenEvents.js */ "./src/AccessTokenEvents.js");

var _MetadataService = __webpack_require__(/*! ./src/MetadataService.js */ "./src/MetadataService.js");

var _CordovaPopupNavigator = __webpack_require__(/*! ./src/CordovaPopupNavigator.js */ "./src/CordovaPopupNavigator.js");

var _CordovaIFrameNavigator = __webpack_require__(/*! ./src/CordovaIFrameNavigator.js */ "./src/CordovaIFrameNavigator.js");

var _CheckSessionIFrame = __webpack_require__(/*! ./src/CheckSessionIFrame.js */ "./src/CheckSessionIFrame.js");

var _TokenRevocationClient = __webpack_require__(/*! ./src/TokenRevocationClient.js */ "./src/TokenRevocationClient.js");

var _SessionMonitor = __webpack_require__(/*! ./src/SessionMonitor.js */ "./src/SessionMonitor.js");

var _Global = __webpack_require__(/*! ./src/Global.js */ "./src/Global.js");

var _User = __webpack_require__(/*! ./src/User.js */ "./src/User.js");

var _version = __webpack_require__(/*! ./version.js */ "./version.js");

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

exports.default = {
    Version: _version.Version,
    Log: _Log.Log,
    OidcClient: _OidcClient.OidcClient,
    OidcClientSettings: _OidcClientSettings.OidcClientSettings,
    WebStorageStateStore: _WebStorageStateStore.WebStorageStateStore,
    InMemoryWebStorage: _InMemoryWebStorage.InMemoryWebStorage,
    UserManager: _UserManager.UserManager,
    AccessTokenEvents: _AccessTokenEvents.AccessTokenEvents,
    MetadataService: _MetadataService.MetadataService,
    CordovaPopupNavigator: _CordovaPopupNavigator.CordovaPopupNavigator,
    CordovaIFrameNavigator: _CordovaIFrameNavigator.CordovaIFrameNavigator,
    CheckSessionIFrame: _CheckSessionIFrame.CheckSessionIFrame,
    TokenRevocationClient: _TokenRevocationClient.TokenRevocationClient,
    SessionMonitor: _SessionMonitor.SessionMonitor,
    Global: _Global.Global,
    User: _User.User
};
module.exports = exports['default'];

/***/ }),

/***/ "./jsrsasign/dist/jsrsasign.js":
/*!*************************************!*\
  !*** ./jsrsasign/dist/jsrsasign.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(Buffer) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * jsrsasign(all) 10.5.8 (2022-02-25) (c) 2010-2021 Kenji Urushima | kjur.github.io/jsrsasign/license
 */

var navigator = {};
navigator.userAgent = false;

var window = {};

/*! CryptoJS v3.1.2 core-fix.js
 * code.google.com/p/crypto-js
 * (c) 2009-2013 by Jeff Mott. All rights reserved.
 * code.google.com/p/crypto-js/wiki/License
 * THIS IS FIX of 'core.js' to fix Hmac issue.
 * https://code.google.com/p/crypto-js/issues/detail?id=84
 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
 */
var CryptoJS = CryptoJS || function (e, g) {
  var a = {};var b = a.lib = {};var j = b.Base = function () {
    function n() {}return { extend: function extend(p) {
        n.prototype = this;var o = new n();if (p) {
          o.mixIn(p);
        }if (!o.hasOwnProperty("init")) {
          o.init = function () {
            o.$super.init.apply(this, arguments);
          };
        }o.init.prototype = o;o.$super = this;return o;
      }, create: function create() {
        var o = this.extend();o.init.apply(o, arguments);return o;
      }, init: function init() {}, mixIn: function mixIn(p) {
        for (var o in p) {
          if (p.hasOwnProperty(o)) {
            this[o] = p[o];
          }
        }if (p.hasOwnProperty("toString")) {
          this.toString = p.toString;
        }
      }, clone: function clone() {
        return this.init.prototype.extend(this);
      } };
  }();var l = b.WordArray = j.extend({ init: function init(o, n) {
      o = this.words = o || [];if (n != g) {
        this.sigBytes = n;
      } else {
        this.sigBytes = o.length * 4;
      }
    }, toString: function toString(n) {
      return (n || h).stringify(this);
    }, concat: function concat(t) {
      var q = this.words;var p = t.words;var n = this.sigBytes;var s = t.sigBytes;this.clamp();if (n % 4) {
        for (var r = 0; r < s; r++) {
          var o = p[r >>> 2] >>> 24 - r % 4 * 8 & 255;q[n + r >>> 2] |= o << 24 - (n + r) % 4 * 8;
        }
      } else {
        for (var r = 0; r < s; r += 4) {
          q[n + r >>> 2] = p[r >>> 2];
        }
      }this.sigBytes += s;return this;
    }, clamp: function clamp() {
      var o = this.words;var n = this.sigBytes;o[n >>> 2] &= 4294967295 << 32 - n % 4 * 8;o.length = e.ceil(n / 4);
    }, clone: function clone() {
      var n = j.clone.call(this);n.words = this.words.slice(0);return n;
    }, random: function random(p) {
      var o = [];for (var n = 0; n < p; n += 4) {
        o.push(e.random() * 4294967296 | 0);
      }return new l.init(o, p);
    } });var m = a.enc = {};var h = m.Hex = { stringify: function stringify(p) {
      var r = p.words;var o = p.sigBytes;var q = [];for (var n = 0; n < o; n++) {
        var s = r[n >>> 2] >>> 24 - n % 4 * 8 & 255;q.push((s >>> 4).toString(16));q.push((s & 15).toString(16));
      }return q.join("");
    }, parse: function parse(p) {
      var n = p.length;var q = [];for (var o = 0; o < n; o += 2) {
        q[o >>> 3] |= parseInt(p.substr(o, 2), 16) << 24 - o % 8 * 4;
      }return new l.init(q, n / 2);
    } };var d = m.Latin1 = { stringify: function stringify(q) {
      var r = q.words;var p = q.sigBytes;var n = [];for (var o = 0; o < p; o++) {
        var s = r[o >>> 2] >>> 24 - o % 4 * 8 & 255;n.push(String.fromCharCode(s));
      }return n.join("");
    }, parse: function parse(p) {
      var n = p.length;var q = [];for (var o = 0; o < n; o++) {
        q[o >>> 2] |= (p.charCodeAt(o) & 255) << 24 - o % 4 * 8;
      }return new l.init(q, n);
    } };var c = m.Utf8 = { stringify: function stringify(n) {
      try {
        return decodeURIComponent(escape(d.stringify(n)));
      } catch (o) {
        throw new Error("Malformed UTF-8 data");
      }
    }, parse: function parse(n) {
      return d.parse(unescape(encodeURIComponent(n)));
    } };var i = b.BufferedBlockAlgorithm = j.extend({ reset: function reset() {
      this._data = new l.init();this._nDataBytes = 0;
    }, _append: function _append(n) {
      if (typeof n == "string") {
        n = c.parse(n);
      }this._data.concat(n);this._nDataBytes += n.sigBytes;
    }, _process: function _process(w) {
      var q = this._data;var x = q.words;var n = q.sigBytes;var t = this.blockSize;var v = t * 4;var u = n / v;if (w) {
        u = e.ceil(u);
      } else {
        u = e.max((u | 0) - this._minBufferSize, 0);
      }var s = u * t;var r = e.min(s * 4, n);if (s) {
        for (var p = 0; p < s; p += t) {
          this._doProcessBlock(x, p);
        }var o = x.splice(0, s);q.sigBytes -= r;
      }return new l.init(o, r);
    }, clone: function clone() {
      var n = j.clone.call(this);n._data = this._data.clone();return n;
    }, _minBufferSize: 0 });var f = b.Hasher = i.extend({ cfg: j.extend(), init: function init(n) {
      this.cfg = this.cfg.extend(n);this.reset();
    }, reset: function reset() {
      i.reset.call(this);this._doReset();
    }, update: function update(n) {
      this._append(n);this._process();return this;
    }, finalize: function finalize(n) {
      if (n) {
        this._append(n);
      }var o = this._doFinalize();return o;
    }, blockSize: 512 / 32, _createHelper: function _createHelper(n) {
      return function (p, o) {
        return new n.init(o).finalize(p);
      };
    }, _createHmacHelper: function _createHmacHelper(n) {
      return function (p, o) {
        return new k.HMAC.init(n, o).finalize(p);
      };
    } });var k = a.algo = {};return a;
}(Math);
/*
CryptoJS v3.1.2 x64-core-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function (g) {
  var a = CryptoJS,
      f = a.lib,
      e = f.Base,
      h = f.WordArray,
      a = a.x64 = {};a.Word = e.extend({ init: function init(b, c) {
      this.high = b;this.low = c;
    } });a.WordArray = e.extend({ init: function init(b, c) {
      b = this.words = b || [];this.sigBytes = c != g ? c : 8 * b.length;
    }, toX32: function toX32() {
      for (var b = this.words, c = b.length, a = [], d = 0; d < c; d++) {
        var e = b[d];a.push(e.high);a.push(e.low);
      }return h.create(a, this.sigBytes);
    }, clone: function clone() {
      for (var b = e.clone.call(this), c = b.words = this.words.slice(0), a = c.length, d = 0; d < a; d++) {
        c[d] = c[d].clone();
      }return b;
    } });
})();

/*
CryptoJS v3.1.2 enc-base64.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  var h = CryptoJS,
      j = h.lib.WordArray;h.enc.Base64 = { stringify: function stringify(b) {
      var e = b.words,
          f = b.sigBytes,
          c = this._map;b.clamp();b = [];for (var a = 0; a < f; a += 3) {
        for (var d = (e[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++) {
          b.push(c.charAt(d >>> 6 * (3 - g) & 63));
        }
      }if (e = c.charAt(64)) for (; b.length % 4;) {
        b.push(e);
      }return b.join("");
    }, parse: function parse(b) {
      var e = b.length,
          f = this._map,
          c = f.charAt(64);c && (c = b.indexOf(c), -1 != c && (e = c));for (var c = [], a = 0, d = 0; d < e; d++) {
        if (d % 4) {
          var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4),
              h = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);c[a >>> 2] |= (g | h) << 24 - 8 * (a % 4);a++;
        }
      }return j.create(c, a);
    }, _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=" };
})();

/*
CryptoJS v3.1.2 sha256-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function (k) {
  for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t = [], u = function u(q) {
    return 4294967296 * (q - (q | 0)) | 0;
  }, l = 2, b = 0; 64 > b;) {
    var d;a: {
      d = l;for (var w = k.sqrt(d), r = 2; r <= w; r++) {
        if (!(d % r)) {
          d = !1;break a;
        }
      }d = !0;
    }d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t[b] = u(k.pow(l, 1 / 3)), b++);l++;
  }var n = [],
      h = h.SHA256 = j.extend({ _doReset: function _doReset() {
      this._hash = new v.init(s.slice(0));
    }, _doProcessBlock: function _doProcessBlock(q, h) {
      for (var a = this._hash.words, c = a[0], d = a[1], b = a[2], k = a[3], f = a[4], g = a[5], j = a[6], l = a[7], e = 0; 64 > e; e++) {
        if (16 > e) n[e] = q[h + e] | 0;else {
          var m = n[e - 15],
              p = n[e - 2];n[e] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n[e - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n[e - 16];
        }m = l + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g ^ ~f & j) + t[e] + n[e];p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d ^ c & b ^ d & b);l = j;j = g;g = f;f = k + m | 0;k = b;b = d;d = c;c = m + p | 0;
      }a[0] = a[0] + c | 0;a[1] = a[1] + d | 0;a[2] = a[2] + b | 0;a[3] = a[3] + k | 0;a[4] = a[4] + f | 0;a[5] = a[5] + g | 0;a[6] = a[6] + j | 0;a[7] = a[7] + l | 0;
    }, _doFinalize: function _doFinalize() {
      var d = this._data,
          b = d.words,
          a = 8 * this._nDataBytes,
          c = 8 * d.sigBytes;
      b[c >>> 5] |= 128 << 24 - c % 32;b[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);b[(c + 64 >>> 9 << 4) + 15] = a;d.sigBytes = 4 * b.length;this._process();return this._hash;
    }, clone: function clone() {
      var b = j.clone.call(this);b._hash = this._hash.clone();return b;
    } });g.SHA256 = j._createHelper(h);g.HmacSHA256 = j._createHmacHelper(h);
})(Math);

/*
CryptoJS v3.1.2 sha512-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  function a() {
    return d.create.apply(d, arguments);
  }for (var n = CryptoJS, r = n.lib.Hasher, e = n.x64, d = e.Word, T = e.WordArray, e = n.algo, ea = [a(1116352408, 3609767458), a(1899447441, 602891725), a(3049323471, 3964484399), a(3921009573, 2173295548), a(961987163, 4081628472), a(1508970993, 3053834265), a(2453635748, 2937671579), a(2870763221, 3664609560), a(3624381080, 2734883394), a(310598401, 1164996542), a(607225278, 1323610764), a(1426881987, 3590304994), a(1925078388, 4068182383), a(2162078206, 991336113), a(2614888103, 633803317), a(3248222580, 3479774868), a(3835390401, 2666613458), a(4022224774, 944711139), a(264347078, 2341262773), a(604807628, 2007800933), a(770255983, 1495990901), a(1249150122, 1856431235), a(1555081692, 3175218132), a(1996064986, 2198950837), a(2554220882, 3999719339), a(2821834349, 766784016), a(2952996808, 2566594879), a(3210313671, 3203337956), a(3336571891, 1034457026), a(3584528711, 2466948901), a(113926993, 3758326383), a(338241895, 168717936), a(666307205, 1188179964), a(773529912, 1546045734), a(1294757372, 1522805485), a(1396182291, 2643833823), a(1695183700, 2343527390), a(1986661051, 1014477480), a(2177026350, 1206759142), a(2456956037, 344077627), a(2730485921, 1290863460), a(2820302411, 3158454273), a(3259730800, 3505952657), a(3345764771, 106217008), a(3516065817, 3606008344), a(3600352804, 1432725776), a(4094571909, 1467031594), a(275423344, 851169720), a(430227734, 3100823752), a(506948616, 1363258195), a(659060556, 3750685593), a(883997877, 3785050280), a(958139571, 3318307427), a(1322822218, 3812723403), a(1537002063, 2003034995), a(1747873779, 3602036899), a(1955562222, 1575990012), a(2024104815, 1125592928), a(2227730452, 2716904306), a(2361852424, 442776044), a(2428436474, 593698344), a(2756734187, 3733110249), a(3204031479, 2999351573), a(3329325298, 3815920427), a(3391569614, 3928383900), a(3515267271, 566280711), a(3940187606, 3454069534), a(4118630271, 4000239992), a(116418474, 1914138554), a(174292421, 2731055270), a(289380356, 3203993006), a(460393269, 320620315), a(685471733, 587496836), a(852142971, 1086792851), a(1017036298, 365543100), a(1126000580, 2618297676), a(1288033470, 3409855158), a(1501505948, 4234509866), a(1607167915, 987167468), a(1816402316, 1246189591)], v = [], w = 0; 80 > w; w++) {
    v[w] = a();
  }e = e.SHA512 = r.extend({ _doReset: function _doReset() {
      this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);
    }, _doProcessBlock: function _doProcessBlock(a, d) {
      for (var f = this._hash.words, F = f[0], e = f[1], n = f[2], r = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w = F.high, J = F.low, X = e.high, K = e.low, Y = n.high, L = n.low, Z = r.high, M = r.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w, g = J, z = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {
        var s = v[m];if (16 > m) var j = s.high = a[d + 2 * m] | 0,
            b = s.low = a[d + 2 * m + 1] | 0;else {
          var j = v[m - 15],
              b = j.high,
              p = j.low,
              j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7,
              p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25),
              u = v[m - 2],
              b = u.high,
              c = u.low,
              u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6,
              c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26),
              b = v[m - 7],
              W = b.high,
              t = v[m - 16],
              q = t.high,
              t = t.low,
              b = p + b.low,
              j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0),
              b = b + c,
              j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0),
              b = b + t,
              j = j + q + (b >>> 0 < t >>> 0 ? 1 : 0);s.high = j;s.low = b;
        }var W = l & R ^ ~l & S,
            t = h & C ^ ~h & D,
            s = k & z ^ k & A ^ z & A,
            T = g & x ^ g & y ^ x & y,
            p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7),
            u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7),
            c = ea[m],
            fa = c.high,
            da = c.low,
            c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)),
            q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0),
            c = c + t,
            q = q + W + (c >>> 0 < t >>> 0 ? 1 : 0),
            c = c + da,
            q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0),
            c = c + b,
            q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0),
            b = u + T,
            s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0),
            V = S,
            E = D,
            S = R,
            D = C,
            R = l,
            C = h,
            h = B + c | 0,
            l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0,
            U = A,
            B = y,
            A = z,
            y = x,
            z = k,
            x = g,
            g = c + b | 0,
            k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;
      }J = F.low = J + g;F.high = w + k + (J >>> 0 < g >>> 0 ? 1 : 0);K = e.low = K + x;e.high = X + z + (K >>> 0 < x >>> 0 ? 1 : 0);L = n.low = L + y;n.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);M = r.low = M + B;r.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);N = G.low = N + h;G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);O = H.low = O + C;H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);P = I.low = P + D;
      I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);Q = f.low = Q + E;f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);
    }, _doFinalize: function _doFinalize() {
      var a = this._data,
          d = a.words,
          f = 8 * this._nDataBytes,
          e = 8 * a.sigBytes;d[e >>> 5] |= 128 << 24 - e % 32;d[(e + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);d[(e + 128 >>> 10 << 5) + 31] = f;a.sigBytes = 4 * d.length;this._process();return this._hash.toX32();
    }, clone: function clone() {
      var a = r.clone.call(this);a._hash = this._hash.clone();return a;
    }, blockSize: 32 });n.SHA512 = r._createHelper(e);n.HmacSHA512 = r._createHmacHelper(e);
})();

/*
CryptoJS v3.1.2 sha384-min.js
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
(function () {
  var c = CryptoJS,
      a = c.x64,
      b = a.Word,
      e = a.WordArray,
      a = c.algo,
      d = a.SHA512,
      a = a.SHA384 = d.extend({ _doReset: function _doReset() {
      this._hash = new e.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);
    }, _doFinalize: function _doFinalize() {
      var a = d._doFinalize.call(this);a.sigBytes -= 16;return a;
    } });c.SHA384 = d._createHelper(a);c.HmacSHA384 = d._createHmacHelper(a);
})();

/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var b64map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64pad = "=";function hex2b64(d) {
  var b;var e;var a = "";for (b = 0; b + 3 <= d.length; b += 3) {
    e = parseInt(d.substring(b, b + 3), 16);a += b64map.charAt(e >> 6) + b64map.charAt(e & 63);
  }if (b + 1 == d.length) {
    e = parseInt(d.substring(b, b + 1), 16);a += b64map.charAt(e << 2);
  } else {
    if (b + 2 == d.length) {
      e = parseInt(d.substring(b, b + 2), 16);a += b64map.charAt(e >> 2) + b64map.charAt((e & 3) << 4);
    }
  }if (b64pad) {
    while ((a.length & 3) > 0) {
      a += b64pad;
    }
  }return a;
}function b64tohex(f) {
  var d = "";var e;var b = 0;var c;var a;for (e = 0; e < f.length; ++e) {
    if (f.charAt(e) == b64pad) {
      break;
    }a = b64map.indexOf(f.charAt(e));if (a < 0) {
      continue;
    }if (b == 0) {
      d += int2char(a >> 2);c = a & 3;b = 1;
    } else {
      if (b == 1) {
        d += int2char(c << 2 | a >> 4);c = a & 15;b = 2;
      } else {
        if (b == 2) {
          d += int2char(c);d += int2char(a >> 2);c = a & 3;b = 3;
        } else {
          d += int2char(c << 2 | a >> 4);d += int2char(a & 15);b = 0;
        }
      }
    }
  }if (b == 1) {
    d += int2char(c << 2);
  }return d;
}function b64toBA(e) {
  var d = b64tohex(e);var c;var b = new Array();for (c = 0; 2 * c < d.length; ++c) {
    b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);
  }return b;
};
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var dbits;var canary = 244837814094590;var j_lm = (canary & 16777215) == 15715070;function BigInteger(e, d, f) {
  if (e != null) {
    if ("number" == typeof e) {
      this.fromNumber(e, d, f);
    } else {
      if (d == null && "string" != typeof e) {
        this.fromString(e, 256);
      } else {
        this.fromString(e, d);
      }
    }
  }
}function nbi() {
  return new BigInteger(null);
}function am1(f, a, b, e, h, g) {
  while (--g >= 0) {
    var d = a * this[f++] + b[e] + h;h = Math.floor(d / 67108864);b[e++] = d & 67108863;
  }return h;
}function am2(f, q, r, e, o, a) {
  var k = q & 32767,
      p = q >> 15;while (--a >= 0) {
    var d = this[f] & 32767;var g = this[f++] >> 15;var b = p * d + g * k;d = k * d + ((b & 32767) << 15) + r[e] + (o & 1073741823);o = (d >>> 30) + (b >>> 15) + p * g + (o >>> 30);r[e++] = d & 1073741823;
  }return o;
}function am3(f, q, r, e, o, a) {
  var k = q & 16383,
      p = q >> 14;while (--a >= 0) {
    var d = this[f] & 16383;var g = this[f++] >> 14;var b = p * d + g * k;d = k * d + ((b & 16383) << 14) + r[e] + o;o = (d >> 28) + (b >> 14) + p * g;r[e++] = d & 268435455;
  }return o;
}if (j_lm && navigator.appName == "Microsoft Internet Explorer") {
  BigInteger.prototype.am = am2;dbits = 30;
} else {
  if (j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;dbits = 26;
  } else {
    BigInteger.prototype.am = am3;dbits = 28;
  }
}BigInteger.prototype.DB = dbits;BigInteger.prototype.DM = (1 << dbits) - 1;BigInteger.prototype.DV = 1 << dbits;var BI_FP = 52;BigInteger.prototype.FV = Math.pow(2, BI_FP);BigInteger.prototype.F1 = BI_FP - dbits;BigInteger.prototype.F2 = 2 * dbits - BI_FP;var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";var BI_RC = new Array();var rr, vv;rr = "0".charCodeAt(0);for (vv = 0; vv <= 9; ++vv) {
  BI_RC[rr++] = vv;
}rr = "a".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}rr = "A".charCodeAt(0);for (vv = 10; vv < 36; ++vv) {
  BI_RC[rr++] = vv;
}function int2char(a) {
  return BI_RM.charAt(a);
}function intAt(b, a) {
  var d = BI_RC[b.charCodeAt(a)];return d == null ? -1 : d;
}function bnpCopyTo(b) {
  for (var a = this.t - 1; a >= 0; --a) {
    b[a] = this[a];
  }b.t = this.t;b.s = this.s;
}function bnpFromInt(a) {
  this.t = 1;this.s = a < 0 ? -1 : 0;if (a > 0) {
    this[0] = a;
  } else {
    if (a < -1) {
      this[0] = a + this.DV;
    } else {
      this.t = 0;
    }
  }
}function nbv(a) {
  var b = nbi();b.fromInt(a);return b;
}function bnpFromString(h, c) {
  var e;if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 256) {
        e = 8;
      } else {
        if (c == 2) {
          e = 1;
        } else {
          if (c == 32) {
            e = 5;
          } else {
            if (c == 4) {
              e = 2;
            } else {
              this.fromRadix(h, c);return;
            }
          }
        }
      }
    }
  }this.t = 0;this.s = 0;var g = h.length,
      d = false,
      f = 0;while (--g >= 0) {
    var a = e == 8 ? h[g] & 255 : intAt(h, g);if (a < 0) {
      if (h.charAt(g) == "-") {
        d = true;
      }continue;
    }d = false;if (f == 0) {
      this[this.t++] = a;
    } else {
      if (f + e > this.DB) {
        this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;this[this.t++] = a >> this.DB - f;
      } else {
        this[this.t - 1] |= a << f;
      }
    }f += e;if (f >= this.DB) {
      f -= this.DB;
    }
  }if (e == 8 && (h[0] & 128) != 0) {
    this.s = -1;if (f > 0) {
      this[this.t - 1] |= (1 << this.DB - f) - 1 << f;
    }
  }this.clamp();if (d) {
    BigInteger.ZERO.subTo(this, this);
  }
}function bnpClamp() {
  var a = this.s & this.DM;while (this.t > 0 && this[this.t - 1] == a) {
    --this.t;
  }
}function bnToString(c) {
  if (this.s < 0) {
    return "-" + this.negate().toString(c);
  }var e;if (c == 16) {
    e = 4;
  } else {
    if (c == 8) {
      e = 3;
    } else {
      if (c == 2) {
        e = 1;
      } else {
        if (c == 32) {
          e = 5;
        } else {
          if (c == 4) {
            e = 2;
          } else {
            return this.toRadix(c);
          }
        }
      }
    }
  }var g = (1 << e) - 1,
      l,
      a = false,
      h = "",
      f = this.t;var j = this.DB - f * this.DB % e;if (f-- > 0) {
    if (j < this.DB && (l = this[f] >> j) > 0) {
      a = true;h = int2char(l);
    }while (f >= 0) {
      if (j < e) {
        l = (this[f] & (1 << j) - 1) << e - j;l |= this[--f] >> (j += this.DB - e);
      } else {
        l = this[f] >> (j -= e) & g;if (j <= 0) {
          j += this.DB;--f;
        }
      }if (l > 0) {
        a = true;
      }if (a) {
        h += int2char(l);
      }
    }
  }return a ? h : "0";
}function bnNegate() {
  var a = nbi();BigInteger.ZERO.subTo(this, a);return a;
}function bnAbs() {
  return this.s < 0 ? this.negate() : this;
}function bnCompareTo(b) {
  var d = this.s - b.s;if (d != 0) {
    return d;
  }var c = this.t;d = c - b.t;if (d != 0) {
    return this.s < 0 ? -d : d;
  }while (--c >= 0) {
    if ((d = this[c] - b[c]) != 0) {
      return d;
    }
  }return 0;
}function nbits(a) {
  var c = 1,
      b;if ((b = a >>> 16) != 0) {
    a = b;c += 16;
  }if ((b = a >> 8) != 0) {
    a = b;c += 8;
  }if ((b = a >> 4) != 0) {
    a = b;c += 4;
  }if ((b = a >> 2) != 0) {
    a = b;c += 2;
  }if ((b = a >> 1) != 0) {
    a = b;c += 1;
  }return c;
}function bnBitLength() {
  if (this.t <= 0) {
    return 0;
  }return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
}function bnpDLShiftTo(c, b) {
  var a;for (a = this.t - 1; a >= 0; --a) {
    b[a + c] = this[a];
  }for (a = c - 1; a >= 0; --a) {
    b[a] = 0;
  }b.t = this.t + c;b.s = this.s;
}function bnpDRShiftTo(c, b) {
  for (var a = c; a < this.t; ++a) {
    b[a - c] = this[a];
  }b.t = Math.max(this.t - c, 0);b.s = this.s;
}function bnpLShiftTo(j, e) {
  var b = j % this.DB;var a = this.DB - b;var g = (1 << a) - 1;var f = Math.floor(j / this.DB),
      h = this.s << b & this.DM,
      d;for (d = this.t - 1; d >= 0; --d) {
    e[d + f + 1] = this[d] >> a | h;h = (this[d] & g) << b;
  }for (d = f - 1; d >= 0; --d) {
    e[d] = 0;
  }e[f] = h;e.t = this.t + f + 1;e.s = this.s;e.clamp();
}function bnpRShiftTo(g, d) {
  d.s = this.s;var e = Math.floor(g / this.DB);if (e >= this.t) {
    d.t = 0;return;
  }var b = g % this.DB;var a = this.DB - b;var f = (1 << b) - 1;d[0] = this[e] >> b;for (var c = e + 1; c < this.t; ++c) {
    d[c - e - 1] |= (this[c] & f) << a;d[c - e] = this[c] >> b;
  }if (b > 0) {
    d[this.t - e - 1] |= (this.s & f) << a;
  }d.t = this.t - e;d.clamp();
}function bnpSubTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);while (e < b) {
    g += this[e] - d[e];f[e++] = g & this.DM;g >>= this.DB;
  }if (d.t < this.t) {
    g -= d.s;while (e < this.t) {
      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += this.s;
  } else {
    g += this.s;while (e < d.t) {
      g -= d[e];f[e++] = g & this.DM;g >>= this.DB;
    }g -= d.s;
  }f.s = g < 0 ? -1 : 0;if (g < -1) {
    f[e++] = this.DV + g;
  } else {
    if (g > 0) {
      f[e++] = g;
    }
  }f.t = e;f.clamp();
}function bnpMultiplyTo(c, e) {
  var b = this.abs(),
      f = c.abs();var d = b.t;e.t = d + f.t;while (--d >= 0) {
    e[d] = 0;
  }for (d = 0; d < f.t; ++d) {
    e[d + b.t] = b.am(0, f[d], e, d, 0, b.t);
  }e.s = 0;e.clamp();if (this.s != c.s) {
    BigInteger.ZERO.subTo(e, e);
  }
}function bnpSquareTo(d) {
  var a = this.abs();var b = d.t = 2 * a.t;while (--b >= 0) {
    d[b] = 0;
  }for (b = 0; b < a.t - 1; ++b) {
    var e = a.am(b, a[b], d, 2 * b, 0, 1);if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e, a.t - b - 1)) >= a.DV) {
      d[b + a.t] -= a.DV;d[b + a.t + 1] = 1;
    }
  }if (d.t > 0) {
    d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);
  }d.s = 0;d.clamp();
}function bnpDivRemTo(n, h, g) {
  var w = n.abs();if (w.t <= 0) {
    return;
  }var k = this.abs();if (k.t < w.t) {
    if (h != null) {
      h.fromInt(0);
    }if (g != null) {
      this.copyTo(g);
    }return;
  }if (g == null) {
    g = nbi();
  }var d = nbi(),
      a = this.s,
      l = n.s;var v = this.DB - nbits(w[w.t - 1]);if (v > 0) {
    w.lShiftTo(v, d);k.lShiftTo(v, g);
  } else {
    w.copyTo(d);k.copyTo(g);
  }var p = d.t;var b = d[p - 1];if (b == 0) {
    return;
  }var o = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);var A = this.FV / o,
      z = (1 << this.F1) / o,
      x = 1 << this.F2;var u = g.t,
      s = u - p,
      f = h == null ? nbi() : h;d.dlShiftTo(s, f);if (g.compareTo(f) >= 0) {
    g[g.t++] = 1;g.subTo(f, g);
  }BigInteger.ONE.dlShiftTo(p, f);f.subTo(d, d);while (d.t < p) {
    d[d.t++] = 0;
  }while (--s >= 0) {
    var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z);if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {
      d.dlShiftTo(s, f);g.subTo(f, g);while (g[u] < --c) {
        g.subTo(f, g);
      }
    }
  }if (h != null) {
    g.drShiftTo(p, h);if (a != l) {
      BigInteger.ZERO.subTo(h, h);
    }
  }g.t = p;g.clamp();if (v > 0) {
    g.rShiftTo(v, g);
  }if (a < 0) {
    BigInteger.ZERO.subTo(g, g);
  }
}function bnMod(b) {
  var c = nbi();this.abs().divRemTo(b, null, c);if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {
    b.subTo(c, c);
  }return c;
}function Classic(a) {
  this.m = a;
}function cConvert(a) {
  if (a.s < 0 || a.compareTo(this.m) >= 0) {
    return a.mod(this.m);
  } else {
    return a;
  }
}function cRevert(a) {
  return a;
}function cReduce(a) {
  a.divRemTo(this.m, null, a);
}function cMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}function cSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}Classic.prototype.convert = cConvert;Classic.prototype.revert = cRevert;Classic.prototype.reduce = cReduce;Classic.prototype.mulTo = cMulTo;Classic.prototype.sqrTo = cSqrTo;function bnpInvDigit() {
  if (this.t < 1) {
    return 0;
  }var a = this[0];if ((a & 1) == 0) {
    return 0;
  }var b = a & 3;b = b * (2 - (a & 15) * b) & 15;b = b * (2 - (a & 255) * b) & 255;b = b * (2 - ((a & 65535) * b & 65535)) & 65535;b = b * (2 - a * b % this.DV) % this.DV;return b > 0 ? this.DV - b : -b;
}function Montgomery(a) {
  this.m = a;this.mp = a.invDigit();this.mpl = this.mp & 32767;this.mph = this.mp >> 15;this.um = (1 << a.DB - 15) - 1;this.mt2 = 2 * a.t;
}function montConvert(a) {
  var b = nbi();a.abs().dlShiftTo(this.m.t, b);b.divRemTo(this.m, null, b);if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {
    this.m.subTo(b, b);
  }return b;
}function montRevert(a) {
  var b = nbi();a.copyTo(b);this.reduce(b);return b;
}function montReduce(a) {
  while (a.t <= this.mt2) {
    a[a.t++] = 0;
  }for (var c = 0; c < this.m.t; ++c) {
    var b = a[c] & 32767;var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;b = c + this.m.t;a[b] += this.m.am(0, d, a, c, 0, this.m.t);while (a[b] >= a.DV) {
      a[b] -= a.DV;a[++b]++;
    }
  }a.clamp();a.drShiftTo(this.m.t, a);if (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}function montSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}function montMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}Montgomery.prototype.convert = montConvert;Montgomery.prototype.revert = montRevert;Montgomery.prototype.reduce = montReduce;Montgomery.prototype.mulTo = montMulTo;Montgomery.prototype.sqrTo = montSqrTo;function bnpIsEven() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
}function bnpExp(h, j) {
  if (h > 4294967295 || h < 1) {
    return BigInteger.ONE;
  }var f = nbi(),
      a = nbi(),
      d = j.convert(this),
      c = nbits(h) - 1;d.copyTo(f);while (--c >= 0) {
    j.sqrTo(f, a);if ((h & 1 << c) > 0) {
      j.mulTo(a, d, f);
    } else {
      var b = f;f = a;a = b;
    }
  }return j.revert(f);
}function bnModPowInt(b, a) {
  var c;if (b < 256 || a.isEven()) {
    c = new Classic(a);
  } else {
    c = new Montgomery(a);
  }return this.exp(b, c);
}BigInteger.prototype.copyTo = bnpCopyTo;BigInteger.prototype.fromInt = bnpFromInt;BigInteger.prototype.fromString = bnpFromString;BigInteger.prototype.clamp = bnpClamp;BigInteger.prototype.dlShiftTo = bnpDLShiftTo;BigInteger.prototype.drShiftTo = bnpDRShiftTo;BigInteger.prototype.lShiftTo = bnpLShiftTo;BigInteger.prototype.rShiftTo = bnpRShiftTo;BigInteger.prototype.subTo = bnpSubTo;BigInteger.prototype.multiplyTo = bnpMultiplyTo;BigInteger.prototype.squareTo = bnpSquareTo;BigInteger.prototype.divRemTo = bnpDivRemTo;BigInteger.prototype.invDigit = bnpInvDigit;BigInteger.prototype.isEven = bnpIsEven;BigInteger.prototype.exp = bnpExp;BigInteger.prototype.toString = bnToString;BigInteger.prototype.negate = bnNegate;BigInteger.prototype.abs = bnAbs;BigInteger.prototype.compareTo = bnCompareTo;BigInteger.prototype.bitLength = bnBitLength;BigInteger.prototype.mod = bnMod;BigInteger.prototype.modPowInt = bnModPowInt;BigInteger.ZERO = nbv(0);BigInteger.ONE = nbv(1);
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function bnClone() {
  var a = nbi();this.copyTo(a);return a;
}function bnIntValue() {
  if (this.s < 0) {
    if (this.t == 1) {
      return this[0] - this.DV;
    } else {
      if (this.t == 0) {
        return -1;
      }
    }
  } else {
    if (this.t == 1) {
      return this[0];
    } else {
      if (this.t == 0) {
        return 0;
      }
    }
  }return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
}function bnByteValue() {
  return this.t == 0 ? this.s : this[0] << 24 >> 24;
}function bnShortValue() {
  return this.t == 0 ? this.s : this[0] << 16 >> 16;
}function bnpChunkSize(a) {
  return Math.floor(Math.LN2 * this.DB / Math.log(a));
}function bnSigNum() {
  if (this.s < 0) {
    return -1;
  } else {
    if (this.t <= 0 || this.t == 1 && this[0] <= 0) {
      return 0;
    } else {
      return 1;
    }
  }
}function bnpToRadix(c) {
  if (c == null) {
    c = 10;
  }if (this.signum() == 0 || c < 2 || c > 36) {
    return "0";
  }var f = this.chunkSize(c);var e = Math.pow(c, f);var i = nbv(e),
      j = nbi(),
      h = nbi(),
      g = "";this.divRemTo(i, j, h);while (j.signum() > 0) {
    g = (e + h.intValue()).toString(c).substr(1) + g;j.divRemTo(i, j, h);
  }return h.intValue().toString(c) + g;
}function bnpFromRadix(m, h) {
  this.fromInt(0);if (h == null) {
    h = 10;
  }var f = this.chunkSize(h);var g = Math.pow(h, f),
      e = false,
      a = 0,
      l = 0;for (var c = 0; c < m.length; ++c) {
    var k = intAt(m, c);if (k < 0) {
      if (m.charAt(c) == "-" && this.signum() == 0) {
        e = true;
      }continue;
    }l = h * l + k;if (++a >= f) {
      this.dMultiply(g);this.dAddOffset(l, 0);a = 0;l = 0;
    }
  }if (a > 0) {
    this.dMultiply(Math.pow(h, a));this.dAddOffset(l, 0);
  }if (e) {
    BigInteger.ZERO.subTo(this, this);
  }
}function bnpFromNumber(f, e, h) {
  if ("number" == typeof e) {
    if (f < 2) {
      this.fromInt(1);
    } else {
      this.fromNumber(f, h);if (!this.testBit(f - 1)) {
        this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);
      }if (this.isEven()) {
        this.dAddOffset(1, 0);
      }while (!this.isProbablePrime(e)) {
        this.dAddOffset(2, 0);if (this.bitLength() > f) {
          this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);
        }
      }
    }
  } else {
    var d = new Array(),
        g = f & 7;d.length = (f >> 3) + 1;e.nextBytes(d);if (g > 0) {
      d[0] &= (1 << g) - 1;
    } else {
      d[0] = 0;
    }this.fromString(d, 256);
  }
}function bnToByteArray() {
  var b = this.t,
      c = new Array();c[0] = this.s;var e = this.DB - b * this.DB % 8,
      f,
      a = 0;if (b-- > 0) {
    if (e < this.DB && (f = this[b] >> e) != (this.s & this.DM) >> e) {
      c[a++] = f | this.s << this.DB - e;
    }while (b >= 0) {
      if (e < 8) {
        f = (this[b] & (1 << e) - 1) << 8 - e;f |= this[--b] >> (e += this.DB - 8);
      } else {
        f = this[b] >> (e -= 8) & 255;if (e <= 0) {
          e += this.DB;--b;
        }
      }if ((f & 128) != 0) {
        f |= -256;
      }if (a == 0 && (this.s & 128) != (f & 128)) {
        ++a;
      }if (a > 0 || f != this.s) {
        c[a++] = f;
      }
    }
  }return c;
}function bnEquals(b) {
  return this.compareTo(b) == 0;
}function bnMin(b) {
  return this.compareTo(b) < 0 ? this : b;
}function bnMax(b) {
  return this.compareTo(b) > 0 ? this : b;
}function bnpBitwiseTo(c, h, e) {
  var d,
      g,
      b = Math.min(c.t, this.t);for (d = 0; d < b; ++d) {
    e[d] = h(this[d], c[d]);
  }if (c.t < this.t) {
    g = c.s & this.DM;for (d = b; d < this.t; ++d) {
      e[d] = h(this[d], g);
    }e.t = this.t;
  } else {
    g = this.s & this.DM;for (d = b; d < c.t; ++d) {
      e[d] = h(g, c[d]);
    }e.t = c.t;
  }e.s = h(this.s, c.s);e.clamp();
}function op_and(a, b) {
  return a & b;
}function bnAnd(b) {
  var c = nbi();this.bitwiseTo(b, op_and, c);return c;
}function op_or(a, b) {
  return a | b;
}function bnOr(b) {
  var c = nbi();this.bitwiseTo(b, op_or, c);return c;
}function op_xor(a, b) {
  return a ^ b;
}function bnXor(b) {
  var c = nbi();this.bitwiseTo(b, op_xor, c);return c;
}function op_andnot(a, b) {
  return a & ~b;
}function bnAndNot(b) {
  var c = nbi();this.bitwiseTo(b, op_andnot, c);return c;
}function bnNot() {
  var b = nbi();for (var a = 0; a < this.t; ++a) {
    b[a] = this.DM & ~this[a];
  }b.t = this.t;b.s = ~this.s;return b;
}function bnShiftLeft(b) {
  var a = nbi();if (b < 0) {
    this.rShiftTo(-b, a);
  } else {
    this.lShiftTo(b, a);
  }return a;
}function bnShiftRight(b) {
  var a = nbi();if (b < 0) {
    this.lShiftTo(-b, a);
  } else {
    this.rShiftTo(b, a);
  }return a;
}function lbit(a) {
  if (a == 0) {
    return -1;
  }var b = 0;if ((a & 65535) == 0) {
    a >>= 16;b += 16;
  }if ((a & 255) == 0) {
    a >>= 8;b += 8;
  }if ((a & 15) == 0) {
    a >>= 4;b += 4;
  }if ((a & 3) == 0) {
    a >>= 2;b += 2;
  }if ((a & 1) == 0) {
    ++b;
  }return b;
}function bnGetLowestSetBit() {
  for (var a = 0; a < this.t; ++a) {
    if (this[a] != 0) {
      return a * this.DB + lbit(this[a]);
    }
  }if (this.s < 0) {
    return this.t * this.DB;
  }return -1;
}function cbit(a) {
  var b = 0;while (a != 0) {
    a &= a - 1;++b;
  }return b;
}function bnBitCount() {
  var c = 0,
      a = this.s & this.DM;for (var b = 0; b < this.t; ++b) {
    c += cbit(this[b] ^ a);
  }return c;
}function bnTestBit(b) {
  var a = Math.floor(b / this.DB);if (a >= this.t) {
    return this.s != 0;
  }return (this[a] & 1 << b % this.DB) != 0;
}function bnpChangeBit(c, b) {
  var a = BigInteger.ONE.shiftLeft(c);this.bitwiseTo(a, b, a);return a;
}function bnSetBit(a) {
  return this.changeBit(a, op_or);
}function bnClearBit(a) {
  return this.changeBit(a, op_andnot);
}function bnFlipBit(a) {
  return this.changeBit(a, op_xor);
}function bnpAddTo(d, f) {
  var e = 0,
      g = 0,
      b = Math.min(d.t, this.t);while (e < b) {
    g += this[e] + d[e];f[e++] = g & this.DM;g >>= this.DB;
  }if (d.t < this.t) {
    g += d.s;while (e < this.t) {
      g += this[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += this.s;
  } else {
    g += this.s;while (e < d.t) {
      g += d[e];f[e++] = g & this.DM;g >>= this.DB;
    }g += d.s;
  }f.s = g < 0 ? -1 : 0;if (g > 0) {
    f[e++] = g;
  } else {
    if (g < -1) {
      f[e++] = this.DV + g;
    }
  }f.t = e;f.clamp();
}function bnAdd(b) {
  var c = nbi();this.addTo(b, c);return c;
}function bnSubtract(b) {
  var c = nbi();this.subTo(b, c);return c;
}function bnMultiply(b) {
  var c = nbi();this.multiplyTo(b, c);return c;
}function bnSquare() {
  var a = nbi();this.squareTo(a);return a;
}function bnDivide(b) {
  var c = nbi();this.divRemTo(b, c, null);return c;
}function bnRemainder(b) {
  var c = nbi();this.divRemTo(b, null, c);return c;
}function bnDivideAndRemainder(b) {
  var d = nbi(),
      c = nbi();this.divRemTo(b, d, c);return new Array(d, c);
}function bnpDMultiply(a) {
  this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);++this.t;this.clamp();
}function bnpDAddOffset(b, a) {
  if (b == 0) {
    return;
  }while (this.t <= a) {
    this[this.t++] = 0;
  }this[a] += b;while (this[a] >= this.DV) {
    this[a] -= this.DV;if (++a >= this.t) {
      this[this.t++] = 0;
    }++this[a];
  }
}function NullExp() {}function nNop(a) {
  return a;
}function nMulTo(a, c, b) {
  a.multiplyTo(c, b);
}function nSqrTo(a, b) {
  a.squareTo(b);
}NullExp.prototype.convert = nNop;NullExp.prototype.revert = nNop;NullExp.prototype.mulTo = nMulTo;NullExp.prototype.sqrTo = nSqrTo;function bnPow(a) {
  return this.exp(a, new NullExp());
}function bnpMultiplyLowerTo(b, f, e) {
  var d = Math.min(this.t + b.t, f);e.s = 0;e.t = d;while (d > 0) {
    e[--d] = 0;
  }var c;for (c = e.t - this.t; d < c; ++d) {
    e[d + this.t] = this.am(0, b[d], e, d, 0, this.t);
  }for (c = Math.min(b.t, f); d < c; ++d) {
    this.am(0, b[d], e, d, 0, f - d);
  }e.clamp();
}function bnpMultiplyUpperTo(b, e, d) {
  --e;var c = d.t = this.t + b.t - e;d.s = 0;while (--c >= 0) {
    d[c] = 0;
  }for (c = Math.max(e - this.t, 0); c < b.t; ++c) {
    d[this.t + c - e] = this.am(e - c, b[c], d, 0, 0, this.t + c - e);
  }d.clamp();d.drShiftTo(1, d);
}function Barrett(a) {
  this.r2 = nbi();this.q3 = nbi();BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);this.mu = this.r2.divide(a);this.m = a;
}function barrettConvert(a) {
  if (a.s < 0 || a.t > 2 * this.m.t) {
    return a.mod(this.m);
  } else {
    if (a.compareTo(this.m) < 0) {
      return a;
    } else {
      var b = nbi();a.copyTo(b);this.reduce(b);return b;
    }
  }
}function barrettRevert(a) {
  return a;
}function barrettReduce(a) {
  a.drShiftTo(this.m.t - 1, this.r2);if (a.t > this.m.t + 1) {
    a.t = this.m.t + 1;a.clamp();
  }this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);while (a.compareTo(this.r2) < 0) {
    a.dAddOffset(1, this.m.t + 1);
  }a.subTo(this.r2, a);while (a.compareTo(this.m) >= 0) {
    a.subTo(this.m, a);
  }
}function barrettSqrTo(a, b) {
  a.squareTo(b);this.reduce(b);
}function barrettMulTo(a, c, b) {
  a.multiplyTo(c, b);this.reduce(b);
}Barrett.prototype.convert = barrettConvert;Barrett.prototype.revert = barrettRevert;Barrett.prototype.reduce = barrettReduce;Barrett.prototype.mulTo = barrettMulTo;Barrett.prototype.sqrTo = barrettSqrTo;function bnModPow(q, f) {
  var o = q.bitLength(),
      h,
      b = nbv(1),
      v;if (o <= 0) {
    return b;
  } else {
    if (o < 18) {
      h = 1;
    } else {
      if (o < 48) {
        h = 3;
      } else {
        if (o < 144) {
          h = 4;
        } else {
          if (o < 768) {
            h = 5;
          } else {
            h = 6;
          }
        }
      }
    }
  }if (o < 8) {
    v = new Classic(f);
  } else {
    if (f.isEven()) {
      v = new Barrett(f);
    } else {
      v = new Montgomery(f);
    }
  }var p = new Array(),
      d = 3,
      s = h - 1,
      a = (1 << h) - 1;p[1] = v.convert(this);if (h > 1) {
    var A = nbi();v.sqrTo(p[1], A);while (d <= a) {
      p[d] = nbi();v.mulTo(A, p[d - 2], p[d]);d += 2;
    }
  }var l = q.t - 1,
      x,
      u = true,
      c = nbi(),
      y;o = nbits(q[l]) - 1;while (l >= 0) {
    if (o >= s) {
      x = q[l] >> o - s & a;
    } else {
      x = (q[l] & (1 << o + 1) - 1) << s - o;if (l > 0) {
        x |= q[l - 1] >> this.DB + o - s;
      }
    }d = h;while ((x & 1) == 0) {
      x >>= 1;--d;
    }if ((o -= d) < 0) {
      o += this.DB;--l;
    }if (u) {
      p[x].copyTo(b);u = false;
    } else {
      while (d > 1) {
        v.sqrTo(b, c);v.sqrTo(c, b);d -= 2;
      }if (d > 0) {
        v.sqrTo(b, c);
      } else {
        y = b;b = c;c = y;
      }v.mulTo(c, p[x], b);
    }while (l >= 0 && (q[l] & 1 << o) == 0) {
      v.sqrTo(b, c);y = b;b = c;c = y;if (--o < 0) {
        o = this.DB - 1;--l;
      }
    }
  }return v.revert(b);
}function bnGCD(c) {
  var b = this.s < 0 ? this.negate() : this.clone();var h = c.s < 0 ? c.negate() : c.clone();if (b.compareTo(h) < 0) {
    var e = b;b = h;h = e;
  }var d = b.getLowestSetBit(),
      f = h.getLowestSetBit();if (f < 0) {
    return b;
  }if (d < f) {
    f = d;
  }if (f > 0) {
    b.rShiftTo(f, b);h.rShiftTo(f, h);
  }while (b.signum() > 0) {
    if ((d = b.getLowestSetBit()) > 0) {
      b.rShiftTo(d, b);
    }if ((d = h.getLowestSetBit()) > 0) {
      h.rShiftTo(d, h);
    }if (b.compareTo(h) >= 0) {
      b.subTo(h, b);b.rShiftTo(1, b);
    } else {
      h.subTo(b, h);h.rShiftTo(1, h);
    }
  }if (f > 0) {
    h.lShiftTo(f, h);
  }return h;
}function bnpModInt(e) {
  if (e <= 0) {
    return 0;
  }var c = this.DV % e,
      b = this.s < 0 ? e - 1 : 0;if (this.t > 0) {
    if (c == 0) {
      b = this[0] % e;
    } else {
      for (var a = this.t - 1; a >= 0; --a) {
        b = (c * b + this[a]) % e;
      }
    }
  }return b;
}function bnModInverse(f) {
  var j = f.isEven();if (this.isEven() && j || f.signum() == 0) {
    return BigInteger.ZERO;
  }var i = f.clone(),
      h = this.clone();var g = nbv(1),
      e = nbv(0),
      l = nbv(0),
      k = nbv(1);while (i.signum() != 0) {
    while (i.isEven()) {
      i.rShiftTo(1, i);if (j) {
        if (!g.isEven() || !e.isEven()) {
          g.addTo(this, g);e.subTo(f, e);
        }g.rShiftTo(1, g);
      } else {
        if (!e.isEven()) {
          e.subTo(f, e);
        }
      }e.rShiftTo(1, e);
    }while (h.isEven()) {
      h.rShiftTo(1, h);if (j) {
        if (!l.isEven() || !k.isEven()) {
          l.addTo(this, l);k.subTo(f, k);
        }l.rShiftTo(1, l);
      } else {
        if (!k.isEven()) {
          k.subTo(f, k);
        }
      }k.rShiftTo(1, k);
    }if (i.compareTo(h) >= 0) {
      i.subTo(h, i);if (j) {
        g.subTo(l, g);
      }e.subTo(k, e);
    } else {
      h.subTo(i, h);if (j) {
        l.subTo(g, l);
      }k.subTo(e, k);
    }
  }if (h.compareTo(BigInteger.ONE) != 0) {
    return BigInteger.ZERO;
  }if (k.compareTo(f) >= 0) {
    return k.subtract(f);
  }if (k.signum() < 0) {
    k.addTo(f, k);
  } else {
    return k;
  }if (k.signum() < 0) {
    return k.add(f);
  } else {
    return k;
  }
}var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];function bnIsProbablePrime(e) {
  var d,
      b = this.abs();if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {
    for (d = 0; d < lowprimes.length; ++d) {
      if (b[0] == lowprimes[d]) {
        return true;
      }
    }return false;
  }if (b.isEven()) {
    return false;
  }d = 1;while (d < lowprimes.length) {
    var a = lowprimes[d],
        c = d + 1;while (c < lowprimes.length && a < lplim) {
      a *= lowprimes[c++];
    }a = b.modInt(a);while (d < c) {
      if (a % lowprimes[d++] == 0) {
        return false;
      }
    }
  }return b.millerRabin(e);
}function bnpMillerRabin(f) {
  var g = this.subtract(BigInteger.ONE);var c = g.getLowestSetBit();if (c <= 0) {
    return false;
  }var h = g.shiftRight(c);f = f + 1 >> 1;if (f > lowprimes.length) {
    f = lowprimes.length;
  }var b = nbi();for (var e = 0; e < f; ++e) {
    b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);var l = b.modPow(h, this);if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {
      var d = 1;while (d++ < c && l.compareTo(g) != 0) {
        l = l.modPowInt(2, this);if (l.compareTo(BigInteger.ONE) == 0) {
          return false;
        }
      }if (l.compareTo(g) != 0) {
        return false;
      }
    }
  }return true;
}BigInteger.prototype.chunkSize = bnpChunkSize;BigInteger.prototype.toRadix = bnpToRadix;BigInteger.prototype.fromRadix = bnpFromRadix;BigInteger.prototype.fromNumber = bnpFromNumber;BigInteger.prototype.bitwiseTo = bnpBitwiseTo;BigInteger.prototype.changeBit = bnpChangeBit;BigInteger.prototype.addTo = bnpAddTo;BigInteger.prototype.dMultiply = bnpDMultiply;BigInteger.prototype.dAddOffset = bnpDAddOffset;BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;BigInteger.prototype.modInt = bnpModInt;BigInteger.prototype.millerRabin = bnpMillerRabin;BigInteger.prototype.clone = bnClone;BigInteger.prototype.intValue = bnIntValue;BigInteger.prototype.byteValue = bnByteValue;BigInteger.prototype.shortValue = bnShortValue;BigInteger.prototype.signum = bnSigNum;BigInteger.prototype.toByteArray = bnToByteArray;BigInteger.prototype.equals = bnEquals;BigInteger.prototype.min = bnMin;BigInteger.prototype.max = bnMax;BigInteger.prototype.and = bnAnd;BigInteger.prototype.or = bnOr;BigInteger.prototype.xor = bnXor;BigInteger.prototype.andNot = bnAndNot;BigInteger.prototype.not = bnNot;BigInteger.prototype.shiftLeft = bnShiftLeft;BigInteger.prototype.shiftRight = bnShiftRight;BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;BigInteger.prototype.bitCount = bnBitCount;BigInteger.prototype.testBit = bnTestBit;BigInteger.prototype.setBit = bnSetBit;BigInteger.prototype.clearBit = bnClearBit;BigInteger.prototype.flipBit = bnFlipBit;BigInteger.prototype.add = bnAdd;BigInteger.prototype.subtract = bnSubtract;BigInteger.prototype.multiply = bnMultiply;BigInteger.prototype.divide = bnDivide;BigInteger.prototype.remainder = bnRemainder;BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;BigInteger.prototype.modPow = bnModPow;BigInteger.prototype.modInverse = bnModInverse;BigInteger.prototype.pow = bnPow;BigInteger.prototype.gcd = bnGCD;BigInteger.prototype.isProbablePrime = bnIsProbablePrime;BigInteger.prototype.square = bnSquare;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Arcfour() {
  this.i = 0;this.j = 0;this.S = new Array();
}function ARC4init(d) {
  var c, a, b;for (c = 0; c < 256; ++c) {
    this.S[c] = c;
  }a = 0;for (c = 0; c < 256; ++c) {
    a = a + this.S[c] + d[c % d.length] & 255;b = this.S[c];this.S[c] = this.S[a];this.S[a] = b;
  }this.i = 0;this.j = 0;
}function ARC4next() {
  var a;this.i = this.i + 1 & 255;this.j = this.j + this.S[this.i] & 255;a = this.S[this.i];this.S[this.i] = this.S[this.j];this.S[this.j] = a;return this.S[a + this.S[this.i] & 255];
}Arcfour.prototype.init = ARC4init;Arcfour.prototype.next = ARC4next;function prng_newstate() {
  return new Arcfour();
}var rng_psize = 256;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var rng_state;var rng_pool;var rng_pptr;function rng_seed_int(a) {
  rng_pool[rng_pptr++] ^= a & 255;rng_pool[rng_pptr++] ^= a >> 8 & 255;rng_pool[rng_pptr++] ^= a >> 16 & 255;rng_pool[rng_pptr++] ^= a >> 24 & 255;if (rng_pptr >= rng_psize) {
    rng_pptr -= rng_psize;
  }
}function rng_seed_time() {
  rng_seed_int(new Date().getTime());
}if (rng_pool == null) {
  rng_pool = new Array();rng_pptr = 0;var t;if (window !== undefined && (window.crypto !== undefined || window.msCrypto !== undefined)) {
    var crypto = window.crypto || window.msCrypto;if (crypto.getRandomValues) {
      var ua = new Uint8Array(32);crypto.getRandomValues(ua);for (t = 0; t < 32; ++t) {
        rng_pool[rng_pptr++] = ua[t];
      }
    } else {
      if (navigator.appName == "Netscape" && navigator.appVersion < "5") {
        var z = window.crypto.random(32);for (t = 0; t < z.length; ++t) {
          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;
        }
      }
    }
  }while (rng_pptr < rng_psize) {
    t = Math.floor(65536 * Math.random());rng_pool[rng_pptr++] = t >>> 8;rng_pool[rng_pptr++] = t & 255;
  }rng_pptr = 0;rng_seed_time();
}function rng_get_byte() {
  if (rng_state == null) {
    rng_seed_time();rng_state = prng_newstate();rng_state.init(rng_pool);for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {
      rng_pool[rng_pptr] = 0;
    }rng_pptr = 0;
  }return rng_state.next();
}function rng_get_bytes(b) {
  var a;for (a = 0; a < b.length; ++a) {
    b[a] = rng_get_byte();
  }
}function SecureRandom() {}SecureRandom.prototype.nextBytes = rng_get_bytes;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function parseBigInt(b, a) {
  return new BigInteger(b, a);
}function linebrk(c, d) {
  var a = "";var b = 0;while (b + d < c.length) {
    a += c.substring(b, b + d) + "\n";b += d;
  }return a + c.substring(b, c.length);
}function byte2Hex(a) {
  if (a < 16) {
    return "0" + a.toString(16);
  } else {
    return a.toString(16);
  }
}function pkcs1pad2(e, h) {
  if (h < e.length + 11) {
    throw "Message too long for RSA";return null;
  }var g = new Array();var d = e.length - 1;while (d >= 0 && h > 0) {
    var f = e.charCodeAt(d--);if (f < 128) {
      g[--h] = f;
    } else {
      if (f > 127 && f < 2048) {
        g[--h] = f & 63 | 128;g[--h] = f >> 6 | 192;
      } else {
        g[--h] = f & 63 | 128;g[--h] = f >> 6 & 63 | 128;g[--h] = f >> 12 | 224;
      }
    }
  }g[--h] = 0;var b = new SecureRandom();var a = new Array();while (h > 2) {
    a[0] = 0;while (a[0] == 0) {
      b.nextBytes(a);
    }g[--h] = a[0];
  }g[--h] = 2;g[--h] = 0;return new BigInteger(g);
}function oaep_mgf1_arr(c, a, e) {
  var b = "",
      d = 0;while (b.length < a) {
    b += e(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));d += 1;
  }return b;
}function oaep_pad(q, a, f, l) {
  var c = KJUR.crypto.MessageDigest;var o = KJUR.crypto.Util;var b = null;if (!f) {
    f = "sha1";
  }if (typeof f === "string") {
    b = c.getCanonicalAlgName(f);l = c.getHashLength(b);f = function f(i) {
      return hextorstr(o.hashHex(rstrtohex(i), b));
    };
  }if (q.length + 2 * l + 2 > a) {
    throw "Message too long for RSA";
  }var k = "",
      e;for (e = 0; e < a - q.length - 2 * l - 2; e += 1) {
    k += "\x00";
  }var h = f("") + k + "\x01" + q;var g = new Array(l);new SecureRandom().nextBytes(g);var j = oaep_mgf1_arr(g, h.length, f);var p = [];for (e = 0; e < h.length; e += 1) {
    p[e] = h.charCodeAt(e) ^ j.charCodeAt(e);
  }var m = oaep_mgf1_arr(p, g.length, f);var d = [0];for (e = 0; e < g.length; e += 1) {
    d[e + 1] = g[e] ^ m.charCodeAt(e);
  }return new BigInteger(d.concat(p));
}function RSAKey() {
  this.n = null;this.e = 0;this.d = null;this.p = null;this.q = null;this.dmp1 = null;this.dmq1 = null;this.coeff = null;
}function RSASetPublic(b, a) {
  this.isPublic = true;this.isPrivate = false;if (typeof b !== "string") {
    this.n = b;this.e = a;
  } else {
    if (b != null && a != null && b.length > 0 && a.length > 0) {
      this.n = parseBigInt(b, 16);this.e = parseInt(a, 16);
    } else {
      throw "Invalid RSA public key";
    }
  }
}function RSADoPublic(a) {
  return a.modPowInt(this.e, this.n);
}function RSAEncrypt(d) {
  var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);if (a == null) {
    return null;
  }var e = this.doPublic(a);if (e == null) {
    return null;
  }var b = e.toString(16);if ((b.length & 1) == 0) {
    return b;
  } else {
    return "0" + b;
  }
}function RSAEncryptOAEP(f, e, b) {
  var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e, b);if (a == null) {
    return null;
  }var g = this.doPublic(a);if (g == null) {
    return null;
  }var d = g.toString(16);if ((d.length & 1) == 0) {
    return d;
  } else {
    return "0" + d;
  }
}RSAKey.prototype.doPublic = RSADoPublic;RSAKey.prototype.setPublic = RSASetPublic;RSAKey.prototype.encrypt = RSAEncrypt;RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;RSAKey.prototype.type = "RSA";
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function ECFieldElementFp(b, a) {
  this.x = a;this.q = b;
}function feFpEquals(a) {
  if (a == this) {
    return true;
  }return this.q.equals(a.q) && this.x.equals(a.x);
}function feFpToBigInteger() {
  return this.x;
}function feFpNegate() {
  return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));
}function feFpAdd(a) {
  return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));
}function feFpSubtract(a) {
  return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));
}function feFpMultiply(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));
}function feFpSquare() {
  return new ECFieldElementFp(this.q, this.x.square().mod(this.q));
}function feFpDivide(a) {
  return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));
}ECFieldElementFp.prototype.equals = feFpEquals;ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;ECFieldElementFp.prototype.negate = feFpNegate;ECFieldElementFp.prototype.add = feFpAdd;ECFieldElementFp.prototype.subtract = feFpSubtract;ECFieldElementFp.prototype.multiply = feFpMultiply;ECFieldElementFp.prototype.square = feFpSquare;ECFieldElementFp.prototype.divide = feFpDivide;function ECPointFp(c, a, d, b) {
  this.curve = c;this.x = a;this.y = d;if (b == null) {
    this.z = BigInteger.ONE;
  } else {
    this.z = b;
  }this.zinv = null;
}function pointFpGetX() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}function pointFpGetY() {
  if (this.zinv == null) {
    this.zinv = this.z.modInverse(this.curve.q);
  }return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));
}function pointFpEquals(a) {
  if (a == this) {
    return true;
  }if (this.isInfinity()) {
    return a.isInfinity();
  }if (a.isInfinity()) {
    return this.isInfinity();
  }var c, b;c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);if (!c.equals(BigInteger.ZERO)) {
    return false;
  }b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);return b.equals(BigInteger.ZERO);
}function pointFpIsInfinity() {
  if (this.x == null && this.y == null) {
    return true;
  }return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);
}function pointFpNegate() {
  return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);
}function pointFpAdd(l) {
  if (this.isInfinity()) {
    return l;
  }if (l.isInfinity()) {
    return this;
  }var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);var o = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);if (BigInteger.ZERO.equals(o)) {
    if (BigInteger.ZERO.equals(p)) {
      return this.twice();
    }return this.curve.getInfinity();
  }var j = new BigInteger("3");var e = this.x.toBigInteger();var n = this.y.toBigInteger();var c = l.x.toBigInteger();var k = l.y.toBigInteger();var m = o.square();var i = m.multiply(o);var d = e.multiply(m);var g = p.square().multiply(this.z);var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o).mod(this.curve.q);var h = d.multiply(j).multiply(p).subtract(n.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);
}function pointFpTwice() {
  if (this.isInfinity()) {
    return this;
  }if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }var g = new BigInteger("3");var c = this.x.toBigInteger();var h = this.y.toBigInteger();var e = h.multiply(this.z);var j = e.multiply(h).mod(this.curve.q);var i = this.curve.a.toBigInteger();var k = c.square().multiply(g);if (!BigInteger.ZERO.equals(i)) {
    k = k.add(this.z.square().multiply(i));
  }k = k.mod(this.curve.q);var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e).mod(this.curve.q);var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);var d = e.square().multiply(e).shiftLeft(3).mod(this.curve.q);return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);
}function pointFpMultiply(d) {
  if (this.isInfinity()) {
    return this;
  }if (d.signum() == 0) {
    return this.curve.getInfinity();
  }var m = d;var l = m.multiply(new BigInteger("3"));var b = this.negate();var j = this;var q = this.curve.q.subtract(d);var o = q.multiply(new BigInteger("3"));var c = new ECPointFp(this.curve, this.x, this.y);var a = c.negate();var g;for (g = l.bitLength() - 2; g > 0; --g) {
    j = j.twice();var n = l.testBit(g);var f = m.testBit(g);if (n != f) {
      j = j.add(n ? this : b);
    }
  }for (g = o.bitLength() - 2; g > 0; --g) {
    c = c.twice();var p = o.testBit(g);var r = q.testBit(g);if (p != r) {
      c = c.add(p ? c : a);
    }
  }return j;
}function pointFpMultiplyTwo(c, a, b) {
  var d;if (c.bitLength() > b.bitLength()) {
    d = c.bitLength() - 1;
  } else {
    d = b.bitLength() - 1;
  }var f = this.curve.getInfinity();var e = this.add(a);while (d >= 0) {
    f = f.twice();if (c.testBit(d)) {
      if (b.testBit(d)) {
        f = f.add(e);
      } else {
        f = f.add(this);
      }
    } else {
      if (b.testBit(d)) {
        f = f.add(a);
      }
    }--d;
  }return f;
}ECPointFp.prototype.getX = pointFpGetX;ECPointFp.prototype.getY = pointFpGetY;ECPointFp.prototype.equals = pointFpEquals;ECPointFp.prototype.isInfinity = pointFpIsInfinity;ECPointFp.prototype.negate = pointFpNegate;ECPointFp.prototype.add = pointFpAdd;ECPointFp.prototype.twice = pointFpTwice;ECPointFp.prototype.multiply = pointFpMultiply;ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;function ECCurveFp(e, d, c) {
  this.q = e;this.a = this.fromBigInteger(d);this.b = this.fromBigInteger(c);this.infinity = new ECPointFp(this, null, null);
}function curveFpGetQ() {
  return this.q;
}function curveFpGetA() {
  return this.a;
}function curveFpGetB() {
  return this.b;
}function curveFpEquals(a) {
  if (a == this) {
    return true;
  }return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);
}function curveFpGetInfinity() {
  return this.infinity;
}function curveFpFromBigInteger(a) {
  return new ECFieldElementFp(this.q, a);
}function curveFpDecodePointHex(d) {
  switch (parseInt(d.substr(0, 2), 16)) {case 0:
      return this.infinity;case 2:case 3:
      return null;case 4:case 6:case 7:
      var a = (d.length - 2) / 2;var c = d.substr(2, a);var b = d.substr(a + 2, a);return new ECPointFp(this, this.fromBigInteger(new BigInteger(c, 16)), this.fromBigInteger(new BigInteger(b, 16)));default:
      return null;}
}ECCurveFp.prototype.getQ = curveFpGetQ;ECCurveFp.prototype.getA = curveFpGetA;ECCurveFp.prototype.getB = curveFpGetB;ECCurveFp.prototype.equals = curveFpEquals;ECCurveFp.prototype.getInfinity = curveFpGetInfinity;ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
ECFieldElementFp.prototype.getByteLength = function () {
  return Math.floor((this.toBigInteger().bitLength() + 7) / 8);
};ECPointFp.prototype.getEncoded = function (c) {
  var d = function d(h, f) {
    var g = h.toByteArrayUnsigned();if (f < g.length) {
      g = g.slice(g.length - f);
    } else {
      while (f > g.length) {
        g.unshift(0);
      }
    }return g;
  };var a = this.getX().toBigInteger();var e = this.getY().toBigInteger();var b = d(a, 32);if (c) {
    if (e.isEven()) {
      b.unshift(2);
    } else {
      b.unshift(3);
    }
  } else {
    b.unshift(4);b = b.concat(d(e, 32));
  }return b;
};ECPointFp.decodeFrom = function (g, c) {
  var f = c[0];var e = c.length - 1;var d = c.slice(1, 1 + e / 2);var b = c.slice(1 + e / 2, 1 + e);d.unshift(0);b.unshift(0);var a = new BigInteger(d);var h = new BigInteger(b);return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));
};ECPointFp.decodeFromHex = function (g, c) {
  var f = c.substr(0, 2);var e = c.length - 2;var d = c.substr(2, e / 2);var b = c.substr(2 + e / 2, e / 2);var a = new BigInteger(d, 16);var h = new BigInteger(b, 16);return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));
};ECPointFp.prototype.add2D = function (c) {
  if (this.isInfinity()) {
    return c;
  }if (c.isInfinity()) {
    return this;
  }if (this.x.equals(c.x)) {
    if (this.y.equals(c.y)) {
      return this.twice();
    }return this.curve.getInfinity();
  }var g = c.x.subtract(this.x);var e = c.y.subtract(this.y);var a = e.divide(g);var d = a.square().subtract(this.x).subtract(c.x);var f = a.multiply(this.x.subtract(d)).subtract(this.y);return new ECPointFp(this.curve, d, f);
};ECPointFp.prototype.twice2D = function () {
  if (this.isInfinity()) {
    return this;
  }if (this.y.toBigInteger().signum() == 0) {
    return this.curve.getInfinity();
  }var b = this.curve.fromBigInteger(BigInteger.valueOf(2));var e = this.curve.fromBigInteger(BigInteger.valueOf(3));var a = this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(b));var c = a.square().subtract(this.x.multiply(b));var d = a.multiply(this.x.subtract(c)).subtract(this.y);return new ECPointFp(this.curve, c, d);
};ECPointFp.prototype.multiply2D = function (b) {
  if (this.isInfinity()) {
    return this;
  }if (b.signum() == 0) {
    return this.curve.getInfinity();
  }var g = b;var f = g.multiply(new BigInteger("3"));var l = this.negate();var d = this;var c;for (c = f.bitLength() - 2; c > 0; --c) {
    d = d.twice();var a = f.testBit(c);var j = g.testBit(c);if (a != j) {
      d = d.add2D(a ? this : l);
    }
  }return d;
};ECPointFp.prototype.isOnCurve = function () {
  var d = this.getX().toBigInteger();var i = this.getY().toBigInteger();var f = this.curve.getA().toBigInteger();var c = this.curve.getB().toBigInteger();var h = this.curve.getQ();var e = i.multiply(i).mod(h);var g = d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);return e.equals(g);
};ECPointFp.prototype.toString = function () {
  return "(" + this.getX().toBigInteger().toString() + "," + this.getY().toBigInteger().toString() + ")";
};ECPointFp.prototype.validate = function () {
  var c = this.curve.getQ();if (this.isInfinity()) {
    throw new Error("Point is at infinity.");
  }var a = this.getX().toBigInteger();var b = this.getY().toBigInteger();if (a.compareTo(BigInteger.ONE) < 0 || a.compareTo(c.subtract(BigInteger.ONE)) > 0) {
    throw new Error("x coordinate out of bounds");
  }if (b.compareTo(BigInteger.ONE) < 0 || b.compareTo(c.subtract(BigInteger.ONE)) > 0) {
    throw new Error("y coordinate out of bounds");
  }if (!this.isOnCurve()) {
    throw new Error("Point is not on the curve.");
  }if (this.multiply(c).isInfinity()) {
    throw new Error("Point is not a scalar multiple of G.");
  }return true;
};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var jsonParse = function () {
  var e = "(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)";var j = '(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))';var i = '(?:"' + j + '*")';var d = new RegExp("(?:false|true|null|[\\{\\}\\[\\]]|" + e + "|" + i + ")", "g");var k = new RegExp("\\\\(?:([^u])|u(.{4}))", "g");var g = { '"': '"', "/": "/", "\\": "\\", b: "\b", f: "\f", n: "\n", r: "\r", t: "\t" };function h(l, m, n) {
    return m ? g[m] : String.fromCharCode(parseInt(n, 16));
  }var c = new String("");var a = "\\";var f = { "{": Object, "[": Array };var b = Object.hasOwnProperty;return function (u, q) {
    var p = u.match(d);var x;var v = p[0];var l = false;if ("{" === v) {
      x = {};
    } else {
      if ("[" === v) {
        x = [];
      } else {
        x = [];l = true;
      }
    }var t;var r = [x];for (var o = 1 - l, m = p.length; o < m; ++o) {
      v = p[o];var w;switch (v.charCodeAt(0)) {default:
          w = r[0];w[t || w.length] = +v;t = void 0;break;case 34:
          v = v.substring(1, v.length - 1);if (v.indexOf(a) !== -1) {
            v = v.replace(k, h);
          }w = r[0];if (!t) {
            if (w instanceof Array) {
              t = w.length;
            } else {
              t = v || c;break;
            }
          }w[t] = v;t = void 0;break;case 91:
          w = r[0];r.unshift(w[t || w.length] = []);t = void 0;break;case 93:
          r.shift();break;case 102:
          w = r[0];w[t || w.length] = false;t = void 0;break;case 110:
          w = r[0];w[t || w.length] = null;t = void 0;break;case 116:
          w = r[0];w[t || w.length] = true;t = void 0;break;case 123:
          w = r[0];r.unshift(w[t || w.length] = {});t = void 0;break;case 125:
          r.shift();break;}
    }if (l) {
      if (r.length !== 1) {
        throw new Error();
      }x = x[0];
    } else {
      if (r.length) {
        throw new Error();
      }
    }if (q) {
      var s = function s(C, B) {
        var D = C[B];if (D && (typeof D === "undefined" ? "undefined" : _typeof(D)) === "object") {
          var n = null;for (var z in D) {
            if (b.call(D, z) && D !== C) {
              var y = s(D, z);if (y !== void 0) {
                D[z] = y;
              } else {
                if (!n) {
                  n = [];
                }n.push(z);
              }
            }
          }if (n) {
            for (var A = n.length; --A >= 0;) {
              delete D[n[A]];
            }
          }
        }return q.call(C, B, D);
      };x = s({ "": x }, "");
    }return x;
  };
}();
if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.asn1 == "undefined" || !KJUR.asn1) {
  KJUR.asn1 = {};
}KJUR.asn1.ASN1Util = new function () {
  this.integerToByteHex = function (a) {
    var b = a.toString(16);if (b.length % 2 == 1) {
      b = "0" + b;
    }return b;
  };this.bigIntToMinTwosComplementsHex = function (j) {
    var f = j.toString(16);if (f.substr(0, 1) != "-") {
      if (f.length % 2 == 1) {
        f = "0" + f;
      } else {
        if (!f.match(/^[0-7]/)) {
          f = "00" + f;
        }
      }
    } else {
      var a = f.substr(1);var e = a.length;if (e % 2 == 1) {
        e += 1;
      } else {
        if (!f.match(/^[0-7]/)) {
          e += 2;
        }
      }var g = "";for (var d = 0; d < e; d++) {
        g += "f";
      }var c = new BigInteger(g, 16);var b = c.xor(j).add(BigInteger.ONE);f = b.toString(16).replace(/^-/, "");
    }return f;
  };this.getPEMStringFromHex = function (a, b) {
    return hextopem(a, b);
  };this.newObject = function (k) {
    var F = KJUR,
        o = F.asn1,
        v = o.ASN1Object,
        B = o.DERBoolean,
        e = o.DERInteger,
        t = o.DERBitString,
        h = o.DEROctetString,
        x = o.DERNull,
        y = o.DERObjectIdentifier,
        m = o.DEREnumerated,
        g = o.DERUTF8String,
        f = o.DERNumericString,
        A = o.DERPrintableString,
        w = o.DERTeletexString,
        q = o.DERIA5String,
        E = o.DERUTCTime,
        j = o.DERGeneralizedTime,
        b = o.DERVisibleString,
        l = o.DERBMPString,
        n = o.DERSequence,
        c = o.DERSet,
        s = o.DERTaggedObject,
        p = o.ASN1Util.newObject;if (k instanceof o.ASN1Object) {
      return k;
    }var u = Object.keys(k);if (u.length != 1) {
      throw new Error("key of param shall be only one.");
    }var H = u[0];if (":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":" + H + ":") == -1) {
      throw new Error("undefined key: " + H);
    }if (H == "bool") {
      return new B(k[H]);
    }if (H == "int") {
      return new e(k[H]);
    }if (H == "bitstr") {
      return new t(k[H]);
    }if (H == "octstr") {
      return new h(k[H]);
    }if (H == "null") {
      return new x(k[H]);
    }if (H == "oid") {
      return new y(k[H]);
    }if (H == "enum") {
      return new m(k[H]);
    }if (H == "utf8str") {
      return new g(k[H]);
    }if (H == "numstr") {
      return new f(k[H]);
    }if (H == "prnstr") {
      return new A(k[H]);
    }if (H == "telstr") {
      return new w(k[H]);
    }if (H == "ia5str") {
      return new q(k[H]);
    }if (H == "utctime") {
      return new E(k[H]);
    }if (H == "gentime") {
      return new j(k[H]);
    }if (H == "visstr") {
      return new b(k[H]);
    }if (H == "bmpstr") {
      return new l(k[H]);
    }if (H == "asn1") {
      return new v(k[H]);
    }if (H == "seq") {
      var d = k[H];var G = [];for (var z = 0; z < d.length; z++) {
        var D = p(d[z]);G.push(D);
      }return new n({ array: G });
    }if (H == "set") {
      var d = k[H];var G = [];for (var z = 0; z < d.length; z++) {
        var D = p(d[z]);G.push(D);
      }return new c({ array: G });
    }if (H == "tag") {
      var C = k[H];if (Object.prototype.toString.call(C) === "[object Array]" && C.length == 3) {
        var r = p(C[2]);return new s({ tag: C[0], explicit: C[1], obj: r });
      } else {
        return new s(C);
      }
    }
  };this.jsonToASN1HEX = function (b) {
    var a = this.newObject(b);return a.getEncodedHex();
  };
}();KJUR.asn1.ASN1Util.oidHexToInt = function (a) {
  var j = "";var k = parseInt(a.substr(0, 2), 16);var d = Math.floor(k / 40);var c = k % 40;var j = d + "." + c;var e = "";for (var f = 2; f < a.length; f += 2) {
    var g = parseInt(a.substr(f, 2), 16);var h = ("00000000" + g.toString(2)).slice(-8);e = e + h.substr(1, 7);if (h.substr(0, 1) == "0") {
      var b = new BigInteger(e, 2);j = j + "." + b.toString(10);e = "";
    }
  }return j;
};KJUR.asn1.ASN1Util.oidIntToHex = function (f) {
  var e = function e(a) {
    var k = a.toString(16);if (k.length == 1) {
      k = "0" + k;
    }return k;
  };var d = function d(o) {
    var n = "";var k = new BigInteger(o, 10);var a = k.toString(2);var l = 7 - a.length % 7;if (l == 7) {
      l = 0;
    }var q = "";for (var m = 0; m < l; m++) {
      q += "0";
    }a = q + a;for (var m = 0; m < a.length - 1; m += 7) {
      var p = a.substr(m, 7);if (m != a.length - 7) {
        p = "1" + p;
      }n += e(parseInt(p, 2));
    }return n;
  };if (!f.match(/^[0-9.]+$/)) {
    throw "malformed oid string: " + f;
  }var g = "";var b = f.split(".");var j = parseInt(b[0]) * 40 + parseInt(b[1]);g += e(j);b.splice(0, 2);for (var c = 0; c < b.length; c++) {
    g += d(b[c]);
  }return g;
};KJUR.asn1.ASN1Object = function (e) {
  var c = true;var b = null;var d = "00";var f = "00";var a = "";this.params = null;this.getLengthHexFromValue = function () {
    if (typeof this.hV == "undefined" || this.hV == null) {
      throw new Error("this.hV is null or undefined");
    }if (this.hV.length % 2 == 1) {
      throw new Error("value hex must be even length: n=" + a.length + ",v=" + this.hV);
    }var j = this.hV.length / 2;var i = j.toString(16);if (i.length % 2 == 1) {
      i = "0" + i;
    }if (j < 128) {
      return i;
    } else {
      var h = i.length / 2;if (h > 15) {
        throw new Error("ASN.1 length too long to represent by 8x: n = " + j.toString(16));
      }var g = 128 + h;return g.toString(16) + i;
    }
  };this.getEncodedHex = function () {
    if (this.hTLV == null || this.isModified) {
      this.hV = this.getFreshValueHex();this.hL = this.getLengthHexFromValue();this.hTLV = this.hT + this.hL + this.hV;this.isModified = false;
    }return this.hTLV;
  };this.getValueHex = function () {
    this.getEncodedHex();return this.hV;
  };this.getFreshValueHex = function () {
    return "";
  };this.setByParam = function (g) {
    this.params = g;
  };if (e != undefined) {
    if (e.tlv != undefined) {
      this.hTLV = e.tlv;this.isModified = false;
    }
  }
};KJUR.asn1.DERAbstractString = function (c) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var b = null;var a = null;this.getString = function () {
    return this.s;
  };this.setString = function (d) {
    this.hTLV = null;this.isModified = true;this.s = d;this.hV = utf8tohex(this.s).toLowerCase();
  };this.setStringHex = function (d) {
    this.hTLV = null;this.isModified = true;this.s = null;this.hV = d;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof c != "undefined") {
    if (typeof c == "string") {
      this.setString(c);
    } else {
      if (typeof c.str != "undefined") {
        this.setString(c.str);
      } else {
        if (typeof c.hex != "undefined") {
          this.setStringHex(c.hex);
        }
      }
    }
  }
};extendClass(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractTime = function (c) {
  KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);var b = null;var a = null;this.localDateToUTC = function (g) {
    var e = g.getTime() + g.getTimezoneOffset() * 60000;var f = new Date(e);return f;
  };this.formatDate = function (m, o, e) {
    var g = this.zeroPadding;var n = this.localDateToUTC(m);var p = String(n.getFullYear());if (o == "utc") {
      p = p.substr(2, 2);
    }var l = g(String(n.getMonth() + 1), 2);var q = g(String(n.getDate()), 2);var h = g(String(n.getHours()), 2);var i = g(String(n.getMinutes()), 2);var j = g(String(n.getSeconds()), 2);var r = p + l + q + h + i + j;if (e === true) {
      var f = n.getMilliseconds();if (f != 0) {
        var k = g(String(f), 3);k = k.replace(/[0]+$/, "");r = r + "." + k;
      }
    }return r + "Z";
  };this.zeroPadding = function (e, d) {
    if (e.length >= d) {
      return e;
    }return new Array(d - e.length + 1).join("0") + e;
  };this.setByParam = function (d) {
    this.hV = null;this.hTLV = null;this.params = d;
  };this.getString = function () {
    return undefined;
  };this.setString = function (d) {
    this.hTLV = null;this.isModified = true;if (this.params == undefined) {
      this.params = {};
    }this.params.str = d;
  };this.setByDate = function (d) {
    this.hTLV = null;this.isModified = true;if (this.params == undefined) {
      this.params = {};
    }this.params.date = d;
  };this.setByDateValue = function (h, j, e, d, f, g) {
    var i = new Date(Date.UTC(h, j - 1, e, d, f, g, 0));this.setByDate(i);
  };this.getFreshValueHex = function () {
    return this.hV;
  };
};extendClass(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);KJUR.asn1.DERAbstractStructured = function (b) {
  KJUR.asn1.DERAbstractString.superclass.constructor.call(this);var a = null;this.setByASN1ObjectArray = function (c) {
    this.hTLV = null;this.isModified = true;this.asn1Array = c;
  };this.appendASN1Object = function (c) {
    this.hTLV = null;this.isModified = true;this.asn1Array.push(c);
  };this.asn1Array = new Array();if (typeof b != "undefined") {
    if (typeof b.array != "undefined") {
      this.asn1Array = b.array;
    }
  }
};extendClass(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);KJUR.asn1.DERBoolean = function (a) {
  KJUR.asn1.DERBoolean.superclass.constructor.call(this);this.hT = "01";if (a == false) {
    this.hTLV = "010100";
  } else {
    this.hTLV = "0101ff";
  }
};extendClass(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);KJUR.asn1.DERInteger = function (a) {
  KJUR.asn1.DERInteger.superclass.constructor.call(this);this.hT = "02";this.setByBigInteger = function (b) {
    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
  };this.setValueHex = function (b) {
    this.hV = b;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.bigint != "undefined") {
      this.setByBigInteger(a.bigint);
    } else {
      if (typeof a["int"] != "undefined") {
        this.setByInteger(a["int"]);
      } else {
        if (typeof a == "number") {
          this.setByInteger(a);
        } else {
          if (typeof a.hex != "undefined") {
            this.setValueHex(a.hex);
          }
        }
      }
    }
  }
};extendClass(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);KJUR.asn1.DERBitString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = "00" + a.getEncodedHex();
  }KJUR.asn1.DERBitString.superclass.constructor.call(this);this.hT = "03";this.setHexValueIncludingUnusedBits = function (c) {
    this.hTLV = null;this.isModified = true;this.hV = c;
  };this.setUnusedBitsAndHexValue = function (c, e) {
    if (c < 0 || 7 < c) {
      throw "unused bits shall be from 0 to 7: u = " + c;
    }var d = "0" + c;this.hTLV = null;this.isModified = true;this.hV = d + e;
  };this.setByBinaryString = function (e) {
    e = e.replace(/0+$/, "");var f = 8 - e.length % 8;if (f == 8) {
      f = 0;
    }for (var g = 0; g <= f; g++) {
      e += "0";
    }var j = "";for (var g = 0; g < e.length - 1; g += 8) {
      var d = e.substr(g, 8);var c = parseInt(d, 2).toString(16);if (c.length == 1) {
        c = "0" + c;
      }j += c;
    }this.hTLV = null;this.isModified = true;this.hV = "0" + f + j;
  };this.setByBooleanArray = function (e) {
    var d = "";for (var c = 0; c < e.length; c++) {
      if (e[c] == true) {
        d += "1";
      } else {
        d += "0";
      }
    }this.setByBinaryString(d);
  };this.newFalseArray = function (e) {
    var c = new Array(e);for (var d = 0; d < e; d++) {
      c[d] = false;
    }return c;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof b != "undefined") {
    if (typeof b == "string" && b.toLowerCase().match(/^[0-9a-f]+$/)) {
      this.setHexValueIncludingUnusedBits(b);
    } else {
      if (typeof b.hex != "undefined") {
        this.setHexValueIncludingUnusedBits(b.hex);
      } else {
        if (typeof b.bin != "undefined") {
          this.setByBinaryString(b.bin);
        } else {
          if (typeof b.array != "undefined") {
            this.setByBooleanArray(b.array);
          }
        }
      }
    }
  }
};extendClass(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);KJUR.asn1.DEROctetString = function (b) {
  if (b !== undefined && typeof b.obj !== "undefined") {
    var a = KJUR.asn1.ASN1Util.newObject(b.obj);b.hex = a.getEncodedHex();
  }KJUR.asn1.DEROctetString.superclass.constructor.call(this, b);this.hT = "04";
};extendClass(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNull = function () {
  KJUR.asn1.DERNull.superclass.constructor.call(this);this.hT = "05";this.hTLV = "0500";
};extendClass(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);KJUR.asn1.DERObjectIdentifier = function (a) {
  KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);this.hT = "06";this.setValueHex = function (b) {
    this.hTLV = null;this.isModified = true;this.s = null;this.hV = b;
  };this.setValueOidString = function (b) {
    var c = oidtohex(b);if (c == null) {
      throw new Error("malformed oid string: " + b);
    }this.hTLV = null;this.isModified = true;this.s = null;this.hV = c;
  };this.setValueName = function (c) {
    var b = KJUR.asn1.x509.OID.name2oid(c);if (b !== "") {
      this.setValueOidString(b);
    } else {
      throw new Error("DERObjectIdentifier oidName undefined: " + c);
    }
  };this.setValueNameOrOid = function (b) {
    if (b.match(/^[0-2].[0-9.]+$/)) {
      this.setValueOidString(b);
    } else {
      this.setValueName(b);
    }
  };this.getFreshValueHex = function () {
    return this.hV;
  };this.setByParam = function (b) {
    if (typeof b === "string") {
      this.setValueNameOrOid(b);
    } else {
      if (b.oid !== undefined) {
        this.setValueNameOrOid(b.oid);
      } else {
        if (b.name !== undefined) {
          this.setValueNameOrOid(b.name);
        } else {
          if (b.hex !== undefined) {
            this.setValueHex(b.hex);
          }
        }
      }
    }
  };if (a !== undefined) {
    this.setByParam(a);
  }
};extendClass(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);KJUR.asn1.DEREnumerated = function (a) {
  KJUR.asn1.DEREnumerated.superclass.constructor.call(this);this.hT = "0a";this.setByBigInteger = function (b) {
    this.hTLV = null;this.isModified = true;this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);
  };this.setByInteger = function (c) {
    var b = new BigInteger(String(c), 10);this.setByBigInteger(b);
  };this.setValueHex = function (b) {
    this.hV = b;
  };this.getFreshValueHex = function () {
    return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a["int"] != "undefined") {
      this.setByInteger(a["int"]);
    } else {
      if (typeof a == "number") {
        this.setByInteger(a);
      } else {
        if (typeof a.hex != "undefined") {
          this.setValueHex(a.hex);
        }
      }
    }
  }
};extendClass(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);KJUR.asn1.DERUTF8String = function (a) {
  KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a);this.hT = "0c";
};extendClass(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERNumericString = function (a) {
  KJUR.asn1.DERNumericString.superclass.constructor.call(this, a);this.hT = "12";
};extendClass(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERPrintableString = function (a) {
  KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a);this.hT = "13";
};extendClass(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERTeletexString = function (a) {
  KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a);this.hT = "14";
};extendClass(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERIA5String = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);this.hT = "16";
};extendClass(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);KJUR.asn1.DERVisibleString = function (a) {
  KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);this.hT = "1a";
};extendClass(KJUR.asn1.DERVisibleString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERBMPString = function (a) {
  KJUR.asn1.DERBMPString.superclass.constructor.call(this, a);this.hT = "1e";
};extendClass(KJUR.asn1.DERBMPString, KJUR.asn1.DERAbstractString);KJUR.asn1.DERUTCTime = function (a) {
  KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a);this.hT = "17";this.params = undefined;this.getFreshValueHex = function () {
    var d = this.params;if (this.params == undefined) {
      d = { date: new Date() };
    }if (typeof d == "string") {
      if (d.match(/^[0-9]{12}Z$/) || d.match(/^[0-9]{12}\.[0-9]+Z$/)) {
        this.hV = stohex(d);
      } else {
        throw new Error("malformed string for GeneralizedTime: " + d);
      }
    } else {
      if (d.str != undefined) {
        this.hV = stohex(d.str);
      } else {
        if (d.date == undefined && d.millis == true) {
          var c = new Date();this.hV = stohex(this.formatDate(c, "utc", true));
        } else {
          if (d.date != undefined && d.date instanceof Date) {
            var b = d.millis === true;this.hV = stohex(this.formatDate(d.date, "utc", b));
          } else {
            if (d instanceof Date) {
              this.hV = stohex(this.formatDate(d, "utc"));
            }
          }
        }
      }
    }if (this.hV == undefined) {
      throw new Error("parameter not specified properly for UTCTime");
    }return this.hV;
  };if (a != undefined) {
    this.setByParam(a);
  }
};extendClass(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERGeneralizedTime = function (a) {
  KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a);this.hT = "18";this.params = a;this.getFreshValueHex = function () {
    var d = this.params;if (this.params == undefined) {
      d = { date: new Date() };
    }if (typeof d == "string") {
      if (d.match(/^[0-9]{14}Z$/) || d.match(/^[0-9]{14}\.[0-9]+Z$/)) {
        this.hV = stohex(d);
      } else {
        throw new Error("malformed string for GeneralizedTime: " + d);
      }
    } else {
      if (d.str != undefined) {
        this.hV = stohex(d.str);
      } else {
        if (d.date == undefined && d.millis == true) {
          var c = new Date();this.hV = stohex(this.formatDate(c, "gen", true));
        } else {
          if (d.date != undefined && d.date instanceof Date) {
            var b = d.millis === true;this.hV = stohex(this.formatDate(d.date, "gen", b));
          } else {
            if (d instanceof Date) {
              this.hV = stohex(this.formatDate(d, "gen"));
            }
          }
        }
      }
    }if (this.hV == undefined) {
      throw new Error("parameter not specified properly for GeneralizedTime");
    }return this.hV;
  };if (a != undefined) {
    this.setByParam(a);
  }
};extendClass(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);KJUR.asn1.DERSequence = function (a) {
  KJUR.asn1.DERSequence.superclass.constructor.call(this, a);this.hT = "30";this.getFreshValueHex = function () {
    var c = "";for (var b = 0; b < this.asn1Array.length; b++) {
      var d = this.asn1Array[b];c += d.getEncodedHex();
    }this.hV = c;return this.hV;
  };
};extendClass(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERSet = function (a) {
  KJUR.asn1.DERSet.superclass.constructor.call(this, a);this.hT = "31";this.sortFlag = true;this.getFreshValueHex = function () {
    var b = new Array();for (var c = 0; c < this.asn1Array.length; c++) {
      var d = this.asn1Array[c];b.push(d.getEncodedHex());
    }if (this.sortFlag == true) {
      b.sort();
    }this.hV = b.join("");return this.hV;
  };if (typeof a != "undefined") {
    if (typeof a.sortflag != "undefined" && a.sortflag == false) {
      this.sortFlag = false;
    }
  }
};extendClass(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);KJUR.asn1.DERTaggedObject = function (f) {
  KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);var d = KJUR.asn1,
      e = ASN1HEX,
      a = e.getV,
      c = e.isASN1HEX,
      b = d.ASN1Util.newObject;this.hT = "a0";this.hV = "";this.isExplicit = true;this.asn1Object = null;this.params = { tag: "a0", explicit: true };this.setASN1Object = function (g, h, i) {
    this.params = { tag: h, explicit: g, obj: i };
  };this.getFreshValueHex = function () {
    var h = this.params;if (h.explicit == undefined) {
      h.explicit = true;
    }if (h.tage != undefined) {
      h.tag = h.tage;h.explicit = true;
    }if (h.tagi != undefined) {
      h.tag = h.tagi;h.explicit = false;
    }if (h.str != undefined) {
      this.hV = utf8tohex(h.str);
    } else {
      if (h.hex != undefined) {
        this.hV = h.hex;
      } else {
        if (h.obj != undefined) {
          var g;if (h.obj instanceof d.ASN1Object) {
            g = h.obj.getEncodedHex();
          } else {
            if (_typeof(h.obj) == "object") {
              g = b(h.obj).getEncodedHex();
            }
          }if (h.explicit) {
            this.hV = g;
          } else {
            this.hV = a(g, 0);
          }
        } else {
          throw new Error("str, hex nor obj not specified");
        }
      }
    }if (h.tag == undefined) {
      h.tag = "a0";
    }this.hT = h.tag;this.hTLV = null;this.isModified = true;return this.hV;
  };this.setByParam = function (g) {
    this.params = g;
  };if (f !== undefined) {
    this.setByParam(f);
  }
};extendClass(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);

var ASN1HEX = new function () {}();ASN1HEX.getLblen = function (c, a) {
  if (c.substr(a + 2, 1) != "8") {
    return 1;
  }var b = parseInt(c.substr(a + 3, 1));if (b == 0) {
    return -1;
  }if (0 < b && b < 10) {
    return b + 1;
  }return -2;
};ASN1HEX.getL = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);if (a < 1) {
    return "";
  }return c.substr(b + 2, a * 2);
};ASN1HEX.getVblen = function (d, a) {
  var c, b;c = ASN1HEX.getL(d, a);if (c == "") {
    return -1;
  }if (c.substr(0, 1) === "8") {
    b = new BigInteger(c.substr(2), 16);
  } else {
    b = new BigInteger(c, 16);
  }return b.intValue();
};ASN1HEX.getVidx = function (c, b) {
  var a = ASN1HEX.getLblen(c, b);if (a < 0) {
    return a;
  }return b + (a + 1) * 2;
};ASN1HEX.getV = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return d.substr(c, b * 2);
};ASN1HEX.getTLV = function (b, a) {
  return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);
};ASN1HEX.getTLVblen = function (b, a) {
  return 2 + ASN1HEX.getLblen(b, a) * 2 + ASN1HEX.getVblen(b, a) * 2;
};ASN1HEX.getNextSiblingIdx = function (d, a) {
  var c = ASN1HEX.getVidx(d, a);var b = ASN1HEX.getVblen(d, a);return c + b * 2;
};ASN1HEX.getChildIdx = function (e, k) {
  var l = ASN1HEX;var j = [];var c, f, g;c = l.getVidx(e, k);f = l.getVblen(e, k) * 2;if (e.substr(k, 2) == "03") {
    c += 2;f -= 2;
  }g = 0;var d = c;while (g <= f) {
    var b = l.getTLVblen(e, d);g += b;if (g <= f) {
      j.push(d);
    }d += b;if (g >= f) {
      break;
    }
  }return j;
};ASN1HEX.getNthChildIdx = function (d, b, e) {
  var c = ASN1HEX.getChildIdx(d, b);return c[e];
};ASN1HEX.getIdxbyList = function (e, d, c, i) {
  var g = ASN1HEX;var f, b;if (c.length == 0) {
    if (i !== undefined) {
      if (e.substr(d, 2) !== i) {
        return -1;
      }
    }return d;
  }f = c.shift();b = g.getChildIdx(e, d);if (f >= b.length) {
    return -1;
  }return g.getIdxbyList(e, b[f], c, i);
};ASN1HEX.getIdxbyListEx = function (f, k, b, g) {
  var m = ASN1HEX;var d, l;if (b.length == 0) {
    if (g !== undefined) {
      if (f.substr(k, 2) !== g) {
        return -1;
      }
    }return k;
  }d = b.shift();l = m.getChildIdx(f, k);var j = 0;for (var e = 0; e < l.length; e++) {
    var c = f.substr(l[e], 2);if (typeof d == "number" && !m.isContextTag(c) && j == d || typeof d == "string" && m.isContextTag(c, d)) {
      return m.getIdxbyListEx(f, l[e], b, g);
    }if (!m.isContextTag(c)) {
      j++;
    }
  }return -1;
};ASN1HEX.getTLVbyList = function (d, c, b, f) {
  var e = ASN1HEX;var a = e.getIdxbyList(d, c, b, f);if (a == -1) {
    return null;
  }if (a >= d.length) {
    return null;
  }return e.getTLV(d, a);
};ASN1HEX.getTLVbyListEx = function (d, c, b, f) {
  var e = ASN1HEX;var a = e.getIdxbyListEx(d, c, b, f);if (a == -1) {
    return null;
  }return e.getTLV(d, a);
};ASN1HEX.getVbyList = function (e, c, b, g, i) {
  var f = ASN1HEX;var a, d;a = f.getIdxbyList(e, c, b, g);if (a == -1) {
    return null;
  }if (a >= e.length) {
    return null;
  }d = f.getV(e, a);if (i === true) {
    d = d.substr(2);
  }return d;
};ASN1HEX.getVbyListEx = function (b, e, a, d, f) {
  var j = ASN1HEX;var g, c, i;g = j.getIdxbyListEx(b, e, a, d);if (g == -1) {
    return null;
  }i = j.getV(b, g);if (b.substr(g, 2) == "03" && f !== false) {
    i = i.substr(2);
  }return i;
};ASN1HEX.getInt = function (e, b, f) {
  if (f == undefined) {
    f = -1;
  }try {
    var c = e.substr(b, 2);if (c != "02" && c != "03") {
      return f;
    }var a = ASN1HEX.getV(e, b);if (c == "02") {
      return parseInt(a, 16);
    } else {
      return bitstrtoint(a);
    }
  } catch (d) {
    return f;
  }
};ASN1HEX.getOID = function (c, a, d) {
  if (d == undefined) {
    d = null;
  }try {
    if (c.substr(a, 2) != "06") {
      return d;
    }var e = ASN1HEX.getV(c, a);return hextooid(e);
  } catch (b) {
    return d;
  }
};ASN1HEX.getOIDName = function (d, a, f) {
  if (f == undefined) {
    f = null;
  }try {
    var e = ASN1HEX.getOID(d, a, f);if (e == f) {
      return f;
    }var b = KJUR.asn1.x509.OID.oid2name(e);if (b == "") {
      return e;
    }return b;
  } catch (c) {
    return f;
  }
};ASN1HEX.getString = function (d, b, e) {
  if (e == undefined) {
    e = null;
  }try {
    var a = ASN1HEX.getV(d, b);return hextorstr(a);
  } catch (c) {
    return e;
  }
};ASN1HEX.hextooidstr = function (e) {
  var h = function h(b, a) {
    if (b.length >= a) {
      return b;
    }return new Array(a - b.length + 1).join("0") + b;
  };var l = [];var o = e.substr(0, 2);var f = parseInt(o, 16);l[0] = new String(Math.floor(f / 40));l[1] = new String(f % 40);var m = e.substr(2);var k = [];for (var g = 0; g < m.length / 2; g++) {
    k.push(parseInt(m.substr(g * 2, 2), 16));
  }var j = [];var d = "";for (var g = 0; g < k.length; g++) {
    if (k[g] & 128) {
      d = d + h((k[g] & 127).toString(2), 7);
    } else {
      d = d + h((k[g] & 127).toString(2), 7);j.push(new String(parseInt(d, 2)));d = "";
    }
  }var n = l.join(".");if (j.length > 0) {
    n = n + "." + j.join(".");
  }return n;
};ASN1HEX.dump = function (t, c, l, g) {
  var p = ASN1HEX;var j = p.getV;var y = p.dump;var w = p.getChildIdx;var e = t;if (t instanceof KJUR.asn1.ASN1Object) {
    e = t.getEncodedHex();
  }var q = function q(A, i) {
    if (A.length <= i * 2) {
      return A;
    } else {
      var v = A.substr(0, i) + "..(total " + A.length / 2 + "bytes).." + A.substr(A.length - i, i);return v;
    }
  };if (c === undefined) {
    c = { ommit_long_octet: 32 };
  }if (l === undefined) {
    l = 0;
  }if (g === undefined) {
    g = "";
  }var x = c.ommit_long_octet;var z = e.substr(l, 2);if (z == "01") {
    var h = j(e, l);if (h == "00") {
      return g + "BOOLEAN FALSE\n";
    } else {
      return g + "BOOLEAN TRUE\n";
    }
  }if (z == "02") {
    var h = j(e, l);return g + "INTEGER " + q(h, x) + "\n";
  }if (z == "03") {
    var h = j(e, l);if (p.isASN1HEX(h.substr(2))) {
      var k = g + "BITSTRING, encapsulates\n";k = k + y(h.substr(2), c, 0, g + "  ");return k;
    } else {
      return g + "BITSTRING " + q(h, x) + "\n";
    }
  }if (z == "04") {
    var h = j(e, l);if (p.isASN1HEX(h)) {
      var k = g + "OCTETSTRING, encapsulates\n";k = k + y(h, c, 0, g + "  ");return k;
    } else {
      return g + "OCTETSTRING " + q(h, x) + "\n";
    }
  }if (z == "05") {
    return g + "NULL\n";
  }if (z == "06") {
    var m = j(e, l);var b = KJUR.asn1.ASN1Util.oidHexToInt(m);var o = KJUR.asn1.x509.OID.oid2name(b);var a = b.replace(/\./g, " ");if (o != "") {
      return g + "ObjectIdentifier " + o + " (" + a + ")\n";
    } else {
      return g + "ObjectIdentifier (" + a + ")\n";
    }
  }if (z == "0a") {
    return g + "ENUMERATED " + parseInt(j(e, l)) + "\n";
  }if (z == "0c") {
    return g + "UTF8String '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "13") {
    return g + "PrintableString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "14") {
    return g + "TeletexString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "16") {
    return g + "IA5String '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "17") {
    return g + "UTCTime " + hextoutf8(j(e, l)) + "\n";
  }if (z == "18") {
    return g + "GeneralizedTime " + hextoutf8(j(e, l)) + "\n";
  }if (z == "1a") {
    return g + "VisualString '" + hextoutf8(j(e, l)) + "'\n";
  }if (z == "1e") {
    return g + "BMPString '" + ucs2hextoutf8(j(e, l)) + "'\n";
  }if (z == "30") {
    if (e.substr(l, 4) == "3000") {
      return g + "SEQUENCE {}\n";
    }var k = g + "SEQUENCE\n";var d = w(e, l);var f = c;if ((d.length == 2 || d.length == 3) && e.substr(d[0], 2) == "06" && e.substr(d[d.length - 1], 2) == "04") {
      var o = p.oidname(j(e, d[0]));var r = JSON.parse(JSON.stringify(c));r.x509ExtName = o;f = r;
    }for (var u = 0; u < d.length; u++) {
      k = k + y(e, f, d[u], g + "  ");
    }return k;
  }if (z == "31") {
    var k = g + "SET\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
      k = k + y(e, c, d[u], g + "  ");
    }return k;
  }var z = parseInt(z, 16);if ((z & 128) != 0) {
    var n = z & 31;if ((z & 32) != 0) {
      var k = g + "[" + n + "]\n";var d = w(e, l);for (var u = 0; u < d.length; u++) {
        k = k + y(e, c, d[u], g + "  ");
      }return k;
    } else {
      var h = j(e, l);if (ASN1HEX.isASN1HEX(h)) {
        var k = g + "[" + n + "]\n";k = k + y(h, c, 0, g + "  ");return k;
      } else {
        if (h.substr(0, 8) == "68747470") {
          h = hextoutf8(h);
        } else {
          if (c.x509ExtName === "subjectAltName" && n == 2) {
            h = hextoutf8(h);
          }
        }
      }var k = g + "[" + n + "] " + h + "\n";return k;
    }
  }return g + "UNKNOWN(" + z + ") " + j(e, l) + "\n";
};ASN1HEX.parse = function (v) {
  var q = ASN1HEX,
      f = q.parse,
      a = q.isASN1HEX,
      l = q.getV,
      b = q.getTLV,
      w = q.getChildIdx,
      i = KJUR.asn1,
      e = i.ASN1Util.oidHexToInt,
      z = i.x509.OID.oid2name,
      k = hextoutf8;var c = { "0c": "utf8str", "13": "prnstr", "14": "telstr", "16": "ia5str", "17": "utctime", "18": "gentime", "1a": "visstr", "1e": "bmpstr", "30": "seq", "31": "set" };var r = function r(F) {
    var B = [];var C = w(F, 0);for (var E = 0; E < C.length; E++) {
      var s = C[E];var d = b(F, s);var D = f(d);B.push(D);
    }return B;
  };var A = v.substr(0, 2);var j = {};var o = l(v, 0);if (A == "01") {
    if (v == "0101ff") {
      return { bool: true };
    }return { bool: false };
  } else {
    if (A == "02") {
      return { "int": { hex: o } };
    } else {
      if (A == "03") {
        try {
          if (o.substr(0, 2) != "00") {
            throw "not encap";
          }var t = o.substr(2);if (!a(t)) {
            throw "not encap";
          }return { bitstr: { obj: f(t) } };
        } catch (x) {
          var m = null;if (o.length <= 6) {
            m = bitstrtobinstr(o);
          }if (m == null) {
            return { bitstr: { hex: o } };
          } else {
            return { bitstr: { bin: m } };
          }
        }
      } else {
        if (A == "04") {
          try {
            if (!a(o)) {
              throw "not encap";
            }return { octstr: { obj: f(o) } };
          } catch (x) {
            return { octstr: { hex: o } };
          }
        } else {
          if (A == "05") {
            return { "null": "" };
          } else {
            if (A == "06") {
              var g = e(o);var p = z(g);if (p == "") {
                return { oid: g };
              } else {
                return { oid: p };
              }
            } else {
              if (A == "0a") {
                if (o.length > 4) {
                  return { "enum": { hex: o } };
                } else {
                  return { "enum": parseInt(o, 16) };
                }
              } else {
                if (A == "30" || A == "31") {
                  j[c[A]] = r(v);return j;
                } else {
                  if (":0c:13:14:16:17:18:1a:1e:".indexOf(A) != -1) {
                    var n = k(o);j[c[A]] = { str: n };return j;
                  } else {
                    if (A.match(/^8[0-9]$/)) {
                      var n = k(o);if (n == null | n == "" | n.match(/[\x00-\x1F\x7F-\x9F]/) != null | n.match(/[\u0000-\u001F\u0080–\u009F]/) != null) {
                        return { tag: { tag: A, explicit: false, hex: o } };
                      } else {
                        return { tag: { tag: A, explicit: false, str: n } };
                      }
                    } else {
                      if (A.match(/^a[0-9]$/)) {
                        try {
                          if (!a(o)) {
                            throw "not encap";
                          }return { tag: { tag: A, explicit: true, obj: f(o) } };
                        } catch (x) {
                          return { tag: { tag: A, explicit: true, hex: o } };
                        }
                      } else {
                        var y = new KJUR.asn1.ASN1Object();y.hV = o;var u = y.getLengthHexFromValue();return { asn1: { tlv: A + u + o } };
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};ASN1HEX.isContextTag = function (c, b) {
  c = c.toLowerCase();var f, e;try {
    f = parseInt(c, 16);
  } catch (d) {
    return -1;
  }if (b === undefined) {
    if ((f & 192) == 128) {
      return true;
    } else {
      return false;
    }
  }try {
    var a = b.match(/^\[[0-9]+\]$/);if (a == null) {
      return false;
    }e = parseInt(b.substr(1, b.length - 1), 10);if (e > 31) {
      return false;
    }if ((f & 192) == 128 && (f & 31) == e) {
      return true;
    }return false;
  } catch (d) {
    return false;
  }
};ASN1HEX.isASN1HEX = function (e) {
  var d = ASN1HEX;if (e.length % 2 == 1) {
    return false;
  }var c = d.getVblen(e, 0);var b = e.substr(0, 2);var f = d.getL(e, 0);var a = e.length - b.length - f.length;if (a == c * 2) {
    return true;
  }return false;
};ASN1HEX.checkStrictDER = function (g, o, d, c, r) {
  var s = ASN1HEX;if (d === undefined) {
    if (typeof g != "string") {
      throw new Error("not hex string");
    }g = g.toLowerCase();if (!KJUR.lang.String.isHex(g)) {
      throw new Error("not hex string");
    }d = g.length;c = g.length / 2;if (c < 128) {
      r = 1;
    } else {
      r = Math.ceil(c.toString(16)) + 1;
    }
  }var k = s.getL(g, o);if (k.length > r * 2) {
    throw new Error("L of TLV too long: idx=" + o);
  }var n = s.getVblen(g, o);if (n > c) {
    throw new Error("value of L too long than hex: idx=" + o);
  }var q = s.getTLV(g, o);var f = q.length - 2 - s.getL(g, o).length;if (f !== n * 2) {
    throw new Error("V string length and L's value not the same:" + f + "/" + n * 2);
  }if (o === 0) {
    if (g.length != q.length) {
      throw new Error("total length and TLV length unmatch:" + g.length + "!=" + q.length);
    }
  }var b = g.substr(o, 2);if (b === "02") {
    var a = s.getVidx(g, o);if (g.substr(a, 2) == "00" && g.charCodeAt(a + 2) < 56) {
      throw new Error("not least zeros for DER INTEGER");
    }
  }if (parseInt(b, 16) & 32) {
    var p = s.getVblen(g, o);var m = 0;var l = s.getChildIdx(g, o);for (var e = 0; e < l.length; e++) {
      var j = s.getTLV(g, l[e]);m += j.length;s.checkStrictDER(g, l[e], d, c, r);
    }if (p * 2 != m) {
      throw new Error("sum of children's TLV length and L unmatch: " + p * 2 + "!=" + m);
    }
  }
};ASN1HEX.oidname = function (a) {
  var c = KJUR.asn1;if (KJUR.lang.String.isHex(a)) {
    a = c.ASN1Util.oidHexToInt(a);
  }var b = c.x509.OID.oid2name(a);if (b === "") {
    b = a;
  }return b;
};

var KJUR;if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.lang == "undefined" || !KJUR.lang) {
  KJUR.lang = {};
}KJUR.lang.String = function () {};function Base64x() {}function stoBA(d) {
  var b = new Array();for (var c = 0; c < d.length; c++) {
    b[c] = d.charCodeAt(c);
  }return b;
}function BAtos(b) {
  var d = "";for (var c = 0; c < b.length; c++) {
    d = d + String.fromCharCode(b[c]);
  }return d;
}function BAtohex(b) {
  var e = "";for (var d = 0; d < b.length; d++) {
    var c = b[d].toString(16);if (c.length == 1) {
      c = "0" + c;
    }e = e + c;
  }return e;
}function stohex(a) {
  return BAtohex(stoBA(a));
}function stob64(a) {
  return hex2b64(stohex(a));
}function stob64u(a) {
  return b64tob64u(hex2b64(stohex(a)));
}function b64utos(a) {
  return BAtos(b64toBA(b64utob64(a)));
}function b64tob64u(a) {
  a = a.replace(/\=/g, "");a = a.replace(/\+/g, "-");a = a.replace(/\//g, "_");return a;
}function b64utob64(a) {
  if (a.length % 4 == 2) {
    a = a + "==";
  } else {
    if (a.length % 4 == 3) {
      a = a + "=";
    }
  }a = a.replace(/-/g, "+");a = a.replace(/_/g, "/");return a;
}function hextob64u(a) {
  if (a.length % 2 == 1) {
    a = "0" + a;
  }return b64tob64u(hex2b64(a));
}function b64utohex(a) {
  return b64tohex(b64utob64(a));
}var utf8tob64u, b64utoutf8;if (typeof Buffer === "function") {
  exports.utf8tob64u = utf8tob64u = function utf8tob64u(a) {
    return b64tob64u(Buffer.from(a, "utf8").toString("base64"));
  };exports.b64utoutf8 = b64utoutf8 = function b64utoutf8(a) {
    return Buffer.from(b64utob64(a), "base64").toString("utf8");
  };
} else {
  exports.utf8tob64u = utf8tob64u = function utf8tob64u(a) {
    return hextob64u(uricmptohex(encodeURIComponentAll(a)));
  };exports.b64utoutf8 = b64utoutf8 = function b64utoutf8(a) {
    return decodeURIComponent(hextouricmp(b64utohex(a)));
  };
}function utf8tob64(a) {
  return hex2b64(uricmptohex(encodeURIComponentAll(a)));
}function b64toutf8(a) {
  return decodeURIComponent(hextouricmp(b64tohex(a)));
}function utf8tohex(a) {
  return uricmptohex(encodeURIComponentAll(a)).toLowerCase();
}function hextoutf8(b) {
  try {
    return decodeURIComponent(hextouricmp(b));
  } catch (a) {
    return null;
  }
}function hextorstr(c) {
  var b = "";for (var a = 0; a < c.length - 1; a += 2) {
    b += String.fromCharCode(parseInt(c.substr(a, 2), 16));
  }return b;
}function rstrtohex(c) {
  var a = "";for (var b = 0; b < c.length; b++) {
    a += ("0" + c.charCodeAt(b).toString(16)).slice(-2);
  }return a;
}function hextob64(a) {
  return hex2b64(a);
}function hextob64nl(b) {
  var a = hextob64(b);var c = a.replace(/(.{64})/g, "$1\r\n");c = c.replace(/\r\n$/, "");return c;
}function b64nltohex(b) {
  var a = b.replace(/[^0-9A-Za-z\/+=]*/g, "");var c = b64tohex(a);return c;
}function hextopem(a, b) {
  var c = hextob64nl(a);return "-----BEGIN " + b + "-----\r\n" + c + "\r\n-----END " + b + "-----\r\n";
}function pemtohex(a, b) {
  if (a.indexOf("-----BEGIN ") == -1) {
    throw "can't find PEM header: " + b;
  }if (b !== undefined) {
    a = a.replace(new RegExp("^[^]*-----BEGIN " + b + "-----"), "");a = a.replace(new RegExp("-----END " + b + "-----[^]*$"), "");
  } else {
    a = a.replace(/^[^]*-----BEGIN [^-]+-----/, "");a = a.replace(/-----END [^-]+-----[^]*$/, "");
  }return b64nltohex(a);
}function hextoArrayBuffer(d) {
  if (d.length % 2 != 0) {
    throw "input is not even length";
  }if (d.match(/^[0-9A-Fa-f]+$/) == null) {
    throw "input is not hexadecimal";
  }var b = new ArrayBuffer(d.length / 2);var a = new DataView(b);for (var c = 0; c < d.length / 2; c++) {
    a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));
  }return b;
}function ArrayBuffertohex(b) {
  var d = "";var a = new DataView(b);for (var c = 0; c < b.byteLength; c++) {
    d += ("00" + a.getUint8(c).toString(16)).slice(-2);
  }return d;
}function zulutomsec(n) {
  var l, j, m, e, f, i, b, k;var a, h, g, c;c = n.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/);if (c) {
    a = c[1];l = parseInt(a);if (a.length === 2) {
      if (50 <= l && l < 100) {
        l = 1900 + l;
      } else {
        if (0 <= l && l < 50) {
          l = 2000 + l;
        }
      }
    }j = parseInt(c[2]) - 1;m = parseInt(c[3]);e = parseInt(c[4]);f = parseInt(c[5]);i = parseInt(c[6]);b = 0;h = c[7];if (h !== "") {
      g = (h.substr(1) + "00").substr(0, 3);b = parseInt(g);
    }return Date.UTC(l, j, m, e, f, i, b);
  }throw "unsupported zulu format: " + n;
}function zulutosec(a) {
  var b = zulutomsec(a);return ~~(b / 1000);
}function zulutodate(a) {
  return new Date(zulutomsec(a));
}function datetozulu(g, e, f) {
  var b;var a = g.getUTCFullYear();if (e) {
    if (a < 1950 || 2049 < a) {
      throw "not proper year for UTCTime: " + a;
    }b = ("" + a).slice(-2);
  } else {
    b = ("000" + a).slice(-4);
  }b += ("0" + (g.getUTCMonth() + 1)).slice(-2);b += ("0" + g.getUTCDate()).slice(-2);b += ("0" + g.getUTCHours()).slice(-2);b += ("0" + g.getUTCMinutes()).slice(-2);b += ("0" + g.getUTCSeconds()).slice(-2);if (f) {
    var c = g.getUTCMilliseconds();if (c !== 0) {
      c = ("00" + c).slice(-3);c = c.replace(/0+$/g, "");b += "." + c;
    }
  }b += "Z";return b;
}function uricmptohex(a) {
  return a.replace(/%/g, "");
}function hextouricmp(a) {
  return a.replace(/(..)/g, "%$1");
}function ipv6tohex(g) {
  var b = "malformed IPv6 address";if (!g.match(/^[0-9A-Fa-f:]+$/)) {
    throw b;
  }g = g.toLowerCase();var d = g.split(":").length - 1;if (d < 2) {
    throw b;
  }var e = ":".repeat(7 - d + 2);g = g.replace("::", e);var c = g.split(":");if (c.length != 8) {
    throw b;
  }for (var f = 0; f < 8; f++) {
    c[f] = ("0000" + c[f]).slice(-4);
  }return c.join("");
}function hextoipv6(e) {
  if (!e.match(/^[0-9A-Fa-f]{32}$/)) {
    throw "malformed IPv6 address octet";
  }e = e.toLowerCase();var b = e.match(/.{1,4}/g);for (var d = 0; d < 8; d++) {
    b[d] = b[d].replace(/^0+/, "");if (b[d] == "") {
      b[d] = "0";
    }
  }e = ":" + b.join(":") + ":";var c = e.match(/:(0:){2,}/g);if (c === null) {
    return e.slice(1, -1);
  }var f = "";for (var d = 0; d < c.length; d++) {
    if (c[d].length > f.length) {
      f = c[d];
    }
  }e = e.replace(f, "::");return e.slice(1, -1);
}function hextoip(b) {
  var d = "malformed hex value";if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {
    throw d;
  }if (b.length == 8) {
    var c;try {
      c = parseInt(b.substr(0, 2), 16) + "." + parseInt(b.substr(2, 2), 16) + "." + parseInt(b.substr(4, 2), 16) + "." + parseInt(b.substr(6, 2), 16);return c;
    } catch (a) {
      throw d;
    }
  } else {
    if (b.length == 32) {
      return hextoipv6(b);
    } else {
      return b;
    }
  }
}function iptohex(f) {
  var j = "malformed IP address";f = f.toLowerCase(f);if (f.match(/^[0-9.]+$/)) {
    var b = f.split(".");if (b.length !== 4) {
      throw j;
    }var g = "";try {
      for (var e = 0; e < 4; e++) {
        var h = parseInt(b[e]);g += ("0" + h.toString(16)).slice(-2);
      }return g;
    } catch (c) {
      throw j;
    }
  } else {
    if (f.match(/^[0-9a-f:]+$/) && f.indexOf(":") !== -1) {
      return ipv6tohex(f);
    } else {
      throw j;
    }
  }
}function ucs2hextoutf8(d) {
  function e(f) {
    var h = parseInt(f.substr(0, 2), 16);var a = parseInt(f.substr(2), 16);if (h == 0 & a < 128) {
      return String.fromCharCode(a);
    }if (h < 8) {
      var j = 192 | (h & 7) << 3 | (a & 192) >> 6;var i = 128 | a & 63;return hextoutf8(j.toString(16) + i.toString(16));
    }var j = 224 | (h & 240) >> 4;var i = 128 | (h & 15) << 2 | (a & 192) >> 6;var g = 128 | a & 63;return hextoutf8(j.toString(16) + i.toString(16) + g.toString(16));
  }var c = d.match(/.{4}/g);var b = c.map(e);return b.join("");
}function encodeURIComponentAll(a) {
  var d = encodeURIComponent(a);var b = "";for (var c = 0; c < d.length; c++) {
    if (d[c] == "%") {
      b = b + d.substr(c, 3);c = c + 2;
    } else {
      b = b + "%" + stohex(d[c]);
    }
  }return b;
}function newline_toUnix(a) {
  a = a.replace(/\r\n/mg, "\n");return a;
}function newline_toDos(a) {
  a = a.replace(/\r\n/mg, "\n");a = a.replace(/\n/mg, "\r\n");return a;
}KJUR.lang.String.isInteger = function (a) {
  if (a.match(/^[0-9]+$/)) {
    return true;
  } else {
    if (a.match(/^-[0-9]+$/)) {
      return true;
    } else {
      return false;
    }
  }
};KJUR.lang.String.isHex = function (a) {
  return ishex(a);
};function ishex(a) {
  if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {
    return true;
  } else {
    return false;
  }
}KJUR.lang.String.isBase64 = function (a) {
  a = a.replace(/\s+/g, "");if (a.match(/^[0-9A-Za-z+\/]+={0,3}$/) && a.length % 4 == 0) {
    return true;
  } else {
    return false;
  }
};KJUR.lang.String.isBase64URL = function (a) {
  if (a.match(/[+/=]/)) {
    return false;
  }a = b64utob64(a);return KJUR.lang.String.isBase64(a);
};KJUR.lang.String.isIntegerArray = function (a) {
  a = a.replace(/\s+/g, "");if (a.match(/^\[[0-9,]+\]$/)) {
    return true;
  } else {
    return false;
  }
};KJUR.lang.String.isPrintable = function (a) {
  if (a.match(/^[0-9A-Za-z '()+,-./:=?]*$/) !== null) {
    return true;
  }return false;
};KJUR.lang.String.isIA5 = function (a) {
  if (a.match(/^[\x20-\x21\x23-\x7f]*$/) !== null) {
    return true;
  }return false;
};KJUR.lang.String.isMail = function (a) {
  if (a.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/) !== null) {
    return true;
  }return false;
};function hextoposhex(a) {
  if (a.length % 2 == 1) {
    return "0" + a;
  }if (a.substr(0, 1) > "7") {
    return "00" + a;
  }return a;
}function intarystrtohex(b) {
  b = b.replace(/^\s*\[\s*/, "");b = b.replace(/\s*\]\s*$/, "");b = b.replace(/\s*/g, "");try {
    var c = b.split(/,/).map(function (g, e, h) {
      var f = parseInt(g);if (f < 0 || 255 < f) {
        throw "integer not in range 0-255";
      }var d = ("00" + f.toString(16)).slice(-2);return d;
    }).join("");return c;
  } catch (a) {
    throw "malformed integer array string: " + a;
  }
}var strdiffidx = function strdiffidx(c, a) {
  var d = c.length;if (c.length > a.length) {
    d = a.length;
  }for (var b = 0; b < d; b++) {
    if (c.charCodeAt(b) != a.charCodeAt(b)) {
      return b;
    }
  }if (c.length != a.length) {
    return d;
  }return -1;
};function oidtohex(g) {
  var f = function f(a) {
    var l = a.toString(16);if (l.length == 1) {
      l = "0" + l;
    }return l;
  };var e = function e(p) {
    var o = "";var l = parseInt(p, 10);var a = l.toString(2);var m = 7 - a.length % 7;if (m == 7) {
      m = 0;
    }var r = "";for (var n = 0; n < m; n++) {
      r += "0";
    }a = r + a;for (var n = 0; n < a.length - 1; n += 7) {
      var q = a.substr(n, 7);if (n != a.length - 7) {
        q = "1" + q;
      }o += f(parseInt(q, 2));
    }return o;
  };try {
    if (!g.match(/^[0-9.]+$/)) {
      return null;
    }var j = "";var b = g.split(".");var k = parseInt(b[0], 10) * 40 + parseInt(b[1], 10);j += f(k);b.splice(0, 2);for (var d = 0; d < b.length; d++) {
      j += e(b[d]);
    }return j;
  } catch (c) {
    return null;
  }
}function hextooid(g) {
  if (!ishex(g)) {
    return null;
  }try {
    var m = [];var p = g.substr(0, 2);var e = parseInt(p, 16);m[0] = new String(Math.floor(e / 40));m[1] = new String(e % 40);var n = g.substr(2);var l = [];for (var f = 0; f < n.length / 2; f++) {
      l.push(parseInt(n.substr(f * 2, 2), 16));
    }var k = [];var d = "";for (var f = 0; f < l.length; f++) {
      if (l[f] & 128) {
        d = d + strpad((l[f] & 127).toString(2), 7);
      } else {
        d = d + strpad((l[f] & 127).toString(2), 7);k.push(new String(parseInt(d, 2)));d = "";
      }
    }var o = m.join(".");if (k.length > 0) {
      o = o + "." + k.join(".");
    }return o;
  } catch (j) {
    return null;
  }
}var strpad = function strpad(c, b, a) {
  if (a == undefined) {
    a = "0";
  }if (c.length >= b) {
    return c;
  }return new Array(b - c.length + 1).join(a) + c;
};function bitstrtoint(e) {
  if (e.length % 2 != 0) {
    return -1;
  }e = e.toLowerCase();if (e.match(/^[0-9a-f]+$/) == null) {
    return -1;
  }try {
    var a = e.substr(0, 2);if (a == "00") {
      return parseInt(e.substr(2), 16);
    }var b = parseInt(a, 16);if (b > 7) {
      return -1;
    }var g = e.substr(2);var d = parseInt(g, 16).toString(2);if (d == "0") {
      d = "00000000";
    }d = d.slice(0, 0 - b);var f = parseInt(d, 2);if (f == NaN) {
      return -1;
    }return f;
  } catch (c) {
    return -1;
  }
}function inttobitstr(e) {
  if (typeof e != "number") {
    return null;
  }if (e < 0) {
    return null;
  }var c = Number(e).toString(2);var b = 8 - c.length % 8;if (b == 8) {
    b = 0;
  }c = c + strpad("", b, "0");var d = parseInt(c, 2).toString(16);if (d.length % 2 == 1) {
    d = "0" + d;
  }var a = "0" + b;return a + d;
}function bitstrtobinstr(a) {
  var b = bitstrtoint(a);if (b == -1) {
    return null;
  }return b.toString(2);
}function binstrtobitstr(b) {
  if (typeof b != "string") {
    return null;
  }if (b.match(/^[01]+$/) == null) {
    return null;
  }try {
    var c = parseInt(b, 2);return inttobitstr(c);
  } catch (a) {
    return null;
  }
}function extendClass(c, a) {
  var b = function b() {};b.prototype = a.prototype;c.prototype = new b();c.prototype.constructor = c;c.superclass = a.prototype;if (a.prototype.constructor == Object.prototype.constructor) {
    a.prototype.constructor = a;
  }
};

if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.Util = new function () {
  this.DIGESTINFOHEAD = { sha1: "3021300906052b0e03021a05000414", sha224: "302d300d06096086480165030402040500041c", sha256: "3031300d060960864801650304020105000420", sha384: "3041300d060960864801650304020205000430", sha512: "3051300d060960864801650304020305000440", md2: "3020300c06082a864886f70d020205000410", md5: "3020300c06082a864886f70d020505000410", ripemd160: "3021300906052b2403020105000414" };this.DEFAULTPROVIDER = { md5: "cryptojs", sha1: "cryptojs", sha224: "cryptojs", sha256: "cryptojs", sha384: "cryptojs", sha512: "cryptojs", ripemd160: "cryptojs", hmacmd5: "cryptojs", hmacsha1: "cryptojs", hmacsha224: "cryptojs", hmacsha256: "cryptojs", hmacsha384: "cryptojs", hmacsha512: "cryptojs", hmacripemd160: "cryptojs", MD5withRSA: "cryptojs/jsrsa", SHA1withRSA: "cryptojs/jsrsa", SHA224withRSA: "cryptojs/jsrsa", SHA256withRSA: "cryptojs/jsrsa", SHA384withRSA: "cryptojs/jsrsa", SHA512withRSA: "cryptojs/jsrsa", RIPEMD160withRSA: "cryptojs/jsrsa", MD5withECDSA: "cryptojs/jsrsa", SHA1withECDSA: "cryptojs/jsrsa", SHA224withECDSA: "cryptojs/jsrsa", SHA256withECDSA: "cryptojs/jsrsa", SHA384withECDSA: "cryptojs/jsrsa", SHA512withECDSA: "cryptojs/jsrsa", RIPEMD160withECDSA: "cryptojs/jsrsa", SHA1withDSA: "cryptojs/jsrsa", SHA224withDSA: "cryptojs/jsrsa", SHA256withDSA: "cryptojs/jsrsa", MD5withRSAandMGF1: "cryptojs/jsrsa", SHAwithRSAandMGF1: "cryptojs/jsrsa", SHA1withRSAandMGF1: "cryptojs/jsrsa", SHA224withRSAandMGF1: "cryptojs/jsrsa", SHA256withRSAandMGF1: "cryptojs/jsrsa", SHA384withRSAandMGF1: "cryptojs/jsrsa", SHA512withRSAandMGF1: "cryptojs/jsrsa", RIPEMD160withRSAandMGF1: "cryptojs/jsrsa" };this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 };this.getDigestInfoHex = function (a, b) {
    if (typeof this.DIGESTINFOHEAD[b] == "undefined") {
      throw "alg not supported in Util.DIGESTINFOHEAD: " + b;
    }return this.DIGESTINFOHEAD[b] + a;
  };this.getPaddedDigestInfoHex = function (h, a, j) {
    var c = this.getDigestInfoHex(h, a);var d = j / 4;if (c.length + 22 > d) {
      throw "key is too short for SigAlg: keylen=" + j + "," + a;
    }var b = "0001";var k = "00" + c;var g = "";var l = d - b.length - k.length;for (var f = 0; f < l; f += 2) {
      g += "ff";
    }var e = b + g + k;return e;
  };this.hashString = function (a, c) {
    var b = new KJUR.crypto.MessageDigest({ alg: c });return b.digestString(a);
  };this.hashHex = function (b, c) {
    var a = new KJUR.crypto.MessageDigest({ alg: c });return a.digestHex(b);
  };this.sha1 = function (a) {
    return this.hashString(a, "sha1");
  };this.sha256 = function (a) {
    return this.hashString(a, "sha256");
  };this.sha256Hex = function (a) {
    return this.hashHex(a, "sha256");
  };this.sha512 = function (a) {
    return this.hashString(a, "sha512");
  };this.sha512Hex = function (a) {
    return this.hashHex(a, "sha512");
  };this.isKey = function (a) {
    if (a instanceof RSAKey || a instanceof KJUR.crypto.DSA || a instanceof KJUR.crypto.ECDSA) {
      return true;
    } else {
      return false;
    }
  };
}();KJUR.crypto.Util.md5 = function (a) {
  var b = new KJUR.crypto.MessageDigest({ alg: "md5", prov: "cryptojs" });return b.digestString(a);
};KJUR.crypto.Util.ripemd160 = function (a) {
  var b = new KJUR.crypto.MessageDigest({ alg: "ripemd160", prov: "cryptojs" });return b.digestString(a);
};KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();KJUR.crypto.Util.getRandomHexOfNbytes = function (b) {
  var a = new Array(b);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);return BAtohex(a);
};KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);
};KJUR.crypto.Util.getRandomHexOfNbits = function (d) {
  var c = d % 8;var a = (d - c) / 8;var b = new Array(a + 1);KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);b[0] = (255 << c & 255 ^ 255) & b[0];return BAtohex(b);
};KJUR.crypto.Util.getRandomBigIntegerOfNbits = function (a) {
  return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);
};KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function (b) {
  var a = b.bitLength();while (1) {
    var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);if (b.compareTo(c) != -1) {
      return c;
    }
  }
};KJUR.crypto.Util.getRandomBigIntegerMinToMax = function (e, b) {
  var c = e.compareTo(b);if (c == 1) {
    throw "biMin is greater than biMax";
  }if (c == 0) {
    return e;
  }var a = b.subtract(e);var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);return d.add(e);
};KJUR.crypto.MessageDigest = function (c) {
  var b = null;var a = null;var d = null;this.setAlgAndProvider = function (g, f) {
    g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);if (g !== null && f === undefined) {
      f = KJUR.crypto.Util.DEFAULTPROVIDER[g];
    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && f == "cryptojs") {
      try {
        this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }this.updateString = function (h) {
        this.md.update(h);
      };this.updateHex = function (h) {
        var i = CryptoJS.enc.Hex.parse(h);this.md.update(i);
      };this.digest = function () {
        var h = this.md.finalize();return h.toString(CryptoJS.enc.Hex);
      };this.digestString = function (h) {
        this.updateString(h);return this.digest();
      };this.digestHex = function (h) {
        this.updateHex(h);return this.digest();
      };
    }if (":sha256:".indexOf(g) != -1 && f == "sjcl") {
      try {
        this.md = new sjcl.hash.sha256();
      } catch (e) {
        throw "setAlgAndProvider hash alg set fail alg=" + g + "/" + e;
      }this.updateString = function (h) {
        this.md.update(h);
      };this.updateHex = function (i) {
        var h = sjcl.codec.hex.toBits(i);this.md.update(h);
      };this.digest = function () {
        var h = this.md.finalize();return sjcl.codec.hex.fromBits(h);
      };this.digestString = function (h) {
        this.updateString(h);return this.digest();
      };this.digestHex = function (h) {
        this.updateHex(h);return this.digest();
      };
    }
  };this.updateString = function (e) {
    throw "updateString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.updateHex = function (e) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digest = function () {
    throw "digest() not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digestString = function (e) {
    throw "digestString(str) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };this.digestHex = function (e) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algName + "/" + this.provName;
  };if (c !== undefined) {
    if (c.alg !== undefined) {
      this.algName = c.alg;if (c.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};KJUR.crypto.MessageDigest.getCanonicalAlgName = function (a) {
  if (typeof a === "string") {
    a = a.toLowerCase();a = a.replace(/-/, "");
  }return a;
};KJUR.crypto.MessageDigest.getHashLength = function (c) {
  var b = KJUR.crypto.MessageDigest;var a = b.getCanonicalAlgName(c);if (b.HASHLENGTH[a] === undefined) {
    throw "not supported algorithm: " + c;
  }return b.HASHLENGTH[a];
};KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 };KJUR.crypto.Mac = function (d) {
  var f = null;var c = null;var a = null;var e = null;var b = null;this.setAlgAndProvider = function (k, i) {
    k = k.toLowerCase();if (k == null) {
      k = "hmacsha1";
    }k = k.toLowerCase();if (k.substr(0, 4) != "hmac") {
      throw "setAlgAndProvider unsupported HMAC alg: " + k;
    }if (i === undefined) {
      i = KJUR.crypto.Util.DEFAULTPROVIDER[k];
    }this.algProv = k + "/" + i;var g = k.substr(4);if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(g) != -1 && i == "cryptojs") {
      try {
        var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];this.mac = CryptoJS.algo.HMAC.create(j, this.pass);
      } catch (h) {
        throw "setAlgAndProvider hash alg set fail hashAlg=" + g + "/" + h;
      }this.updateString = function (l) {
        this.mac.update(l);
      };this.updateHex = function (l) {
        var m = CryptoJS.enc.Hex.parse(l);this.mac.update(m);
      };this.doFinal = function () {
        var l = this.mac.finalize();return l.toString(CryptoJS.enc.Hex);
      };this.doFinalString = function (l) {
        this.updateString(l);return this.doFinal();
      };this.doFinalHex = function (l) {
        this.updateHex(l);return this.doFinal();
      };
    }
  };this.updateString = function (g) {
    throw "updateString(str) not supported for this alg/prov: " + this.algProv;
  };this.updateHex = function (g) {
    throw "updateHex(hex) not supported for this alg/prov: " + this.algProv;
  };this.doFinal = function () {
    throw "digest() not supported for this alg/prov: " + this.algProv;
  };this.doFinalString = function (g) {
    throw "digestString(str) not supported for this alg/prov: " + this.algProv;
  };this.doFinalHex = function (g) {
    throw "digestHex(hex) not supported for this alg/prov: " + this.algProv;
  };this.setPassword = function (h) {
    if (typeof h == "string") {
      var g = h;if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {
        g = rstrtohex(h);
      }this.pass = CryptoJS.enc.Hex.parse(g);return;
    }if ((typeof h === "undefined" ? "undefined" : _typeof(h)) != "object") {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }var g = null;if (h.hex !== undefined) {
      if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {
        throw "Mac: wrong hex password: " + h.hex;
      }g = h.hex;
    }if (h.utf8 !== undefined) {
      g = utf8tohex(h.utf8);
    }if (h.rstr !== undefined) {
      g = rstrtohex(h.rstr);
    }if (h.b64 !== undefined) {
      g = b64tohex(h.b64);
    }if (h.b64u !== undefined) {
      g = b64utohex(h.b64u);
    }if (g == null) {
      throw "KJUR.crypto.Mac unsupported password type: " + h;
    }this.pass = CryptoJS.enc.Hex.parse(g);
  };if (d !== undefined) {
    if (d.pass !== undefined) {
      this.setPassword(d.pass);
    }if (d.alg !== undefined) {
      this.algName = d.alg;if (d.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      }this.setAlgAndProvider(this.algName, this.provName);
    }
  }
};KJUR.crypto.Signature = function (o) {
  var q = null;var n = null;var r = null;var c = null;var l = null;var d = null;var k = null;var h = null;var p = null;var e = null;var b = -1;var g = null;var j = null;var a = null;var i = null;var f = null;this._setAlgNames = function () {
    var s = this.algName.match(/^(.+)with(.+)$/);if (s) {
      this.mdAlgName = s[1].toLowerCase();this.pubkeyAlgName = s[2].toLowerCase();if (this.pubkeyAlgName == "rsaandmgf1" && this.mdAlgName == "sha") {
        this.mdAlgName = "sha1";
      }
    }
  };this._zeroPaddingOfSignature = function (x, w) {
    var v = "";var t = w / 4 - x.length;for (var u = 0; u < t; u++) {
      v = v + "0";
    }return v + x;
  };this.setAlgAndProvider = function (u, t) {
    this._setAlgNames();if (t != "cryptojs/jsrsa") {
      throw new Error("provider not supported: " + t);
    }if (":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName) != -1) {
      try {
        this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName });
      } catch (s) {
        throw new Error("setAlgAndProvider hash alg set fail alg=" + this.mdAlgName + "/" + s);
      }this.init = function (w, x) {
        var y = null;try {
          if (x === undefined) {
            y = KEYUTIL.getKey(w);
          } else {
            y = KEYUTIL.getKey(w, x);
          }
        } catch (v) {
          throw "init failed:" + v;
        }if (y.isPrivate === true) {
          this.prvKey = y;this.state = "SIGN";
        } else {
          if (y.isPublic === true) {
            this.pubKey = y;this.state = "VERIFY";
          } else {
            throw "init failed.:" + y;
          }
        }
      };this.updateString = function (v) {
        this.md.updateString(v);
      };this.updateHex = function (v) {
        this.md.updateHex(v);
      };this.sign = function () {
        this.sHashHex = this.md.digest();if (this.prvKey === undefined && this.ecprvhex !== undefined && this.eccurvename !== undefined && KJUR.crypto.ECDSA !== undefined) {
          this.prvKey = new KJUR.crypto.ECDSA({ curve: this.eccurvename, prv: this.ecprvhex });
        }if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
          this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);
        } else {
          if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
            this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);
          } else {
            if (this.prvKey instanceof KJUR.crypto.ECDSA) {
              this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
            } else {
              if (this.prvKey instanceof KJUR.crypto.DSA) {
                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);
              } else {
                throw "Signature: unsupported private key alg: " + this.pubkeyAlgName;
              }
            }
          }
        }return this.hSign;
      };this.signString = function (v) {
        this.updateString(v);return this.sign();
      };this.signHex = function (v) {
        this.updateHex(v);return this.sign();
      };this.verify = function (v) {
        this.sHashHex = this.md.digest();if (this.pubKey === undefined && this.ecpubhex !== undefined && this.eccurvename !== undefined && KJUR.crypto.ECDSA !== undefined) {
          this.pubKey = new KJUR.crypto.ECDSA({ curve: this.eccurvename, pub: this.ecpubhex });
        }if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsaandmgf1") {
          return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);
        } else {
          if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === "rsa") {
            return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
          } else {
            if (KJUR.crypto.ECDSA !== undefined && this.pubKey instanceof KJUR.crypto.ECDSA) {
              return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
            } else {
              if (KJUR.crypto.DSA !== undefined && this.pubKey instanceof KJUR.crypto.DSA) {
                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);
              } else {
                throw "Signature: unsupported public key alg: " + this.pubkeyAlgName;
              }
            }
          }
        }
      };
    }
  };this.init = function (s, t) {
    throw "init(key, pass) not supported for this alg:prov=" + this.algProvName;
  };this.updateString = function (s) {
    throw "updateString(str) not supported for this alg:prov=" + this.algProvName;
  };this.updateHex = function (s) {
    throw "updateHex(hex) not supported for this alg:prov=" + this.algProvName;
  };this.sign = function () {
    throw "sign() not supported for this alg:prov=" + this.algProvName;
  };this.signString = function (s) {
    throw "digestString(str) not supported for this alg:prov=" + this.algProvName;
  };this.signHex = function (s) {
    throw "digestHex(hex) not supported for this alg:prov=" + this.algProvName;
  };this.verify = function (s) {
    throw "verify(hSigVal) not supported for this alg:prov=" + this.algProvName;
  };this.initParams = o;if (o !== undefined) {
    if (o.alg !== undefined) {
      this.algName = o.alg;if (o.prov === undefined) {
        this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];
      } else {
        this.provName = o.prov;
      }this.algProvName = this.algName + ":" + this.provName;this.setAlgAndProvider(this.algName, this.provName);this._setAlgNames();
    }if (o.psssaltlen !== undefined) {
      this.pssSaltLen = o.psssaltlen;
    }if (o.prvkeypem !== undefined) {
      if (o.prvkeypas !== undefined) {
        throw "both prvkeypem and prvkeypas parameters not supported";
      } else {
        try {
          var q = KEYUTIL.getKey(o.prvkeypem);this.init(q);
        } catch (m) {
          throw "fatal error to load pem private key: " + m;
        }
      }
    }
  }
};KJUR.crypto.Cipher = function (a) {};KJUR.crypto.Cipher.encrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPublic) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
      return f.encrypt(e);
    }if (c === "RSAOAEP") {
      return f.encryptOAEP(e, "sha1");
    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
      return f.encryptOAEP(e, "sha" + b[1]);
    }throw "Cipher.encrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.encrypt: unsupported key or algorithm";
  }
};KJUR.crypto.Cipher.decrypt = function (e, f, d) {
  if (f instanceof RSAKey && f.isPrivate) {
    var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);if (c === "RSA") {
      return f.decrypt(e);
    }if (c === "RSAOAEP") {
      return f.decryptOAEP(e, "sha1");
    }var b = c.match(/^RSAOAEP(\d+)$/);if (b !== null) {
      return f.decryptOAEP(e, "sha" + b[1]);
    }throw "Cipher.decrypt: unsupported algorithm for RSAKey: " + d;
  } else {
    throw "Cipher.decrypt: unsupported key or algorithm";
  }
};KJUR.crypto.Cipher.getAlgByKeyAndName = function (b, a) {
  if (b instanceof RSAKey) {
    if (":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(a) != -1) {
      return a;
    }if (a === null || a === undefined) {
      return "RSA";
    }throw "getAlgByKeyAndName: not supported algorithm name for RSAKey: " + a;
  }throw "getAlgByKeyAndName: not supported algorithm name: " + a;
};KJUR.crypto.OID = new function () {
  this.oidhex2name = { "2a864886f70d010101": "rsaEncryption", "2a8648ce3d0201": "ecPublicKey", "2a8648ce380401": "dsa", "2a8648ce3d030107": "secp256r1", "2b8104001f": "secp192k1", "2b81040021": "secp224r1", "2b8104000a": "secp256k1", "2b81040022": "secp384r1", "2b81040023": "secp521r1", "2a8648ce380403": "SHA1withDSA", "608648016503040301": "SHA224withDSA", "608648016503040302": "SHA256withDSA" };
}();

if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.ECDSA = function (e) {
  var g = "secp256r1";var p = null;var b = null;var i = null;var j = Error,
      f = BigInteger,
      h = ECPointFp,
      m = KJUR.crypto.ECDSA,
      c = KJUR.crypto.ECParameterDB,
      d = m.getName,
      q = ASN1HEX,
      n = q.getVbyListEx,
      k = q.isASN1HEX;var a = new SecureRandom();var o = null;this.type = "EC";this.isPrivate = false;this.isPublic = false;function l(x, t, w, s) {
    var r = Math.max(t.bitLength(), s.bitLength());var y = x.add2D(w);var v = x.curve.getInfinity();for (var u = r - 1; u >= 0; --u) {
      v = v.twice2D();v.z = f.ONE;if (t.testBit(u)) {
        if (s.testBit(u)) {
          v = v.add2D(y);
        } else {
          v = v.add2D(x);
        }
      } else {
        if (s.testBit(u)) {
          v = v.add2D(w);
        }
      }
    }return v;
  }this.getBigRandom = function (r) {
    return new f(r.bitLength(), a).mod(r.subtract(f.ONE)).add(f.ONE);
  };this.setNamedCurve = function (r) {
    this.ecparams = c.getByName(r);this.prvKeyHex = null;this.pubKeyHex = null;this.curveName = r;
  };this.setPrivateKeyHex = function (r) {
    this.isPrivate = true;this.prvKeyHex = r;
  };this.setPublicKeyHex = function (r) {
    this.isPublic = true;this.pubKeyHex = r;
  };this.getPublicKeyXYHex = function () {
    var t = this.pubKeyHex;if (t.substr(0, 2) !== "04") {
      throw "this method supports uncompressed format(04) only";
    }var s = this.ecparams.keycharlen;if (t.length !== 2 + s * 2) {
      throw "malformed public key hex length";
    }var r = {};r.x = t.substr(2, s);r.y = t.substr(2 + s);return r;
  };this.getShortNISTPCurveName = function () {
    var r = this.curveName;if (r === "secp256r1" || r === "NIST P-256" || r === "P-256" || r === "prime256v1") {
      return "P-256";
    }if (r === "secp384r1" || r === "NIST P-384" || r === "P-384") {
      return "P-384";
    }if (r === "secp521r1" || r === "NIST P-521" || r === "P-521") {
      return "P-521";
    }return null;
  };this.generateKeyPairHex = function () {
    var s = this.ecparams.n;var u = this.getBigRandom(s);var r = this.ecparams.keycharlen;var t = ("0000000000" + u.toString(16)).slice(-r);this.setPrivateKeyHex(t);var v = this.generatePublicKeyHex();return { ecprvhex: t, ecpubhex: v };
  };this.generatePublicKeyHex = function () {
    var u = new f(this.prvKeyHex, 16);var w = this.ecparams.G.multiply(u);var t = w.getX().toBigInteger();var s = w.getY().toBigInteger();var r = this.ecparams.keycharlen;var y = ("0000000000" + t.toString(16)).slice(-r);var v = ("0000000000" + s.toString(16)).slice(-r);var x = "04" + y + v;this.setPublicKeyHex(x);return x;
  };this.signWithMessageHash = function (r) {
    return this.signHex(r, this.prvKeyHex);
  };this.signHex = function (x, u) {
    var A = new f(u, 16);var v = this.ecparams.n;var z = new f(x.substring(0, this.ecparams.keycharlen), 16);do {
      var w = this.getBigRandom(v);var B = this.ecparams.G;var y = B.multiply(w);var t = y.getX().toBigInteger().mod(v);
    } while (t.compareTo(f.ZERO) <= 0);var C = w.modInverse(v).multiply(z.add(A.multiply(t))).mod(v);return m.biRSSigToASN1Sig(t, C);
  };this.sign = function (w, B) {
    var z = B;var u = this.ecparams.n;var y = f.fromByteArrayUnsigned(w);do {
      var v = this.getBigRandom(u);var A = this.ecparams.G;var x = A.multiply(v);var t = x.getX().toBigInteger().mod(u);
    } while (t.compareTo(BigInteger.ZERO) <= 0);var C = v.modInverse(u).multiply(y.add(z.multiply(t))).mod(u);return this.serializeSig(t, C);
  };this.verifyWithMessageHash = function (s, r) {
    return this.verifyHex(s, r, this.pubKeyHex);
  };this.verifyHex = function (v, y, u) {
    try {
      var t, B;var w = m.parseSigHex(y);t = w.r;B = w.s;var x = h.decodeFromHex(this.ecparams.curve, u);var z = new f(v.substring(0, this.ecparams.keycharlen), 16);return this.verifyRaw(z, t, B, x);
    } catch (A) {
      return false;
    }
  };this.verify = function (z, A, u) {
    var w, t;if (Bitcoin.Util.isArray(A)) {
      var y = this.parseSig(A);w = y.r;t = y.s;
    } else {
      if ("object" === (typeof A === "undefined" ? "undefined" : _typeof(A)) && A.r && A.s) {
        w = A.r;t = A.s;
      } else {
        throw "Invalid value for signature";
      }
    }var v;if (u instanceof ECPointFp) {
      v = u;
    } else {
      if (Bitcoin.Util.isArray(u)) {
        v = h.decodeFrom(this.ecparams.curve, u);
      } else {
        throw "Invalid format for pubkey value, must be byte array or ECPointFp";
      }
    }var x = f.fromByteArrayUnsigned(z);return this.verifyRaw(x, w, t, v);
  };this.verifyRaw = function (z, t, E, y) {
    var x = this.ecparams.n;var D = this.ecparams.G;if (t.compareTo(f.ONE) < 0 || t.compareTo(x) >= 0) {
      return false;
    }if (E.compareTo(f.ONE) < 0 || E.compareTo(x) >= 0) {
      return false;
    }var A = E.modInverse(x);var w = z.multiply(A).mod(x);var u = t.multiply(A).mod(x);var B = D.multiply(w).add(y.multiply(u));var C = B.getX().toBigInteger().mod(x);return C.equals(t);
  };this.serializeSig = function (v, u) {
    var w = v.toByteArraySigned();var t = u.toByteArraySigned();var x = [];x.push(2);x.push(w.length);x = x.concat(w);x.push(2);x.push(t.length);x = x.concat(t);x.unshift(x.length);x.unshift(48);return x;
  };this.parseSig = function (y) {
    var x;if (y[0] != 48) {
      throw new Error("Signature not a valid DERSequence");
    }x = 2;if (y[x] != 2) {
      throw new Error("First element in signature must be a DERInteger");
    }var w = y.slice(x + 2, x + 2 + y[x + 1]);x += 2 + y[x + 1];if (y[x] != 2) {
      throw new Error("Second element in signature must be a DERInteger");
    }var t = y.slice(x + 2, x + 2 + y[x + 1]);x += 2 + y[x + 1];var v = f.fromByteArrayUnsigned(w);var u = f.fromByteArrayUnsigned(t);return { r: v, s: u };
  };this.parseSigCompact = function (w) {
    if (w.length !== 65) {
      throw "Signature has the wrong length";
    }var t = w[0] - 27;if (t < 0 || t > 7) {
      throw "Invalid signature type";
    }var x = this.ecparams.n;var v = f.fromByteArrayUnsigned(w.slice(1, 33)).mod(x);var u = f.fromByteArrayUnsigned(w.slice(33, 65)).mod(x);return { r: v, s: u, i: t };
  };this.readPKCS5PrvKeyHex = function (u) {
    if (k(u) === false) {
      throw new Error("not ASN.1 hex string");
    }var r, t, v;try {
      r = n(u, 0, ["[0]", 0], "06");t = n(u, 0, [1], "04");try {
        v = n(u, 0, ["[1]", 0], "03");
      } catch (s) {}
    } catch (s) {
      throw new Error("malformed PKCS#1/5 plain ECC private key");
    }this.curveName = d(r);if (this.curveName === undefined) {
      throw "unsupported curve name";
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(v);this.setPrivateKeyHex(t);this.isPublic = false;
  };this.readPKCS8PrvKeyHex = function (v) {
    if (k(v) === false) {
      throw new j("not ASN.1 hex string");
    }var t, r, u, w;try {
      t = n(v, 0, [1, 0], "06");r = n(v, 0, [1, 1], "06");u = n(v, 0, [2, 0, 1], "04");try {
        w = n(v, 0, [2, 0, "[1]", 0], "03");
      } catch (s) {}
    } catch (s) {
      throw new j("malformed PKCS#8 plain ECC private key");
    }this.curveName = d(r);if (this.curveName === undefined) {
      throw new j("unsupported curve name");
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(w);this.setPrivateKeyHex(u);this.isPublic = false;
  };this.readPKCS8PubKeyHex = function (u) {
    if (k(u) === false) {
      throw new j("not ASN.1 hex string");
    }var t, r, v;try {
      t = n(u, 0, [0, 0], "06");r = n(u, 0, [0, 1], "06");v = n(u, 0, [1], "03");
    } catch (s) {
      throw new j("malformed PKCS#8 ECC public key");
    }this.curveName = d(r);if (this.curveName === null) {
      throw new j("unsupported curve name");
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(v);
  };this.readCertPubKeyHex = function (t, v) {
    if (k(t) === false) {
      throw new j("not ASN.1 hex string");
    }var r, u;try {
      r = n(t, 0, [0, 5, 0, 1], "06");u = n(t, 0, [0, 5, 1], "03");
    } catch (s) {
      throw new j("malformed X.509 certificate ECC public key");
    }this.curveName = d(r);if (this.curveName === null) {
      throw new j("unsupported curve name");
    }this.setNamedCurve(this.curveName);this.setPublicKeyHex(u);
  };if (e !== undefined) {
    if (e.curve !== undefined) {
      this.curveName = e.curve;
    }
  }if (this.curveName === undefined) {
    this.curveName = g;
  }this.setNamedCurve(this.curveName);if (e !== undefined) {
    if (e.prv !== undefined) {
      this.setPrivateKeyHex(e.prv);
    }if (e.pub !== undefined) {
      this.setPublicKeyHex(e.pub);
    }
  }
};KJUR.crypto.ECDSA.parseSigHex = function (a) {
  var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);var d = new BigInteger(b.r, 16);var c = new BigInteger(b.s, 16);return { r: d, s: c };
};KJUR.crypto.ECDSA.parseSigHexInHexRS = function (f) {
  var j = ASN1HEX,
      i = j.getChildIdx,
      g = j.getV;j.checkStrictDER(f, 0);if (f.substr(0, 2) != "30") {
    throw new Error("signature is not a ASN.1 sequence");
  }var h = i(f, 0);if (h.length != 2) {
    throw new Error("signature shall have two elements");
  }var e = h[0];var d = h[1];if (f.substr(e, 2) != "02") {
    throw new Error("1st item not ASN.1 integer");
  }if (f.substr(d, 2) != "02") {
    throw new Error("2nd item not ASN.1 integer");
  }var c = g(f, e);var b = g(f, d);return { r: c, s: b };
};KJUR.crypto.ECDSA.asn1SigToConcatSig = function (d) {
  var e = KJUR.crypto.ECDSA.parseSigHexInHexRS(d);var b = e.r;var a = e.s;if (b.length >= 130 && b.length <= 134) {
    if (b.length % 2 != 0) {
      throw Error("unknown ECDSA sig r length error");
    }if (a.length % 2 != 0) {
      throw Error("unknown ECDSA sig s length error");
    }if (b.substr(0, 2) == "00") {
      b = b.substr(2);
    }if (a.substr(0, 2) == "00") {
      a = a.substr(2);
    }var c = Math.max(b.length, a.length);b = ("000000" + b).slice(-c);a = ("000000" + a).slice(-c);return b + a;
  }if (b.substr(0, 2) == "00" && b.length % 32 == 2) {
    b = b.substr(2);
  }if (a.substr(0, 2) == "00" && a.length % 32 == 2) {
    a = a.substr(2);
  }if (b.length % 32 == 30) {
    b = "00" + b;
  }if (a.length % 32 == 30) {
    a = "00" + a;
  }if (b.length % 32 != 0) {
    throw Error("unknown ECDSA sig r length error");
  }if (a.length % 32 != 0) {
    throw Error("unknown ECDSA sig s length error");
  }return b + a;
};KJUR.crypto.ECDSA.concatSigToASN1Sig = function (a) {
  if (a.length % 4 != 0) {
    throw Error("unknown ECDSA concatinated r-s sig length error");
  }var c = a.substr(0, a.length / 2);var b = a.substr(a.length / 2);return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);
};KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function (b, a) {
  var d = new BigInteger(b, 16);var c = new BigInteger(a, 16);return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);
};KJUR.crypto.ECDSA.biRSSigToASN1Sig = function (f, d) {
  var c = KJUR.asn1;var b = new c.DERInteger({ bigint: f });var a = new c.DERInteger({ bigint: d });var e = new c.DERSequence({ array: [b, a] });return e.getEncodedHex();
};KJUR.crypto.ECDSA.getName = function (a) {
  if (a === "2b8104001f") {
    return "secp192k1";
  }if (a === "2a8648ce3d030107") {
    return "secp256r1";
  }if (a === "2b8104000a") {
    return "secp256k1";
  }if (a === "2b81040021") {
    return "secp224r1";
  }if (a === "2b81040022") {
    return "secp384r1";
  }if (a === "2b81040023") {
    return "secp521r1";
  }if ("|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(a) !== -1) {
    return "secp256r1";
  }if ("|secp256k1|".indexOf(a) !== -1) {
    return "secp256k1";
  }if ("|secp224r1|NIST P-224|P-224|".indexOf(a) !== -1) {
    return "secp224r1";
  }if ("|secp384r1|NIST P-384|P-384|".indexOf(a) !== -1) {
    return "secp384r1";
  }if ("|secp521r1|NIST P-521|P-521|".indexOf(a) !== -1) {
    return "secp521r1";
  }return null;
};

if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.crypto == "undefined" || !KJUR.crypto) {
  KJUR.crypto = {};
}KJUR.crypto.ECParameterDB = new function () {
  var b = {};var c = {};function a(d) {
    return new BigInteger(d, 16);
  }this.getByName = function (e) {
    var d = e;if (typeof c[d] != "undefined") {
      d = c[e];
    }if (typeof b[d] != "undefined") {
      return b[d];
    }throw "unregistered EC curve name: " + d;
  };this.regist = function (A, l, o, g, m, e, j, f, k, u, d, x) {
    b[A] = {};var s = a(o);var z = a(g);var y = a(m);var t = a(e);var w = a(j);var r = new ECCurveFp(s, z, y);var q = r.decodePointHex("04" + f + k);b[A]["name"] = A;b[A]["keylen"] = l;b[A]["keycharlen"] = Math.ceil(l / 8) * 2;b[A]["curve"] = r;b[A]["G"] = q;b[A]["n"] = t;b[A]["h"] = w;b[A]["oid"] = d;b[A]["info"] = x;for (var v = 0; v < u.length; v++) {
      c[u[v]] = A;
    }
  };
}();KJUR.crypto.ECParameterDB.regist("secp128r1", 128, "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC", "E87579C11079F43DD824993C2CEE5ED3", "FFFFFFFE0000000075A30D1B9038A115", "1", "161FF7528B899B2D0C28607CA52C5B86", "CF5AC8395BAFEB13C02DA292DDED7A83", [], "", "secp128r1 : SECG curve over a 128 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160k1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73", "0", "7", "0100000000000000000001B8FA16DFAB9ACA16B6B3", "1", "3B4C382CE37AA192A4019E763036F4F5DD4D7EBB", "938CF935318FDCED6BC28286531733C3F03C4FEE", [], "", "secp160k1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp160r1", 160, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC", "1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45", "0100000000000000000001F4C8F927AED3CA752257", "1", "4A96B5688EF573284664698968C38BB913CBFC82", "23A628553168947D59DCC912042351377AC5FB32", [], "", "secp160r1 : SECG curve over a 160 bit prime field");KJUR.crypto.ECParameterDB.regist("secp192k1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37", "0", "3", "FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D", "1", "DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D", "9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D", []);KJUR.crypto.ECParameterDB.regist("secp192r1", 192, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC", "64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1", "FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831", "1", "188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012", "07192B95FFC8DA78631011ED6B24CDD573F977A11E794811", []);KJUR.crypto.ECParameterDB.regist("secp224r1", 224, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE", "B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D", "1", "B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21", "BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34", []);KJUR.crypto.ECParameterDB.regist("secp256k1", 256, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F", "0", "7", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141", "1", "79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798", "483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8", []);KJUR.crypto.ECParameterDB.regist("secp256r1", 256, "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF", "FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC", "5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B", "FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551", "1", "6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296", "4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5", ["NIST P-256", "P-256", "prime256v1"]);KJUR.crypto.ECParameterDB.regist("secp384r1", 384, "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC", "B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973", "1", "AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7", "3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", ["NIST P-384", "P-384"]);KJUR.crypto.ECParameterDB.regist("secp521r1", 521, "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC", "051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00", "1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409", "1", "00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66", "011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", ["NIST P-521", "P-521"]);

var KEYUTIL = function () {
  var d = function d(p, r, q) {
    return k(CryptoJS.AES, p, r, q);
  };var e = function e(p, r, q) {
    return k(CryptoJS.TripleDES, p, r, q);
  };var a = function a(p, r, q) {
    return k(CryptoJS.DES, p, r, q);
  };var k = function k(s, x, u, q) {
    var r = CryptoJS.enc.Hex.parse(x);var w = CryptoJS.enc.Hex.parse(u);var p = CryptoJS.enc.Hex.parse(q);var t = {};t.key = w;t.iv = p;t.ciphertext = r;var v = s.decrypt(t, w, { iv: p });return CryptoJS.enc.Hex.stringify(v);
  };var l = function l(p, r, q) {
    return g(CryptoJS.AES, p, r, q);
  };var o = function o(p, r, q) {
    return g(CryptoJS.TripleDES, p, r, q);
  };var f = function f(p, r, q) {
    return g(CryptoJS.DES, p, r, q);
  };var g = function g(t, y, v, q) {
    var s = CryptoJS.enc.Hex.parse(y);var x = CryptoJS.enc.Hex.parse(v);var p = CryptoJS.enc.Hex.parse(q);var w = t.encrypt(s, x, { iv: p });var r = CryptoJS.enc.Hex.parse(w.toString());var u = CryptoJS.enc.Base64.stringify(r);return u;
  };var i = { "AES-256-CBC": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, "AES-192-CBC": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, "AES-128-CBC": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, "DES-EDE3-CBC": { proc: e, eproc: o, keylen: 24, ivlen: 8 }, "DES-CBC": { proc: a, eproc: f, keylen: 8, ivlen: 8 } };var c = function c(p) {
    return i[p]["proc"];
  };var m = function m(p) {
    var r = CryptoJS.lib.WordArray.random(p);var q = CryptoJS.enc.Hex.stringify(r);return q;
  };var n = function n(v) {
    var w = {};var q = v.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)", "m"));if (q) {
      w.cipher = q[1];w.ivsalt = q[2];
    }var p = v.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));if (p) {
      w.type = p[1];
    }var u = -1;var x = 0;if (v.indexOf("\r\n\r\n") != -1) {
      u = v.indexOf("\r\n\r\n");x = 2;
    }if (v.indexOf("\n\n") != -1) {
      u = v.indexOf("\n\n");x = 1;
    }var t = v.indexOf("-----END");if (u != -1 && t != -1) {
      var r = v.substring(u + x * 2, t - x);r = r.replace(/\s+/g, "");w.data = r;
    }return w;
  };var j = function j(q, y, p) {
    var v = p.substring(0, 16);var t = CryptoJS.enc.Hex.parse(v);var r = CryptoJS.enc.Utf8.parse(y);var u = i[q]["keylen"] + i[q]["ivlen"];var x = "";var w = null;for (;;) {
      var s = CryptoJS.algo.MD5.create();if (w != null) {
        s.update(w);
      }s.update(r);s.update(t);w = s.finalize();x = x + CryptoJS.enc.Hex.stringify(w);if (x.length >= u * 2) {
        break;
      }
    }var z = {};z.keyhex = x.substr(0, i[q]["keylen"] * 2);z.ivhex = x.substr(i[q]["keylen"] * 2, i[q]["ivlen"] * 2);return z;
  };var b = function b(p, v, r, w) {
    var s = CryptoJS.enc.Base64.parse(p);var q = CryptoJS.enc.Hex.stringify(s);var u = i[v]["proc"];var t = u(q, r, w);return t;
  };var h = function h(p, s, q, u) {
    var r = i[s]["eproc"];var t = r(p, q, u);return t;
  };return { version: "1.0.0", parsePKCS5PEM: function parsePKCS5PEM(p) {
      return n(p);
    }, getKeyAndUnusedIvByPasscodeAndIvsalt: function getKeyAndUnusedIvByPasscodeAndIvsalt(q, p, r) {
      return j(q, p, r);
    }, decryptKeyB64: function decryptKeyB64(p, r, q, s) {
      return b(p, r, q, s);
    }, getDecryptedKeyHex: function getDecryptedKeyHex(y, x) {
      var q = n(y);var t = q.type;var r = q.cipher;var p = q.ivsalt;var s = q.data;var w = j(r, x, p);var v = w.keyhex;var u = b(s, r, v, p);return u;
    }, getEncryptedPKCS5PEMFromPrvKeyHex: function getEncryptedPKCS5PEMFromPrvKeyHex(x, s, A, t, r) {
      var p = "";if (typeof t == "undefined" || t == null) {
        t = "AES-256-CBC";
      }if (typeof i[t] == "undefined") {
        throw new Error("KEYUTIL unsupported algorithm: " + t);
      }if (typeof r == "undefined" || r == null) {
        var v = i[t]["ivlen"];var u = m(v);r = u.toUpperCase();
      }var z = j(t, A, r);var y = z.keyhex;var w = h(s, t, y, r);var q = w.replace(/(.{64})/g, "$1\r\n");var p = "-----BEGIN " + x + " PRIVATE KEY-----\r\n";p += "Proc-Type: 4,ENCRYPTED\r\n";p += "DEK-Info: " + t + "," + r + "\r\n";p += "\r\n";p += q;p += "\r\n-----END " + x + " PRIVATE KEY-----\r\n";return p;
    }, parseHexOfEncryptedPKCS8: function parseHexOfEncryptedPKCS8(y) {
      var B = ASN1HEX;var z = B.getChildIdx;var w = B.getV;var t = {};var r = z(y, 0);if (r.length != 2) {
        throw new Error("malformed format: SEQUENCE(0).items != 2: " + r.length);
      }t.ciphertext = w(y, r[1]);var A = z(y, r[0]);if (A.length != 2) {
        throw new Error("malformed format: SEQUENCE(0.0).items != 2: " + A.length);
      }if (w(y, A[0]) != "2a864886f70d01050d") {
        throw new Error("this only supports pkcs5PBES2");
      }var p = z(y, A[1]);if (A.length != 2) {
        throw new Error("malformed format: SEQUENCE(0.0.1).items != 2: " + p.length);
      }var q = z(y, p[1]);if (q.length != 2) {
        throw new Error("malformed format: SEQUENCE(0.0.1.1).items != 2: " + q.length);
      }if (w(y, q[0]) != "2a864886f70d0307") {
        throw "this only supports TripleDES";
      }t.encryptionSchemeAlg = "TripleDES";t.encryptionSchemeIV = w(y, q[1]);var s = z(y, p[0]);if (s.length != 2) {
        throw new Error("malformed format: SEQUENCE(0.0.1.0).items != 2: " + s.length);
      }if (w(y, s[0]) != "2a864886f70d01050c") {
        throw new Error("this only supports pkcs5PBKDF2");
      }var x = z(y, s[1]);if (x.length < 2) {
        throw new Error("malformed format: SEQUENCE(0.0.1.0.1).items < 2: " + x.length);
      }t.pbkdf2Salt = w(y, x[0]);var u = w(y, x[1]);try {
        t.pbkdf2Iter = parseInt(u, 16);
      } catch (v) {
        throw new Error("malformed format pbkdf2Iter: " + u);
      }return t;
    }, getPBKDF2KeyHexFromParam: function getPBKDF2KeyHexFromParam(u, p) {
      var t = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);var q = u.pbkdf2Iter;var s = CryptoJS.PBKDF2(p, t, { keySize: 192 / 32, iterations: q });var r = CryptoJS.enc.Hex.stringify(s);return r;
    }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function _getPlainPKCS8HexFromEncryptedPKCS8PEM(x, y) {
      var r = pemtohex(x, "ENCRYPTED PRIVATE KEY");var p = this.parseHexOfEncryptedPKCS8(r);var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);var v = {};v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);var t = CryptoJS.enc.Hex.parse(u);var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);var w = CryptoJS.TripleDES.decrypt(v, t, { iv: s });var q = CryptoJS.enc.Hex.stringify(w);return q;
    }, getKeyFromEncryptedPKCS8PEM: function getKeyFromEncryptedPKCS8PEM(s, q) {
      var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
    }, parsePlainPrivatePKCS8Hex: function parsePlainPrivatePKCS8Hex(s) {
      var v = ASN1HEX;var u = v.getChildIdx;var t = v.getV;var q = {};q.algparam = null;if (s.substr(0, 2) != "30") {
        throw new Error("malformed plain PKCS8 private key(code:001)");
      }var r = u(s, 0);if (r.length < 3) {
        throw new Error("malformed plain PKCS8 private key(code:002)");
      }if (s.substr(r[1], 2) != "30") {
        throw new Error("malformed PKCS8 private key(code:003)");
      }var p = u(s, r[1]);if (p.length != 2) {
        throw new Error("malformed PKCS8 private key(code:004)");
      }if (s.substr(p[0], 2) != "06") {
        throw new Error("malformed PKCS8 private key(code:005)");
      }q.algoid = t(s, p[0]);if (s.substr(p[1], 2) == "06") {
        q.algparam = t(s, p[1]);
      }if (s.substr(r[2], 2) != "04") {
        throw new Error("malformed PKCS8 private key(code:006)");
      }q.keyidx = v.getVidx(s, r[2]);return q;
    }, getKeyFromPlainPrivatePKCS8PEM: function getKeyFromPlainPrivatePKCS8PEM(q) {
      var p = pemtohex(q, "PRIVATE KEY");var r = this.getKeyFromPlainPrivatePKCS8Hex(p);return r;
    }, getKeyFromPlainPrivatePKCS8Hex: function getKeyFromPlainPrivatePKCS8Hex(p) {
      var q = this.parsePlainPrivatePKCS8Hex(p);var r;if (q.algoid == "2a864886f70d010101") {
        r = new RSAKey();
      } else {
        if (q.algoid == "2a8648ce380401") {
          r = new KJUR.crypto.DSA();
        } else {
          if (q.algoid == "2a8648ce3d0201") {
            r = new KJUR.crypto.ECDSA();
          } else {
            throw new Error("unsupported private key algorithm");
          }
        }
      }r.readPKCS8PrvKeyHex(p);return r;
    }, _getKeyFromPublicPKCS8Hex: function _getKeyFromPublicPKCS8Hex(q) {
      var p;var r = ASN1HEX.getVbyList(q, 0, [0, 0], "06");if (r === "2a864886f70d010101") {
        p = new RSAKey();
      } else {
        if (r === "2a8648ce380401") {
          p = new KJUR.crypto.DSA();
        } else {
          if (r === "2a8648ce3d0201") {
            p = new KJUR.crypto.ECDSA();
          } else {
            throw new Error("unsupported PKCS#8 public key hex");
          }
        }
      }p.readPKCS8PubKeyHex(q);return p;
    }, parsePublicRawRSAKeyHex: function parsePublicRawRSAKeyHex(r) {
      var u = ASN1HEX;var t = u.getChildIdx;var s = u.getV;var p = {};if (r.substr(0, 2) != "30") {
        throw new Error("malformed RSA key(code:001)");
      }var q = t(r, 0);if (q.length != 2) {
        throw new Error("malformed RSA key(code:002)");
      }if (r.substr(q[0], 2) != "02") {
        throw new Error("malformed RSA key(code:003)");
      }p.n = s(r, q[0]);if (r.substr(q[1], 2) != "02") {
        throw new Error("malformed RSA key(code:004)");
      }p.e = s(r, q[1]);return p;
    }, parsePublicPKCS8Hex: function parsePublicPKCS8Hex(t) {
      var v = ASN1HEX;var u = v.getChildIdx;var s = v.getV;var q = {};q.algparam = null;var r = u(t, 0);if (r.length != 2) {
        throw new Error("outer DERSequence shall have 2 elements: " + r.length);
      }var w = r[0];if (t.substr(w, 2) != "30") {
        throw new Error("malformed PKCS8 public key(code:001)");
      }var p = u(t, w);if (p.length != 2) {
        throw new Error("malformed PKCS8 public key(code:002)");
      }if (t.substr(p[0], 2) != "06") {
        throw new Error("malformed PKCS8 public key(code:003)");
      }q.algoid = s(t, p[0]);if (t.substr(p[1], 2) == "06") {
        q.algparam = s(t, p[1]);
      } else {
        if (t.substr(p[1], 2) == "30") {
          q.algparam = {};q.algparam.p = v.getVbyList(t, p[1], [0], "02");q.algparam.q = v.getVbyList(t, p[1], [1], "02");q.algparam.g = v.getVbyList(t, p[1], [2], "02");
        }
      }if (t.substr(r[1], 2) != "03") {
        throw new Error("malformed PKCS8 public key(code:004)");
      }q.key = s(t, r[1]).substr(2);return q;
    } };
}();KEYUTIL.getKey = function (l, k, n) {
  var G = ASN1HEX,
      L = G.getChildIdx,
      v = G.getV,
      d = G.getVbyList,
      c = KJUR.crypto,
      i = c.ECDSA,
      C = c.DSA,
      w = RSAKey,
      M = pemtohex,
      F = KEYUTIL;if (typeof w != "undefined" && l instanceof w) {
    return l;
  }if (typeof i != "undefined" && l instanceof i) {
    return l;
  }if (typeof C != "undefined" && l instanceof C) {
    return l;
  }if (l.curve !== undefined && l.xy !== undefined && l.d === undefined) {
    return new i({ pub: l.xy, curve: l.curve });
  }if (l.curve !== undefined && l.d !== undefined) {
    return new i({ prv: l.d, curve: l.curve });
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();P.setPublic(l.n, l.e);return P;
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.co !== undefined && l.qi === undefined) {
    var P = new w();P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);return P;
  }if (l.kty === undefined && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p === undefined) {
    var P = new w();P.setPrivate(l.n, l.e, l.d);return P;
  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x === undefined) {
    var P = new C();P.setPublic(l.p, l.q, l.g, l.y);return P;
  }if (l.p !== undefined && l.q !== undefined && l.g !== undefined && l.y !== undefined && l.x !== undefined) {
    var P = new C();P.setPrivate(l.p, l.q, l.g, l.y, l.x);return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d === undefined) {
    var P = new w();P.setPublic(b64utohex(l.n), b64utohex(l.e));return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined && l.p !== undefined && l.q !== undefined && l.dp !== undefined && l.dq !== undefined && l.qi !== undefined) {
    var P = new w();P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));return P;
  }if (l.kty === "RSA" && l.n !== undefined && l.e !== undefined && l.d !== undefined) {
    var P = new w();P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));return P;
  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d === undefined) {
    var j = new i({ curve: l.crv });var t = j.ecparams.keycharlen;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;j.setPublicKeyHex(u);return j;
  }if (l.kty === "EC" && l.crv !== undefined && l.x !== undefined && l.y !== undefined && l.d !== undefined) {
    var j = new i({ curve: l.crv });var t = j.ecparams.keycharlen;var B = ("0000000000" + b64utohex(l.x)).slice(-t);var z = ("0000000000" + b64utohex(l.y)).slice(-t);var u = "04" + B + z;var b = ("0000000000" + b64utohex(l.d)).slice(-t);j.setPublicKeyHex(u);j.setPrivateKeyHex(b);return j;
  }if (n === "pkcs5prv") {
    var J = l,
        G = ASN1HEX,
        N,
        P;N = L(J, 0);if (N.length === 9) {
      P = new w();P.readPKCS5PrvKeyHex(J);
    } else {
      if (N.length === 6) {
        P = new C();P.readPKCS5PrvKeyHex(J);
      } else {
        if (N.length > 2 && J.substr(N[1], 2) === "04") {
          P = new i();P.readPKCS5PrvKeyHex(J);
        } else {
          throw new Error("unsupported PKCS#1/5 hexadecimal key");
        }
      }
    }return P;
  }if (n === "pkcs8prv") {
    var P = F.getKeyFromPlainPrivatePKCS8Hex(l);return P;
  }if (n === "pkcs8pub") {
    return F._getKeyFromPublicPKCS8Hex(l);
  }if (n === "x509pub") {
    return X509.getPublicKeyFromCertHex(l);
  }if (l.indexOf("-END CERTIFICATE-", 0) != -1 || l.indexOf("-END X509 CERTIFICATE-", 0) != -1 || l.indexOf("-END TRUSTED CERTIFICATE-", 0) != -1) {
    return X509.getPublicKeyFromCertPEM(l);
  }if (l.indexOf("-END PUBLIC KEY-") != -1) {
    var O = pemtohex(l, "PUBLIC KEY");return F._getKeyFromPublicPKCS8Hex(O);
  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "RSA PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var I = M(l, "DSA PRIVATE KEY");var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") == -1) {
    var m = M(l, "EC PRIVATE KEY");return F.getKey(m, null, "pkcs5prv");
  }if (l.indexOf("-END PRIVATE KEY-") != -1) {
    return F.getKeyFromPlainPrivatePKCS8PEM(l);
  }if (l.indexOf("-END RSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var o = F.getDecryptedKeyHex(l, k);var H = new RSAKey();H.readPKCS5PrvKeyHex(o);return H;
  }if (l.indexOf("-END EC PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);var P = d(I, 0, [1], "04");var f = d(I, 0, [2, 0], "06");var A = d(I, 0, [3, 0], "03").substr(2);var e = "";if (KJUR.crypto.OID.oidhex2name[f] !== undefined) {
      e = KJUR.crypto.OID.oidhex2name[f];
    } else {
      throw new Error("undefined OID(hex) in KJUR.crypto.OID: " + f);
    }var j = new i({ curve: e });j.setPublicKeyHex(A);j.setPrivateKeyHex(P);j.isPublic = false;return j;
  }if (l.indexOf("-END DSA PRIVATE KEY-") != -1 && l.indexOf("4,ENCRYPTED") != -1) {
    var I = F.getDecryptedKeyHex(l, k);var E = d(I, 0, [1], "02");var D = d(I, 0, [2], "02");var K = d(I, 0, [3], "02");var r = d(I, 0, [4], "02");var s = d(I, 0, [5], "02");var P = new C();P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r, 16), new BigInteger(s, 16));return P;
  }if (l.indexOf("-END ENCRYPTED PRIVATE KEY-") != -1) {
    return F.getKeyFromEncryptedPKCS8PEM(l, k);
  }throw new Error("not supported argument");
};KEYUTIL.generateKeypair = function (a, c) {
  if (a == "RSA") {
    var b = c;var h = new RSAKey();h.generate(b, "10001");h.isPrivate = true;h.isPublic = true;var f = new RSAKey();var e = h.n.toString(16);var i = h.e.toString(16);f.setPublic(e, i);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
  } else {
    if (a == "EC") {
      var d = c;var g = new KJUR.crypto.ECDSA({ curve: d });var j = g.generateKeyPairHex();var h = new KJUR.crypto.ECDSA({ curve: d });h.setPublicKeyHex(j.ecpubhex);h.setPrivateKeyHex(j.ecprvhex);h.isPrivate = true;h.isPublic = false;var f = new KJUR.crypto.ECDSA({ curve: d });f.setPublicKeyHex(j.ecpubhex);f.isPrivate = false;f.isPublic = true;var k = {};k.prvKeyObj = h;k.pubKeyObj = f;return k;
    } else {
      throw new Error("unknown algorithm: " + a);
    }
  }
};KEYUTIL.getPEM = function (b, D, y, m, q, j) {
  var F = KJUR,
      k = F.asn1,
      z = k.DERObjectIdentifier,
      f = k.DERInteger,
      l = k.ASN1Util.newObject,
      a = k.x509,
      C = a.SubjectPublicKeyInfo,
      e = F.crypto,
      u = e.DSA,
      r = e.ECDSA,
      n = RSAKey;function A(s) {
    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.n } }, { "int": s.e }, { "int": { bigint: s.d } }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.dmp1 } }, { "int": { bigint: s.dmq1 } }, { "int": { bigint: s.coeff } }] });return G;
  }function B(G) {
    var s = l({ seq: [{ "int": 1 }, { octstr: { hex: G.prvKeyHex } }, { tag: ["a0", true, { oid: { name: G.curveName } }] }, { tag: ["a1", true, { bitstr: { hex: "00" + G.pubKeyHex } }] }] });return s;
  }function x(s) {
    var G = l({ seq: [{ "int": 0 }, { "int": { bigint: s.p } }, { "int": { bigint: s.q } }, { "int": { bigint: s.g } }, { "int": { bigint: s.y } }, { "int": { bigint: s.x } }] });return G;
  }if ((n !== undefined && b instanceof n || u !== undefined && b instanceof u || r !== undefined && b instanceof r) && b.isPublic == true && (D === undefined || D == "PKCS8PUB")) {
    var E = new C(b);var w = E.getEncodedHex();return hextopem(w, "PUBLIC KEY");
  }if (D == "PKCS1PRV" && n !== undefined && b instanceof n && (y === undefined || y == null) && b.isPrivate == true) {
    var E = A(b);var w = E.getEncodedHex();return hextopem(w, "RSA PRIVATE KEY");
  }if (D == "PKCS1PRV" && r !== undefined && b instanceof r && (y === undefined || y == null) && b.isPrivate == true) {
    var i = new z({ name: b.curveName });var v = i.getEncodedHex();var h = B(b);var t = h.getEncodedHex();var p = "";p += hextopem(v, "EC PARAMETERS");p += hextopem(t, "EC PRIVATE KEY");return p;
  }if (D == "PKCS1PRV" && u !== undefined && b instanceof u && (y === undefined || y == null) && b.isPrivate == true) {
    var E = x(b);var w = E.getEncodedHex();return hextopem(w, "DSA PRIVATE KEY");
  }if (D == "PKCS5PRV" && n !== undefined && b instanceof n && y !== undefined && y != null && b.isPrivate == true) {
    var E = A(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA", w, y, m, j);
  }if (D == "PKCS5PRV" && r !== undefined && b instanceof r && y !== undefined && y != null && b.isPrivate == true) {
    var E = B(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("EC", w, y, m, j);
  }if (D == "PKCS5PRV" && u !== undefined && b instanceof u && y !== undefined && y != null && b.isPrivate == true) {
    var E = x(b);var w = E.getEncodedHex();if (m === undefined) {
      m = "DES-EDE3-CBC";
    }return this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA", w, y, m, j);
  }var o = function o(G, s) {
    var I = c(G, s);var H = new l({ seq: [{ seq: [{ oid: { name: "pkcs5PBES2" } }, { seq: [{ seq: [{ oid: { name: "pkcs5PBKDF2" } }, { seq: [{ octstr: { hex: I.pbkdf2Salt } }, { "int": I.pbkdf2Iter }] }] }, { seq: [{ oid: { name: "des-EDE3-CBC" } }, { octstr: { hex: I.encryptionSchemeIV } }] }] }] }, { octstr: { hex: I.ciphertext } }] });return H.getEncodedHex();
  };var c = function c(N, O) {
    var H = 100;var M = CryptoJS.lib.WordArray.random(8);var L = "DES-EDE3-CBC";var s = CryptoJS.lib.WordArray.random(8);var I = CryptoJS.PBKDF2(O, M, { keySize: 192 / 32, iterations: H });var J = CryptoJS.enc.Hex.parse(N);var K = CryptoJS.TripleDES.encrypt(J, I, { iv: s }) + "";var G = {};G.ciphertext = K;G.pbkdf2Salt = CryptoJS.enc.Hex.stringify(M);G.pbkdf2Iter = H;G.encryptionSchemeAlg = L;G.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);return G;
  };if (D == "PKCS8PRV" && n != undefined && b instanceof n && b.isPrivate == true) {
    var g = A(b);var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "rsaEncryption" } }, { "null": true }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }if (D == "PKCS8PRV" && r !== undefined && b instanceof r && b.isPrivate == true) {
    var g = new l({ seq: [{ "int": 1 }, { octstr: { hex: b.prvKeyHex } }, { tag: ["a1", true, { bitstr: { hex: "00" + b.pubKeyHex } }] }] });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "ecPublicKey" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }if (D == "PKCS8PRV" && u !== undefined && b instanceof u && b.isPrivate == true) {
    var g = new f({ bigint: b.x });var d = g.getEncodedHex();var E = l({ seq: [{ "int": 0 }, { seq: [{ oid: { name: "dsa" } }, { seq: [{ "int": { bigint: b.p } }, { "int": { bigint: b.q } }, { "int": { bigint: b.g } }] }] }, { octstr: { hex: d } }] });var w = E.getEncodedHex();if (y === undefined || y == null) {
      return hextopem(w, "PRIVATE KEY");
    } else {
      var t = o(w, y);return hextopem(t, "ENCRYPTED PRIVATE KEY");
    }
  }throw new Error("unsupported object nor format");
};KEYUTIL.getKeyFromCSRPEM = function (b) {
  var a = pemtohex(b, "CERTIFICATE REQUEST");var c = KEYUTIL.getKeyFromCSRHex(a);return c;
};KEYUTIL.getKeyFromCSRHex = function (a) {
  var c = KEYUTIL.parseCSRHex(a);var b = KEYUTIL.getKey(c.p8pubkeyhex, null, "pkcs8pub");return b;
};KEYUTIL.parseCSRHex = function (d) {
  var i = ASN1HEX;var f = i.getChildIdx;var c = i.getTLV;var b = {};var g = d;if (g.substr(0, 2) != "30") {
    throw new Error("malformed CSR(code:001)");
  }var e = f(g, 0);if (e.length < 1) {
    throw new Error("malformed CSR(code:002)");
  }if (g.substr(e[0], 2) != "30") {
    throw new Error("malformed CSR(code:003)");
  }var a = f(g, e[0]);if (a.length < 3) {
    throw new Error("malformed CSR(code:004)");
  }b.p8pubkeyhex = c(g, a[2]);return b;
};KEYUTIL.getKeyID = function (f) {
  var c = KEYUTIL;var e = ASN1HEX;if (typeof f === "string" && f.indexOf("BEGIN ") != -1) {
    f = c.getKey(f);
  }var d = pemtohex(c.getPEM(f));var b = e.getIdxbyList(d, 0, [1]);var a = e.getV(d, b).substring(2);return KJUR.crypto.Util.hashHex(a, "sha1");
};KEYUTIL.getJWK = function (d, h, g, b, f) {
  var i;var k = {};var e;var c = KJUR.crypto.Util.hashHex;if (typeof d == "string") {
    i = KEYUTIL.getKey(d);if (d.indexOf("CERTIFICATE") != -1) {
      e = pemtohex(d);
    }
  } else {
    if ((typeof d === "undefined" ? "undefined" : _typeof(d)) == "object") {
      if (d instanceof X509) {
        i = d.getPublicKey();e = d.hex;
      } else {
        i = d;
      }
    } else {
      throw new Error("unsupported keyinfo type");
    }
  }if (i instanceof RSAKey && i.isPrivate) {
    k.kty = "RSA";k.n = hextob64u(i.n.toString(16));k.e = hextob64u(i.e.toString(16));k.d = hextob64u(i.d.toString(16));k.p = hextob64u(i.p.toString(16));k.q = hextob64u(i.q.toString(16));k.dp = hextob64u(i.dmp1.toString(16));k.dq = hextob64u(i.dmq1.toString(16));k.qi = hextob64u(i.coeff.toString(16));
  } else {
    if (i instanceof RSAKey && i.isPublic) {
      k.kty = "RSA";k.n = hextob64u(i.n.toString(16));k.e = hextob64u(i.e.toString(16));
    } else {
      if (i instanceof KJUR.crypto.ECDSA && i.isPrivate) {
        var a = i.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384" && a !== "P-521") {
          throw new Error("unsupported curve name for JWT: " + a);
        }var j = i.getPublicKeyXYHex();k.kty = "EC";k.crv = a;k.x = hextob64u(j.x);k.y = hextob64u(j.y);k.d = hextob64u(i.prvKeyHex);
      } else {
        if (i instanceof KJUR.crypto.ECDSA && i.isPublic) {
          var a = i.getShortNISTPCurveName();if (a !== "P-256" && a !== "P-384" && a !== "P-521") {
            throw new Error("unsupported curve name for JWT: " + a);
          }var j = i.getPublicKeyXYHex();k.kty = "EC";k.crv = a;k.x = hextob64u(j.x);k.y = hextob64u(j.y);
        }
      }
    }
  }if (k.kty == undefined) {
    throw new Error("unsupported keyinfo");
  }if (!i.isPrivate && h != true) {
    k.kid = KJUR.jws.JWS.getJWKthumbprint(k);
  }if (e != undefined && g != true) {
    k.x5c = [hex2b64(e)];
  }if (e != undefined && b != true) {
    k.x5t = b64tob64u(hex2b64(c(e, "sha1")));
  }if (e != undefined && f != true) {
    k["x5t#S256"] = b64tob64u(hex2b64(c(e, "sha256")));
  }return k;
};KEYUTIL.getJWKFromKey = function (a) {
  return KEYUTIL.getJWK(a, true, true, true, true);
};

RSAKey.getPosArrayOfChildrenFromHex = function (a) {
  return ASN1HEX.getChildIdx(a, 0);
};RSAKey.getHexValueArrayOfChildrenFromHex = function (f) {
  var n = ASN1HEX;var i = n.getV;var k = RSAKey.getPosArrayOfChildrenFromHex(f);var e = i(f, k[0]);var j = i(f, k[1]);var b = i(f, k[2]);var c = i(f, k[3]);var h = i(f, k[4]);var g = i(f, k[5]);var m = i(f, k[6]);var l = i(f, k[7]);var d = i(f, k[8]);var k = new Array();k.push(e, j, b, c, h, g, m, l, d);return k;
};RSAKey.prototype.readPrivateKeyFromPEMString = function (d) {
  var c = pemtohex(d);var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};RSAKey.prototype.readPKCS5PrvKeyHex = function (c) {
  var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);
};RSAKey.prototype.readPKCS8PrvKeyHex = function (e) {
  var c, i, k, b, a, f, d, j;var m = ASN1HEX;var l = m.getVbyListEx;if (m.isASN1HEX(e) === false) {
    throw new Error("not ASN.1 hex string");
  }try {
    c = l(e, 0, [2, 0, 1], "02");i = l(e, 0, [2, 0, 2], "02");k = l(e, 0, [2, 0, 3], "02");b = l(e, 0, [2, 0, 4], "02");a = l(e, 0, [2, 0, 5], "02");f = l(e, 0, [2, 0, 6], "02");d = l(e, 0, [2, 0, 7], "02");j = l(e, 0, [2, 0, 8], "02");
  } catch (g) {
    throw new Error("malformed PKCS#8 plain RSA private key");
  }this.setPrivateEx(c, i, k, b, a, f, d, j);
};RSAKey.prototype.readPKCS5PubKeyHex = function (c) {
  var e = ASN1HEX;var b = e.getV;if (e.isASN1HEX(c) === false) {
    throw new Error("keyHex is not ASN.1 hex string");
  }var a = e.getChildIdx(c, 0);if (a.length !== 2 || c.substr(a[0], 2) !== "02" || c.substr(a[1], 2) !== "02") {
    throw new Error("wrong hex for PKCS#5 public key");
  }var f = b(c, a[0]);var d = b(c, a[1]);this.setPublic(f, d);
};RSAKey.prototype.readPKCS8PubKeyHex = function (b) {
  var c = ASN1HEX;if (c.isASN1HEX(b) === false) {
    throw new Error("not ASN.1 hex string");
  }if (c.getTLVbyListEx(b, 0, [0, 0]) !== "06092a864886f70d010101") {
    throw new Error("not PKCS8 RSA public key");
  }var a = c.getTLVbyListEx(b, 0, [1, 0]);this.readPKCS5PubKeyHex(a);
};RSAKey.prototype.readCertPubKeyHex = function (b, d) {
  var a, c;a = new X509();a.readCertHex(b);c = a.getPublicKeyHex();this.readPKCS8PubKeyHex(c);
};

var _RE_HEXDECONLY = new RegExp("[^0-9a-f]", "gi");function _rsasign_getHexPaddedDigestInfoForString(d, e, a) {
  var b = function b(f) {
    return KJUR.crypto.Util.hashString(f, a);
  };var c = b(d);return KJUR.crypto.Util.getPaddedDigestInfoHex(c, a, e);
}function _zeroPaddingOfSignature(e, d) {
  var c = "";var a = d / 4 - e.length;for (var b = 0; b < a; b++) {
    c = c + "0";
  }return c + e;
}RSAKey.prototype.sign = function (d, a) {
  var b = function b(e) {
    return KJUR.crypto.Util.hashString(e, a);
  };var c = b(d);return this.signWithMessageHash(c, a);
};RSAKey.prototype.signWithMessageHash = function (e, c) {
  var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e, c, this.n.bitLength());var b = parseBigInt(f, 16);var d = this.doPrivate(b);var a = d.toString(16);return _zeroPaddingOfSignature(a, this.n.bitLength());
};function pss_mgf1_str(c, a, e) {
  var b = "",
      d = 0;while (b.length < a) {
    b += hextorstr(e(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));d += 1;
  }return b;
}RSAKey.prototype.signPSS = function (e, a, d) {
  var c = function c(f) {
    return KJUR.crypto.Util.hashHex(f, a);
  };var b = c(rstrtohex(e));if (d === undefined) {
    d = -1;
  }return this.signWithMessageHashPSS(b, a, d);
};RSAKey.prototype.signWithMessageHashPSS = function (l, a, k) {
  var b = hextorstr(l);var g = b.length;var m = this.n.bitLength() - 1;var c = Math.ceil(m / 8);var d;var o = function o(i) {
    return KJUR.crypto.Util.hashHex(i, a);
  };if (k === -1 || k === undefined) {
    k = g;
  } else {
    if (k === -2) {
      k = c - g - 2;
    } else {
      if (k < -2) {
        throw new Error("invalid salt length");
      }
    }
  }if (c < g + k + 2) {
    throw new Error("data too long");
  }var f = "";if (k > 0) {
    f = new Array(k);new SecureRandom().nextBytes(f);f = String.fromCharCode.apply(String, f);
  }var n = hextorstr(o(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + b + f)));var j = [];for (d = 0; d < c - k - g - 2; d += 1) {
    j[d] = 0;
  }var e = String.fromCharCode.apply(String, j) + "\x01" + f;var h = pss_mgf1_str(n, e.length, o);var q = [];for (d = 0; d < e.length; d += 1) {
    q[d] = e.charCodeAt(d) ^ h.charCodeAt(d);
  }var p = 65280 >> 8 * c - m & 255;q[0] &= ~p;for (d = 0; d < g; d++) {
    q.push(n.charCodeAt(d));
  }q.push(188);return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());
};function _rsasign_getDecryptSignatureBI(a, d, c) {
  var b = new RSAKey();b.setPublic(d, c);var e = b.doPublic(a);return e;
}function _rsasign_getHexDigestInfoFromSig(a, c, b) {
  var e = _rsasign_getDecryptSignatureBI(a, c, b);var d = e.toString(16).replace(/^1f+00/, "");return d;
}function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {
  for (var e in KJUR.crypto.Util.DIGESTINFOHEAD) {
    var d = KJUR.crypto.Util.DIGESTINFOHEAD[e];var b = d.length;if (f.substring(0, b) == d) {
      var c = [e, f.substring(b)];return c;
    }
  }return [];
}RSAKey.prototype.verify = function (f, l) {
  l = l.toLowerCase();if (l.match(/^[0-9a-f]+$/) == null) {
    return false;
  }var b = parseBigInt(l, 16);var k = this.n.bitLength();if (b.bitLength() > k) {
    return false;
  }var j = this.doPublic(b);var i = j.toString(16);if (i.length + 3 != k / 4) {
    return false;
  }var e = i.replace(/^1f+00/, "");var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e);if (g.length == 0) {
    return false;
  }var d = g[0];var h = g[1];var a = function a(m) {
    return KJUR.crypto.Util.hashString(m, d);
  };var c = a(f);return h == c;
};RSAKey.prototype.verifyWithMessageHash = function (e, a) {
  if (a.length != Math.ceil(this.n.bitLength() / 4)) {
    return false;
  }var b = parseBigInt(a, 16);if (b.bitLength() > this.n.bitLength()) {
    return 0;
  }var h = this.doPublic(b);var g = h.toString(16).replace(/^1f+00/, "");var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);if (c.length == 0) {
    return false;
  }var d = c[0];var f = c[1];return f == e;
};RSAKey.prototype.verifyPSS = function (c, b, a, f) {
  var e = function e(g) {
    return KJUR.crypto.Util.hashHex(g, a);
  };var d = e(rstrtohex(c));if (f === undefined) {
    f = -1;
  }return this.verifyWithMessageHashPSS(d, b, a, f);
};RSAKey.prototype.verifyWithMessageHashPSS = function (f, s, l, c) {
  if (s.length != Math.ceil(this.n.bitLength() / 4)) {
    return false;
  }var k = new BigInteger(s, 16);var r = function r(i) {
    return KJUR.crypto.Util.hashHex(i, l);
  };var j = hextorstr(f);var h = j.length;var g = this.n.bitLength() - 1;var m = Math.ceil(g / 8);var q;if (c === -1 || c === undefined) {
    c = h;
  } else {
    if (c === -2) {
      c = m - h - 2;
    } else {
      if (c < -2) {
        throw new Error("invalid salt length");
      }
    }
  }if (m < h + c + 2) {
    throw new Error("data too long");
  }var a = this.doPublic(k).toByteArray();for (q = 0; q < a.length; q += 1) {
    a[q] &= 255;
  }while (a.length < m) {
    a.unshift(0);
  }if (a[m - 1] !== 188) {
    throw new Error("encoded message does not end in 0xbc");
  }a = String.fromCharCode.apply(String, a);var d = a.substr(0, m - h - 1);var e = a.substr(d.length, h);var p = 65280 >> 8 * m - g & 255;if ((d.charCodeAt(0) & p) !== 0) {
    throw new Error("bits beyond keysize not zero");
  }var n = pss_mgf1_str(e, d.length, r);var o = [];for (q = 0; q < d.length; q += 1) {
    o[q] = d.charCodeAt(q) ^ n.charCodeAt(q);
  }o[0] &= ~p;var b = m - h - c - 2;for (q = 0; q < b; q += 1) {
    if (o[q] !== 0) {
      throw new Error("leftmost octets not zero");
    }
  }if (o[b] !== 1) {
    throw new Error("0x01 marker not found");
  }return e === hextorstr(r(rstrtohex("\x00\x00\x00\x00\x00\x00\x00\x00" + j + String.fromCharCode.apply(String, o.slice(-c)))));
};RSAKey.SALT_LEN_HLEN = -1;RSAKey.SALT_LEN_MAX = -2;RSAKey.SALT_LEN_RECOVER = -2;

function X509(r) {
  var k = ASN1HEX,
      o = k.getChildIdx,
      h = k.getV,
      u = k.dump,
      g = k.parse,
      b = k.getTLV,
      c = k.getVbyList,
      l = k.getVbyListEx,
      a = k.getTLVbyList,
      m = k.getTLVbyListEx,
      i = k.getIdxbyList,
      e = k.getIdxbyListEx,
      j = k.getVidx,
      t = k.getInt,
      q = k.oidname,
      n = k.hextooidstr,
      d = X509,
      s = pemtohex,
      f;try {
    f = KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;
  } catch (p) {}this.HEX2STAG = { "0c": "utf8", "13": "prn", "16": "ia5", "1a": "vis", "1e": "bmp" };this.hex = null;this.version = 0;this.foffset = 0;this.aExtInfo = null;this.getVersion = function () {
    if (this.hex === null || this.version !== 0) {
      return this.version;
    }var w = a(this.hex, 0, [0, 0]);if (w.substr(0, 2) == "a0") {
      var x = a(w, 0, [0]);var v = t(x, 0);if (v < 0 || 2 < v) {
        throw new Error("malformed version field");
      }this.version = v + 1;return this.version;
    } else {
      this.version = 1;this.foffset = -1;return 1;
    }
  };this.getSerialNumberHex = function () {
    return l(this.hex, 0, [0, 0], "02");
  };this.getSignatureAlgorithmField = function () {
    var v = m(this.hex, 0, [0, 1]);return this.getAlgorithmIdentifierName(v);
  };this.getAlgorithmIdentifierName = function (v) {
    for (var w in f) {
      if (v === f[w]) {
        return w;
      }
    }return q(l(v, 0, [0], "06"));
  };this.getIssuer = function () {
    return this.getX500Name(this.getIssuerHex());
  };this.getIssuerHex = function () {
    return a(this.hex, 0, [0, 3 + this.foffset], "30");
  };this.getIssuerString = function () {
    var v = this.getIssuer();return v.str;
  };this.getSubject = function () {
    return this.getX500Name(this.getSubjectHex());
  };this.getSubjectHex = function () {
    return a(this.hex, 0, [0, 5 + this.foffset], "30");
  };this.getSubjectString = function () {
    var v = this.getSubject();return v.str;
  };this.getNotBefore = function () {
    var v = c(this.hex, 0, [0, 4 + this.foffset, 0]);v = v.replace(/(..)/g, "%$1");v = decodeURIComponent(v);return v;
  };this.getNotAfter = function () {
    var v = c(this.hex, 0, [0, 4 + this.foffset, 1]);v = v.replace(/(..)/g, "%$1");v = decodeURIComponent(v);return v;
  };this.getPublicKeyHex = function () {
    return this.getSPKI();
  };this.getSPKI = function () {
    return a(this.hex, 0, [0, 6 + this.foffset], "30");
  };this.getSPKIValue = function () {
    var v = this.getSPKI();if (v == null) {
      return null;
    }return c(v, 0, [1], "03", true);
  };this.getPublicKeyIdx = function () {
    return i(this.hex, 0, [0, 6 + this.foffset], "30");
  };this.getPublicKeyContentIdx = function () {
    var v = this.getPublicKeyIdx();return i(this.hex, v, [1, 0], "30");
  };this.getPublicKey = function () {
    return KEYUTIL.getKey(this.getPublicKeyHex(), null, "pkcs8pub");
  };this.getSignatureAlgorithmName = function () {
    var v = a(this.hex, 0, [1], "30");return this.getAlgorithmIdentifierName(v);
  };this.getSignatureValueHex = function () {
    return c(this.hex, 0, [2], "03", true);
  };this.verifySignature = function (x) {
    var y = this.getSignatureAlgorithmField();var v = this.getSignatureValueHex();var w = a(this.hex, 0, [0], "30");var z = new KJUR.crypto.Signature({ alg: y });z.init(x);z.updateHex(w);return z.verify(v);
  };this.parseExt = function (E) {
    var x, v, z;if (E === undefined) {
      z = this.hex;if (this.version !== 3) {
        return -1;
      }x = i(z, 0, [0, 7, 0], "30");v = o(z, x);
    } else {
      z = pemtohex(E);var A = i(z, 0, [0, 3, 0, 0], "06");if (h(z, A) != "2a864886f70d01090e") {
        this.aExtInfo = new Array();return;
      }x = i(z, 0, [0, 3, 0, 1, 0], "30");v = o(z, x);this.hex = z;
    }this.aExtInfo = new Array();for (var y = 0; y < v.length; y++) {
      var C = {};C.critical = false;var B = o(z, v[y]);var w = 0;if (B.length === 3) {
        C.critical = true;w = 1;
      }C.oid = k.hextooidstr(c(z, v[y], [0], "06"));var D = i(z, v[y], [1 + w]);C.vidx = j(z, D);this.aExtInfo.push(C);
    }
  };this.getExtInfo = function (x) {
    var v = this.aExtInfo;var y = x;if (!x.match(/^[0-9.]+$/)) {
      y = KJUR.asn1.x509.OID.name2oid(x);
    }if (y === "") {
      return undefined;
    }for (var w = 0; w < v.length; w++) {
      if (v[w].oid === y) {
        return v[w];
      }
    }return undefined;
  };this.getExtBasicConstraints = function (w, A) {
    if (w === undefined && A === undefined) {
      var y = this.getExtInfo("basicConstraints");if (y === undefined) {
        return undefined;
      }w = b(this.hex, y.vidx);A = y.critical;
    }var v = { extname: "basicConstraints" };if (A) {
      v.critical = true;
    }if (w === "3000") {
      return v;
    }if (w === "30030101ff") {
      v.cA = true;return v;
    }if (w.substr(0, 12) === "30060101ff02") {
      var z = h(w, 10);var x = parseInt(z, 16);v.cA = true;v.pathLen = x;return v;
    }throw new Error("hExtV parse error: " + w);
  };this.getExtKeyUsage = function (w, y) {
    if (w === undefined && y === undefined) {
      var x = this.getExtInfo("keyUsage");if (x === undefined) {
        return undefined;
      }w = b(this.hex, x.vidx);y = x.critical;
    }var v = { extname: "keyUsage" };if (y) {
      v.critical = true;
    }v.names = this.getExtKeyUsageString(w).split(",");return v;
  };this.getExtKeyUsageBin = function (w) {
    if (w === undefined) {
      var x = this.getExtInfo("keyUsage");if (x === undefined) {
        return "";
      }w = b(this.hex, x.vidx);
    }if (w.length != 8 && w.length != 10) {
      throw new Error("malformed key usage value: " + w);
    }var v = "000000000000000" + parseInt(w.substr(6), 16).toString(2);if (w.length == 8) {
      v = v.slice(-8);
    }if (w.length == 10) {
      v = v.slice(-16);
    }v = v.replace(/0+$/, "");if (v == "") {
      v = "0";
    }return v;
  };this.getExtKeyUsageString = function (x) {
    var y = this.getExtKeyUsageBin(x);var v = new Array();for (var w = 0; w < y.length; w++) {
      if (y.substr(w, 1) == "1") {
        v.push(X509.KEYUSAGE_NAME[w]);
      }
    }return v.join(",");
  };this.getExtSubjectKeyIdentifier = function (x, z) {
    if (x === undefined && z === undefined) {
      var y = this.getExtInfo("subjectKeyIdentifier");if (y === undefined) {
        return undefined;
      }x = b(this.hex, y.vidx);z = y.critical;
    }var v = { extname: "subjectKeyIdentifier" };if (z) {
      v.critical = true;
    }var w = h(x, 0);v.kid = { hex: w };return v;
  };this.getExtAuthorityKeyIdentifier = function (B, z) {
    if (B === undefined && z === undefined) {
      var v = this.getExtInfo("authorityKeyIdentifier");if (v === undefined) {
        return undefined;
      }B = b(this.hex, v.vidx);z = v.critical;
    }var C = { extname: "authorityKeyIdentifier" };if (z) {
      C.critical = true;
    }var A = o(B, 0);for (var w = 0; w < A.length; w++) {
      var D = B.substr(A[w], 2);if (D === "80") {
        C.kid = { hex: h(B, A[w]) };
      }if (D === "a1") {
        var y = b(B, A[w]);var x = this.getGeneralNames(y);C.issuer = x[0]["dn"];
      }if (D === "82") {
        C.sn = { hex: h(B, A[w]) };
      }
    }return C;
  };this.getExtExtKeyUsage = function (y, A) {
    if (y === undefined && A === undefined) {
      var z = this.getExtInfo("extKeyUsage");if (z === undefined) {
        return undefined;
      }y = b(this.hex, z.vidx);A = z.critical;
    }var v = { extname: "extKeyUsage", array: [] };if (A) {
      v.critical = true;
    }var w = o(y, 0);for (var x = 0; x < w.length; x++) {
      v.array.push(q(h(y, w[x])));
    }return v;
  };this.getExtExtKeyUsageName = function () {
    var z = this.getExtInfo("extKeyUsage");if (z === undefined) {
      return z;
    }var v = new Array();var y = b(this.hex, z.vidx);if (y === "") {
      return v;
    }var w = o(y, 0);for (var x = 0; x < w.length; x++) {
      v.push(q(h(y, w[x])));
    }return v;
  };this.getExtSubjectAltName = function (w, y) {
    if (w === undefined && y === undefined) {
      var x = this.getExtInfo("subjectAltName");if (x === undefined) {
        return undefined;
      }w = b(this.hex, x.vidx);y = x.critical;
    }var v = { extname: "subjectAltName", array: [] };if (y) {
      v.critical = true;
    }v.array = this.getGeneralNames(w);return v;
  };this.getExtIssuerAltName = function (w, y) {
    if (w === undefined && y === undefined) {
      var x = this.getExtInfo("issuerAltName");if (x === undefined) {
        return undefined;
      }w = b(this.hex, x.vidx);y = x.critical;
    }var v = { extname: "issuerAltName", array: [] };if (y) {
      v.critical = true;
    }v.array = this.getGeneralNames(w);return v;
  };this.getGeneralNames = function (z) {
    var x = o(z, 0);var v = [];for (var y = 0; y < x.length; y++) {
      var w = this.getGeneralName(b(z, x[y]));if (w !== undefined) {
        v.push(w);
      }
    }return v;
  };this.getGeneralName = function (w) {
    var v = w.substr(0, 2);var y = h(w, 0);var x = hextorstr(y);if (v == "81") {
      return { rfc822: x };
    }if (v == "82") {
      return { dns: x };
    }if (v == "86") {
      return { uri: x };
    }if (v == "87") {
      return { ip: hextoip(y) };
    }if (v == "a4") {
      return { dn: this.getX500Name(y) };
    }if (v == "a0") {
      return { other: this.getOtherName(w) };
    }return undefined;
  };this.getExtSubjectAltName2 = function () {
    var z, C, B;var A = this.getExtInfo("subjectAltName");if (A === undefined) {
      return A;
    }var v = new Array();var y = b(this.hex, A.vidx);var w = o(y, 0);for (var x = 0; x < w.length; x++) {
      B = y.substr(w[x], 2);z = h(y, w[x]);if (B === "81") {
        C = hextoutf8(z);v.push(["MAIL", C]);
      }if (B === "82") {
        C = hextoutf8(z);v.push(["DNS", C]);
      }if (B === "84") {
        C = X509.hex2dn(z, 0);v.push(["DN", C]);
      }if (B === "86") {
        C = hextoutf8(z);v.push(["URI", C]);
      }if (B === "87") {
        C = hextoip(z);v.push(["IP", C]);
      }
    }return v;
  };this.getExtCRLDistributionPoints = function (z, B) {
    if (z === undefined && B === undefined) {
      var A = this.getExtInfo("cRLDistributionPoints");if (A === undefined) {
        return undefined;
      }z = b(this.hex, A.vidx);B = A.critical;
    }var w = { extname: "cRLDistributionPoints", array: [] };if (B) {
      w.critical = true;
    }var x = o(z, 0);for (var y = 0; y < x.length; y++) {
      var v = b(z, x[y]);w.array.push(this.getDistributionPoint(v));
    }return w;
  };this.getDistributionPoint = function (A) {
    var x = {};var y = o(A, 0);for (var z = 0; z < y.length; z++) {
      var w = A.substr(y[z], 2);var v = b(A, y[z]);if (w == "a0") {
        x.dpname = this.getDistributionPointName(v);
      }
    }return x;
  };this.getDistributionPointName = function (A) {
    var x = {};var y = o(A, 0);for (var z = 0; z < y.length; z++) {
      var w = A.substr(y[z], 2);var v = b(A, y[z]);if (w == "a0") {
        x.full = this.getGeneralNames(v);
      }
    }return x;
  };this.getExtCRLDistributionPointsURI = function () {
    var z = this.getExtCRLDistributionPoints();var w = z.array;var v = [];for (var y = 0; y < w.length; y++) {
      try {
        if (w[y].dpname.full[0].uri != undefined) {
          v.push(w[y].dpname.full[0].uri);
        }
      } catch (x) {}
    }return v;
  };this.getExtAIAInfo = function () {
    var z = this.getExtInfo("authorityInfoAccess");if (z === undefined) {
      return z;
    }var v = { ocsp: [], caissuer: [] };var w = o(this.hex, z.vidx);for (var x = 0; x < w.length; x++) {
      var A = c(this.hex, w[x], [0], "06");var y = c(this.hex, w[x], [1], "86");if (A === "2b06010505073001") {
        v.ocsp.push(hextoutf8(y));
      }if (A === "2b06010505073002") {
        v.caissuer.push(hextoutf8(y));
      }
    }return v;
  };this.getExtAuthorityInfoAccess = function (C, A) {
    if (C === undefined && A === undefined) {
      var v = this.getExtInfo("authorityInfoAccess");if (v === undefined) {
        return undefined;
      }C = b(this.hex, v.vidx);A = v.critical;
    }var D = { extname: "authorityInfoAccess", array: [] };if (A) {
      D.critical = true;
    }var B = o(C, 0);for (var w = 0; w < B.length; w++) {
      var z = l(C, B[w], [0], "06");var x = c(C, B[w], [1], "86");var y = hextoutf8(x);if (z == "2b06010505073001") {
        D.array.push({ ocsp: y });
      } else {
        if (z == "2b06010505073002") {
          D.array.push({ caissuer: y });
        } else {
          throw new Error("unknown method: " + z);
        }
      }
    }return D;
  };this.getExtCertificatePolicies = function (z, C) {
    if (z === undefined && C === undefined) {
      var B = this.getExtInfo("certificatePolicies");if (B === undefined) {
        return undefined;
      }z = b(this.hex, B.vidx);C = B.critical;
    }var v = { extname: "certificatePolicies", array: [] };if (C) {
      v.critical = true;
    }var w = o(z, 0);for (var x = 0; x < w.length; x++) {
      var A = b(z, w[x]);var y = this.getPolicyInformation(A);v.array.push(y);
    }return v;
  };this.getPolicyInformation = function (z) {
    var v = {};var B = c(z, 0, [0], "06");v.policyoid = q(B);var C = e(z, 0, [1], "30");if (C != -1) {
      v.array = [];var w = o(z, C);for (var x = 0; x < w.length; x++) {
        var A = b(z, w[x]);var y = this.getPolicyQualifierInfo(A);v.array.push(y);
      }
    }return v;
  };this.getOtherName = function (x) {
    var v = {};var w = o(x, 0);var z = c(x, w[0], [], "06");var y = c(x, w[1], []);v.oid = KJUR.asn1.ASN1Util.oidHexToInt(z);v.obj = g(y);return v;
  };this.getPolicyQualifierInfo = function (w) {
    var v = {};var x = c(w, 0, [0], "06");if (x === "2b06010505070201") {
      var z = l(w, 0, [1], "16");v.cps = hextorstr(z);
    } else {
      if (x === "2b06010505070202") {
        var y = a(w, 0, [1], "30");v.unotice = this.getUserNotice(y);
      }
    }return v;
  };this.getUserNotice = function (z) {
    var w = {};var x = o(z, 0);for (var y = 0; y < x.length; y++) {
      var v = b(z, x[y]);if (v.substr(0, 2) != "30") {
        w.exptext = this.getDisplayText(v);
      }
    }return w;
  };this.getDisplayText = function (w) {
    var x = { "0c": "utf8", "16": "ia5", "1a": "vis", "1e": "bmp" };var v = {};v.type = x[w.substr(0, 2)];v.str = hextorstr(h(w, 0));return v;
  };this.getExtCRLNumber = function (w, x) {
    var v = { extname: "cRLNumber" };if (x) {
      v.critical = true;
    }if (w.substr(0, 2) == "02") {
      v.num = { hex: h(w, 0) };return v;
    }throw new Error("hExtV parse error: " + w);
  };this.getExtCRLReason = function (w, x) {
    var v = { extname: "cRLReason" };if (x) {
      v.critical = true;
    }if (w.substr(0, 2) == "0a") {
      v.code = parseInt(h(w, 0), 16);return v;
    }throw new Error("hExtV parse error: " + w);
  };this.getExtOcspNonce = function (w, y) {
    var v = { extname: "ocspNonce" };if (y) {
      v.critical = true;
    }var x = h(w, 0);v.hex = x;return v;
  };this.getExtOcspNoCheck = function (w, x) {
    var v = { extname: "ocspNoCheck" };if (x) {
      v.critical = true;
    }return v;
  };this.getExtAdobeTimeStamp = function (y, B) {
    if (y === undefined && B === undefined) {
      var A = this.getExtInfo("adobeTimeStamp");if (A === undefined) {
        return undefined;
      }y = b(this.hex, A.vidx);B = A.critical;
    }var v = { extname: "adobeTimeStamp" };if (B) {
      v.critical = true;
    }var x = o(y, 0);if (x.length > 1) {
      var C = b(y, x[1]);var w = this.getGeneralName(C);if (w.uri != undefined) {
        v.uri = w.uri;
      }
    }if (x.length > 2) {
      var z = b(y, x[2]);if (z == "0101ff") {
        v.reqauth = true;
      }if (z == "010100") {
        v.reqauth = false;
      }
    }return v;
  };this.getX500NameRule = function (v) {
    var C = true;var G = true;var F = false;var w = "";var z = "";var I = null;var D = [];for (var y = 0; y < v.length; y++) {
      var A = v[y];for (var x = 0; x < A.length; x++) {
        D.push(A[x]);
      }
    }for (var y = 0; y < D.length; y++) {
      var H = D[y];var J = H.ds;var E = H.value;var B = H.type;w += ":" + J;if (J != "prn" && J != "utf8" && J != "ia5") {
        return "mixed";
      }if (J == "ia5") {
        if (B != "CN") {
          return "mixed";
        } else {
          if (!KJUR.lang.String.isMail(E)) {
            return "mixed";
          } else {
            continue;
          }
        }
      }if (B == "C") {
        if (J == "prn") {
          continue;
        } else {
          return "mixed";
        }
      }z += ":" + J;if (I == null) {
        I = J;
      } else {
        if (I !== J) {
          return "mixed";
        }
      }
    }if (I == null) {
      return "prn";
    } else {
      return I;
    }
  };this.getX500Name = function (x) {
    var v = this.getX500NameArray(x);var w = this.dnarraytostr(v);return { array: v, str: w };
  };this.getX500NameArray = function (y) {
    var v = [];var w = o(y, 0);for (var x = 0; x < w.length; x++) {
      v.push(this.getRDN(b(y, w[x])));
    }return v;
  };this.getRDN = function (y) {
    var v = [];var w = o(y, 0);for (var x = 0; x < w.length; x++) {
      v.push(this.getAttrTypeAndValue(b(y, w[x])));
    }return v;
  };this.getAttrTypeAndValue = function (x) {
    var v = { type: null, value: null, ds: null };var w = o(x, 0);var A = c(x, w[0], [], "06");var z = c(x, w[1], []);var y = KJUR.asn1.ASN1Util.oidHexToInt(A);v.type = KJUR.asn1.x509.OID.oid2atype(y);v.ds = this.HEX2STAG[x.substr(w[1], 2)];if (v.ds != "bmp") {
      v.value = hextoutf8(z);
    } else {
      v.value = ucs2hextoutf8(z);
    }return v;
  };this.readCertPEM = function (v) {
    this.readCertHex(s(v));
  };this.readCertHex = function (v) {
    this.hex = v;this.getVersion();try {
      i(this.hex, 0, [0, 7], "a3");this.parseExt();
    } catch (w) {}
  };this.getParam = function () {
    var v = {};v.version = this.getVersion();v.serial = { hex: this.getSerialNumberHex() };v.sigalg = this.getSignatureAlgorithmField();v.issuer = this.getIssuer();v.notbefore = this.getNotBefore();v.notafter = this.getNotAfter();v.subject = this.getSubject();v.sbjpubkey = hextopem(this.getPublicKeyHex(), "PUBLIC KEY");if (this.aExtInfo.length > 0) {
      v.ext = this.getExtParamArray();
    }v.sighex = this.getSignatureValueHex();return v;
  };this.getExtParamArray = function (w) {
    if (w == undefined) {
      var y = e(this.hex, 0, [0, "[3]"]);if (y != -1) {
        w = m(this.hex, 0, [0, "[3]", 0], "30");
      }
    }var v = [];var x = o(w, 0);for (var z = 0; z < x.length; z++) {
      var B = b(w, x[z]);var A = this.getExtParam(B);if (A != null) {
        v.push(A);
      }
    }return v;
  };this.getExtParam = function (w) {
    var D = {};var y = o(w, 0);var z = y.length;if (z != 2 && z != 3) {
      throw new Error("wrong number elements in Extension: " + z + " " + w);
    }var x = n(c(w, 0, [0], "06"));var B = false;if (z == 3 && a(w, 0, [1]) == "0101ff") {
      B = true;
    }var C = a(w, 0, [z - 1, 0]);var A = undefined;if (x == "2.5.29.14") {
      A = this.getExtSubjectKeyIdentifier(C, B);
    } else {
      if (x == "2.5.29.15") {
        A = this.getExtKeyUsage(C, B);
      } else {
        if (x == "2.5.29.17") {
          A = this.getExtSubjectAltName(C, B);
        } else {
          if (x == "2.5.29.18") {
            A = this.getExtIssuerAltName(C, B);
          } else {
            if (x == "2.5.29.19") {
              A = this.getExtBasicConstraints(C, B);
            } else {
              if (x == "2.5.29.31") {
                A = this.getExtCRLDistributionPoints(C, B);
              } else {
                if (x == "2.5.29.32") {
                  A = this.getExtCertificatePolicies(C, B);
                } else {
                  if (x == "2.5.29.35") {
                    A = this.getExtAuthorityKeyIdentifier(C, B);
                  } else {
                    if (x == "2.5.29.37") {
                      A = this.getExtExtKeyUsage(C, B);
                    } else {
                      if (x == "1.3.6.1.5.5.7.1.1") {
                        A = this.getExtAuthorityInfoAccess(C, B);
                      } else {
                        if (x == "2.5.29.20") {
                          A = this.getExtCRLNumber(C, B);
                        } else {
                          if (x == "2.5.29.21") {
                            A = this.getExtCRLReason(C, B);
                          } else {
                            if (x == "1.3.6.1.5.5.7.48.1.2") {
                              A = this.getExtOcspNonce(C, B);
                            } else {
                              if (x == "1.3.6.1.5.5.7.48.1.5") {
                                A = this.getExtOcspNoCheck(C, B);
                              } else {
                                if (x == "1.2.840.113583.1.1.9.1") {
                                  A = this.getExtAdobeTimeStamp(C, B);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }if (A != undefined) {
      return A;
    }var v = { extname: x, extn: C };if (B) {
      v.critical = true;
    }return v;
  };this.findExt = function (w, x) {
    for (var v = 0; v < w.length; v++) {
      if (w[v].extname == x) {
        return w[v];
      }
    }return null;
  };this.updateExtCDPFullURI = function (z, v) {
    var y = this.findExt(z, "cRLDistributionPoints");if (y == null) {
      return;
    }if (y.array == undefined) {
      return;
    }var B = y.array;for (var x = 0; x < B.length; x++) {
      if (B[x].dpname == undefined) {
        continue;
      }if (B[x].dpname.full == undefined) {
        continue;
      }var C = B[x].dpname.full;for (var w = 0; w < C.length; w++) {
        var A = C[x];if (A.uri == undefined) {
          continue;
        }A.uri = v;
      }
    }
  };this.updateExtAIAOCSP = function (z, w) {
    var y = this.findExt(z, "authorityInfoAccess");if (y == null) {
      return;
    }if (y.array == undefined) {
      return;
    }var v = y.array;for (var x = 0; x < v.length; x++) {
      if (v[x].ocsp != undefined) {
        v[x].ocsp = w;
      }
    }
  };this.updateExtAIACAIssuer = function (z, w) {
    var y = this.findExt(z, "authorityInfoAccess");if (y == null) {
      return;
    }if (y.array == undefined) {
      return;
    }var v = y.array;for (var x = 0; x < v.length; x++) {
      if (v[x].caissuer != undefined) {
        v[x].caissuer = w;
      }
    }
  };this.dnarraytostr = function (x) {
    function v(y) {
      return y.map(function (z) {
        return w(z).replace(/\+/, "\\+");
      }).join("+");
    }function w(y) {
      return y.type + "=" + y.value;
    }return "/" + x.map(function (y) {
      return v(y).replace(/\//, "\\/");
    }).join("/");
  };this.getInfo = function () {
    var w = function w(O) {
      var N = JSON.stringify(O.array).replace(/[\[\]\{\}\"]/g, "");return N;
    };var C = function C(T) {
      var R = "";var N = T.array;for (var Q = 0; Q < N.length; Q++) {
        var S = N[Q];R += "    policy oid: " + S.policyoid + "\n";if (S.array === undefined) {
          continue;
        }for (var P = 0; P < S.array.length; P++) {
          var O = S.array[P];if (O.cps !== undefined) {
            R += "    cps: " + O.cps + "\n";
          }
        }
      }return R;
    };var F = function F(R) {
      var Q = "";var N = R.array;for (var P = 0; P < N.length; P++) {
        var S = N[P];try {
          if (S.dpname.full[0].uri !== undefined) {
            Q += "    " + S.dpname.full[0].uri + "\n";
          }
        } catch (O) {}try {
          if (S.dname.full[0].dn.hex !== undefined) {
            Q += "    " + X509.hex2dn(S.dpname.full[0].dn.hex) + "\n";
          }
        } catch (O) {}
      }return Q;
    };var D = function D(R) {
      var Q = "";var N = R.array;for (var O = 0; O < N.length; O++) {
        var P = N[O];if (P.caissuer !== undefined) {
          Q += "    caissuer: " + P.caissuer + "\n";
        }if (P.ocsp !== undefined) {
          Q += "    ocsp: " + P.ocsp + "\n";
        }
      }return Q;
    };var x = X509;var H, G, M;H = "Basic Fields\n";H += "  serial number: " + this.getSerialNumberHex() + "\n";H += "  signature algorithm: " + this.getSignatureAlgorithmField() + "\n";H += "  issuer: " + this.getIssuerString() + "\n";H += "  notBefore: " + this.getNotBefore() + "\n";H += "  notAfter: " + this.getNotAfter() + "\n";H += "  subject: " + this.getSubjectString() + "\n";H += "  subject public key info: \n";G = this.getPublicKey();H += "    key algorithm: " + G.type + "\n";if (G.type === "RSA") {
      H += "    n=" + hextoposhex(G.n.toString(16)).substr(0, 16) + "...\n";H += "    e=" + hextoposhex(G.e.toString(16)) + "\n";
    }M = this.aExtInfo;if (M !== undefined && M !== null) {
      H += "X509v3 Extensions:\n";for (var J = 0; J < M.length; J++) {
        var L = M[J];var v = KJUR.asn1.x509.OID.oid2name(L.oid);if (v === "") {
          v = L.oid;
        }var I = "";if (L.critical === true) {
          I = "CRITICAL";
        }H += "  " + v + " " + I + ":\n";if (v === "basicConstraints") {
          var y = this.getExtBasicConstraints();if (y.cA === undefined) {
            H += "    {}\n";
          } else {
            H += "    cA=true";if (y.pathLen !== undefined) {
              H += ", pathLen=" + y.pathLen;
            }H += "\n";
          }
        } else {
          if (v === "keyUsage") {
            H += "    " + this.getExtKeyUsageString() + "\n";
          } else {
            if (v === "subjectKeyIdentifier") {
              H += "    " + this.getExtSubjectKeyIdentifier().kid.hex + "\n";
            } else {
              if (v === "authorityKeyIdentifier") {
                var z = this.getExtAuthorityKeyIdentifier();if (z.kid !== undefined) {
                  H += "    kid=" + z.kid.hex + "\n";
                }
              } else {
                if (v === "extKeyUsage") {
                  var K = this.getExtExtKeyUsage().array;H += "    " + K.join(", ") + "\n";
                } else {
                  if (v === "subjectAltName") {
                    var A = w(this.getExtSubjectAltName());H += "    " + A + "\n";
                  } else {
                    if (v === "cRLDistributionPoints") {
                      var E = this.getExtCRLDistributionPoints();H += F(E);
                    } else {
                      if (v === "authorityInfoAccess") {
                        var B = this.getExtAuthorityInfoAccess();H += D(B);
                      } else {
                        if (v === "certificatePolicies") {
                          H += C(this.getExtCertificatePolicies());
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }H += "signature algorithm: " + this.getSignatureAlgorithmName() + "\n";H += "signature: " + this.getSignatureValueHex().substr(0, 16) + "...\n";return H;
  };if (typeof r == "string") {
    if (r.indexOf("-----BEGIN") != -1) {
      this.readCertPEM(r);
    } else {
      if (KJUR.lang.String.isHex(r)) {
        this.readCertHex(r);
      }
    }
  }
}X509.hex2dn = function (e, b) {
  if (b === undefined) {
    b = 0;
  }var a = new X509();var c = ASN1HEX.getTLV(e, b);var d = a.getX500Name(e);return d.str;
};X509.hex2rdn = function (f, b) {
  if (b === undefined) {
    b = 0;
  }if (f.substr(b, 2) !== "31") {
    throw new Error("malformed RDN");
  }var c = new Array();var d = ASN1HEX.getChildIdx(f, b);for (var e = 0; e < d.length; e++) {
    c.push(X509.hex2attrTypeValue(f, d[e]));
  }c = c.map(function (a) {
    return a.replace("+", "\\+");
  });return c.join("+");
};X509.hex2attrTypeValue = function (d, i) {
  var j = ASN1HEX;var h = j.getV;if (i === undefined) {
    i = 0;
  }if (d.substr(i, 2) !== "30") {
    throw new Error("malformed attribute type and value");
  }var g = j.getChildIdx(d, i);if (g.length !== 2 || d.substr(g[0], 2) !== "06") {
    "malformed attribute type and value";
  }var b = h(d, g[0]);var f = KJUR.asn1.ASN1Util.oidHexToInt(b);var e = KJUR.asn1.x509.OID.oid2atype(f);var a = h(d, g[1]);var c = hextorstr(a);return e + "=" + c;
};X509.getPublicKeyFromCertHex = function (b) {
  var a = new X509();a.readCertHex(b);return a.getPublicKey();
};X509.getPublicKeyFromCertPEM = function (b) {
  var a = new X509();a.readCertPEM(b);return a.getPublicKey();
};X509.getPublicKeyInfoPropOfCertPEM = function (c) {
  var e = ASN1HEX;var g = e.getVbyList;var b = {};var a, f, d;b.algparam = null;a = new X509();a.readCertPEM(c);f = a.getPublicKeyHex();b.keyhex = g(f, 0, [1], "03").substr(2);b.algoid = g(f, 0, [0, 0], "06");if (b.algoid === "2a8648ce3d0201") {
    b.algparam = g(f, 0, [0, 1], "06");
  }return b;
};X509.KEYUSAGE_NAME = ["digitalSignature", "nonRepudiation", "keyEncipherment", "dataEncipherment", "keyAgreement", "keyCertSign", "cRLSign", "encipherOnly", "decipherOnly"];

if (typeof KJUR == "undefined" || !KJUR) {
  exports.KJUR = KJUR = {};
}if (typeof KJUR.jws == "undefined" || !KJUR.jws) {
  KJUR.jws = {};
}KJUR.jws.JWS = function () {
  var b = KJUR,
      a = b.jws.JWS,
      c = a.isSafeJSONString;this.parseJWS = function (g, j) {
    if (this.parsedJWS !== undefined && (j || this.parsedJWS.sigvalH !== undefined)) {
      return;
    }var i = g.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if (i == null) {
      throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
    }var k = i[1];var e = i[2];var l = i[3];var n = k + "." + e;this.parsedJWS = {};this.parsedJWS.headB64U = k;this.parsedJWS.payloadB64U = e;this.parsedJWS.sigvalB64U = l;this.parsedJWS.si = n;if (!j) {
      var h = b64utohex(l);var f = parseBigInt(h, 16);this.parsedJWS.sigvalH = h;this.parsedJWS.sigvalBI = f;
    }var d = b64utoutf8(k);var m = b64utoutf8(e);this.parsedJWS.headS = d;this.parsedJWS.payloadS = m;if (!c(d, this.parsedJWS, "headP")) {
      throw "malformed JSON string for JWS Head: " + d;
    }
  };
};KJUR.jws.JWS.sign = function (j, w, z, A, a) {
  var x = KJUR,
      n = x.jws,
      r = n.JWS,
      h = r.readSafeJSONString,
      q = r.isSafeJSONString,
      d = x.crypto,
      l = d.ECDSA,
      p = d.Mac,
      c = d.Signature,
      u = JSON;var t, k, o;if (typeof w != "string" && (typeof w === "undefined" ? "undefined" : _typeof(w)) != "object") {
    throw "spHeader must be JSON string or object: " + w;
  }if ((typeof w === "undefined" ? "undefined" : _typeof(w)) == "object") {
    k = w;t = u.stringify(k);
  }if (typeof w == "string") {
    t = w;if (!q(t)) {
      throw "JWS Head is not safe JSON string: " + t;
    }k = h(t);
  }o = z;if ((typeof z === "undefined" ? "undefined" : _typeof(z)) == "object") {
    o = u.stringify(z);
  }if ((j == "" || j == null) && k.alg !== undefined) {
    j = k.alg;
  }if (j != "" && j != null && k.alg === undefined) {
    k.alg = j;t = u.stringify(k);
  }if (j !== k.alg) {
    throw "alg and sHeader.alg doesn't match: " + j + "!=" + k.alg;
  }var s = null;if (r.jwsalg2sigalg[j] === undefined) {
    throw "unsupported alg name: " + j;
  } else {
    s = r.jwsalg2sigalg[j];
  }var e = utf8tob64u(t);var m = utf8tob64u(o);var b = e + "." + m;var y = "";if (s.substr(0, 4) == "Hmac") {
    if (A === undefined) {
      throw "mac key shall be specified for HS* alg";
    }var i = new p({ alg: s, prov: "cryptojs", pass: A });i.updateString(b);y = i.doFinal();
  } else {
    if (s.indexOf("withECDSA") != -1) {
      var f = new c({ alg: s });f.init(A, a);f.updateString(b);var g = f.sign();y = KJUR.crypto.ECDSA.asn1SigToConcatSig(g);
    } else {
      if (s != "none") {
        var f = new c({ alg: s });f.init(A, a);f.updateString(b);y = f.sign();
      }
    }
  }var v = hextob64u(y);return b + "." + v;
};KJUR.jws.JWS.verify = function (w, B, n) {
  var x = KJUR,
      q = x.jws,
      t = q.JWS,
      i = t.readSafeJSONString,
      e = x.crypto,
      p = e.ECDSA,
      s = e.Mac,
      d = e.Signature,
      m;if ((typeof RSAKey === "undefined" ? "undefined" : _typeof(RSAKey)) !== undefined) {
    m = RSAKey;
  }var y = w.split(".");if (y.length !== 3) {
    return false;
  }var f = y[0];var r = y[1];var c = f + "." + r;var A = b64utohex(y[2]);var l = i(b64utoutf8(y[0]));var k = null;var z = null;if (l.alg === undefined) {
    throw "algorithm not specified in header";
  } else {
    k = l.alg;z = k.substr(0, 2);
  }if (n != null && Object.prototype.toString.call(n) === "[object Array]" && n.length > 0) {
    var b = ":" + n.join(":") + ":";if (b.indexOf(":" + k + ":") == -1) {
      throw "algorithm '" + k + "' not accepted in the list";
    }
  }if (k != "none" && B === null) {
    throw "key shall be specified to verify.";
  }if (typeof B == "string" && B.indexOf("-----BEGIN ") != -1) {
    B = KEYUTIL.getKey(B);
  }if (z == "RS" || z == "PS") {
    if (!(B instanceof m)) {
      throw "key shall be a RSAKey obj for RS* and PS* algs";
    }
  }if (z == "ES") {
    if (!(B instanceof p)) {
      throw "key shall be a ECDSA obj for ES* algs";
    }
  }if (k == "none") {}var u = null;if (t.jwsalg2sigalg[l.alg] === undefined) {
    throw "unsupported alg name: " + k;
  } else {
    u = t.jwsalg2sigalg[k];
  }if (u == "none") {
    throw "not supported";
  } else {
    if (u.substr(0, 4) == "Hmac") {
      var o = null;if (B === undefined) {
        throw "hexadecimal key shall be specified for HMAC";
      }var j = new s({ alg: u, pass: B });j.updateString(c);o = j.doFinal();return A == o;
    } else {
      if (u.indexOf("withECDSA") != -1) {
        var h = null;try {
          h = p.concatSigToASN1Sig(A);
        } catch (v) {
          return false;
        }var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(h);
      } else {
        var g = new d({ alg: u });g.init(B);g.updateString(c);return g.verify(A);
      }
    }
  }
};KJUR.jws.JWS.parse = function (g) {
  var c = g.split(".");var b = {};var f, e, d;if (c.length != 2 && c.length != 3) {
    throw "malformed sJWS: wrong number of '.' splitted elements";
  }f = c[0];e = c[1];if (c.length == 3) {
    d = c[2];
  }b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e));b.headerPP = JSON.stringify(b.headerObj, null, "  ");if (b.payloadObj == null) {
    b.payloadPP = b64utoutf8(e);
  } else {
    b.payloadPP = JSON.stringify(b.payloadObj, null, "  ");
  }if (d !== undefined) {
    b.sigHex = b64utohex(d);
  }return b;
};KJUR.jws.JWS.verifyJWT = function (e, l, r) {
  var d = KJUR,
      j = d.jws,
      o = j.JWS,
      n = o.readSafeJSONString,
      p = o.inArray,
      f = o.includedArray;var k = e.split(".");var c = k[0];var i = k[1];var q = c + "." + i;var m = b64utohex(k[2]);var h = n(b64utoutf8(c));var g = n(b64utoutf8(i));if (h.alg === undefined) {
    return false;
  }if (r.alg === undefined) {
    throw "acceptField.alg shall be specified";
  }if (!p(h.alg, r.alg)) {
    return false;
  }if (g.iss !== undefined && _typeof(r.iss) === "object") {
    if (!p(g.iss, r.iss)) {
      return false;
    }
  }if (g.sub !== undefined && _typeof(r.sub) === "object") {
    if (!p(g.sub, r.sub)) {
      return false;
    }
  }if (g.aud !== undefined && _typeof(r.aud) === "object") {
    if (typeof g.aud == "string") {
      if (!p(g.aud, r.aud)) {
        return false;
      }
    } else {
      if (_typeof(g.aud) == "object") {
        if (!f(g.aud, r.aud)) {
          return false;
        }
      }
    }
  }var b = j.IntDate.getNow();if (r.verifyAt !== undefined && typeof r.verifyAt === "number") {
    b = r.verifyAt;
  }if (r.gracePeriod === undefined || typeof r.gracePeriod !== "number") {
    r.gracePeriod = 0;
  }if (g.exp !== undefined && typeof g.exp == "number") {
    if (g.exp + r.gracePeriod < b) {
      return false;
    }
  }if (g.nbf !== undefined && typeof g.nbf == "number") {
    if (b < g.nbf - r.gracePeriod) {
      return false;
    }
  }if (g.iat !== undefined && typeof g.iat == "number") {
    if (b < g.iat - r.gracePeriod) {
      return false;
    }
  }if (g.jti !== undefined && r.jti !== undefined) {
    if (g.jti !== r.jti) {
      return false;
    }
  }if (!o.verify(e, l, r.alg)) {
    return false;
  }return true;
};KJUR.jws.JWS.includedArray = function (b, a) {
  var c = KJUR.jws.JWS.inArray;if (b === null) {
    return false;
  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
    return false;
  }if (typeof b.length !== "number") {
    return false;
  }for (var d = 0; d < b.length; d++) {
    if (!c(b[d], a)) {
      return false;
    }
  }return true;
};KJUR.jws.JWS.inArray = function (d, b) {
  if (b === null) {
    return false;
  }if ((typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") {
    return false;
  }if (typeof b.length !== "number") {
    return false;
  }for (var c = 0; c < b.length; c++) {
    if (b[c] == d) {
      return true;
    }
  }return false;
};KJUR.jws.JWS.jwsalg2sigalg = { HS256: "HmacSHA256", HS384: "HmacSHA384", HS512: "HmacSHA512", RS256: "SHA256withRSA", RS384: "SHA384withRSA", RS512: "SHA512withRSA", ES256: "SHA256withECDSA", ES384: "SHA384withECDSA", ES512: "SHA512withECDSA", PS256: "SHA256withRSAandMGF1", PS384: "SHA384withRSAandMGF1", PS512: "SHA512withRSAandMGF1", none: "none" };KJUR.jws.JWS.isSafeJSONString = function (c, b, d) {
  var e = null;try {
    e = jsonParse(c);if ((typeof e === "undefined" ? "undefined" : _typeof(e)) != "object") {
      return 0;
    }if (e.constructor === Array) {
      return 0;
    }if (b) {
      b[d] = e;
    }return 1;
  } catch (a) {
    return 0;
  }
};KJUR.jws.JWS.readSafeJSONString = function (b) {
  var c = null;try {
    c = jsonParse(b);if ((typeof c === "undefined" ? "undefined" : _typeof(c)) != "object") {
      return null;
    }if (c.constructor === Array) {
      return null;
    }return c;
  } catch (a) {
    return null;
  }
};KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function (b) {
  var a = b.match(/^[^.]+\.[^.]+\.([^.]+)$/);if (a == null) {
    throw "JWS signature is not a form of 'Head.Payload.SigValue'.";
  }return a[1];
};KJUR.jws.JWS.getJWKthumbprint = function (d) {
  if (d.kty !== "RSA" && d.kty !== "EC" && d.kty !== "oct") {
    throw "unsupported algorithm for JWK Thumprint";
  }var a = "{";if (d.kty === "RSA") {
    if (typeof d.n != "string" || typeof d.e != "string") {
      throw "wrong n and e value for RSA key";
    }a += '"e":"' + d.e + '",';a += '"kty":"' + d.kty + '",';a += '"n":"' + d.n + '"}';
  } else {
    if (d.kty === "EC") {
      if (typeof d.crv != "string" || typeof d.x != "string" || typeof d.y != "string") {
        throw "wrong crv, x and y value for EC key";
      }a += '"crv":"' + d.crv + '",';a += '"kty":"' + d.kty + '",';a += '"x":"' + d.x + '",';a += '"y":"' + d.y + '"}';
    } else {
      if (d.kty === "oct") {
        if (typeof d.k != "string") {
          throw "wrong k value for oct(symmetric) key";
        }a += '"kty":"' + d.kty + '",';a += '"k":"' + d.k + '"}';
      }
    }
  }var b = rstrtohex(a);var c = KJUR.crypto.Util.hashHex(b, "sha256");var e = hextob64u(c);return e;
};KJUR.jws.IntDate = {};KJUR.jws.IntDate.get = function (c) {
  var b = KJUR.jws.IntDate,
      d = b.getNow,
      a = b.getZulu;if (c == "now") {
    return d();
  } else {
    if (c == "now + 1hour") {
      return d() + 60 * 60;
    } else {
      if (c == "now + 1day") {
        return d() + 60 * 60 * 24;
      } else {
        if (c == "now + 1month") {
          return d() + 60 * 60 * 24 * 30;
        } else {
          if (c == "now + 1year") {
            return d() + 60 * 60 * 24 * 365;
          } else {
            if (c.match(/Z$/)) {
              return a(c);
            } else {
              if (c.match(/^[0-9]+$/)) {
                return parseInt(c);
              }
            }
          }
        }
      }
    }
  }throw "unsupported format: " + c;
};KJUR.jws.IntDate.getZulu = function (a) {
  return zulutosec(a);
};KJUR.jws.IntDate.getNow = function () {
  var a = ~~(new Date() / 1000);return a;
};KJUR.jws.IntDate.intDate2UTCString = function (a) {
  var b = new Date(a * 1000);return b.toUTCString();
};KJUR.jws.IntDate.intDate2Zulu = function (e) {
  var i = new Date(e * 1000),
      h = ("0000" + i.getUTCFullYear()).slice(-4),
      g = ("00" + (i.getUTCMonth() + 1)).slice(-2),
      b = ("00" + i.getUTCDate()).slice(-2),
      a = ("00" + i.getUTCHours()).slice(-2),
      c = ("00" + i.getUTCMinutes()).slice(-2),
      f = ("00" + i.getUTCSeconds()).slice(-2);return h + g + b + a + c + f + "Z";
};

exports.SecureRandom = SecureRandom;
exports.rng_seed_time = rng_seed_time;
exports.BigInteger = BigInteger;
exports.RSAKey = RSAKey;
var EDSA = KJUR.crypto.EDSA;
exports.EDSA = EDSA;
var DSA = KJUR.crypto.DSA;
exports.DSA = DSA;
var Signature = KJUR.crypto.Signature;
exports.Signature = Signature;
var MessageDigest = KJUR.crypto.MessageDigest;
exports.MessageDigest = MessageDigest;
var Mac = KJUR.crypto.Mac;
exports.Mac = Mac;
var Cipher = KJUR.crypto.Cipher;
exports.Cipher = Cipher;
exports.KEYUTIL = KEYUTIL;
exports.ASN1HEX = ASN1HEX;
exports.X509 = X509;
exports.CryptoJS = CryptoJS;

// ext/base64.js

exports.b64tohex = b64tohex;
exports.b64toBA = b64toBA;

// base64x.js

exports.stoBA = stoBA;
exports.BAtos = BAtos;
exports.BAtohex = BAtohex;
exports.stohex = stohex;
exports.stob64 = stob64;
exports.stob64u = stob64u;
exports.b64utos = b64utos;
exports.b64tob64u = b64tob64u;
exports.b64utob64 = b64utob64;
exports.hex2b64 = hex2b64;
exports.hextob64u = hextob64u;
exports.b64utohex = b64utohex;
exports.utf8tob64u = utf8tob64u;
exports.b64utoutf8 = b64utoutf8;
exports.utf8tob64 = utf8tob64;
exports.b64toutf8 = b64toutf8;
exports.utf8tohex = utf8tohex;
exports.hextoutf8 = hextoutf8;
exports.hextorstr = hextorstr;
exports.rstrtohex = rstrtohex;
exports.hextob64 = hextob64;
exports.hextob64nl = hextob64nl;
exports.b64nltohex = b64nltohex;
exports.hextopem = hextopem;
exports.pemtohex = pemtohex;
exports.hextoArrayBuffer = hextoArrayBuffer;
exports.ArrayBuffertohex = ArrayBuffertohex;
exports.zulutomsec = zulutomsec;
exports.zulutosec = zulutosec;
exports.zulutodate = zulutodate;
exports.datetozulu = datetozulu;
exports.uricmptohex = uricmptohex;
exports.hextouricmp = hextouricmp;
exports.ipv6tohex = ipv6tohex;
exports.hextoipv6 = hextoipv6;
exports.hextoip = hextoip;
exports.iptohex = iptohex;
exports.encodeURIComponentAll = encodeURIComponentAll;
exports.newline_toUnix = newline_toUnix;
exports.newline_toDos = newline_toDos;
exports.hextoposhex = hextoposhex;
exports.intarystrtohex = intarystrtohex;
exports.strdiffidx = strdiffidx;

// name spaces

exports.KJUR = KJUR;

var _crypto = KJUR.crypto;
exports.crypto = _crypto;
var _KJUR = KJUR;
var asn1 = _KJUR.asn1;
exports.asn1 = asn1;
var _KJUR2 = KJUR;
var jws = _KJUR2.jws;
exports.jws = jws;
var _KJUR3 = KJUR;
var lang = _KJUR3.lang;
exports.lang = lang;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/buffer/index.js */ "./node_modules/buffer/index.js").Buffer))

/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



var base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
var ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
var isArray = __webpack_require__(/*! isarray */ "./node_modules/isarray/index.js")

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/isarray/index.js":
/*!***************************************!*\
  !*** ./node_modules/isarray/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./src/AccessTokenEvents.js":
/*!**********************************!*\
  !*** ./src/AccessTokenEvents.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AccessTokenEvents = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Timer = __webpack_require__(/*! ./Timer.js */ "./src/Timer.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultAccessTokenExpiringNotificationTime = 60; // seconds

var AccessTokenEvents = exports.AccessTokenEvents = function () {
    function AccessTokenEvents() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
            _ref$accessTokenExpir2 = _ref.accessTokenExpiringTimer,
            accessTokenExpiringTimer = _ref$accessTokenExpir2 === undefined ? new _Timer.Timer("Access token expiring") : _ref$accessTokenExpir2,
            _ref$accessTokenExpir3 = _ref.accessTokenExpiredTimer,
            accessTokenExpiredTimer = _ref$accessTokenExpir3 === undefined ? new _Timer.Timer("Access token expired") : _ref$accessTokenExpir3;

        _classCallCheck(this, AccessTokenEvents);

        this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;

        this._accessTokenExpiring = accessTokenExpiringTimer;
        this._accessTokenExpired = accessTokenExpiredTimer;
    }

    AccessTokenEvents.prototype.load = function load(container) {
        // only register events if there's an access token and it has an expiration
        if (container.access_token && container.expires_in !== undefined) {
            var duration = container.expires_in;
            _Log.Log.debug("AccessTokenEvents.load: access token present, remaining duration:", duration);

            if (duration > 0) {
                // only register expiring if we still have time
                var expiring = duration - this._accessTokenExpiringNotificationTime;
                if (expiring <= 0) {
                    expiring = 1;
                }

                _Log.Log.debug("AccessTokenEvents.load: registering expiring timer in:", expiring);
                this._accessTokenExpiring.init(expiring);
            } else {
                _Log.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration.");
                this._accessTokenExpiring.cancel();
            }

            // if it's negative, it will still fire
            var expired = duration + 1;
            _Log.Log.debug("AccessTokenEvents.load: registering expired timer in:", expired);
            this._accessTokenExpired.init(expired);
        } else {
            this._accessTokenExpiring.cancel();
            this._accessTokenExpired.cancel();
        }
    };

    AccessTokenEvents.prototype.unload = function unload() {
        _Log.Log.debug("AccessTokenEvents.unload: canceling existing access token timers");
        this._accessTokenExpiring.cancel();
        this._accessTokenExpired.cancel();
    };

    AccessTokenEvents.prototype.addAccessTokenExpiring = function addAccessTokenExpiring(cb) {
        this._accessTokenExpiring.addHandler(cb);
    };

    AccessTokenEvents.prototype.removeAccessTokenExpiring = function removeAccessTokenExpiring(cb) {
        this._accessTokenExpiring.removeHandler(cb);
    };

    AccessTokenEvents.prototype.addAccessTokenExpired = function addAccessTokenExpired(cb) {
        this._accessTokenExpired.addHandler(cb);
    };

    AccessTokenEvents.prototype.removeAccessTokenExpired = function removeAccessTokenExpired(cb) {
        this._accessTokenExpired.removeHandler(cb);
    };

    return AccessTokenEvents;
}();

/***/ }),

/***/ "./src/CheckSessionIFrame.js":
/*!***********************************!*\
  !*** ./src/CheckSessionIFrame.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CheckSessionIFrame = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultInterval = 2000;

var CheckSessionIFrame = exports.CheckSessionIFrame = function () {
    function CheckSessionIFrame(callback, client_id, url, interval) {
        var stopOnError = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;

        _classCallCheck(this, CheckSessionIFrame);

        this._callback = callback;
        this._client_id = client_id;
        this._url = url;
        this._interval = interval || DefaultInterval;
        this._stopOnError = stopOnError;

        var idx = url.indexOf("/", url.indexOf("//") + 2);
        this._frame_origin = url.substr(0, idx);

        this._frame = window.document.createElement("iframe");

        // shotgun approach
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "absolute";
        this._frame.style.display = "none";
        this._frame.width = 0;
        this._frame.height = 0;

        this._frame.src = url;
    }

    CheckSessionIFrame.prototype.load = function load() {
        var _this = this;

        return new Promise(function (resolve) {
            _this._frame.onload = function () {
                resolve();
            };

            window.document.body.appendChild(_this._frame);
            _this._boundMessageEvent = _this._message.bind(_this);
            window.addEventListener("message", _this._boundMessageEvent, false);
        });
    };

    CheckSessionIFrame.prototype._message = function _message(e) {
        if (e.origin === this._frame_origin && e.source === this._frame.contentWindow) {
            if (e.data === "error") {
                _Log.Log.error("CheckSessionIFrame: error message from check session op iframe");
                if (this._stopOnError) {
                    this.stop();
                }
            } else if (e.data === "changed") {
                _Log.Log.debug("CheckSessionIFrame: changed message from check session op iframe");
                this.stop();
                this._callback();
            } else {
                _Log.Log.debug("CheckSessionIFrame: " + e.data + " message from check session op iframe");
            }
        }
    };

    CheckSessionIFrame.prototype.start = function start(session_state) {
        var _this2 = this;

        if (this._session_state !== session_state) {
            _Log.Log.debug("CheckSessionIFrame.start");

            this.stop();

            this._session_state = session_state;

            var send = function send() {
                _this2._frame.contentWindow.postMessage(_this2._client_id + " " + _this2._session_state, _this2._frame_origin);
            };

            // trigger now
            send();

            // and setup timer
            this._timer = window.setInterval(send, this._interval);
        }
    };

    CheckSessionIFrame.prototype.stop = function stop() {
        this._session_state = null;

        if (this._timer) {
            _Log.Log.debug("CheckSessionIFrame.stop");

            window.clearInterval(this._timer);
            this._timer = null;
        }
    };

    return CheckSessionIFrame;
}();

/***/ }),

/***/ "./src/ClockService.js":
/*!*****************************!*\
  !*** ./src/ClockService.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ClockService = exports.ClockService = function () {
    function ClockService() {
        _classCallCheck(this, ClockService);
    }

    ClockService.prototype.getEpochTime = function getEpochTime() {
        return Promise.resolve(Date.now() / 1000 | 0);
    };

    return ClockService;
}();

/***/ }),

/***/ "./src/CordovaIFrameNavigator.js":
/*!***************************************!*\
  !*** ./src/CordovaIFrameNavigator.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaIFrameNavigator = undefined;

var _CordovaPopupWindow = __webpack_require__(/*! ./CordovaPopupWindow.js */ "./src/CordovaPopupWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaIFrameNavigator = exports.CordovaIFrameNavigator = function () {
    function CordovaIFrameNavigator() {
        _classCallCheck(this, CordovaIFrameNavigator);
    }

    CordovaIFrameNavigator.prototype.prepare = function prepare(params) {
        params.popupWindowFeatures = 'hidden=yes';
        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
        return Promise.resolve(popup);
    };

    return CordovaIFrameNavigator;
}();

/***/ }),

/***/ "./src/CordovaPopupNavigator.js":
/*!**************************************!*\
  !*** ./src/CordovaPopupNavigator.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaPopupNavigator = undefined;

var _CordovaPopupWindow = __webpack_require__(/*! ./CordovaPopupWindow.js */ "./src/CordovaPopupWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var CordovaPopupNavigator = exports.CordovaPopupNavigator = function () {
    function CordovaPopupNavigator() {
        _classCallCheck(this, CordovaPopupNavigator);
    }

    CordovaPopupNavigator.prototype.prepare = function prepare(params) {
        var popup = new _CordovaPopupWindow.CordovaPopupWindow(params);
        return Promise.resolve(popup);
    };

    return CordovaPopupNavigator;
}();

/***/ }),

/***/ "./src/CordovaPopupWindow.js":
/*!***********************************!*\
  !*** ./src/CordovaPopupWindow.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.CordovaPopupWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultPopupFeatures = 'location=no,toolbar=no,zoom=no';
var DefaultPopupTarget = "_blank";

var CordovaPopupWindow = exports.CordovaPopupWindow = function () {
    function CordovaPopupWindow(params) {
        var _this = this;

        _classCallCheck(this, CordovaPopupWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        this.features = params.popupWindowFeatures || DefaultPopupFeatures;
        this.target = params.popupWindowTarget || DefaultPopupTarget;

        this.redirect_uri = params.startUrl;
        _Log.Log.debug("CordovaPopupWindow.ctor: redirect_uri: " + this.redirect_uri);
    }

    CordovaPopupWindow.prototype._isInAppBrowserInstalled = function _isInAppBrowserInstalled(cordovaMetadata) {
        return ["cordova-plugin-inappbrowser", "cordova-plugin-inappbrowser.inappbrowser", "org.apache.cordova.inappbrowser"].some(function (name) {
            return cordovaMetadata.hasOwnProperty(name);
        });
    };

    CordovaPopupWindow.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            this._error("No url provided");
        } else {
            if (!window.cordova) {
                return this._error("cordova is undefined");
            }

            var cordovaMetadata = window.cordova.require("cordova/plugin_list").metadata;
            if (this._isInAppBrowserInstalled(cordovaMetadata) === false) {
                return this._error("InAppBrowser plugin not found");
            }
            this._popup = cordova.InAppBrowser.open(params.url, this.target, this.features);
            if (this._popup) {
                _Log.Log.debug("CordovaPopupWindow.navigate: popup successfully created");

                this._exitCallbackEvent = this._exitCallback.bind(this);
                this._loadStartCallbackEvent = this._loadStartCallback.bind(this);

                this._popup.addEventListener("exit", this._exitCallbackEvent, false);
                this._popup.addEventListener("loadstart", this._loadStartCallbackEvent, false);
            } else {
                this._error("Error opening popup window");
            }
        }
        return this.promise;
    };

    CordovaPopupWindow.prototype._loadStartCallback = function _loadStartCallback(event) {
        if (event.url.indexOf(this.redirect_uri) === 0) {
            this._success({ url: event.url });
        }
    };

    CordovaPopupWindow.prototype._exitCallback = function _exitCallback(message) {
        this._error(message);
    };

    CordovaPopupWindow.prototype._success = function _success(data) {
        this._cleanup();

        _Log.Log.debug("CordovaPopupWindow: Successful response from cordova popup window");
        this._resolve(data);
    };

    CordovaPopupWindow.prototype._error = function _error(message) {
        this._cleanup();

        _Log.Log.error(message);
        this._reject(new Error(message));
    };

    CordovaPopupWindow.prototype.close = function close() {
        this._cleanup();
    };

    CordovaPopupWindow.prototype._cleanup = function _cleanup() {
        if (this._popup) {
            _Log.Log.debug("CordovaPopupWindow: cleaning up popup");
            this._popup.removeEventListener("exit", this._exitCallbackEvent, false);
            this._popup.removeEventListener("loadstart", this._loadStartCallbackEvent, false);
            this._popup.close();
        }
        this._popup = null;
    };

    _createClass(CordovaPopupWindow, [{
        key: 'promise',
        get: function get() {
            return this._promise;
        }
    }]);

    return CordovaPopupWindow;
}();

/***/ }),

/***/ "./src/ErrorResponse.js":
/*!******************************!*\
  !*** ./src/ErrorResponse.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ErrorResponse = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ErrorResponse = exports.ErrorResponse = function (_Error) {
    _inherits(ErrorResponse, _Error);

    function ErrorResponse() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            error = _ref.error,
            error_description = _ref.error_description,
            error_uri = _ref.error_uri,
            state = _ref.state,
            session_state = _ref.session_state;

        _classCallCheck(this, ErrorResponse);

        if (!error) {
            _Log.Log.error("No error passed to ErrorResponse");
            throw new Error("error");
        }

        var _this = _possibleConstructorReturn(this, _Error.call(this, error_description || error));

        _this.name = "ErrorResponse";

        _this.error = error;
        _this.error_description = error_description;
        _this.error_uri = error_uri;

        _this.state = state;
        _this.session_state = session_state;
        return _this;
    }

    return ErrorResponse;
}(Error);

/***/ }),

/***/ "./src/Event.js":
/*!**********************!*\
  !*** ./src/Event.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Event = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var Event = exports.Event = function () {
    function Event(name) {
        _classCallCheck(this, Event);

        this._name = name;
        this._callbacks = [];
    }

    Event.prototype.addHandler = function addHandler(cb) {
        this._callbacks.push(cb);
    };

    Event.prototype.removeHandler = function removeHandler(cb) {
        var idx = this._callbacks.findIndex(function (item) {
            return item === cb;
        });
        if (idx >= 0) {
            this._callbacks.splice(idx, 1);
        }
    };

    Event.prototype.raise = function raise() {
        _Log.Log.debug("Event: Raising event: " + this._name);
        for (var i = 0; i < this._callbacks.length; i++) {
            var _callbacks;

            (_callbacks = this._callbacks)[i].apply(_callbacks, arguments);
        }
    };

    return Event;
}();

/***/ }),

/***/ "./src/Global.js":
/*!***********************!*\
  !*** ./src/Global.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var timer = {
    setInterval: function (_setInterval) {
        function setInterval(_x, _x2) {
            return _setInterval.apply(this, arguments);
        }

        setInterval.toString = function () {
            return _setInterval.toString();
        };

        return setInterval;
    }(function (cb, duration) {
        return setInterval(cb, duration);
    }),
    clearInterval: function (_clearInterval) {
        function clearInterval(_x3) {
            return _clearInterval.apply(this, arguments);
        }

        clearInterval.toString = function () {
            return _clearInterval.toString();
        };

        return clearInterval;
    }(function (handle) {
        return clearInterval(handle);
    })
};

var testing = false;
var request = null;

var Global = exports.Global = function () {
    function Global() {
        _classCallCheck(this, Global);
    }

    Global._testing = function _testing() {
        testing = true;
    };

    Global.setXMLHttpRequest = function setXMLHttpRequest(newRequest) {
        request = newRequest;
    };

    _createClass(Global, null, [{
        key: 'location',
        get: function get() {
            if (!testing) {
                return location;
            }
        }
    }, {
        key: 'localStorage',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return localStorage;
            }
        }
    }, {
        key: 'sessionStorage',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return sessionStorage;
            }
        }
    }, {
        key: 'XMLHttpRequest',
        get: function get() {
            if (!testing && typeof window !== 'undefined') {
                return request || XMLHttpRequest;
            }
        }
    }, {
        key: 'timer',
        get: function get() {
            if (!testing) {
                return timer;
            }
        }
    }]);

    return Global;
}();

/***/ }),

/***/ "./src/IFrameNavigator.js":
/*!********************************!*\
  !*** ./src/IFrameNavigator.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFrameNavigator = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _IFrameWindow = __webpack_require__(/*! ./IFrameWindow.js */ "./src/IFrameWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var IFrameNavigator = exports.IFrameNavigator = function () {
    function IFrameNavigator() {
        _classCallCheck(this, IFrameNavigator);
    }

    IFrameNavigator.prototype.prepare = function prepare(params) {
        var frame = new _IFrameWindow.IFrameWindow(params);
        return Promise.resolve(frame);
    };

    IFrameNavigator.prototype.callback = function callback(url) {
        _Log.Log.debug("IFrameNavigator.callback");

        try {
            _IFrameWindow.IFrameWindow.notifyParent(url);
            return Promise.resolve();
        } catch (e) {
            return Promise.reject(e);
        }
    };

    return IFrameNavigator;
}();

/***/ }),

/***/ "./src/IFrameWindow.js":
/*!*****************************!*\
  !*** ./src/IFrameWindow.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.IFrameWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DefaultTimeout = 10000;

var IFrameWindow = exports.IFrameWindow = function () {
    function IFrameWindow(params) {
        var _this = this;

        _classCallCheck(this, IFrameWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        this._boundMessageEvent = this._message.bind(this);
        window.addEventListener("message", this._boundMessageEvent, false);

        this._frame = window.document.createElement("iframe");

        // shotgun approach
        this._frame.style.visibility = "hidden";
        this._frame.style.position = "absolute";
        this._frame.width = 0;
        this._frame.height = 0;

        window.document.body.appendChild(this._frame);
    }

    IFrameWindow.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            this._error("No url provided");
        } else {
            var timeout = params.silentRequestTimeout || DefaultTimeout;
            _Log.Log.debug("IFrameWindow.navigate: Using timeout of:", timeout);
            this._timer = window.setTimeout(this._timeout.bind(this), timeout);
            this._frame.src = params.url;
        }

        return this.promise;
    };

    IFrameWindow.prototype._success = function _success(data) {
        this._cleanup();

        _Log.Log.debug("IFrameWindow: Successful response from frame window");
        this._resolve(data);
    };

    IFrameWindow.prototype._error = function _error(message) {
        this._cleanup();

        _Log.Log.error(message);
        this._reject(new Error(message));
    };

    IFrameWindow.prototype.close = function close() {
        this._cleanup();
    };

    IFrameWindow.prototype._cleanup = function _cleanup() {
        if (this._frame) {
            _Log.Log.debug("IFrameWindow: cleanup");

            window.removeEventListener("message", this._boundMessageEvent, false);
            window.clearTimeout(this._timer);
            window.document.body.removeChild(this._frame);

            this._timer = null;
            this._frame = null;
            this._boundMessageEvent = null;
        }
    };

    IFrameWindow.prototype._timeout = function _timeout() {
        _Log.Log.debug("IFrameWindow.timeout");
        this._error("Frame window timed out");
    };

    IFrameWindow.prototype._message = function _message(e) {
        _Log.Log.debug("IFrameWindow.message");

        if (this._timer && e.origin === this._origin && e.source === this._frame.contentWindow && typeof e.data === 'string' && (e.data.startsWith('http://') || e.data.startsWith('https://'))) {
            var url = e.data;
            if (url) {
                this._success({ url: url });
            } else {
                this._error("Invalid response from frame");
            }
        }
    };

    IFrameWindow.notifyParent = function notifyParent(url) {
        _Log.Log.debug("IFrameWindow.notifyParent");
        url = url || window.location.href;
        if (url) {
            _Log.Log.debug("IFrameWindow.notifyParent: posting url message to parent");
            window.parent.postMessage(url, location.protocol + "//" + location.host);
        }
    };

    _createClass(IFrameWindow, [{
        key: "promise",
        get: function get() {
            return this._promise;
        }
    }, {
        key: "_origin",
        get: function get() {
            return location.protocol + "//" + location.host;
        }
    }]);

    return IFrameWindow;
}();

/***/ }),

/***/ "./src/InMemoryWebStorage.js":
/*!***********************************!*\
  !*** ./src/InMemoryWebStorage.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.InMemoryWebStorage = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var InMemoryWebStorage = exports.InMemoryWebStorage = function () {
    function InMemoryWebStorage() {
        _classCallCheck(this, InMemoryWebStorage);

        this._data = {};
    }

    InMemoryWebStorage.prototype.getItem = function getItem(key) {
        _Log.Log.debug("InMemoryWebStorage.getItem", key);
        return this._data[key];
    };

    InMemoryWebStorage.prototype.setItem = function setItem(key, value) {
        _Log.Log.debug("InMemoryWebStorage.setItem", key);
        this._data[key] = value;
    };

    InMemoryWebStorage.prototype.removeItem = function removeItem(key) {
        _Log.Log.debug("InMemoryWebStorage.removeItem", key);
        delete this._data[key];
    };

    InMemoryWebStorage.prototype.key = function key(index) {
        return Object.getOwnPropertyNames(this._data)[index];
    };

    _createClass(InMemoryWebStorage, [{
        key: "length",
        get: function get() {
            return Object.getOwnPropertyNames(this._data).length;
        }
    }]);

    return InMemoryWebStorage;
}();

/***/ }),

/***/ "./src/JoseUtil.js":
/*!*************************!*\
  !*** ./src/JoseUtil.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JoseUtil = undefined;

var _jsrsasign = __webpack_require__(/*! ./crypto/jsrsasign */ "./src/crypto/jsrsasign.js");

var _JoseUtilImpl = __webpack_require__(/*! ./JoseUtilImpl */ "./src/JoseUtilImpl.js");

var _JoseUtilImpl2 = _interopRequireDefault(_JoseUtilImpl);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var JoseUtil = exports.JoseUtil = (0, _JoseUtilImpl2.default)({ jws: _jsrsasign.jws, KeyUtil: _jsrsasign.KeyUtil, X509: _jsrsasign.X509, crypto: _jsrsasign.crypto, hextob64u: _jsrsasign.hextob64u, b64tohex: _jsrsasign.b64tohex, AllowedSigningAlgs: _jsrsasign.AllowedSigningAlgs });

/***/ }),

/***/ "./src/JoseUtilImpl.js":
/*!*****************************!*\
  !*** ./src/JoseUtilImpl.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = getJoseUtil;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

function getJoseUtil(_ref) {
    var jws = _ref.jws,
        KeyUtil = _ref.KeyUtil,
        X509 = _ref.X509,
        crypto = _ref.crypto,
        hextob64u = _ref.hextob64u,
        b64tohex = _ref.b64tohex,
        AllowedSigningAlgs = _ref.AllowedSigningAlgs;

    return function () {
        function JoseUtil() {
            _classCallCheck(this, JoseUtil);
        }

        JoseUtil.parseJwt = function parseJwt(jwt) {
            _Log.Log.debug("JoseUtil.parseJwt");
            try {
                var token = jws.JWS.parse(jwt);
                return {
                    header: token.headerObj,
                    payload: token.payloadObj
                };
            } catch (e) {
                _Log.Log.error(e);
            }
        };

        JoseUtil.validateJwt = function validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive) {
            _Log.Log.debug("JoseUtil.validateJwt");

            try {
                if (key.kty === "RSA") {
                    if (key.e && key.n) {
                        key = KeyUtil.getKey(key);
                    } else if (key.x5c && key.x5c.length) {
                        var hex = b64tohex(key.x5c[0]);
                        key = X509.getPublicKeyFromCertHex(hex);
                    } else {
                        _Log.Log.error("JoseUtil.validateJwt: RSA key missing key material", key);
                        return Promise.reject(new Error("RSA key missing key material"));
                    }
                } else if (key.kty === "EC") {
                    if (key.crv && key.x && key.y) {
                        key = KeyUtil.getKey(key);
                    } else {
                        _Log.Log.error("JoseUtil.validateJwt: EC key missing key material", key);
                        return Promise.reject(new Error("EC key missing key material"));
                    }
                } else {
                    _Log.Log.error("JoseUtil.validateJwt: Unsupported key type", key && key.kty);
                    return Promise.reject(new Error( true && key.kty));
                }

                return JoseUtil._validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive);
            } catch (e) {
                _Log.Log.error(e && e.message || e);
                return Promise.reject("JWT validation failed");
            }
        };

        JoseUtil.validateJwtAttributes = function validateJwtAttributes(jwt, issuer, audience, clockSkew, now, timeInsensitive) {
            if (!clockSkew) {
                clockSkew = 0;
            }

            if (!now) {
                now = parseInt(Date.now() / 1000);
            }

            var payload = JoseUtil.parseJwt(jwt).payload;

            if (!payload.iss) {
                _Log.Log.error("JoseUtil._validateJwt: issuer was not provided");
                return Promise.reject(new Error("issuer was not provided"));
            }
            if (payload.iss !== issuer) {
                _Log.Log.error("JoseUtil._validateJwt: Invalid issuer in token", payload.iss);
                return Promise.reject(new Error("Invalid issuer in token: " + payload.iss));
            }

            if (!payload.aud) {
                _Log.Log.error("JoseUtil._validateJwt: aud was not provided");
                return Promise.reject(new Error("aud was not provided"));
            }
            var validAudience = payload.aud === audience || Array.isArray(payload.aud) && payload.aud.indexOf(audience) >= 0;
            if (!validAudience) {
                _Log.Log.error("JoseUtil._validateJwt: Invalid audience in token", payload.aud);
                return Promise.reject(new Error("Invalid audience in token: " + payload.aud));
            }
            if (payload.azp && payload.azp !== audience) {
                _Log.Log.error("JoseUtil._validateJwt: Invalid azp in token", payload.azp);
                return Promise.reject(new Error("Invalid azp in token: " + payload.azp));
            }

            if (!timeInsensitive) {
                var lowerNow = now + clockSkew;
                var upperNow = now - clockSkew;

                if (!payload.iat) {
                    _Log.Log.error("JoseUtil._validateJwt: iat was not provided");
                    return Promise.reject(new Error("iat was not provided"));
                }
                if (lowerNow < payload.iat) {
                    _Log.Log.error("JoseUtil._validateJwt: iat is in the future", payload.iat);
                    return Promise.reject(new Error("iat is in the future: " + payload.iat));
                }

                if (payload.nbf && lowerNow < payload.nbf) {
                    _Log.Log.error("JoseUtil._validateJwt: nbf is in the future", payload.nbf);
                    return Promise.reject(new Error("nbf is in the future: " + payload.nbf));
                }

                if (!payload.exp) {
                    _Log.Log.error("JoseUtil._validateJwt: exp was not provided");
                    return Promise.reject(new Error("exp was not provided"));
                }
                if (payload.exp < upperNow) {
                    _Log.Log.error("JoseUtil._validateJwt: exp is in the past", payload.exp);
                    return Promise.reject(new Error("exp is in the past:" + payload.exp));
                }
            }

            return Promise.resolve(payload);
        };

        JoseUtil._validateJwt = function _validateJwt(jwt, key, issuer, audience, clockSkew, now, timeInsensitive) {

            return JoseUtil.validateJwtAttributes(jwt, issuer, audience, clockSkew, now, timeInsensitive).then(function (payload) {
                try {
                    if (!jws.JWS.verify(jwt, key, AllowedSigningAlgs)) {
                        _Log.Log.error("JoseUtil._validateJwt: signature validation failed");
                        return Promise.reject(new Error("signature validation failed"));
                    }

                    return payload;
                } catch (e) {
                    _Log.Log.error(e && e.message || e);
                    return Promise.reject(new Error("signature validation failed"));
                }
            });
        };

        JoseUtil.hashString = function hashString(value, alg) {
            try {
                return crypto.Util.hashString(value, alg);
            } catch (e) {
                _Log.Log.error(e);
            }
        };

        JoseUtil.hexToBase64Url = function hexToBase64Url(value) {
            try {
                return hextob64u(value);
            } catch (e) {
                _Log.Log.error(e);
            }
        };

        return JoseUtil;
    }();
}
module.exports = exports["default"];

/***/ }),

/***/ "./src/JsonService.js":
/*!****************************!*\
  !*** ./src/JsonService.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.JsonService = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var JsonService = exports.JsonService = function () {
    function JsonService() {
        var additionalContentTypes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.XMLHttpRequest;
        var jwtHandler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

        _classCallCheck(this, JsonService);

        if (additionalContentTypes && Array.isArray(additionalContentTypes)) {
            this._contentTypes = additionalContentTypes.slice();
        } else {
            this._contentTypes = [];
        }
        this._contentTypes.push('application/json');
        if (jwtHandler) {
            this._contentTypes.push('application/jwt');
        }

        this._XMLHttpRequest = XMLHttpRequestCtor;
        this._jwtHandler = jwtHandler;
    }

    JsonService.prototype.getJson = function getJson(url, token) {
        var _this = this;

        if (!url) {
            _Log.Log.error("JsonService.getJson: No url passed");
            throw new Error("url");
        }

        _Log.Log.debug("JsonService.getJson, url: ", url);

        return new Promise(function (resolve, reject) {

            var req = new _this._XMLHttpRequest();
            req.open('GET', url);

            var allowedContentTypes = _this._contentTypes;
            var jwtHandler = _this._jwtHandler;

            req.onload = function () {
                _Log.Log.debug("JsonService.getJson: HTTP response received, status", req.status);

                if (req.status === 200) {

                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType) {

                        var found = allowedContentTypes.find(function (item) {
                            if (contentType.startsWith(item)) {
                                return true;
                            }
                        });

                        if (found == "application/jwt") {
                            jwtHandler(req).then(resolve, reject);
                            return;
                        }

                        if (found) {
                            try {
                                resolve(JSON.parse(req.responseText));
                                return;
                            } catch (e) {
                                _Log.Log.error("JsonService.getJson: Error parsing JSON response", e.message);
                                reject(e);
                                return;
                            }
                        }
                    }

                    reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
                } else {
                    reject(Error(req.statusText + " (" + req.status + ")"));
                }
            };

            req.onerror = function () {
                _Log.Log.error("JsonService.getJson: network error");
                reject(Error("Network Error"));
            };

            if (token) {
                _Log.Log.debug("JsonService.getJson: token passed, setting Authorization header");
                req.setRequestHeader("Authorization", "Bearer " + token);
            }

            req.send();
        });
    };

    JsonService.prototype.postForm = function postForm(url, payload, basicAuth) {
        var _this2 = this;

        if (!url) {
            _Log.Log.error("JsonService.postForm: No url passed");
            throw new Error("url");
        }

        _Log.Log.debug("JsonService.postForm, url: ", url);

        return new Promise(function (resolve, reject) {

            var req = new _this2._XMLHttpRequest();
            req.open('POST', url);

            var allowedContentTypes = _this2._contentTypes;

            req.onload = function () {
                _Log.Log.debug("JsonService.postForm: HTTP response received, status", req.status);

                if (req.status === 200) {

                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType) {

                        var found = allowedContentTypes.find(function (item) {
                            if (contentType.startsWith(item)) {
                                return true;
                            }
                        });

                        if (found) {
                            try {
                                resolve(JSON.parse(req.responseText));
                                return;
                            } catch (e) {
                                _Log.Log.error("JsonService.postForm: Error parsing JSON response", e.message);
                                reject(e);
                                return;
                            }
                        }
                    }

                    reject(Error("Invalid response Content-Type: " + contentType + ", from URL: " + url));
                    return;
                }

                if (req.status === 400) {

                    var contentType = req.getResponseHeader("Content-Type");
                    if (contentType) {

                        var found = allowedContentTypes.find(function (item) {
                            if (contentType.startsWith(item)) {
                                return true;
                            }
                        });

                        if (found) {
                            try {
                                var payload = JSON.parse(req.responseText);
                                if (payload && payload.error) {
                                    _Log.Log.error("JsonService.postForm: Error from server: ", payload.error);
                                    reject(new Error(payload.error));
                                    return;
                                }
                            } catch (e) {
                                _Log.Log.error("JsonService.postForm: Error parsing JSON response", e.message);
                                reject(e);
                                return;
                            }
                        }
                    }
                }

                reject(Error(req.statusText + " (" + req.status + ")"));
            };

            req.onerror = function () {
                _Log.Log.error("JsonService.postForm: network error");
                reject(Error("Network Error"));
            };

            var body = "";
            for (var key in payload) {

                var value = payload[key];

                if (value) {

                    if (body.length > 0) {
                        body += "&";
                    }

                    body += encodeURIComponent(key);
                    body += "=";
                    body += encodeURIComponent(value);
                }
            }

            req.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

            if (basicAuth !== undefined) {
                req.setRequestHeader("Authorization", "Basic " + btoa(basicAuth));
            }

            req.send(body);
        });
    };

    return JsonService;
}();

/***/ }),

/***/ "./src/Log.js":
/*!********************!*\
  !*** ./src/Log.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var nopLogger = {
    debug: function debug() {},
    info: function info() {},
    warn: function warn() {},
    error: function error() {}
};

var NONE = 0;
var ERROR = 1;
var WARN = 2;
var INFO = 3;
var DEBUG = 4;

var logger = void 0;
var level = void 0;

var Log = exports.Log = function () {
    function Log() {
        _classCallCheck(this, Log);
    }

    Log.reset = function reset() {
        level = INFO;
        logger = nopLogger;
    };

    Log.debug = function debug() {
        if (level >= DEBUG) {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            logger.debug.apply(logger, Array.from(args));
        }
    };

    Log.info = function info() {
        if (level >= INFO) {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                args[_key2] = arguments[_key2];
            }

            logger.info.apply(logger, Array.from(args));
        }
    };

    Log.warn = function warn() {
        if (level >= WARN) {
            for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
                args[_key3] = arguments[_key3];
            }

            logger.warn.apply(logger, Array.from(args));
        }
    };

    Log.error = function error() {
        if (level >= ERROR) {
            for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
                args[_key4] = arguments[_key4];
            }

            logger.error.apply(logger, Array.from(args));
        }
    };

    _createClass(Log, null, [{
        key: "NONE",
        get: function get() {
            return NONE;
        }
    }, {
        key: "ERROR",
        get: function get() {
            return ERROR;
        }
    }, {
        key: "WARN",
        get: function get() {
            return WARN;
        }
    }, {
        key: "INFO",
        get: function get() {
            return INFO;
        }
    }, {
        key: "DEBUG",
        get: function get() {
            return DEBUG;
        }
    }, {
        key: "level",
        get: function get() {
            return level;
        },
        set: function set(value) {
            if (NONE <= value && value <= DEBUG) {
                level = value;
            } else {
                throw new Error("Invalid log level");
            }
        }
    }, {
        key: "logger",
        get: function get() {
            return logger;
        },
        set: function set(value) {
            if (!value.debug && value.info) {
                // just to stay backwards compat. can remove in 2.0
                value.debug = value.info;
            }

            if (value.debug && value.info && value.warn && value.error) {
                logger = value;
            } else {
                throw new Error("Invalid logger");
            }
        }
    }]);

    return Log;
}();

Log.reset();

/***/ }),

/***/ "./src/MetadataService.js":
/*!********************************!*\
  !*** ./src/MetadataService.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MetadataService = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _JsonService = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcMetadataUrlPath = '.well-known/openid-configuration';

var MetadataService = exports.MetadataService = function () {
    function MetadataService(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;

        _classCallCheck(this, MetadataService);

        if (!settings) {
            _Log.Log.error("MetadataService: No settings passed to MetadataService");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor(['application/jwk-set+json']);
    }

    MetadataService.prototype.resetSigningKeys = function resetSigningKeys() {
        this._settings = this._settings || {};
        this._settings.signingKeys = undefined;
    };

    MetadataService.prototype.getMetadata = function getMetadata() {
        var _this = this;

        if (this._settings.metadata) {
            _Log.Log.debug("MetadataService.getMetadata: Returning metadata from settings");
            return Promise.resolve(this._settings.metadata);
        }

        if (!this.metadataUrl) {
            _Log.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings");
            return Promise.reject(new Error("No authority or metadataUrl configured on settings"));
        }

        _Log.Log.debug("MetadataService.getMetadata: getting metadata from", this.metadataUrl);

        return this._jsonService.getJson(this.metadataUrl).then(function (metadata) {
            _Log.Log.debug("MetadataService.getMetadata: json received");

            var seed = _this._settings.metadataSeed || {};
            _this._settings.metadata = Object.assign({}, seed, metadata);
            return _this._settings.metadata;
        });
    };

    MetadataService.prototype.getIssuer = function getIssuer() {
        return this._getMetadataProperty("issuer");
    };

    MetadataService.prototype.getAuthorizationEndpoint = function getAuthorizationEndpoint() {
        return this._getMetadataProperty("authorization_endpoint");
    };

    MetadataService.prototype.getUserInfoEndpoint = function getUserInfoEndpoint() {
        return this._getMetadataProperty("userinfo_endpoint");
    };

    MetadataService.prototype.getTokenEndpoint = function getTokenEndpoint() {
        var optional = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        return this._getMetadataProperty("token_endpoint", optional);
    };

    MetadataService.prototype.getCheckSessionIframe = function getCheckSessionIframe() {
        return this._getMetadataProperty("check_session_iframe", true);
    };

    MetadataService.prototype.getEndSessionEndpoint = function getEndSessionEndpoint() {
        return this._getMetadataProperty("end_session_endpoint", true);
    };

    MetadataService.prototype.getRevocationEndpoint = function getRevocationEndpoint() {
        return this._getMetadataProperty("revocation_endpoint", true);
    };

    MetadataService.prototype.getKeysEndpoint = function getKeysEndpoint() {
        return this._getMetadataProperty("jwks_uri", true);
    };

    MetadataService.prototype._getMetadataProperty = function _getMetadataProperty(name) {
        var optional = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        _Log.Log.debug("MetadataService.getMetadataProperty for: " + name);

        return this.getMetadata().then(function (metadata) {
            _Log.Log.debug("MetadataService.getMetadataProperty: metadata recieved");

            if (metadata[name] === undefined) {

                if (optional === true) {
                    _Log.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property " + name);
                    return undefined;
                } else {
                    _Log.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property " + name);
                    throw new Error("Metadata does not contain property " + name);
                }
            }

            return metadata[name];
        });
    };

    MetadataService.prototype.getSigningKeys = function getSigningKeys() {
        var _this2 = this;

        if (this._settings.signingKeys) {
            _Log.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings");
            return Promise.resolve(this._settings.signingKeys);
        }

        return this._getMetadataProperty("jwks_uri").then(function (jwks_uri) {
            _Log.Log.debug("MetadataService.getSigningKeys: jwks_uri received", jwks_uri);

            return _this2._jsonService.getJson(jwks_uri).then(function (keySet) {
                _Log.Log.debug("MetadataService.getSigningKeys: key set received", keySet);

                if (!keySet.keys) {
                    _Log.Log.error("MetadataService.getSigningKeys: Missing keys on keyset");
                    throw new Error("Missing keys on keyset");
                }

                _this2._settings.signingKeys = keySet.keys;
                return _this2._settings.signingKeys;
            });
        });
    };

    _createClass(MetadataService, [{
        key: 'metadataUrl',
        get: function get() {
            if (!this._metadataUrl) {
                if (this._settings.metadataUrl) {
                    this._metadataUrl = this._settings.metadataUrl;
                } else {
                    this._metadataUrl = this._settings.authority;

                    if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
                        if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
                            this._metadataUrl += '/';
                        }
                        this._metadataUrl += OidcMetadataUrlPath;
                    }
                }
            }

            return this._metadataUrl;
        }
    }]);

    return MetadataService;
}();

/***/ }),

/***/ "./src/OidcClient.js":
/*!***************************!*\
  !*** ./src/OidcClient.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OidcClient = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _OidcClientSettings = __webpack_require__(/*! ./OidcClientSettings.js */ "./src/OidcClientSettings.js");

var _ErrorResponse = __webpack_require__(/*! ./ErrorResponse.js */ "./src/ErrorResponse.js");

var _SigninRequest = __webpack_require__(/*! ./SigninRequest.js */ "./src/SigninRequest.js");

var _SigninResponse = __webpack_require__(/*! ./SigninResponse.js */ "./src/SigninResponse.js");

var _SignoutRequest = __webpack_require__(/*! ./SignoutRequest.js */ "./src/SignoutRequest.js");

var _SignoutResponse = __webpack_require__(/*! ./SignoutResponse.js */ "./src/SignoutResponse.js");

var _SigninState = __webpack_require__(/*! ./SigninState.js */ "./src/SigninState.js");

var _State = __webpack_require__(/*! ./State.js */ "./src/State.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcClient = exports.OidcClient = function () {
    function OidcClient() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        _classCallCheck(this, OidcClient);

        if (settings instanceof _OidcClientSettings.OidcClientSettings) {
            this._settings = settings;
        } else {
            this._settings = new _OidcClientSettings.OidcClientSettings(settings);
        }
    }

    OidcClient.prototype.createSigninRequest = function createSigninRequest() {
        var _this = this;

        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            response_type = _ref.response_type,
            scope = _ref.scope,
            redirect_uri = _ref.redirect_uri,
            data = _ref.data,
            state = _ref.state,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            id_token_hint = _ref.id_token_hint,
            login_hint = _ref.login_hint,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            request = _ref.request,
            request_uri = _ref.request_uri,
            response_mode = _ref.response_mode,
            extraQueryParams = _ref.extraQueryParams,
            extraTokenParams = _ref.extraTokenParams,
            request_type = _ref.request_type,
            skipUserInfo = _ref.skipUserInfo;

        var stateStore = arguments[1];

        _Log.Log.debug("OidcClient.createSigninRequest");

        var client_id = this._settings.client_id;
        response_type = response_type || this._settings.response_type;
        scope = scope || this._settings.scope;
        redirect_uri = redirect_uri || this._settings.redirect_uri;

        // id_token_hint, login_hint aren't allowed on _settings
        prompt = prompt || this._settings.prompt;
        display = display || this._settings.display;
        max_age = max_age || this._settings.max_age;
        ui_locales = ui_locales || this._settings.ui_locales;
        acr_values = acr_values || this._settings.acr_values;
        resource = resource || this._settings.resource;
        response_mode = response_mode || this._settings.response_mode;
        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;
        extraTokenParams = extraTokenParams || this._settings.extraTokenParams;

        var authority = this._settings.authority;

        if (_SigninRequest.SigninRequest.isCode(response_type) && response_type !== "code") {
            return Promise.reject(new Error("OpenID Connect hybrid flow is not supported"));
        }

        return this._metadataService.getAuthorizationEndpoint().then(function (url) {
            _Log.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint", url);

            var signinRequest = new _SigninRequest.SigninRequest({
                url: url,
                client_id: client_id,
                redirect_uri: redirect_uri,
                response_type: response_type,
                scope: scope,
                data: data || state,
                authority: authority,
                prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values,
                resource: resource, request: request, request_uri: request_uri, extraQueryParams: extraQueryParams, extraTokenParams: extraTokenParams, request_type: request_type, response_mode: response_mode,
                client_secret: _this._settings.client_secret,
                skipUserInfo: skipUserInfo
            });

            var signinState = signinRequest.state;
            stateStore = stateStore || _this._stateStore;

            return stateStore.set(signinState.id, signinState.toStorageString()).then(function () {
                return signinRequest;
            });
        });
    };

    OidcClient.prototype.readSigninResponseState = function readSigninResponseState(url, stateStore) {
        var removeState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _Log.Log.debug("OidcClient.readSigninResponseState");

        var useQuery = this._settings.response_mode === "query" || !this._settings.response_mode && _SigninRequest.SigninRequest.isCode(this._settings.response_type);
        var delimiter = useQuery ? "?" : "#";

        var response = new _SigninResponse.SigninResponse(url, delimiter);

        if (!response.state) {
            _Log.Log.error("OidcClient.readSigninResponseState: No state in response");
            return Promise.reject(new Error("No state in response"));
        }

        stateStore = stateStore || this._stateStore;

        var stateApi = removeState ? stateStore.remove.bind(stateStore) : stateStore.get.bind(stateStore);

        return stateApi(response.state).then(function (storedStateString) {
            if (!storedStateString) {
                _Log.Log.error("OidcClient.readSigninResponseState: No matching state found in storage");
                throw new Error("No matching state found in storage");
            }

            var state = _SigninState.SigninState.fromStorageString(storedStateString);
            return { state: state, response: response };
        });
    };

    OidcClient.prototype.processSigninResponse = function processSigninResponse(url, stateStore) {
        var _this2 = this;

        _Log.Log.debug("OidcClient.processSigninResponse");

        return this.readSigninResponseState(url, stateStore, true).then(function (_ref2) {
            var state = _ref2.state,
                response = _ref2.response;

            _Log.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response");
            return _this2._validator.validateSigninResponse(state, response);
        });
    };

    OidcClient.prototype.createSignoutRequest = function createSignoutRequest() {
        var _this3 = this;

        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id_token_hint = _ref3.id_token_hint,
            data = _ref3.data,
            state = _ref3.state,
            post_logout_redirect_uri = _ref3.post_logout_redirect_uri,
            extraQueryParams = _ref3.extraQueryParams,
            request_type = _ref3.request_type;

        var stateStore = arguments[1];

        _Log.Log.debug("OidcClient.createSignoutRequest");

        post_logout_redirect_uri = post_logout_redirect_uri || this._settings.post_logout_redirect_uri;
        extraQueryParams = extraQueryParams || this._settings.extraQueryParams;

        return this._metadataService.getEndSessionEndpoint().then(function (url) {
            if (!url) {
                _Log.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned");
                throw new Error("no end session endpoint");
            }

            _Log.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint", url);

            var request = new _SignoutRequest.SignoutRequest({
                url: url,
                id_token_hint: id_token_hint,
                post_logout_redirect_uri: post_logout_redirect_uri,
                data: data || state,
                extraQueryParams: extraQueryParams,
                request_type: request_type
            });

            var signoutState = request.state;
            if (signoutState) {
                _Log.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist");

                stateStore = stateStore || _this3._stateStore;
                stateStore.set(signoutState.id, signoutState.toStorageString());
            }

            return request;
        });
    };

    OidcClient.prototype.readSignoutResponseState = function readSignoutResponseState(url, stateStore) {
        var removeState = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

        _Log.Log.debug("OidcClient.readSignoutResponseState");

        var response = new _SignoutResponse.SignoutResponse(url);
        if (!response.state) {
            _Log.Log.debug("OidcClient.readSignoutResponseState: No state in response");

            if (response.error) {
                _Log.Log.warn("OidcClient.readSignoutResponseState: Response was error: ", response.error);
                return Promise.reject(new _ErrorResponse.ErrorResponse(response));
            }

            return Promise.resolve({ state: undefined, response: response });
        }

        var stateKey = response.state;

        stateStore = stateStore || this._stateStore;

        var stateApi = removeState ? stateStore.remove.bind(stateStore) : stateStore.get.bind(stateStore);
        return stateApi(stateKey).then(function (storedStateString) {
            if (!storedStateString) {
                _Log.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage");
                throw new Error("No matching state found in storage");
            }

            var state = _State.State.fromStorageString(storedStateString);

            return { state: state, response: response };
        });
    };

    OidcClient.prototype.processSignoutResponse = function processSignoutResponse(url, stateStore) {
        var _this4 = this;

        _Log.Log.debug("OidcClient.processSignoutResponse");

        return this.readSignoutResponseState(url, stateStore, true).then(function (_ref4) {
            var state = _ref4.state,
                response = _ref4.response;

            if (state) {
                _Log.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response");
                return _this4._validator.validateSignoutResponse(state, response);
            } else {
                _Log.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response");
                return response;
            }
        });
    };

    OidcClient.prototype.clearStaleState = function clearStaleState(stateStore) {
        _Log.Log.debug("OidcClient.clearStaleState");

        stateStore = stateStore || this._stateStore;

        return _State.State.clearStaleState(stateStore, this.settings.staleStateAge);
    };

    _createClass(OidcClient, [{
        key: '_stateStore',
        get: function get() {
            return this.settings.stateStore;
        }
    }, {
        key: '_validator',
        get: function get() {
            return this.settings.validator;
        }
    }, {
        key: '_metadataService',
        get: function get() {
            return this.settings.metadataService;
        }
    }, {
        key: 'settings',
        get: function get() {
            return this._settings;
        }
    }, {
        key: 'metadataService',
        get: function get() {
            return this._metadataService;
        }
    }]);

    return OidcClient;
}();

/***/ }),

/***/ "./src/OidcClientSettings.js":
/*!***********************************!*\
  !*** ./src/OidcClientSettings.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.OidcClientSettings = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _ClockService = __webpack_require__(/*! ./ClockService.js */ "./src/ClockService.js");

var _WebStorageStateStore = __webpack_require__(/*! ./WebStorageStateStore.js */ "./src/WebStorageStateStore.js");

var _ResponseValidator = __webpack_require__(/*! ./ResponseValidator.js */ "./src/ResponseValidator.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcMetadataUrlPath = '.well-known/openid-configuration';

var DefaultResponseType = "id_token";
var DefaultScope = "openid";
var DefaultClientAuthentication = "client_secret_post"; // The default value must be client_secret_basic, as explained in https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication
var DefaultStaleStateAge = 60 * 15; // seconds
var DefaultClockSkewInSeconds = 60 * 5;

var OidcClientSettings = exports.OidcClientSettings = function () {
    function OidcClientSettings() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            authority = _ref.authority,
            metadataUrl = _ref.metadataUrl,
            metadata = _ref.metadata,
            signingKeys = _ref.signingKeys,
            metadataSeed = _ref.metadataSeed,
            client_id = _ref.client_id,
            client_secret = _ref.client_secret,
            _ref$response_type = _ref.response_type,
            response_type = _ref$response_type === undefined ? DefaultResponseType : _ref$response_type,
            _ref$scope = _ref.scope,
            scope = _ref$scope === undefined ? DefaultScope : _ref$scope,
            redirect_uri = _ref.redirect_uri,
            post_logout_redirect_uri = _ref.post_logout_redirect_uri,
            _ref$client_authentic = _ref.client_authentication,
            client_authentication = _ref$client_authentic === undefined ? DefaultClientAuthentication : _ref$client_authentic,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            response_mode = _ref.response_mode,
            _ref$filterProtocolCl = _ref.filterProtocolClaims,
            filterProtocolClaims = _ref$filterProtocolCl === undefined ? true : _ref$filterProtocolCl,
            _ref$loadUserInfo = _ref.loadUserInfo,
            loadUserInfo = _ref$loadUserInfo === undefined ? true : _ref$loadUserInfo,
            _ref$staleStateAge = _ref.staleStateAge,
            staleStateAge = _ref$staleStateAge === undefined ? DefaultStaleStateAge : _ref$staleStateAge,
            _ref$clockSkew = _ref.clockSkew,
            clockSkew = _ref$clockSkew === undefined ? DefaultClockSkewInSeconds : _ref$clockSkew,
            _ref$clockService = _ref.clockService,
            clockService = _ref$clockService === undefined ? new _ClockService.ClockService() : _ref$clockService,
            _ref$userInfoJwtIssue = _ref.userInfoJwtIssuer,
            userInfoJwtIssuer = _ref$userInfoJwtIssue === undefined ? 'OP' : _ref$userInfoJwtIssue,
            _ref$mergeClaims = _ref.mergeClaims,
            mergeClaims = _ref$mergeClaims === undefined ? false : _ref$mergeClaims,
            _ref$stateStore = _ref.stateStore,
            stateStore = _ref$stateStore === undefined ? new _WebStorageStateStore.WebStorageStateStore() : _ref$stateStore,
            _ref$ResponseValidato = _ref.ResponseValidatorCtor,
            ResponseValidatorCtor = _ref$ResponseValidato === undefined ? _ResponseValidator.ResponseValidator : _ref$ResponseValidato,
            _ref$MetadataServiceC = _ref.MetadataServiceCtor,
            MetadataServiceCtor = _ref$MetadataServiceC === undefined ? _MetadataService.MetadataService : _ref$MetadataServiceC,
            _ref$extraQueryParams = _ref.extraQueryParams,
            extraQueryParams = _ref$extraQueryParams === undefined ? {} : _ref$extraQueryParams,
            _ref$extraTokenParams = _ref.extraTokenParams,
            extraTokenParams = _ref$extraTokenParams === undefined ? {} : _ref$extraTokenParams;

        _classCallCheck(this, OidcClientSettings);

        this._authority = authority;
        this._metadataUrl = metadataUrl;
        this._metadata = metadata;
        this._metadataSeed = metadataSeed;
        this._signingKeys = signingKeys;

        this._client_id = client_id;
        this._client_secret = client_secret;
        this._response_type = response_type;
        this._scope = scope;
        this._redirect_uri = redirect_uri;
        this._post_logout_redirect_uri = post_logout_redirect_uri;
        this._client_authentication = client_authentication;

        this._prompt = prompt;
        this._display = display;
        this._max_age = max_age;
        this._ui_locales = ui_locales;
        this._acr_values = acr_values;
        this._resource = resource;
        this._response_mode = response_mode;

        this._filterProtocolClaims = !!filterProtocolClaims;
        this._loadUserInfo = !!loadUserInfo;
        this._staleStateAge = staleStateAge;
        this._clockSkew = clockSkew;
        this._clockService = clockService;
        this._userInfoJwtIssuer = userInfoJwtIssuer;
        this._mergeClaims = !!mergeClaims;

        this._stateStore = stateStore;
        this._validator = new ResponseValidatorCtor(this);
        this._metadataService = new MetadataServiceCtor(this);

        this._extraQueryParams = (typeof extraQueryParams === 'undefined' ? 'undefined' : _typeof(extraQueryParams)) === 'object' ? extraQueryParams : {};
        this._extraTokenParams = (typeof extraTokenParams === 'undefined' ? 'undefined' : _typeof(extraTokenParams)) === 'object' ? extraTokenParams : {};
    }

    // client config


    // get the time
    OidcClientSettings.prototype.getEpochTime = function getEpochTime() {
        return this._clockService.getEpochTime();
    };

    _createClass(OidcClientSettings, [{
        key: 'client_id',
        get: function get() {
            return this._client_id;
        },
        set: function set(value) {
            if (!this._client_id) {
                // one-time set only
                this._client_id = value;
            } else {
                _Log.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned.");
                throw new Error("client_id has already been assigned.");
            }
        }
    }, {
        key: 'client_secret',
        get: function get() {
            return this._client_secret;
        }
    }, {
        key: 'response_type',
        get: function get() {
            return this._response_type;
        }
    }, {
        key: 'scope',
        get: function get() {
            return this._scope;
        }
    }, {
        key: 'redirect_uri',
        get: function get() {
            return this._redirect_uri;
        }
    }, {
        key: 'post_logout_redirect_uri',
        get: function get() {
            return this._post_logout_redirect_uri;
        }
    }, {
        key: 'client_authentication',
        get: function get() {
            return this._client_authentication;
        }

        // optional protocol params

    }, {
        key: 'prompt',
        get: function get() {
            return this._prompt;
        }
    }, {
        key: 'display',
        get: function get() {
            return this._display;
        }
    }, {
        key: 'max_age',
        get: function get() {
            return this._max_age;
        }
    }, {
        key: 'ui_locales',
        get: function get() {
            return this._ui_locales;
        }
    }, {
        key: 'acr_values',
        get: function get() {
            return this._acr_values;
        }
    }, {
        key: 'resource',
        get: function get() {
            return this._resource;
        }
    }, {
        key: 'response_mode',
        get: function get() {
            return this._response_mode;
        }

        // metadata

    }, {
        key: 'authority',
        get: function get() {
            return this._authority;
        },
        set: function set(value) {
            if (!this._authority) {
                // one-time set only
                this._authority = value;
            } else {
                _Log.Log.error("OidcClientSettings.set_authority: authority has already been assigned.");
                throw new Error("authority has already been assigned.");
            }
        }
    }, {
        key: 'metadataUrl',
        get: function get() {
            if (!this._metadataUrl) {
                this._metadataUrl = this.authority;

                if (this._metadataUrl && this._metadataUrl.indexOf(OidcMetadataUrlPath) < 0) {
                    if (this._metadataUrl[this._metadataUrl.length - 1] !== '/') {
                        this._metadataUrl += '/';
                    }
                    this._metadataUrl += OidcMetadataUrlPath;
                }
            }

            return this._metadataUrl;
        }

        // settable/cachable metadata values

    }, {
        key: 'metadata',
        get: function get() {
            return this._metadata;
        },
        set: function set(value) {
            this._metadata = value;
        }
    }, {
        key: 'metadataSeed',
        get: function get() {
            return this._metadataSeed;
        },
        set: function set(value) {
            this._metadataSeed = value;
        }
    }, {
        key: 'signingKeys',
        get: function get() {
            return this._signingKeys;
        },
        set: function set(value) {
            this._signingKeys = value;
        }

        // behavior flags

    }, {
        key: 'filterProtocolClaims',
        get: function get() {
            return this._filterProtocolClaims;
        }
    }, {
        key: 'loadUserInfo',
        get: function get() {
            return this._loadUserInfo;
        }
    }, {
        key: 'staleStateAge',
        get: function get() {
            return this._staleStateAge;
        }
    }, {
        key: 'clockSkew',
        get: function get() {
            return this._clockSkew;
        }
    }, {
        key: 'userInfoJwtIssuer',
        get: function get() {
            return this._userInfoJwtIssuer;
        }
    }, {
        key: 'mergeClaims',
        get: function get() {
            return this._mergeClaims;
        }
    }, {
        key: 'stateStore',
        get: function get() {
            return this._stateStore;
        }
    }, {
        key: 'validator',
        get: function get() {
            return this._validator;
        }
    }, {
        key: 'metadataService',
        get: function get() {
            return this._metadataService;
        }

        // extra query params

    }, {
        key: 'extraQueryParams',
        get: function get() {
            return this._extraQueryParams;
        },
        set: function set(value) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                this._extraQueryParams = value;
            } else {
                this._extraQueryParams = {};
            }
        }

        // extra token params

    }, {
        key: 'extraTokenParams',
        get: function get() {
            return this._extraTokenParams;
        },
        set: function set(value) {
            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object') {
                this._extraTokenParams = value;
            } else {
                this._extraTokenParams = {};
            }
        }
    }]);

    return OidcClientSettings;
}();

/***/ }),

/***/ "./src/PopupNavigator.js":
/*!*******************************!*\
  !*** ./src/PopupNavigator.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopupNavigator = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _PopupWindow = __webpack_require__(/*! ./PopupWindow.js */ "./src/PopupWindow.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var PopupNavigator = exports.PopupNavigator = function () {
    function PopupNavigator() {
        _classCallCheck(this, PopupNavigator);
    }

    PopupNavigator.prototype.prepare = function prepare(params) {
        var popup = new _PopupWindow.PopupWindow(params);
        return Promise.resolve(popup);
    };

    PopupNavigator.prototype.callback = function callback(url, keepOpen, delimiter) {
        _Log.Log.debug("PopupNavigator.callback");

        try {
            _PopupWindow.PopupWindow.notifyOpener(url, keepOpen, delimiter);
            return Promise.resolve();
        } catch (e) {
            return Promise.reject(e);
        }
    };

    return PopupNavigator;
}();

/***/ }),

/***/ "./src/PopupWindow.js":
/*!****************************!*\
  !*** ./src/PopupWindow.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.PopupWindow = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CheckForPopupClosedInterval = 500;
var DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;';
//const DefaultPopupFeatures = 'location=no,toolbar=no,width=500,height=500,left=100,top=100;resizable=yes';

var DefaultPopupTarget = "_blank";

var PopupWindow = exports.PopupWindow = function () {
    function PopupWindow(params) {
        var _this = this;

        _classCallCheck(this, PopupWindow);

        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });

        var target = params.popupWindowTarget || DefaultPopupTarget;
        var features = params.popupWindowFeatures || DefaultPopupFeatures;

        this._popup = window.open('', target, features);
        if (this._popup) {
            _Log.Log.debug("PopupWindow.ctor: popup successfully created");
            this._checkForPopupClosedTimer = window.setInterval(this._checkForPopupClosed.bind(this), CheckForPopupClosedInterval);
        }
    }

    PopupWindow.prototype.navigate = function navigate(params) {
        if (!this._popup) {
            this._error("PopupWindow.navigate: Error opening popup window");
        } else if (!params || !params.url) {
            this._error("PopupWindow.navigate: no url provided");
            this._error("No url provided");
        } else {
            _Log.Log.debug("PopupWindow.navigate: Setting URL in popup");

            this._id = params.id;
            if (this._id) {
                window["popupCallback_" + params.id] = this._callback.bind(this);
            }

            this._popup.focus();
            this._popup.window.location = params.url;
        }

        return this.promise;
    };

    PopupWindow.prototype._success = function _success(data) {
        _Log.Log.debug("PopupWindow.callback: Successful response from popup window");

        this._cleanup();
        this._resolve(data);
    };

    PopupWindow.prototype._error = function _error(message) {
        _Log.Log.error("PopupWindow.error: ", message);

        this._cleanup();
        this._reject(new Error(message));
    };

    PopupWindow.prototype.close = function close() {
        this._cleanup(false);
    };

    PopupWindow.prototype._cleanup = function _cleanup(keepOpen) {
        _Log.Log.debug("PopupWindow.cleanup");

        window.clearInterval(this._checkForPopupClosedTimer);
        this._checkForPopupClosedTimer = null;

        delete window["popupCallback_" + this._id];

        if (this._popup && !keepOpen) {
            this._popup.close();
        }
        this._popup = null;
    };

    PopupWindow.prototype._checkForPopupClosed = function _checkForPopupClosed() {
        if (!this._popup || this._popup.closed) {
            this._error("Popup window closed");
        }
    };

    PopupWindow.prototype._callback = function _callback(url, keepOpen) {
        this._cleanup(keepOpen);

        if (url) {
            _Log.Log.debug("PopupWindow.callback success");
            this._success({ url: url });
        } else {
            _Log.Log.debug("PopupWindow.callback: Invalid response from popup");
            this._error("Invalid response from popup");
        }
    };

    PopupWindow.notifyOpener = function notifyOpener(url, keepOpen, delimiter) {
        if (window.opener) {
            url = url || window.location.href;
            if (url) {
                var data = _UrlUtility.UrlUtility.parseUrlFragment(url, delimiter);

                if (data.state) {
                    var name = "popupCallback_" + data.state;
                    var callback = window.opener[name];
                    if (callback) {
                        _Log.Log.debug("PopupWindow.notifyOpener: passing url message to opener");
                        callback(url, keepOpen);
                    } else {
                        _Log.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener");
                    }
                } else {
                    _Log.Log.warn("PopupWindow.notifyOpener: no state found in response url");
                }
            }
        } else {
            _Log.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.");
        }
    };

    _createClass(PopupWindow, [{
        key: 'promise',
        get: function get() {
            return this._promise;
        }
    }]);

    return PopupWindow;
}();

/***/ }),

/***/ "./src/RedirectNavigator.js":
/*!**********************************!*\
  !*** ./src/RedirectNavigator.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RedirectNavigator = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RedirectNavigator = exports.RedirectNavigator = function () {
    function RedirectNavigator() {
        _classCallCheck(this, RedirectNavigator);
    }

    RedirectNavigator.prototype.prepare = function prepare() {
        return Promise.resolve(this);
    };

    RedirectNavigator.prototype.navigate = function navigate(params) {
        if (!params || !params.url) {
            _Log.Log.error("RedirectNavigator.navigate: No url provided");
            return Promise.reject(new Error("No url provided"));
        }

        if (params.useReplaceToNavigate) {
            window.location.replace(params.url);
        } else {
            window.location = params.url;
        }

        return Promise.resolve();
    };

    _createClass(RedirectNavigator, [{
        key: "url",
        get: function get() {
            return window.location.href;
        }
    }]);

    return RedirectNavigator;
}();

/***/ }),

/***/ "./src/ResponseValidator.js":
/*!**********************************!*\
  !*** ./src/ResponseValidator.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ResponseValidator = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _UserInfoService = __webpack_require__(/*! ./UserInfoService.js */ "./src/UserInfoService.js");

var _TokenClient = __webpack_require__(/*! ./TokenClient.js */ "./src/TokenClient.js");

var _ErrorResponse = __webpack_require__(/*! ./ErrorResponse.js */ "./src/ErrorResponse.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var ProtocolClaims = ["nonce", "at_hash", "iat", "nbf", "exp", "aud", "iss", "c_hash"];

var ResponseValidator = exports.ResponseValidator = function () {
    function ResponseValidator(settings) {
        var MetadataServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _MetadataService.MetadataService;
        var UserInfoServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _UserInfoService.UserInfoService;
        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil.JoseUtil;
        var TokenClientCtor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _TokenClient.TokenClient;

        _classCallCheck(this, ResponseValidator);

        if (!settings) {
            _Log.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator");
            throw new Error("settings");
        }

        this._settings = settings;
        this._metadataService = new MetadataServiceCtor(this._settings);
        this._userInfoService = new UserInfoServiceCtor(this._settings);
        this._joseUtil = joseUtil;
        this._tokenClient = new TokenClientCtor(this._settings);
    }

    ResponseValidator.prototype.validateSigninResponse = function validateSigninResponse(state, response) {
        var _this = this;

        _Log.Log.debug("ResponseValidator.validateSigninResponse");

        return this._processSigninParams(state, response).then(function (response) {
            _Log.Log.debug("ResponseValidator.validateSigninResponse: state processed");
            return _this._validateTokens(state, response).then(function (response) {
                _Log.Log.debug("ResponseValidator.validateSigninResponse: tokens validated");
                return _this._processClaims(state, response).then(function (response) {
                    _Log.Log.debug("ResponseValidator.validateSigninResponse: claims processed");
                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype.validateSignoutResponse = function validateSignoutResponse(state, response) {
        if (state.id !== response.state) {
            _Log.Log.error("ResponseValidator.validateSignoutResponse: State does not match");
            return Promise.reject(new Error("State does not match"));
        }

        // now that we know the state matches, take the stored data
        // and set it into the response so callers can get their state
        // this is important for both success & error outcomes
        _Log.Log.debug("ResponseValidator.validateSignoutResponse: state validated");
        response.state = state.data;

        if (response.error) {
            _Log.Log.warn("ResponseValidator.validateSignoutResponse: Response was error", response.error);
            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processSigninParams = function _processSigninParams(state, response) {
        if (state.id !== response.state) {
            _Log.Log.error("ResponseValidator._processSigninParams: State does not match");
            return Promise.reject(new Error("State does not match"));
        }

        if (!state.client_id) {
            _Log.Log.error("ResponseValidator._processSigninParams: No client_id on state");
            return Promise.reject(new Error("No client_id on state"));
        }

        if (!state.authority) {
            _Log.Log.error("ResponseValidator._processSigninParams: No authority on state");
            return Promise.reject(new Error("No authority on state"));
        }

        // this allows the authority to be loaded from the signin state
        if (!this._settings.authority) {
            this._settings.authority = state.authority;
        }
        // ensure we're using the correct authority if the authority is not loaded from signin state
        else if (this._settings.authority && this._settings.authority !== state.authority) {
                _Log.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state");
                return Promise.reject(new Error("authority mismatch on settings vs. signin state"));
            }
        // this allows the client_id to be loaded from the signin state
        if (!this._settings.client_id) {
            this._settings.client_id = state.client_id;
        }
        // ensure we're using the correct client_id if the client_id is not loaded from signin state
        else if (this._settings.client_id && this._settings.client_id !== state.client_id) {
                _Log.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state");
                return Promise.reject(new Error("client_id mismatch on settings vs. signin state"));
            }

        // now that we know the state matches, take the stored data
        // and set it into the response so callers can get their state
        // this is important for both success & error outcomes
        _Log.Log.debug("ResponseValidator._processSigninParams: state validated");
        response.state = state.data;

        if (response.error) {
            _Log.Log.warn("ResponseValidator._processSigninParams: Response was error", response.error);
            return Promise.reject(new _ErrorResponse.ErrorResponse(response));
        }

        if (state.nonce && !response.id_token) {
            _Log.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response");
            return Promise.reject(new Error("No id_token in response"));
        }

        if (!state.nonce && response.id_token) {
            _Log.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response");
            return Promise.reject(new Error("Unexpected id_token in response"));
        }

        if (state.code_verifier && !response.code) {
            _Log.Log.error("ResponseValidator._processSigninParams: Expecting code in response");
            return Promise.reject(new Error("No code in response"));
        }

        if (!state.code_verifier && response.code) {
            _Log.Log.error("ResponseValidator._processSigninParams: Not expecting code in response");
            return Promise.reject(new Error("Unexpected code in response"));
        }

        if (!response.scope) {
            // if there's no scope on the response, then assume all scopes granted (per-spec) and copy over scopes from original request
            response.scope = state.scope;
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processClaims = function _processClaims(state, response) {
        var _this2 = this;

        if (response.isOpenIdConnect) {
            _Log.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims");

            response.profile = this._filterProtocolClaims(response.profile);

            if (state.skipUserInfo !== true && this._settings.loadUserInfo && response.access_token) {
                _Log.Log.debug("ResponseValidator._processClaims: loading user info");

                return this._userInfoService.getClaims(response.access_token).then(function (claims) {
                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint");

                    if (claims.sub !== response.profile.sub) {
                        _Log.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token");
                        return Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"));
                    }

                    response.profile = _this2._mergeClaims(response.profile, claims);
                    _Log.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:", response.profile);

                    return response;
                });
            } else {
                _Log.Log.debug("ResponseValidator._processClaims: not loading user info");
            }
        } else {
            _Log.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");
        }

        return Promise.resolve(response);
    };

    ResponseValidator.prototype._mergeClaims = function _mergeClaims(claims1, claims2) {
        var result = Object.assign({}, claims1);

        for (var name in claims2) {
            var values = claims2[name];
            if (!Array.isArray(values)) {
                values = [values];
            }

            for (var i = 0; i < values.length; i++) {
                var value = values[i];
                if (!result[name]) {
                    result[name] = value;
                } else if (Array.isArray(result[name])) {
                    if (result[name].indexOf(value) < 0) {
                        result[name].push(value);
                    }
                } else if (result[name] !== value) {
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && this._settings.mergeClaims) {
                        result[name] = this._mergeClaims(result[name], value);
                    } else {
                        result[name] = [result[name], value];
                    }
                }
            }
        }

        return result;
    };

    ResponseValidator.prototype._filterProtocolClaims = function _filterProtocolClaims(claims) {
        _Log.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:", claims);

        var result = Object.assign({}, claims);

        if (this._settings._filterProtocolClaims) {
            ProtocolClaims.forEach(function (type) {
                delete result[type];
            });

            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered", result);
        } else {
            _Log.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered");
        }

        return result;
    };

    ResponseValidator.prototype._validateTokens = function _validateTokens(state, response) {
        if (response.code) {
            _Log.Log.debug("ResponseValidator._validateTokens: Validating code");
            return this._processCode(state, response);
        }

        if (response.id_token) {
            if (response.access_token) {
                _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token");
                return this._validateIdTokenAndAccessToken(state, response);
            }

            _Log.Log.debug("ResponseValidator._validateTokens: Validating id_token");
            return this._validateIdToken(state, response);
        }

        _Log.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate");
        return Promise.resolve(response);
    };

    ResponseValidator.prototype._processCode = function _processCode(state, response) {
        var _this3 = this;

        var request = {
            client_id: state.client_id,
            client_secret: state.client_secret,
            code: response.code,
            redirect_uri: state.redirect_uri,
            code_verifier: state.code_verifier
        };

        if (state.extraTokenParams && _typeof(state.extraTokenParams) === 'object') {
            Object.assign(request, state.extraTokenParams);
        }

        return this._tokenClient.exchangeCode(request).then(function (tokenResponse) {

            for (var key in tokenResponse) {
                response[key] = tokenResponse[key];
            }

            if (response.id_token) {
                _Log.Log.debug("ResponseValidator._processCode: token response successful, processing id_token");
                return _this3._validateIdTokenAttributes(state, response);
            } else {
                _Log.Log.debug("ResponseValidator._processCode: token response successful, returning response");
            }

            return response;
        });
    };

    ResponseValidator.prototype._validateIdTokenAttributes = function _validateIdTokenAttributes(state, response) {
        var _this4 = this;

        return this._metadataService.getIssuer().then(function (issuer) {

            var audience = state.client_id;
            var clockSkewInSeconds = _this4._settings.clockSkew;
            _Log.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ", clockSkewInSeconds);

            return _this4._settings.getEpochTime().then(function (now) {
                return _this4._joseUtil.validateJwtAttributes(response.id_token, issuer, audience, clockSkewInSeconds, now).then(function (payload) {

                    if (state.nonce && state.nonce !== payload.nonce) {
                        _Log.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token");
                        return Promise.reject(new Error("Invalid nonce in id_token"));
                    }

                    if (!payload.sub) {
                        _Log.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token");
                        return Promise.reject(new Error("No sub present in id_token"));
                    }

                    response.profile = payload;
                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype._validateIdTokenAndAccessToken = function _validateIdTokenAndAccessToken(state, response) {
        var _this5 = this;

        return this._validateIdToken(state, response).then(function (response) {
            return _this5._validateAccessToken(response);
        });
    };

    ResponseValidator.prototype._getSigningKeyForJwt = function _getSigningKeyForJwt(jwt) {
        var _this6 = this;

        return this._metadataService.getSigningKeys().then(function (keys) {
            var kid = jwt.header.kid;
            if (!keys) {
                _Log.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata");
                return Promise.reject(new Error("No signing keys from metadata"));
            }

            _Log.Log.debug("ResponseValidator._validateIdToken: Received signing keys");
            var key = void 0;
            if (!kid) {
                keys = _this6._filterByAlg(keys, jwt.header.alg);

                if (keys.length > 1) {
                    _Log.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata");
                    return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                } else {
                    // kid is mandatory only when there are multiple keys in the referenced JWK Set document
                    // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
                    key = keys[0];
                }
            } else {
                key = keys.filter(function (key) {
                    return key.kid === kid;
                })[0];
            }
            return Promise.resolve(key);
        });
    };

    ResponseValidator.prototype._getSigningKeyForJwtWithSingleRetry = function _getSigningKeyForJwtWithSingleRetry(jwt) {
        var _this7 = this;

        return this._getSigningKeyForJwt(jwt).then(function (key) {
            // Refreshing signingKeys if no suitable verification key is present for given jwt header.
            if (!key) {
                // set to undefined, to trigger network call to jwks_uri.
                _this7._metadataService.resetSigningKeys();
                return _this7._getSigningKeyForJwt(jwt);
            } else {
                return Promise.resolve(key);
            }
        });
    };

    ResponseValidator.prototype._validateIdToken = function _validateIdToken(state, response) {
        var _this8 = this;

        if (!state.nonce) {
            _Log.Log.error("ResponseValidator._validateIdToken: No nonce on state");
            return Promise.reject(new Error("No nonce on state"));
        }

        var jwt = this._joseUtil.parseJwt(response.id_token);
        if (!jwt || !jwt.header || !jwt.payload) {
            _Log.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token", jwt);
            return Promise.reject(new Error("Failed to parse id_token"));
        }

        if (state.nonce !== jwt.payload.nonce) {
            _Log.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token");
            return Promise.reject(new Error("Invalid nonce in id_token"));
        }

        return this._metadataService.getIssuer().then(function (issuer) {
            _Log.Log.debug("ResponseValidator._validateIdToken: Received issuer");
            return _this8._getSigningKeyForJwtWithSingleRetry(jwt).then(function (key) {
                if (!key) {
                    _Log.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys");
                    return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                }

                var audience = state.client_id;

                var clockSkewInSeconds = _this8._settings.clockSkew;
                _Log.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);

                return _this8._joseUtil.validateJwt(response.id_token, key, issuer, audience, clockSkewInSeconds).then(function () {
                    _Log.Log.debug("ResponseValidator._validateIdToken: JWT validation successful");

                    if (!jwt.payload.sub) {
                        _Log.Log.error("ResponseValidator._validateIdToken: No sub present in id_token");
                        return Promise.reject(new Error("No sub present in id_token"));
                    }

                    response.profile = jwt.payload;

                    return response;
                });
            });
        });
    };

    ResponseValidator.prototype._filterByAlg = function _filterByAlg(keys, alg) {
        var kty = null;
        if (alg.startsWith("RS")) {
            kty = "RSA";
        } else if (alg.startsWith("PS")) {
            kty = "PS";
        } else if (alg.startsWith("ES")) {
            kty = "EC";
        } else {
            _Log.Log.debug("ResponseValidator._filterByAlg: alg not supported: ", alg);
            return [];
        }

        _Log.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ", kty);

        keys = keys.filter(function (key) {
            return key.kty === kty;
        });

        _Log.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ", kty, keys.length);

        return keys;
    };

    ResponseValidator.prototype._validateAccessToken = function _validateAccessToken(response) {
        if (!response.profile) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token");
            return Promise.reject(new Error("No profile loaded from id_token"));
        }

        if (!response.profile.at_hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token");
            return Promise.reject(new Error("No at_hash in id_token"));
        }

        if (!response.id_token) {
            _Log.Log.error("ResponseValidator._validateAccessToken: No id_token");
            return Promise.reject(new Error("No id_token"));
        }

        var jwt = this._joseUtil.parseJwt(response.id_token);
        if (!jwt || !jwt.header) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token", jwt);
            return Promise.reject(new Error("Failed to parse id_token"));
        }

        var hashAlg = jwt.header.alg;
        if (!hashAlg || hashAlg.length !== 5) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        var hashBits = hashAlg.substr(2, 3);
        if (!hashBits) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        hashBits = parseInt(hashBits);
        if (hashBits !== 256 && hashBits !== 384 && hashBits !== 512) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:", hashAlg, hashBits);
            return Promise.reject(new Error("Unsupported alg: " + hashAlg));
        }

        var sha = "sha" + hashBits;
        var hash = this._joseUtil.hashString(response.access_token, sha);
        if (!hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:", sha);
            return Promise.reject(new Error("Failed to validate at_hash"));
        }

        var left = hash.substr(0, hash.length / 2);
        var left_b64u = this._joseUtil.hexToBase64Url(left);
        if (left_b64u !== response.profile.at_hash) {
            _Log.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash", left_b64u, response.profile.at_hash);
            return Promise.reject(new Error("Failed to validate at_hash"));
        }

        _Log.Log.debug("ResponseValidator._validateAccessToken: success");

        return Promise.resolve(response);
    };

    return ResponseValidator;
}();

/***/ }),

/***/ "./src/SessionMonitor.js":
/*!*******************************!*\
  !*** ./src/SessionMonitor.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SessionMonitor = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _CheckSessionIFrame = __webpack_require__(/*! ./CheckSessionIFrame.js */ "./src/CheckSessionIFrame.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var SessionMonitor = exports.SessionMonitor = function () {
    function SessionMonitor(userManager) {
        var _this = this;

        var CheckSessionIFrameCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _CheckSessionIFrame.CheckSessionIFrame;
        var timer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global.Global.timer;

        _classCallCheck(this, SessionMonitor);

        if (!userManager) {
            _Log.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor");
            throw new Error("userManager");
        }

        this._userManager = userManager;
        this._CheckSessionIFrameCtor = CheckSessionIFrameCtor;
        this._timer = timer;

        this._userManager.events.addUserLoaded(this._start.bind(this));
        this._userManager.events.addUserUnloaded(this._stop.bind(this));

        Promise.resolve(this._userManager.getUser().then(function (user) {
            // doing this manually here since calling getUser 
            // doesn't trigger load event.
            if (user) {
                _this._start(user);
            } else if (_this._settings.monitorAnonymousSession) {
                _this._userManager.querySessionStatus().then(function (session) {
                    var tmpUser = {
                        session_state: session.session_state
                    };
                    if (session.sub && session.sid) {
                        tmpUser.profile = {
                            sub: session.sub,
                            sid: session.sid
                        };
                    }
                    _this._start(tmpUser);
                }).catch(function (err) {
                    // catch to suppress errors since we're in a ctor
                    _Log.Log.error("SessionMonitor ctor: error from querySessionStatus:", err.message);
                });
            }
        }).catch(function (err) {
            // catch to suppress errors since we're in a ctor
            _Log.Log.error("SessionMonitor ctor: error from getUser:", err.message);
        }));
    }

    SessionMonitor.prototype._start = function _start(user) {
        var _this2 = this;

        var session_state = user.session_state;

        if (session_state) {
            if (user.profile) {
                this._sub = user.profile.sub;
                this._sid = user.profile.sid;
                _Log.Log.debug("SessionMonitor._start: session_state:", session_state, ", sub:", this._sub);
            } else {
                this._sub = undefined;
                this._sid = undefined;
                _Log.Log.debug("SessionMonitor._start: session_state:", session_state, ", anonymous user");
            }

            if (!this._checkSessionIFrame) {
                this._metadataService.getCheckSessionIframe().then(function (url) {
                    if (url) {
                        _Log.Log.debug("SessionMonitor._start: Initializing check session iframe");

                        var client_id = _this2._client_id;
                        var interval = _this2._checkSessionInterval;
                        var stopOnError = _this2._stopCheckSessionOnError;

                        _this2._checkSessionIFrame = new _this2._CheckSessionIFrameCtor(_this2._callback.bind(_this2), client_id, url, interval, stopOnError);
                        _this2._checkSessionIFrame.load().then(function () {
                            _this2._checkSessionIFrame.start(session_state);
                        });
                    } else {
                        _Log.Log.warn("SessionMonitor._start: No check session iframe found in the metadata");
                    }
                }).catch(function (err) {
                    // catch to suppress errors since we're in non-promise callback
                    _Log.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:", err.message);
                });
            } else {
                this._checkSessionIFrame.start(session_state);
            }
        }
    };

    SessionMonitor.prototype._stop = function _stop() {
        var _this3 = this;

        this._sub = undefined;
        this._sid = undefined;

        if (this._checkSessionIFrame) {
            _Log.Log.debug("SessionMonitor._stop");
            this._checkSessionIFrame.stop();
        }

        if (this._settings.monitorAnonymousSession) {
            // using a timer to delay re-initialization to avoid race conditions during signout
            var timerHandle = this._timer.setInterval(function () {
                _this3._timer.clearInterval(timerHandle);

                _this3._userManager.querySessionStatus().then(function (session) {
                    var tmpUser = {
                        session_state: session.session_state
                    };
                    if (session.sub && session.sid) {
                        tmpUser.profile = {
                            sub: session.sub,
                            sid: session.sid
                        };
                    }
                    _this3._start(tmpUser);
                }).catch(function (err) {
                    // catch to suppress errors since we're in a callback
                    _Log.Log.error("SessionMonitor: error from querySessionStatus:", err.message);
                });
            }, 1000);
        }
    };

    SessionMonitor.prototype._callback = function _callback() {
        var _this4 = this;

        this._userManager.querySessionStatus().then(function (session) {
            var raiseEvent = true;

            if (session) {
                if (session.sub === _this4._sub) {
                    raiseEvent = false;
                    _this4._checkSessionIFrame.start(session.session_state);

                    if (session.sid === _this4._sid) {
                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:", session.session_state);
                    } else {
                        _Log.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:", session.session_state);
                        _this4._userManager.events._raiseUserSessionChanged();
                    }
                } else {
                    _Log.Log.debug("SessionMonitor._callback: Different subject signed into OP:", session.sub);
                }
            } else {
                _Log.Log.debug("SessionMonitor._callback: Subject no longer signed into OP");
            }

            if (raiseEvent) {
                if (_this4._sub) {
                    _Log.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event");
                    _this4._userManager.events._raiseUserSignedOut();
                } else {
                    _Log.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event");
                    _this4._userManager.events._raiseUserSignedIn();
                }
            }
        }).catch(function (err) {
            if (_this4._sub) {
                _Log.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event", err.message);
                _this4._userManager.events._raiseUserSignedOut();
            }
        });
    };

    _createClass(SessionMonitor, [{
        key: '_settings',
        get: function get() {
            return this._userManager.settings;
        }
    }, {
        key: '_metadataService',
        get: function get() {
            return this._userManager.metadataService;
        }
    }, {
        key: '_client_id',
        get: function get() {
            return this._settings.client_id;
        }
    }, {
        key: '_checkSessionInterval',
        get: function get() {
            return this._settings.checkSessionInterval;
        }
    }, {
        key: '_stopCheckSessionOnError',
        get: function get() {
            return this._settings.stopCheckSessionOnError;
        }
    }]);

    return SessionMonitor;
}();

/***/ }),

/***/ "./src/SigninRequest.js":
/*!******************************!*\
  !*** ./src/SigninRequest.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninRequest = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

var _SigninState = __webpack_require__(/*! ./SigninState.js */ "./src/SigninState.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SigninRequest = exports.SigninRequest = function () {
    function SigninRequest(_ref) {
        var url = _ref.url,
            client_id = _ref.client_id,
            redirect_uri = _ref.redirect_uri,
            response_type = _ref.response_type,
            scope = _ref.scope,
            authority = _ref.authority,
            data = _ref.data,
            prompt = _ref.prompt,
            display = _ref.display,
            max_age = _ref.max_age,
            ui_locales = _ref.ui_locales,
            id_token_hint = _ref.id_token_hint,
            login_hint = _ref.login_hint,
            acr_values = _ref.acr_values,
            resource = _ref.resource,
            response_mode = _ref.response_mode,
            request = _ref.request,
            request_uri = _ref.request_uri,
            extraQueryParams = _ref.extraQueryParams,
            request_type = _ref.request_type,
            client_secret = _ref.client_secret,
            extraTokenParams = _ref.extraTokenParams,
            skipUserInfo = _ref.skipUserInfo;

        _classCallCheck(this, SigninRequest);

        if (!url) {
            _Log.Log.error("SigninRequest.ctor: No url passed");
            throw new Error("url");
        }
        if (!client_id) {
            _Log.Log.error("SigninRequest.ctor: No client_id passed");
            throw new Error("client_id");
        }
        if (!redirect_uri) {
            _Log.Log.error("SigninRequest.ctor: No redirect_uri passed");
            throw new Error("redirect_uri");
        }
        if (!response_type) {
            _Log.Log.error("SigninRequest.ctor: No response_type passed");
            throw new Error("response_type");
        }
        if (!scope) {
            _Log.Log.error("SigninRequest.ctor: No scope passed");
            throw new Error("scope");
        }
        if (!authority) {
            _Log.Log.error("SigninRequest.ctor: No authority passed");
            throw new Error("authority");
        }

        var oidc = SigninRequest.isOidc(response_type);
        var code = SigninRequest.isCode(response_type);

        if (!response_mode) {
            response_mode = SigninRequest.isCode(response_type) ? "query" : null;
        }

        this.state = new _SigninState.SigninState({ nonce: oidc,
            data: data, client_id: client_id, authority: authority, redirect_uri: redirect_uri,
            code_verifier: code,
            request_type: request_type, response_mode: response_mode,
            client_secret: client_secret, scope: scope, extraTokenParams: extraTokenParams, skipUserInfo: skipUserInfo });

        url = _UrlUtility.UrlUtility.addQueryParam(url, "client_id", client_id);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "redirect_uri", redirect_uri);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "response_type", response_type);
        url = _UrlUtility.UrlUtility.addQueryParam(url, "scope", scope);

        url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
        if (oidc) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, "nonce", this.state.nonce);
        }
        if (code) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, "code_challenge", this.state.code_challenge);
            url = _UrlUtility.UrlUtility.addQueryParam(url, "code_challenge_method", "S256");
        }

        var optional = { prompt: prompt, display: display, max_age: max_age, ui_locales: ui_locales, id_token_hint: id_token_hint, login_hint: login_hint, acr_values: acr_values, resource: resource, request: request, request_uri: request_uri, response_mode: response_mode };
        for (var key in optional) {
            if (optional[key]) {
                url = _UrlUtility.UrlUtility.addQueryParam(url, key, optional[key]);
            }
        }

        for (var _key in extraQueryParams) {
            url = _UrlUtility.UrlUtility.addQueryParam(url, _key, extraQueryParams[_key]);
        }

        this.url = url;
    }

    SigninRequest.isOidc = function isOidc(response_type) {
        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "id_token";
        });
        return !!result[0];
    };

    SigninRequest.isOAuth = function isOAuth(response_type) {
        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "token";
        });
        return !!result[0];
    };

    SigninRequest.isCode = function isCode(response_type) {
        var result = response_type.split(/\s+/g).filter(function (item) {
            return item === "code";
        });
        return !!result[0];
    };

    return SigninRequest;
}();

/***/ }),

/***/ "./src/SigninResponse.js":
/*!*******************************!*\
  !*** ./src/SigninResponse.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninResponse = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var OidcScope = "openid";

var SigninResponse = exports.SigninResponse = function () {
    function SigninResponse(url) {
        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";

        _classCallCheck(this, SigninResponse);

        var values = _UrlUtility.UrlUtility.parseUrlFragment(url, delimiter);

        this.error = values.error;
        this.error_description = values.error_description;
        this.error_uri = values.error_uri;

        this.code = values.code;
        this.state = values.state;
        this.id_token = values.id_token;
        this.session_state = values.session_state;
        this.access_token = values.access_token;
        this.token_type = values.token_type;
        this.scope = values.scope;
        this.profile = undefined; // will be set from ResponseValidator

        this.expires_in = values.expires_in;
    }

    _createClass(SigninResponse, [{
        key: "expires_in",
        get: function get() {
            if (this.expires_at) {
                var now = parseInt(Date.now() / 1000);
                return this.expires_at - now;
            }
            return undefined;
        },
        set: function set(value) {
            var expires_in = parseInt(value);
            if (typeof expires_in === 'number' && expires_in > 0) {
                var now = parseInt(Date.now() / 1000);
                this.expires_at = now + expires_in;
            }
        }
    }, {
        key: "expired",
        get: function get() {
            var expires_in = this.expires_in;
            if (expires_in !== undefined) {
                return expires_in <= 0;
            }
            return undefined;
        }
    }, {
        key: "scopes",
        get: function get() {
            return (this.scope || "").split(" ");
        }
    }, {
        key: "isOpenIdConnect",
        get: function get() {
            return this.scopes.indexOf(OidcScope) >= 0 || !!this.id_token;
        }
    }]);

    return SigninResponse;
}();

/***/ }),

/***/ "./src/SigninState.js":
/*!****************************!*\
  !*** ./src/SigninState.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SigninState = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _State2 = __webpack_require__(/*! ./State.js */ "./src/State.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

var _random = __webpack_require__(/*! ./random.js */ "./src/random.js");

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SigninState = exports.SigninState = function (_State) {
    _inherits(SigninState, _State);

    function SigninState() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            nonce = _ref.nonce,
            authority = _ref.authority,
            client_id = _ref.client_id,
            redirect_uri = _ref.redirect_uri,
            code_verifier = _ref.code_verifier,
            response_mode = _ref.response_mode,
            client_secret = _ref.client_secret,
            scope = _ref.scope,
            extraTokenParams = _ref.extraTokenParams,
            skipUserInfo = _ref.skipUserInfo;

        _classCallCheck(this, SigninState);

        var _this = _possibleConstructorReturn(this, _State.call(this, arguments[0]));

        if (nonce === true) {
            _this._nonce = (0, _random2.default)();
        } else if (nonce) {
            _this._nonce = nonce;
        }

        if (code_verifier === true) {
            // random() produces 32 length
            _this._code_verifier = (0, _random2.default)() + (0, _random2.default)() + (0, _random2.default)();
        } else if (code_verifier) {
            _this._code_verifier = code_verifier;
        }

        if (_this.code_verifier) {
            var hash = _JoseUtil.JoseUtil.hashString(_this.code_verifier, "SHA256");
            _this._code_challenge = _JoseUtil.JoseUtil.hexToBase64Url(hash);
        }

        _this._redirect_uri = redirect_uri;
        _this._authority = authority;
        _this._client_id = client_id;
        _this._response_mode = response_mode;
        _this._client_secret = client_secret;
        _this._scope = scope;
        _this._extraTokenParams = extraTokenParams;
        _this._skipUserInfo = skipUserInfo;
        return _this;
    }

    SigninState.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("SigninState.toStorageString");
        return JSON.stringify({
            id: this.id,
            data: this.data,
            created: this.created,
            request_type: this.request_type,
            nonce: this.nonce,
            code_verifier: this.code_verifier,
            redirect_uri: this.redirect_uri,
            authority: this.authority,
            client_id: this.client_id,
            response_mode: this.response_mode,
            client_secret: this.client_secret,
            scope: this.scope,
            extraTokenParams: this.extraTokenParams,
            skipUserInfo: this.skipUserInfo
        });
    };

    SigninState.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("SigninState.fromStorageString");
        var data = JSON.parse(storageString);
        return new SigninState(data);
    };

    _createClass(SigninState, [{
        key: 'nonce',
        get: function get() {
            return this._nonce;
        }
    }, {
        key: 'authority',
        get: function get() {
            return this._authority;
        }
    }, {
        key: 'client_id',
        get: function get() {
            return this._client_id;
        }
    }, {
        key: 'redirect_uri',
        get: function get() {
            return this._redirect_uri;
        }
    }, {
        key: 'code_verifier',
        get: function get() {
            return this._code_verifier;
        }
    }, {
        key: 'code_challenge',
        get: function get() {
            return this._code_challenge;
        }
    }, {
        key: 'response_mode',
        get: function get() {
            return this._response_mode;
        }
    }, {
        key: 'client_secret',
        get: function get() {
            return this._client_secret;
        }
    }, {
        key: 'scope',
        get: function get() {
            return this._scope;
        }
    }, {
        key: 'extraTokenParams',
        get: function get() {
            return this._extraTokenParams;
        }
    }, {
        key: 'skipUserInfo',
        get: function get() {
            return this._skipUserInfo;
        }
    }]);

    return SigninState;
}(_State2.State);

/***/ }),

/***/ "./src/SignoutRequest.js":
/*!*******************************!*\
  !*** ./src/SignoutRequest.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignoutRequest = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

var _State = __webpack_require__(/*! ./State.js */ "./src/State.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutRequest = exports.SignoutRequest = function SignoutRequest(_ref) {
    var url = _ref.url,
        id_token_hint = _ref.id_token_hint,
        post_logout_redirect_uri = _ref.post_logout_redirect_uri,
        data = _ref.data,
        extraQueryParams = _ref.extraQueryParams,
        request_type = _ref.request_type;

    _classCallCheck(this, SignoutRequest);

    if (!url) {
        _Log.Log.error("SignoutRequest.ctor: No url passed");
        throw new Error("url");
    }

    if (id_token_hint) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, "id_token_hint", id_token_hint);
    }

    if (post_logout_redirect_uri) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, "post_logout_redirect_uri", post_logout_redirect_uri);

        if (data) {
            this.state = new _State.State({ data: data, request_type: request_type });

            url = _UrlUtility.UrlUtility.addQueryParam(url, "state", this.state.id);
        }
    }

    for (var key in extraQueryParams) {
        url = _UrlUtility.UrlUtility.addQueryParam(url, key, extraQueryParams[key]);
    }

    this.url = url;
};

/***/ }),

/***/ "./src/SignoutResponse.js":
/*!********************************!*\
  !*** ./src/SignoutResponse.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SignoutResponse = undefined;

var _UrlUtility = __webpack_require__(/*! ./UrlUtility.js */ "./src/UrlUtility.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SignoutResponse = exports.SignoutResponse = function SignoutResponse(url) {
    _classCallCheck(this, SignoutResponse);

    var values = _UrlUtility.UrlUtility.parseUrlFragment(url, "?");

    this.error = values.error;
    this.error_description = values.error_description;
    this.error_uri = values.error_uri;

    this.state = values.state;
};

/***/ }),

/***/ "./src/SilentRenewService.js":
/*!***********************************!*\
  !*** ./src/SilentRenewService.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.SilentRenewService = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var SilentRenewService = exports.SilentRenewService = function () {
    function SilentRenewService(userManager) {
        _classCallCheck(this, SilentRenewService);

        this._userManager = userManager;
    }

    SilentRenewService.prototype.start = function start() {
        if (!this._callback) {
            this._callback = this._tokenExpiring.bind(this);
            this._userManager.events.addAccessTokenExpiring(this._callback);

            // this will trigger loading of the user so the expiring events can be initialized
            this._userManager.getUser().then(function (user) {
                // deliberate nop
            }).catch(function (err) {
                // catch to suppress errors since we're in a ctor
                _Log.Log.error("SilentRenewService.start: Error from getUser:", err.message);
            });
        }
    };

    SilentRenewService.prototype.stop = function stop() {
        if (this._callback) {
            this._userManager.events.removeAccessTokenExpiring(this._callback);
            delete this._callback;
        }
    };

    SilentRenewService.prototype._tokenExpiring = function _tokenExpiring() {
        var _this = this;

        this._userManager.signinSilent().then(function (user) {
            _Log.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful");
        }, function (err) {
            _Log.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:", err.message);
            _this._userManager.events._raiseSilentRenewError(err);
        });
    };

    return SilentRenewService;
}();

/***/ }),

/***/ "./src/State.js":
/*!**********************!*\
  !*** ./src/State.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.State = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _random = __webpack_require__(/*! ./random.js */ "./src/random.js");

var _random2 = _interopRequireDefault(_random);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var State = exports.State = function () {
    function State() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            id = _ref.id,
            data = _ref.data,
            created = _ref.created,
            request_type = _ref.request_type;

        _classCallCheck(this, State);

        this._id = id || (0, _random2.default)();
        this._data = data;

        if (typeof created === 'number' && created > 0) {
            this._created = created;
        } else {
            this._created = parseInt(Date.now() / 1000);
        }
        this._request_type = request_type;
    }

    State.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("State.toStorageString");
        return JSON.stringify({
            id: this.id,
            data: this.data,
            created: this.created,
            request_type: this.request_type
        });
    };

    State.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("State.fromStorageString");
        return new State(JSON.parse(storageString));
    };

    State.clearStaleState = function clearStaleState(storage, age) {

        var cutoff = Date.now() / 1000 - age;

        return storage.getAllKeys().then(function (keys) {
            _Log.Log.debug("State.clearStaleState: got keys", keys);

            var promises = [];

            var _loop = function _loop(i) {
                var key = keys[i];
                p = storage.get(key).then(function (item) {
                    var remove = false;

                    if (item) {
                        try {
                            var state = State.fromStorageString(item);

                            _Log.Log.debug("State.clearStaleState: got item from key: ", key, state.created);

                            if (state.created <= cutoff) {
                                remove = true;
                            }
                        } catch (e) {
                            _Log.Log.error("State.clearStaleState: Error parsing state for key", key, e.message);
                            remove = true;
                        }
                    } else {
                        _Log.Log.debug("State.clearStaleState: no item in storage for key: ", key);
                        remove = true;
                    }

                    if (remove) {
                        _Log.Log.debug("State.clearStaleState: removed item for key: ", key);
                        return storage.remove(key);
                    }
                });


                promises.push(p);
            };

            for (var i = 0; i < keys.length; i++) {
                var p;

                _loop(i);
            }

            _Log.Log.debug("State.clearStaleState: waiting on promise count:", promises.length);
            return Promise.all(promises);
        });
    };

    _createClass(State, [{
        key: 'id',
        get: function get() {
            return this._id;
        }
    }, {
        key: 'data',
        get: function get() {
            return this._data;
        }
    }, {
        key: 'created',
        get: function get() {
            return this._created;
        }
    }, {
        key: 'request_type',
        get: function get() {
            return this._request_type;
        }
    }]);

    return State;
}();

/***/ }),

/***/ "./src/Timer.js":
/*!**********************!*\
  !*** ./src/Timer.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Timer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

var _Event2 = __webpack_require__(/*! ./Event.js */ "./src/Event.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var TimerDuration = 5; // seconds

var Timer = exports.Timer = function (_Event) {
    _inherits(Timer, _Event);

    function Timer(name) {
        var timer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.timer;
        var nowFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

        _classCallCheck(this, Timer);

        var _this = _possibleConstructorReturn(this, _Event.call(this, name));

        _this._timer = timer;

        if (nowFunc) {
            _this._nowFunc = nowFunc;
        } else {
            _this._nowFunc = function () {
                return Date.now() / 1000;
            };
        }
        return _this;
    }

    Timer.prototype.init = function init(duration) {
        if (duration <= 0) {
            duration = 1;
        }
        duration = parseInt(duration);

        var expiration = this.now + duration;
        if (this.expiration === expiration && this._timerHandle) {
            // no need to reinitialize to same expiration, so bail out
            _Log.Log.debug("Timer.init timer " + this._name + " skipping initialization since already initialized for expiration:", this.expiration);
            return;
        }

        this.cancel();

        _Log.Log.debug("Timer.init timer " + this._name + " for duration:", duration);
        this._expiration = expiration;

        // we're using a fairly short timer and then checking the expiration in the
        // callback to handle scenarios where the browser device sleeps, and then
        // the timers end up getting delayed.
        var timerDuration = TimerDuration;
        if (duration < timerDuration) {
            timerDuration = duration;
        }
        this._timerHandle = this._timer.setInterval(this._callback.bind(this), timerDuration * 1000);
    };

    Timer.prototype.cancel = function cancel() {
        if (this._timerHandle) {
            _Log.Log.debug("Timer.cancel: ", this._name);
            this._timer.clearInterval(this._timerHandle);
            this._timerHandle = null;
        }
    };

    Timer.prototype._callback = function _callback() {
        var diff = this._expiration - this.now;
        _Log.Log.debug("Timer.callback; " + this._name + " timer expires in:", diff);

        if (this._expiration <= this.now) {
            this.cancel();
            _Event.prototype.raise.call(this);
        }
    };

    _createClass(Timer, [{
        key: 'now',
        get: function get() {
            return parseInt(this._nowFunc());
        }
    }, {
        key: 'expiration',
        get: function get() {
            return this._expiration;
        }
    }]);

    return Timer;
}(_Event2.Event);

/***/ }),

/***/ "./src/TokenClient.js":
/*!****************************!*\
  !*** ./src/TokenClient.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenClient = undefined;

var _JsonService = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var TokenClient = exports.TokenClient = function () {
    function TokenClient(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;

        _classCallCheck(this, TokenClient);

        if (!settings) {
            _Log.Log.error("TokenClient.ctor: No settings passed");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor();
        this._metadataService = new MetadataServiceCtor(this._settings);
    }

    TokenClient.prototype.exchangeCode = function exchangeCode() {
        var _this = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.grant_type = args.grant_type || "authorization_code";
        args.client_id = args.client_id || this._settings.client_id;
        args.client_secret = args.client_secret || this._settings.client_secret;
        args.redirect_uri = args.redirect_uri || this._settings.redirect_uri;

        var basicAuth = undefined;
        var client_authentication = args._client_authentication || this._settings._client_authentication;
        delete args._client_authentication;

        if (!args.code) {
            _Log.Log.error("TokenClient.exchangeCode: No code passed");
            return Promise.reject(new Error("A code is required"));
        }
        if (!args.redirect_uri) {
            _Log.Log.error("TokenClient.exchangeCode: No redirect_uri passed");
            return Promise.reject(new Error("A redirect_uri is required"));
        }
        if (!args.code_verifier) {
            _Log.Log.error("TokenClient.exchangeCode: No code_verifier passed");
            return Promise.reject(new Error("A code_verifier is required"));
        }
        if (!args.client_id) {
            _Log.Log.error("TokenClient.exchangeCode: No client_id passed");
            return Promise.reject(new Error("A client_id is required"));
        }
        if (!args.client_secret && client_authentication == "client_secret_basic") {
            _Log.Log.error("TokenClient.exchangeCode: No client_secret passed");
            return Promise.reject(new Error("A client_secret is required"));
        }

        // Sending the client credentials using the Basic Auth method
        if (client_authentication == "client_secret_basic") {
            basicAuth = args.client_id + ':' + args.client_secret;
            delete args.client_id;
            delete args.client_secret;
        }

        return this._metadataService.getTokenEndpoint(false).then(function (url) {
            _Log.Log.debug("TokenClient.exchangeCode: Received token endpoint");
            return _this._jsonService.postForm(url, args, basicAuth).then(function (response) {
                _Log.Log.debug("TokenClient.exchangeCode: response received");
                return response;
            });
        });
    };

    TokenClient.prototype.exchangeRefreshToken = function exchangeRefreshToken() {
        var _this2 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.grant_type = args.grant_type || "refresh_token";
        args.client_id = args.client_id || this._settings.client_id;
        args.client_secret = args.client_secret || this._settings.client_secret;

        var basicAuth = undefined;
        var client_authentication = args._client_authentication || this._settings._client_authentication;
        delete args._client_authentication;

        if (!args.refresh_token) {
            _Log.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed");
            return Promise.reject(new Error("A refresh_token is required"));
        }
        if (!args.client_id) {
            _Log.Log.error("TokenClient.exchangeRefreshToken: No client_id passed");
            return Promise.reject(new Error("A client_id is required"));
        }

        // Sending the client credentials using the Basic Auth method
        if (client_authentication == "client_secret_basic") {
            basicAuth = args.client_id + ':' + args.client_secret;
            delete args.client_id;
            delete args.client_secret;
        }

        return this._metadataService.getTokenEndpoint(false).then(function (url) {
            _Log.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint");

            return _this2._jsonService.postForm(url, args, basicAuth).then(function (response) {
                _Log.Log.debug("TokenClient.exchangeRefreshToken: response received");
                return response;
            });
        });
    };

    return TokenClient;
}();

/***/ }),

/***/ "./src/TokenRevocationClient.js":
/*!**************************************!*\
  !*** ./src/TokenRevocationClient.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.TokenRevocationClient = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var AccessTokenTypeHint = "access_token";
var RefreshTokenTypeHint = "refresh_token";

var TokenRevocationClient = exports.TokenRevocationClient = function () {
    function TokenRevocationClient(settings) {
        var XMLHttpRequestCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _Global.Global.XMLHttpRequest;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;

        _classCallCheck(this, TokenRevocationClient);

        if (!settings) {
            _Log.Log.error("TokenRevocationClient.ctor: No settings provided");
            throw new Error("No settings provided.");
        }

        this._settings = settings;
        this._XMLHttpRequestCtor = XMLHttpRequestCtor;
        this._metadataService = new MetadataServiceCtor(this._settings);
    }

    TokenRevocationClient.prototype.revoke = function revoke(token, required) {
        var _this = this;

        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "access_token";

        if (!token) {
            _Log.Log.error("TokenRevocationClient.revoke: No token provided");
            throw new Error("No token provided.");
        }

        if (type !== AccessTokenTypeHint && type != RefreshTokenTypeHint) {
            _Log.Log.error("TokenRevocationClient.revoke: Invalid token type");
            throw new Error("Invalid token type.");
        }

        return this._metadataService.getRevocationEndpoint().then(function (url) {
            if (!url) {
                if (required) {
                    _Log.Log.error("TokenRevocationClient.revoke: Revocation not supported");
                    throw new Error("Revocation not supported");
                }

                // not required, so don't error and just return
                return;
            }

            _Log.Log.debug("TokenRevocationClient.revoke: Revoking " + type);
            var client_id = _this._settings.client_id;
            var client_secret = _this._settings.client_secret;
            return _this._revoke(url, client_id, client_secret, token, type);
        });
    };

    TokenRevocationClient.prototype._revoke = function _revoke(url, client_id, client_secret, token, type) {
        var _this2 = this;

        return new Promise(function (resolve, reject) {

            var xhr = new _this2._XMLHttpRequestCtor();
            xhr.open("POST", url);

            xhr.onload = function () {
                _Log.Log.debug("TokenRevocationClient.revoke: HTTP response received, status", xhr.status);

                if (xhr.status === 200) {
                    resolve();
                } else {
                    reject(Error(xhr.statusText + " (" + xhr.status + ")"));
                }
            };
            xhr.onerror = function () {
                _Log.Log.debug("TokenRevocationClient.revoke: Network Error.");
                reject("Network Error");
            };

            var body = "client_id=" + encodeURIComponent(client_id);
            if (client_secret) {
                body += "&client_secret=" + encodeURIComponent(client_secret);
            }
            body += "&token_type_hint=" + encodeURIComponent(type);
            body += "&token=" + encodeURIComponent(token);

            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send(body);
        });
    };

    return TokenRevocationClient;
}();

/***/ }),

/***/ "./src/UrlUtility.js":
/*!***************************!*\
  !*** ./src/UrlUtility.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UrlUtility = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UrlUtility = exports.UrlUtility = function () {
    function UrlUtility() {
        _classCallCheck(this, UrlUtility);
    }

    UrlUtility.addQueryParam = function addQueryParam(url, name, value) {
        if (url.indexOf('?') < 0) {
            url += "?";
        }

        if (url[url.length - 1] !== "?") {
            url += "&";
        }

        url += encodeURIComponent(name);
        url += "=";
        url += encodeURIComponent(value);

        return url;
    };

    UrlUtility.parseUrlFragment = function parseUrlFragment(value) {
        var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "#";
        var global = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _Global.Global;

        if (typeof value !== 'string') {
            value = global.location.href;
        }

        var idx = value.lastIndexOf(delimiter);
        if (idx >= 0) {
            value = value.substr(idx + 1);
        }

        if (delimiter === "?") {
            // if we're doing query, then strip off hash fragment before we parse
            idx = value.indexOf('#');
            if (idx >= 0) {
                value = value.substr(0, idx);
            }
        }

        var params = {},
            regex = /([^&=]+)=([^&]*)/g,
            m;

        var counter = 0;
        while (m = regex.exec(value)) {
            params[decodeURIComponent(m[1])] = decodeURIComponent(m[2].replace(/\+/g, ' '));
            if (counter++ > 50) {
                _Log.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters", value);
                return {
                    error: "Response exceeded expected number of parameters"
                };
            }
        }

        for (var prop in params) {
            return params;
        }

        return {};
    };

    return UrlUtility;
}();

/***/ }),

/***/ "./src/User.js":
/*!*********************!*\
  !*** ./src/User.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.User = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var User = exports.User = function () {
    function User(_ref) {
        var id_token = _ref.id_token,
            session_state = _ref.session_state,
            access_token = _ref.access_token,
            refresh_token = _ref.refresh_token,
            token_type = _ref.token_type,
            scope = _ref.scope,
            profile = _ref.profile,
            expires_at = _ref.expires_at,
            state = _ref.state;

        _classCallCheck(this, User);

        this.id_token = id_token;
        this.session_state = session_state;
        this.access_token = access_token;
        this.refresh_token = refresh_token;
        this.token_type = token_type;
        this.scope = scope;
        this.profile = profile;
        this.expires_at = expires_at;
        this.state = state;
    }

    User.prototype.toStorageString = function toStorageString() {
        _Log.Log.debug("User.toStorageString");
        return JSON.stringify({
            id_token: this.id_token,
            session_state: this.session_state,
            access_token: this.access_token,
            refresh_token: this.refresh_token,
            token_type: this.token_type,
            scope: this.scope,
            profile: this.profile,
            expires_at: this.expires_at
        });
    };

    User.fromStorageString = function fromStorageString(storageString) {
        _Log.Log.debug("User.fromStorageString");
        return new User(JSON.parse(storageString));
    };

    _createClass(User, [{
        key: 'expires_in',
        get: function get() {
            if (this.expires_at) {
                var now = parseInt(Date.now() / 1000);
                return this.expires_at - now;
            }
            return undefined;
        },
        set: function set(value) {
            var expires_in = parseInt(value);
            if (typeof expires_in === 'number' && expires_in > 0) {
                var now = parseInt(Date.now() / 1000);
                this.expires_at = now + expires_in;
            }
        }
    }, {
        key: 'expired',
        get: function get() {
            var expires_in = this.expires_in;
            if (expires_in !== undefined) {
                return expires_in <= 0;
            }
            return undefined;
        }
    }, {
        key: 'scopes',
        get: function get() {
            return (this.scope || "").split(" ");
        }
    }]);

    return User;
}();

/***/ }),

/***/ "./src/UserInfoService.js":
/*!********************************!*\
  !*** ./src/UserInfoService.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserInfoService = undefined;

var _JsonService = __webpack_require__(/*! ./JsonService.js */ "./src/JsonService.js");

var _MetadataService = __webpack_require__(/*! ./MetadataService.js */ "./src/MetadataService.js");

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserInfoService = exports.UserInfoService = function () {
    function UserInfoService(settings) {
        var JsonServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _JsonService.JsonService;
        var MetadataServiceCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _MetadataService.MetadataService;
        var joseUtil = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _JoseUtil.JoseUtil;

        _classCallCheck(this, UserInfoService);

        if (!settings) {
            _Log.Log.error("UserInfoService.ctor: No settings passed");
            throw new Error("settings");
        }

        this._settings = settings;
        this._jsonService = new JsonServiceCtor(undefined, undefined, this._getClaimsFromJwt.bind(this));
        this._metadataService = new MetadataServiceCtor(this._settings);
        this._joseUtil = joseUtil;
    }

    UserInfoService.prototype.getClaims = function getClaims(token) {
        var _this = this;

        if (!token) {
            _Log.Log.error("UserInfoService.getClaims: No token passed");
            return Promise.reject(new Error("A token is required"));
        }

        return this._metadataService.getUserInfoEndpoint().then(function (url) {
            _Log.Log.debug("UserInfoService.getClaims: received userinfo url", url);

            return _this._jsonService.getJson(url, token).then(function (claims) {
                _Log.Log.debug("UserInfoService.getClaims: claims received", claims);
                return claims;
            });
        });
    };

    UserInfoService.prototype._getClaimsFromJwt = function _getClaimsFromJwt(req) {
        var _this2 = this;

        try {
            var jwt = this._joseUtil.parseJwt(req.responseText);
            if (!jwt || !jwt.header || !jwt.payload) {
                _Log.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT", jwt);
                return Promise.reject(new Error("Failed to parse id_token"));
            }

            var kid = jwt.header.kid;

            var issuerPromise = void 0;
            switch (this._settings.userInfoJwtIssuer) {
                case 'OP':
                    issuerPromise = this._metadataService.getIssuer();
                    break;
                case 'ANY':
                    issuerPromise = Promise.resolve(jwt.payload.iss);
                    break;
                default:
                    issuerPromise = Promise.resolve(this._settings.userInfoJwtIssuer);
                    break;
            }

            return issuerPromise.then(function (issuer) {
                _Log.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:" + issuer);

                return _this2._metadataService.getSigningKeys().then(function (keys) {
                    if (!keys) {
                        _Log.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata");
                        return Promise.reject(new Error("No signing keys from metadata"));
                    }

                    _Log.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");
                    var key = void 0;
                    if (!kid) {
                        keys = _this2._filterByAlg(keys, jwt.header.alg);

                        if (keys.length > 1) {
                            _Log.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata");
                            return Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));
                        } else {
                            // kid is mandatory only when there are multiple keys in the referenced JWK Set document
                            // see http://openid.net/specs/openid-connect-core-1_0.html#Signing
                            key = keys[0];
                        }
                    } else {
                        key = keys.filter(function (key) {
                            return key.kid === kid;
                        })[0];
                    }

                    if (!key) {
                        _Log.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys");
                        return Promise.reject(new Error("No key matching kid or alg found in signing keys"));
                    }

                    var audience = _this2._settings.client_id;

                    var clockSkewInSeconds = _this2._settings.clockSkew;
                    _Log.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ", clockSkewInSeconds);

                    return _this2._joseUtil.validateJwt(req.responseText, key, issuer, audience, clockSkewInSeconds, undefined, true).then(function () {
                        _Log.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful");
                        return jwt.payload;
                    });
                });
            });
            return;
        } catch (e) {
            _Log.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response", e.message);
            reject(e);
            return;
        }
    };

    UserInfoService.prototype._filterByAlg = function _filterByAlg(keys, alg) {
        var kty = null;
        if (alg.startsWith("RS")) {
            kty = "RSA";
        } else if (alg.startsWith("PS")) {
            kty = "PS";
        } else if (alg.startsWith("ES")) {
            kty = "EC";
        } else {
            _Log.Log.debug("UserInfoService._filterByAlg: alg not supported: ", alg);
            return [];
        }

        _Log.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ", kty);

        keys = keys.filter(function (key) {
            return key.kty === kty;
        });

        _Log.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ", kty, keys.length);

        return keys;
    };

    return UserInfoService;
}();

/***/ }),

/***/ "./src/UserManager.js":
/*!****************************!*\
  !*** ./src/UserManager.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManager = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _OidcClient2 = __webpack_require__(/*! ./OidcClient.js */ "./src/OidcClient.js");

var _UserManagerSettings = __webpack_require__(/*! ./UserManagerSettings.js */ "./src/UserManagerSettings.js");

var _User = __webpack_require__(/*! ./User.js */ "./src/User.js");

var _UserManagerEvents = __webpack_require__(/*! ./UserManagerEvents.js */ "./src/UserManagerEvents.js");

var _SilentRenewService = __webpack_require__(/*! ./SilentRenewService.js */ "./src/SilentRenewService.js");

var _SessionMonitor = __webpack_require__(/*! ./SessionMonitor.js */ "./src/SessionMonitor.js");

var _SigninRequest = __webpack_require__(/*! ./SigninRequest */ "./src/SigninRequest.js");

var _TokenRevocationClient = __webpack_require__(/*! ./TokenRevocationClient.js */ "./src/TokenRevocationClient.js");

var _TokenClient = __webpack_require__(/*! ./TokenClient.js */ "./src/TokenClient.js");

var _JoseUtil = __webpack_require__(/*! ./JoseUtil.js */ "./src/JoseUtil.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserManager = exports.UserManager = function (_OidcClient) {
    _inherits(UserManager, _OidcClient);

    function UserManager() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var SilentRenewServiceCtor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _SilentRenewService.SilentRenewService;
        var SessionMonitorCtor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _SessionMonitor.SessionMonitor;
        var TokenRevocationClientCtor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _TokenRevocationClient.TokenRevocationClient;
        var TokenClientCtor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _TokenClient.TokenClient;
        var joseUtil = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _JoseUtil.JoseUtil;

        _classCallCheck(this, UserManager);

        if (!(settings instanceof _UserManagerSettings.UserManagerSettings)) {
            settings = new _UserManagerSettings.UserManagerSettings(settings);
        }

        var _this = _possibleConstructorReturn(this, _OidcClient.call(this, settings));

        _this._events = new _UserManagerEvents.UserManagerEvents(settings);
        _this._silentRenewService = new SilentRenewServiceCtor(_this);

        // order is important for the following properties; these services depend upon the events.
        if (_this.settings.automaticSilentRenew) {
            _Log.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew");
            _this.startSilentRenew();
        }

        if (_this.settings.monitorSession) {
            _Log.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor");
            _this._sessionMonitor = new SessionMonitorCtor(_this);
        }

        _this._tokenRevocationClient = new TokenRevocationClientCtor(_this._settings);
        _this._tokenClient = new TokenClientCtor(_this._settings);
        _this._joseUtil = joseUtil;
        return _this;
    }

    UserManager.prototype.getUser = function getUser() {
        var _this2 = this;

        return this._loadUser().then(function (user) {
            if (user) {
                _Log.Log.info("UserManager.getUser: user loaded");

                _this2._events.load(user, false);

                return user;
            } else {
                _Log.Log.info("UserManager.getUser: user not found in storage");
                return null;
            }
        });
    };

    UserManager.prototype.removeUser = function removeUser() {
        var _this3 = this;

        return this.storeUser(null).then(function () {
            _Log.Log.info("UserManager.removeUser: user removed from storage");
            _this3._events.unload();
        });
    };

    UserManager.prototype.signinRedirect = function signinRedirect() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "si:r";
        var navParams = {
            useReplaceToNavigate: args.useReplaceToNavigate
        };
        return this._signinStart(args, this._redirectNavigator, navParams).then(function () {
            _Log.Log.info("UserManager.signinRedirect: successful");
        });
    };

    UserManager.prototype.signinRedirectCallback = function signinRedirectCallback(url) {
        return this._signinEnd(url || this._redirectNavigator.url).then(function (user) {
            if (user.profile && user.profile.sub) {
                _Log.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ", user.profile.sub);
            } else {
                _Log.Log.info("UserManager.signinRedirectCallback: no sub");
            }

            return user;
        });
    };

    UserManager.prototype.signinPopup = function signinPopup() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "si:p";
        var url = args.redirect_uri || this.settings.popup_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured");
            return Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.display = "popup";

        return this._signin(args, this._popupNavigator, {
            startUrl: url,
            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
        }).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinPopup: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinPopupCallback = function signinPopupCallback(url) {
        return this._signinCallback(url, this._popupNavigator).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinPopupCallback: no sub");
                }
            }

            return user;
        }).catch(function (err) {
            _Log.Log.error( true && err.message);
        });
    };

    UserManager.prototype.signinSilent = function signinSilent() {
        var _this4 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        // first determine if we have a refresh token, or need to use iframe
        return this._loadUser().then(function (user) {
            if (user && user.refresh_token) {
                args.refresh_token = user.refresh_token;
                return _this4._useRefreshToken(args);
            } else {
                args.request_type = "si:s";
                args.id_token_hint = args.id_token_hint || _this4.settings.includeIdTokenInSilentRenew && user && user.id_token;
                if (user && _this4._settings.validateSubOnSilentRenew) {
                    _Log.Log.debug("UserManager.signinSilent, subject prior to silent renew: ", user.profile.sub);
                    args.current_sub = user.profile.sub;
                }
                return _this4._signinSilentIframe(args);
            }
        });
    };

    UserManager.prototype._useRefreshToken = function _useRefreshToken() {
        var _this5 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        return this._tokenClient.exchangeRefreshToken(args).then(function (result) {
            if (!result) {
                _Log.Log.error("UserManager._useRefreshToken: No response returned from token endpoint");
                return Promise.reject("No response returned from token endpoint");
            }
            if (!result.access_token) {
                _Log.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint");
                return Promise.reject("No access token returned from token endpoint");
            }

            return _this5._loadUser().then(function (user) {
                if (user) {
                    var idTokenValidation = Promise.resolve();
                    if (result.id_token) {
                        idTokenValidation = _this5._validateIdTokenFromTokenRefreshToken(user.profile, result.id_token);
                    }

                    return idTokenValidation.then(function () {
                        _Log.Log.debug("UserManager._useRefreshToken: refresh token response success");
                        user.id_token = result.id_token || user.id_token;
                        user.access_token = result.access_token;
                        user.refresh_token = result.refresh_token || user.refresh_token;
                        user.expires_in = result.expires_in;

                        return _this5.storeUser(user).then(function () {
                            _this5._events.load(user);
                            return user;
                        });
                    });
                } else {
                    return null;
                }
            });
        });
    };

    UserManager.prototype._validateIdTokenFromTokenRefreshToken = function _validateIdTokenFromTokenRefreshToken(profile, id_token) {
        var _this6 = this;

        return this._metadataService.getIssuer().then(function (issuer) {
            return _this6.settings.getEpochTime().then(function (now) {
                return _this6._joseUtil.validateJwtAttributes(id_token, issuer, _this6._settings.client_id, _this6._settings.clockSkew, now).then(function (payload) {
                    if (!payload) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token");
                        return Promise.reject(new Error("Failed to validate id_token"));
                    }
                    if (payload.sub !== profile.sub) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub");
                        return Promise.reject(new Error("sub in id_token does not match current sub"));
                    }
                    if (payload.auth_time && payload.auth_time !== profile.auth_time) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time");
                        return Promise.reject(new Error("auth_time in id_token does not match original auth_time"));
                    }
                    if (payload.azp && payload.azp !== profile.azp) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp");
                        return Promise.reject(new Error("azp in id_token does not match original azp"));
                    }
                    if (!payload.azp && profile.azp) {
                        _Log.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token");
                        return Promise.reject(new Error("azp not in id_token, but present in original id_token"));
                    }
                });
            });
        });
    };

    UserManager.prototype._signinSilentIframe = function _signinSilentIframe() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.signinSilent: No silent_redirect_uri configured");
            return Promise.reject(new Error("No silent_redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.prompt = args.prompt || "none";

        return this._signin(args, this._iframeNavigator, {
            startUrl: url,
            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
        }).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinSilent: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinSilent: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinSilentCallback = function signinSilentCallback(url) {
        return this._signinCallback(url, this._iframeNavigator).then(function (user) {
            if (user) {
                if (user.profile && user.profile.sub) {
                    _Log.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ", user.profile.sub);
                } else {
                    _Log.Log.info("UserManager.signinSilentCallback: no sub");
                }
            }

            return user;
        });
    };

    UserManager.prototype.signinCallback = function signinCallback(url) {
        var _this7 = this;

        return this.readSigninResponseState(url).then(function (_ref) {
            var state = _ref.state,
                response = _ref.response;

            if (state.request_type === "si:r") {
                return _this7.signinRedirectCallback(url);
            }
            if (state.request_type === "si:p") {
                return _this7.signinPopupCallback(url);
            }
            if (state.request_type === "si:s") {
                return _this7.signinSilentCallback(url);
            }
            return Promise.reject(new Error("invalid response_type in state"));
        });
    };

    UserManager.prototype.signoutCallback = function signoutCallback(url, keepOpen) {
        var _this8 = this;

        return this.readSignoutResponseState(url).then(function (_ref2) {
            var state = _ref2.state,
                response = _ref2.response;

            if (state) {
                if (state.request_type === "so:r") {
                    return _this8.signoutRedirectCallback(url);
                }
                if (state.request_type === "so:p") {
                    return _this8.signoutPopupCallback(url, keepOpen);
                }
                return Promise.reject(new Error("invalid response_type in state"));
            }
            return response;
        });
    };

    UserManager.prototype.querySessionStatus = function querySessionStatus() {
        var _this9 = this;

        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "si:s"; // this acts like a signin silent
        var url = args.redirect_uri || this.settings.silent_redirect_uri || this.settings.redirect_uri;
        if (!url) {
            _Log.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured");
            return Promise.reject(new Error("No silent_redirect_uri configured"));
        }

        args.redirect_uri = url;
        args.prompt = "none";
        args.response_type = args.response_type || this.settings.query_status_response_type;
        args.scope = args.scope || "openid";
        args.skipUserInfo = true;

        return this._signinStart(args, this._iframeNavigator, {
            startUrl: url,
            silentRequestTimeout: args.silentRequestTimeout || this.settings.silentRequestTimeout
        }).then(function (navResponse) {
            return _this9.processSigninResponse(navResponse.url).then(function (signinResponse) {
                _Log.Log.debug("UserManager.querySessionStatus: got signin response");

                if (signinResponse.session_state && signinResponse.profile.sub) {
                    _Log.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ", signinResponse.profile.sub);
                    return {
                        session_state: signinResponse.session_state,
                        sub: signinResponse.profile.sub,
                        sid: signinResponse.profile.sid
                    };
                } else {
                    _Log.Log.info("querySessionStatus successful, user not authenticated");
                }
            }).catch(function (err) {
                if (err.session_state && _this9.settings.monitorAnonymousSession) {
                    if (err.message == "login_required" || err.message == "consent_required" || err.message == "interaction_required" || err.message == "account_selection_required") {
                        _Log.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user");
                        return {
                            session_state: err.session_state
                        };
                    }
                }

                throw err;
            });
        });
    };

    UserManager.prototype._signin = function _signin(args, navigator) {
        var _this10 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return this._signinStart(args, navigator, navigatorParams).then(function (navResponse) {
            return _this10._signinEnd(navResponse.url, args);
        });
    };

    UserManager.prototype._signinStart = function _signinStart(args, navigator) {
        var _this11 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};


        return navigator.prepare(navigatorParams).then(function (handle) {
            _Log.Log.debug("UserManager._signinStart: got navigator window handle");

            return _this11.createSigninRequest(args).then(function (signinRequest) {
                _Log.Log.debug("UserManager._signinStart: got signin request");

                navigatorParams.url = signinRequest.url;
                navigatorParams.id = signinRequest.state.id;

                return handle.navigate(navigatorParams);
            }).catch(function (err) {
                if (handle.close) {
                    _Log.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window");
                    handle.close();
                }
                throw err;
            });
        });
    };

    UserManager.prototype._signinEnd = function _signinEnd(url) {
        var _this12 = this;

        var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

        return this.processSigninResponse(url).then(function (signinResponse) {
            _Log.Log.debug("UserManager._signinEnd: got signin response");

            var user = new _User.User(signinResponse);

            if (args.current_sub) {
                if (args.current_sub !== user.profile.sub) {
                    _Log.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ", user.profile.sub);
                    return Promise.reject(new Error("login_required"));
                } else {
                    _Log.Log.debug("UserManager._signinEnd: current user matches user returned from signin");
                }
            }

            return _this12.storeUser(user).then(function () {
                _Log.Log.debug("UserManager._signinEnd: user stored");

                _this12._events.load(user);

                return user;
            });
        });
    };

    UserManager.prototype._signinCallback = function _signinCallback(url, navigator) {
        _Log.Log.debug("UserManager._signinCallback");
        var useQuery = this._settings.response_mode === "query" || !this._settings.response_mode && _SigninRequest.SigninRequest.isCode(this._settings.response_type);
        var delimiter = useQuery ? "?" : "#";
        return navigator.callback(url, undefined, delimiter);
    };

    UserManager.prototype.signoutRedirect = function signoutRedirect() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "so:r";
        var postLogoutRedirectUri = args.post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
        if (postLogoutRedirectUri) {
            args.post_logout_redirect_uri = postLogoutRedirectUri;
        }
        var navParams = {
            useReplaceToNavigate: args.useReplaceToNavigate
        };
        return this._signoutStart(args, this._redirectNavigator, navParams).then(function () {
            _Log.Log.info("UserManager.signoutRedirect: successful");
        });
    };

    UserManager.prototype.signoutRedirectCallback = function signoutRedirectCallback(url) {
        return this._signoutEnd(url || this._redirectNavigator.url).then(function (response) {
            _Log.Log.info("UserManager.signoutRedirectCallback: successful");
            return response;
        });
    };

    UserManager.prototype.signoutPopup = function signoutPopup() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        args = Object.assign({}, args);

        args.request_type = "so:p";
        var url = args.post_logout_redirect_uri || this.settings.popup_post_logout_redirect_uri || this.settings.post_logout_redirect_uri;
        args.post_logout_redirect_uri = url;
        args.display = "popup";
        if (args.post_logout_redirect_uri) {
            // we're putting a dummy entry in here because we
            // need a unique id from the state for notification
            // to the parent window, which is necessary if we
            // plan to return back to the client after signout
            // and so we can close the popup after signout
            args.state = args.state || {};
        }

        return this._signout(args, this._popupNavigator, {
            startUrl: url,
            popupWindowFeatures: args.popupWindowFeatures || this.settings.popupWindowFeatures,
            popupWindowTarget: args.popupWindowTarget || this.settings.popupWindowTarget
        }).then(function () {
            _Log.Log.info("UserManager.signoutPopup: successful");
        });
    };

    UserManager.prototype.signoutPopupCallback = function signoutPopupCallback(url, keepOpen) {
        if (typeof keepOpen === 'undefined' && typeof url === 'boolean') {
            keepOpen = url;
            url = null;
        }

        var delimiter = '?';
        return this._popupNavigator.callback(url, keepOpen, delimiter).then(function () {
            _Log.Log.info("UserManager.signoutPopupCallback: successful");
        });
    };

    UserManager.prototype._signout = function _signout(args, navigator) {
        var _this13 = this;

        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return this._signoutStart(args, navigator, navigatorParams).then(function (navResponse) {
            return _this13._signoutEnd(navResponse.url);
        });
    };

    UserManager.prototype._signoutStart = function _signoutStart() {
        var args = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

        var _this14 = this;

        var navigator = arguments[1];
        var navigatorParams = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

        return navigator.prepare(navigatorParams).then(function (handle) {
            _Log.Log.debug("UserManager._signoutStart: got navigator window handle");

            return _this14._loadUser().then(function (user) {
                _Log.Log.debug("UserManager._signoutStart: loaded current user from storage");

                var revokePromise = _this14._settings.revokeAccessTokenOnSignout ? _this14._revokeInternal(user) : Promise.resolve();
                return revokePromise.then(function () {

                    var id_token = args.id_token_hint || user && user.id_token;
                    if (id_token) {
                        _Log.Log.debug("UserManager._signoutStart: Setting id_token into signout request");
                        args.id_token_hint = id_token;
                    }

                    return _this14.removeUser().then(function () {
                        _Log.Log.debug("UserManager._signoutStart: user removed, creating signout request");

                        return _this14.createSignoutRequest(args).then(function (signoutRequest) {
                            _Log.Log.debug("UserManager._signoutStart: got signout request");

                            navigatorParams.url = signoutRequest.url;
                            if (signoutRequest.state) {
                                navigatorParams.id = signoutRequest.state.id;
                            }
                            return handle.navigate(navigatorParams);
                        });
                    });
                });
            }).catch(function (err) {
                if (handle.close) {
                    _Log.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window");
                    handle.close();
                }
                throw err;
            });
        });
    };

    UserManager.prototype._signoutEnd = function _signoutEnd(url) {
        return this.processSignoutResponse(url).then(function (signoutResponse) {
            _Log.Log.debug("UserManager._signoutEnd: got signout response");

            return signoutResponse;
        });
    };

    UserManager.prototype.revokeAccessToken = function revokeAccessToken() {
        var _this15 = this;

        return this._loadUser().then(function (user) {
            return _this15._revokeInternal(user, true).then(function (success) {
                if (success) {
                    _Log.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing");

                    user.access_token = null;
                    user.refresh_token = null;
                    user.expires_at = null;
                    user.token_type = null;

                    return _this15.storeUser(user).then(function () {
                        _Log.Log.debug("UserManager.revokeAccessToken: user stored");
                        _this15._events.load(user);
                    });
                }
            });
        }).then(function () {
            _Log.Log.info("UserManager.revokeAccessToken: access token revoked successfully");
        });
    };

    UserManager.prototype._revokeInternal = function _revokeInternal(user, required) {
        var _this16 = this;

        if (user) {
            var access_token = user.access_token;
            var refresh_token = user.refresh_token;

            return this._revokeAccessTokenInternal(access_token, required).then(function (atSuccess) {
                return _this16._revokeRefreshTokenInternal(refresh_token, required).then(function (rtSuccess) {
                    if (!atSuccess && !rtSuccess) {
                        _Log.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format");
                    }

                    return atSuccess || rtSuccess;
                });
            });
        }

        return Promise.resolve(false);
    };

    UserManager.prototype._revokeAccessTokenInternal = function _revokeAccessTokenInternal(access_token, required) {
        // check for JWT vs. reference token
        if (!access_token || access_token.indexOf('.') >= 0) {
            return Promise.resolve(false);
        }

        return this._tokenRevocationClient.revoke(access_token, required).then(function () {
            return true;
        });
    };

    UserManager.prototype._revokeRefreshTokenInternal = function _revokeRefreshTokenInternal(refresh_token, required) {
        if (!refresh_token) {
            return Promise.resolve(false);
        }

        return this._tokenRevocationClient.revoke(refresh_token, required, "refresh_token").then(function () {
            return true;
        });
    };

    UserManager.prototype.startSilentRenew = function startSilentRenew() {
        this._silentRenewService.start();
    };

    UserManager.prototype.stopSilentRenew = function stopSilentRenew() {
        this._silentRenewService.stop();
    };

    UserManager.prototype._loadUser = function _loadUser() {
        return this._userStore.get(this._userStoreKey).then(function (storageString) {
            if (storageString) {
                _Log.Log.debug("UserManager._loadUser: user storageString loaded");
                return _User.User.fromStorageString(storageString);
            }

            _Log.Log.debug("UserManager._loadUser: no user storageString");
            return null;
        });
    };

    UserManager.prototype.storeUser = function storeUser(user) {
        if (user) {
            _Log.Log.debug("UserManager.storeUser: storing user");

            var storageString = user.toStorageString();
            return this._userStore.set(this._userStoreKey, storageString);
        } else {
            _Log.Log.debug("storeUser.storeUser: removing user");
            return this._userStore.remove(this._userStoreKey);
        }
    };

    _createClass(UserManager, [{
        key: '_redirectNavigator',
        get: function get() {
            return this.settings.redirectNavigator;
        }
    }, {
        key: '_popupNavigator',
        get: function get() {
            return this.settings.popupNavigator;
        }
    }, {
        key: '_iframeNavigator',
        get: function get() {
            return this.settings.iframeNavigator;
        }
    }, {
        key: '_userStore',
        get: function get() {
            return this.settings.userStore;
        }
    }, {
        key: 'events',
        get: function get() {
            return this._events;
        }
    }, {
        key: '_userStoreKey',
        get: function get() {
            return 'user:' + this.settings.authority + ':' + this.settings.client_id;
        }
    }]);

    return UserManager;
}(_OidcClient2.OidcClient);

/***/ }),

/***/ "./src/UserManagerEvents.js":
/*!**********************************!*\
  !*** ./src/UserManagerEvents.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManagerEvents = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _AccessTokenEvents2 = __webpack_require__(/*! ./AccessTokenEvents.js */ "./src/AccessTokenEvents.js");

var _Event = __webpack_require__(/*! ./Event.js */ "./src/Event.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var UserManagerEvents = exports.UserManagerEvents = function (_AccessTokenEvents) {
    _inherits(UserManagerEvents, _AccessTokenEvents);

    function UserManagerEvents(settings) {
        _classCallCheck(this, UserManagerEvents);

        var _this = _possibleConstructorReturn(this, _AccessTokenEvents.call(this, settings));

        _this._userLoaded = new _Event.Event("User loaded");
        _this._userUnloaded = new _Event.Event("User unloaded");
        _this._silentRenewError = new _Event.Event("Silent renew error");
        _this._userSignedIn = new _Event.Event("User signed in");
        _this._userSignedOut = new _Event.Event("User signed out");
        _this._userSessionChanged = new _Event.Event("User session changed");
        return _this;
    }

    UserManagerEvents.prototype.load = function load(user) {
        var raiseEvent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        _Log.Log.debug("UserManagerEvents.load");
        _AccessTokenEvents.prototype.load.call(this, user);
        if (raiseEvent) {
            this._userLoaded.raise(user);
        }
    };

    UserManagerEvents.prototype.unload = function unload() {
        _Log.Log.debug("UserManagerEvents.unload");
        _AccessTokenEvents.prototype.unload.call(this);
        this._userUnloaded.raise();
    };

    UserManagerEvents.prototype.addUserLoaded = function addUserLoaded(cb) {
        this._userLoaded.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserLoaded = function removeUserLoaded(cb) {
        this._userLoaded.removeHandler(cb);
    };

    UserManagerEvents.prototype.addUserUnloaded = function addUserUnloaded(cb) {
        this._userUnloaded.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserUnloaded = function removeUserUnloaded(cb) {
        this._userUnloaded.removeHandler(cb);
    };

    UserManagerEvents.prototype.addSilentRenewError = function addSilentRenewError(cb) {
        this._silentRenewError.addHandler(cb);
    };

    UserManagerEvents.prototype.removeSilentRenewError = function removeSilentRenewError(cb) {
        this._silentRenewError.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseSilentRenewError = function _raiseSilentRenewError(e) {
        _Log.Log.debug("UserManagerEvents._raiseSilentRenewError", e.message);
        this._silentRenewError.raise(e);
    };

    UserManagerEvents.prototype.addUserSignedIn = function addUserSignedIn(cb) {
        this._userSignedIn.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSignedIn = function removeUserSignedIn(cb) {
        this._userSignedIn.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSignedIn = function _raiseUserSignedIn() {
        _Log.Log.debug("UserManagerEvents._raiseUserSignedIn");
        this._userSignedIn.raise();
    };

    UserManagerEvents.prototype.addUserSignedOut = function addUserSignedOut(cb) {
        this._userSignedOut.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSignedOut = function removeUserSignedOut(cb) {
        this._userSignedOut.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSignedOut = function _raiseUserSignedOut() {
        _Log.Log.debug("UserManagerEvents._raiseUserSignedOut");
        this._userSignedOut.raise();
    };

    UserManagerEvents.prototype.addUserSessionChanged = function addUserSessionChanged(cb) {
        this._userSessionChanged.addHandler(cb);
    };

    UserManagerEvents.prototype.removeUserSessionChanged = function removeUserSessionChanged(cb) {
        this._userSessionChanged.removeHandler(cb);
    };

    UserManagerEvents.prototype._raiseUserSessionChanged = function _raiseUserSessionChanged() {
        _Log.Log.debug("UserManagerEvents._raiseUserSessionChanged");
        this._userSessionChanged.raise();
    };

    return UserManagerEvents;
}(_AccessTokenEvents2.AccessTokenEvents);

/***/ }),

/***/ "./src/UserManagerSettings.js":
/*!************************************!*\
  !*** ./src/UserManagerSettings.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.UserManagerSettings = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _OidcClientSettings2 = __webpack_require__(/*! ./OidcClientSettings.js */ "./src/OidcClientSettings.js");

var _RedirectNavigator = __webpack_require__(/*! ./RedirectNavigator.js */ "./src/RedirectNavigator.js");

var _PopupNavigator = __webpack_require__(/*! ./PopupNavigator.js */ "./src/PopupNavigator.js");

var _IFrameNavigator = __webpack_require__(/*! ./IFrameNavigator.js */ "./src/IFrameNavigator.js");

var _WebStorageStateStore = __webpack_require__(/*! ./WebStorageStateStore.js */ "./src/WebStorageStateStore.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

var _SigninRequest = __webpack_require__(/*! ./SigninRequest.js */ "./src/SigninRequest.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var DefaultAccessTokenExpiringNotificationTime = 60;
var DefaultCheckSessionInterval = 2000;

var UserManagerSettings = exports.UserManagerSettings = function (_OidcClientSettings) {
    _inherits(UserManagerSettings, _OidcClientSettings);

    function UserManagerSettings() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            popup_redirect_uri = _ref.popup_redirect_uri,
            popup_post_logout_redirect_uri = _ref.popup_post_logout_redirect_uri,
            popupWindowFeatures = _ref.popupWindowFeatures,
            popupWindowTarget = _ref.popupWindowTarget,
            silent_redirect_uri = _ref.silent_redirect_uri,
            silentRequestTimeout = _ref.silentRequestTimeout,
            _ref$automaticSilentR = _ref.automaticSilentRenew,
            automaticSilentRenew = _ref$automaticSilentR === undefined ? false : _ref$automaticSilentR,
            _ref$validateSubOnSil = _ref.validateSubOnSilentRenew,
            validateSubOnSilentRenew = _ref$validateSubOnSil === undefined ? false : _ref$validateSubOnSil,
            _ref$includeIdTokenIn = _ref.includeIdTokenInSilentRenew,
            includeIdTokenInSilentRenew = _ref$includeIdTokenIn === undefined ? true : _ref$includeIdTokenIn,
            _ref$monitorSession = _ref.monitorSession,
            monitorSession = _ref$monitorSession === undefined ? true : _ref$monitorSession,
            _ref$monitorAnonymous = _ref.monitorAnonymousSession,
            monitorAnonymousSession = _ref$monitorAnonymous === undefined ? false : _ref$monitorAnonymous,
            _ref$checkSessionInte = _ref.checkSessionInterval,
            checkSessionInterval = _ref$checkSessionInte === undefined ? DefaultCheckSessionInterval : _ref$checkSessionInte,
            _ref$stopCheckSession = _ref.stopCheckSessionOnError,
            stopCheckSessionOnError = _ref$stopCheckSession === undefined ? true : _ref$stopCheckSession,
            query_status_response_type = _ref.query_status_response_type,
            _ref$revokeAccessToke = _ref.revokeAccessTokenOnSignout,
            revokeAccessTokenOnSignout = _ref$revokeAccessToke === undefined ? false : _ref$revokeAccessToke,
            _ref$accessTokenExpir = _ref.accessTokenExpiringNotificationTime,
            accessTokenExpiringNotificationTime = _ref$accessTokenExpir === undefined ? DefaultAccessTokenExpiringNotificationTime : _ref$accessTokenExpir,
            _ref$redirectNavigato = _ref.redirectNavigator,
            redirectNavigator = _ref$redirectNavigato === undefined ? new _RedirectNavigator.RedirectNavigator() : _ref$redirectNavigato,
            _ref$popupNavigator = _ref.popupNavigator,
            popupNavigator = _ref$popupNavigator === undefined ? new _PopupNavigator.PopupNavigator() : _ref$popupNavigator,
            _ref$iframeNavigator = _ref.iframeNavigator,
            iframeNavigator = _ref$iframeNavigator === undefined ? new _IFrameNavigator.IFrameNavigator() : _ref$iframeNavigator,
            _ref$userStore = _ref.userStore,
            userStore = _ref$userStore === undefined ? new _WebStorageStateStore.WebStorageStateStore({ store: _Global.Global.sessionStorage }) : _ref$userStore;

        _classCallCheck(this, UserManagerSettings);

        var _this = _possibleConstructorReturn(this, _OidcClientSettings.call(this, arguments[0]));

        _this._popup_redirect_uri = popup_redirect_uri;
        _this._popup_post_logout_redirect_uri = popup_post_logout_redirect_uri;
        _this._popupWindowFeatures = popupWindowFeatures;
        _this._popupWindowTarget = popupWindowTarget;

        _this._silent_redirect_uri = silent_redirect_uri;
        _this._silentRequestTimeout = silentRequestTimeout;
        _this._automaticSilentRenew = automaticSilentRenew;
        _this._validateSubOnSilentRenew = validateSubOnSilentRenew;
        _this._includeIdTokenInSilentRenew = includeIdTokenInSilentRenew;
        _this._accessTokenExpiringNotificationTime = accessTokenExpiringNotificationTime;

        _this._monitorSession = monitorSession;
        _this._monitorAnonymousSession = monitorAnonymousSession;
        _this._checkSessionInterval = checkSessionInterval;
        _this._stopCheckSessionOnError = stopCheckSessionOnError;
        if (query_status_response_type) {
            _this._query_status_response_type = query_status_response_type;
        } else if (arguments[0] && arguments[0].response_type) {
            _this._query_status_response_type = _SigninRequest.SigninRequest.isOidc(arguments[0].response_type) ? "id_token" : "code";
        } else {
            _this._query_status_response_type = "id_token";
        }
        _this._revokeAccessTokenOnSignout = revokeAccessTokenOnSignout;

        _this._redirectNavigator = redirectNavigator;
        _this._popupNavigator = popupNavigator;
        _this._iframeNavigator = iframeNavigator;

        _this._userStore = userStore;
        return _this;
    }

    _createClass(UserManagerSettings, [{
        key: 'popup_redirect_uri',
        get: function get() {
            return this._popup_redirect_uri;
        }
    }, {
        key: 'popup_post_logout_redirect_uri',
        get: function get() {
            return this._popup_post_logout_redirect_uri;
        }
    }, {
        key: 'popupWindowFeatures',
        get: function get() {
            return this._popupWindowFeatures;
        }
    }, {
        key: 'popupWindowTarget',
        get: function get() {
            return this._popupWindowTarget;
        }
    }, {
        key: 'silent_redirect_uri',
        get: function get() {
            return this._silent_redirect_uri;
        }
    }, {
        key: 'silentRequestTimeout',
        get: function get() {
            return this._silentRequestTimeout;
        }
    }, {
        key: 'automaticSilentRenew',
        get: function get() {
            return this._automaticSilentRenew;
        }
    }, {
        key: 'validateSubOnSilentRenew',
        get: function get() {
            return this._validateSubOnSilentRenew;
        }
    }, {
        key: 'includeIdTokenInSilentRenew',
        get: function get() {
            return this._includeIdTokenInSilentRenew;
        }
    }, {
        key: 'accessTokenExpiringNotificationTime',
        get: function get() {
            return this._accessTokenExpiringNotificationTime;
        }
    }, {
        key: 'monitorSession',
        get: function get() {
            return this._monitorSession;
        }
    }, {
        key: 'monitorAnonymousSession',
        get: function get() {
            return this._monitorAnonymousSession;
        }
    }, {
        key: 'checkSessionInterval',
        get: function get() {
            return this._checkSessionInterval;
        }
    }, {
        key: 'stopCheckSessionOnError',
        get: function get() {
            return this._stopCheckSessionOnError;
        }
    }, {
        key: 'query_status_response_type',
        get: function get() {
            return this._query_status_response_type;
        }
    }, {
        key: 'revokeAccessTokenOnSignout',
        get: function get() {
            return this._revokeAccessTokenOnSignout;
        }
    }, {
        key: 'redirectNavigator',
        get: function get() {
            return this._redirectNavigator;
        }
    }, {
        key: 'popupNavigator',
        get: function get() {
            return this._popupNavigator;
        }
    }, {
        key: 'iframeNavigator',
        get: function get() {
            return this._iframeNavigator;
        }
    }, {
        key: 'userStore',
        get: function get() {
            return this._userStore;
        }
    }]);

    return UserManagerSettings;
}(_OidcClientSettings2.OidcClientSettings);

/***/ }),

/***/ "./src/WebStorageStateStore.js":
/*!*************************************!*\
  !*** ./src/WebStorageStateStore.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebStorageStateStore = undefined;

var _Log = __webpack_require__(/*! ./Log.js */ "./src/Log.js");

var _Global = __webpack_require__(/*! ./Global.js */ "./src/Global.js");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } } // Copyright (c) Brock Allen & Dominick Baier. All rights reserved.
// Licensed under the Apache License, Version 2.0. See LICENSE in the project root for license information.

var WebStorageStateStore = exports.WebStorageStateStore = function () {
    function WebStorageStateStore() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$prefix = _ref.prefix,
            prefix = _ref$prefix === undefined ? "oidc." : _ref$prefix,
            _ref$store = _ref.store,
            store = _ref$store === undefined ? _Global.Global.localStorage : _ref$store;

        _classCallCheck(this, WebStorageStateStore);

        this._store = store;
        this._prefix = prefix;
    }

    WebStorageStateStore.prototype.set = function set(key, value) {
        _Log.Log.debug("WebStorageStateStore.set", key);

        key = this._prefix + key;

        this._store.setItem(key, value);

        return Promise.resolve();
    };

    WebStorageStateStore.prototype.get = function get(key) {
        _Log.Log.debug("WebStorageStateStore.get", key);

        key = this._prefix + key;

        var item = this._store.getItem(key);

        return Promise.resolve(item);
    };

    WebStorageStateStore.prototype.remove = function remove(key) {
        _Log.Log.debug("WebStorageStateStore.remove", key);

        key = this._prefix + key;

        var item = this._store.getItem(key);
        this._store.removeItem(key);

        return Promise.resolve(item);
    };

    WebStorageStateStore.prototype.getAllKeys = function getAllKeys() {
        _Log.Log.debug("WebStorageStateStore.getAllKeys");

        var keys = [];

        for (var index = 0; index < this._store.length; index++) {
            var key = this._store.key(index);

            if (key.indexOf(this._prefix) === 0) {
                keys.push(key.substr(this._prefix.length));
            }
        }

        return Promise.resolve(keys);
    };

    return WebStorageStateStore;
}();

/***/ }),

/***/ "./src/crypto/jsrsasign.js":
/*!*********************************!*\
  !*** ./src/crypto/jsrsasign.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AllowedSigningAlgs = exports.b64tohex = exports.hextob64u = exports.crypto = exports.X509 = exports.KeyUtil = exports.jws = undefined;

var _jsrsasign = __webpack_require__(/*! ../../jsrsasign/dist/jsrsasign.js */ "./jsrsasign/dist/jsrsasign.js");

var AllowedSigningAlgs = ['RS256', 'RS384', 'RS512', 'PS256', 'PS384', 'PS512', 'ES256', 'ES384', 'ES512'];

exports.jws = _jsrsasign.jws;
exports.KeyUtil = _jsrsasign.KEYUTIL;
exports.X509 = _jsrsasign.X509;
exports.crypto = _jsrsasign.crypto;
exports.hextob64u = _jsrsasign.hextob64u;
exports.b64tohex = _jsrsasign.b64tohex;
exports.AllowedSigningAlgs = AllowedSigningAlgs;

/***/ }),

/***/ "./src/random.js":
/*!***********************!*\
  !*** ./src/random.js ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = random;
/**
 * Generates RFC4122 version 4 guid ()
 */

var crypto = typeof window !== 'undefined' ? window.crypto || window.msCrypto : null;

function _cryptoUuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
}

function _uuidv4() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ Math.random() * 16 >> c / 4).toString(16);
  });
}

function random() {
  var hasCrypto = crypto != 'undefined' && crypto !== null;
  var hasRandomValues = hasCrypto && typeof crypto.getRandomValues != 'undefined';
  var uuid = hasRandomValues ? _cryptoUuidv4 : _uuidv4;
  return uuid().replace(/-/g, '');
}
module.exports = exports['default'];

/***/ }),

/***/ "./version.js":
/*!********************!*\
  !*** ./version.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var Version = "1.11.6-beta.1";exports.Version = Version;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly8vLi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9qc3JzYXNpZ24vZGlzdC9qc3JzYXNpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pc2FycmF5L2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FjY2Vzc1Rva2VuRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Nsb2NrU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YUlGcmFtZU5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvQ29yZG92YVBvcHVwTmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9Db3Jkb3ZhUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0Vycm9yUmVzcG9uc2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0V2ZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9HbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0lGcmFtZU5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvSUZyYW1lV2luZG93LmpzIiwid2VicGFjazovLy8uL3NyYy9Jbk1lbW9yeVdlYlN0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pvc2VVdGlsLmpzIiwid2VicGFjazovLy8uL3NyYy9Kb3NlVXRpbEltcGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0pzb25TZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9Mb2cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL01ldGFkYXRhU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvT2lkY0NsaWVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvT2lkY0NsaWVudFNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9Qb3B1cE5hdmlnYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvUG9wdXBXaW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1JlZGlyZWN0TmF2aWdhdG9yLmpzIiwid2VicGFjazovLy8uL3NyYy9SZXNwb25zZVZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2Vzc2lvbk1vbml0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25pblJlc3BvbnNlLmpzIiwid2VicGFjazovLy8uL3NyYy9TaWduaW5TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lnbm91dFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1NpZ25vdXRSZXNwb25zZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvU2lsZW50UmVuZXdTZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9TdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1Rva2VuQ2xpZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9Ub2tlblJldm9jYXRpb25DbGllbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VybFV0aWxpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJJbmZvU2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvVXNlck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL1VzZXJNYW5hZ2VyRXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9Vc2VyTWFuYWdlclNldHRpbmdzLmpzIiwid2VicGFjazovLy8uL3NyYy9XZWJTdG9yYWdlU3RhdGVTdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY3J5cHRvL2pzcnNhc2lnbi5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmFuZG9tLmpzIiwid2VicGFjazovLy8uL3ZlcnNpb24uanMiXSwibmFtZXMiOlsiVmVyc2lvbiIsIkxvZyIsIk9pZGNDbGllbnQiLCJPaWRjQ2xpZW50U2V0dGluZ3MiLCJXZWJTdG9yYWdlU3RhdGVTdG9yZSIsIkluTWVtb3J5V2ViU3RvcmFnZSIsIlVzZXJNYW5hZ2VyIiwiQWNjZXNzVG9rZW5FdmVudHMiLCJNZXRhZGF0YVNlcnZpY2UiLCJDb3Jkb3ZhUG9wdXBOYXZpZ2F0b3IiLCJDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIiwiQ2hlY2tTZXNzaW9uSUZyYW1lIiwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50IiwiU2Vzc2lvbk1vbml0b3IiLCJHbG9iYWwiLCJVc2VyIiwibmF2aWdhdG9yIiwidXNlckFnZW50Iiwid2luZG93IiwiQ3J5cHRvSlMiLCJlIiwiZyIsImEiLCJiIiwibGliIiwiaiIsIkJhc2UiLCJuIiwiZXh0ZW5kIiwicCIsInByb3RvdHlwZSIsIm8iLCJtaXhJbiIsImhhc093blByb3BlcnR5IiwiaW5pdCIsIiRzdXBlciIsImFwcGx5IiwiYXJndW1lbnRzIiwiY3JlYXRlIiwidG9TdHJpbmciLCJjbG9uZSIsImwiLCJXb3JkQXJyYXkiLCJ3b3JkcyIsInNpZ0J5dGVzIiwibGVuZ3RoIiwiaCIsInN0cmluZ2lmeSIsImNvbmNhdCIsInQiLCJxIiwicyIsImNsYW1wIiwiciIsImNlaWwiLCJjYWxsIiwic2xpY2UiLCJyYW5kb20iLCJwdXNoIiwibSIsImVuYyIsIkhleCIsImpvaW4iLCJwYXJzZSIsInBhcnNlSW50Iiwic3Vic3RyIiwiZCIsIkxhdGluMSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImNoYXJDb2RlQXQiLCJjIiwiVXRmOCIsImRlY29kZVVSSUNvbXBvbmVudCIsImVzY2FwZSIsIkVycm9yIiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJpIiwiQnVmZmVyZWRCbG9ja0FsZ29yaXRobSIsInJlc2V0IiwiX2RhdGEiLCJfbkRhdGFCeXRlcyIsIl9hcHBlbmQiLCJfcHJvY2VzcyIsInciLCJ4IiwiYmxvY2tTaXplIiwidiIsInUiLCJtYXgiLCJfbWluQnVmZmVyU2l6ZSIsIm1pbiIsIl9kb1Byb2Nlc3NCbG9jayIsInNwbGljZSIsImYiLCJIYXNoZXIiLCJjZmciLCJfZG9SZXNldCIsInVwZGF0ZSIsImZpbmFsaXplIiwiX2RvRmluYWxpemUiLCJfY3JlYXRlSGVscGVyIiwiX2NyZWF0ZUhtYWNIZWxwZXIiLCJrIiwiSE1BQyIsImFsZ28iLCJNYXRoIiwieDY0IiwiV29yZCIsImhpZ2giLCJsb3ciLCJ0b1gzMiIsIkJhc2U2NCIsIl9tYXAiLCJjaGFyQXQiLCJpbmRleE9mIiwic3FydCIsInBvdyIsIlNIQTI1NiIsIl9oYXNoIiwiZmxvb3IiLCJIbWFjU0hBMjU2IiwiVCIsImVhIiwiU0hBNTEyIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJYIiwiSyIsIlkiLCJMIiwiWiIsIk0iLCIkIiwiTiIsImFhIiwiTyIsImJhIiwiUCIsImNhIiwiUSIsInoiLCJBIiwieSIsIlUiLCJCIiwiUiIsIkMiLCJTIiwiRCIsIlYiLCJFIiwiVyIsImZhIiwiZGEiLCJIbWFjU0hBNTEyIiwiU0hBMzg0IiwiSG1hY1NIQTM4NCIsImI2NG1hcCIsImI2NHBhZCIsImhleDJiNjQiLCJzdWJzdHJpbmciLCJiNjR0b2hleCIsImludDJjaGFyIiwiYjY0dG9CQSIsIkFycmF5IiwiZGJpdHMiLCJjYW5hcnkiLCJqX2xtIiwiQmlnSW50ZWdlciIsImZyb21OdW1iZXIiLCJmcm9tU3RyaW5nIiwibmJpIiwiYW0xIiwiYW0yIiwiYW0zIiwiYXBwTmFtZSIsImFtIiwiREIiLCJETSIsIkRWIiwiQklfRlAiLCJGViIsIkYxIiwiRjIiLCJCSV9STSIsIkJJX1JDIiwicnIiLCJ2diIsImludEF0IiwiYm5wQ29weVRvIiwiYm5wRnJvbUludCIsIm5idiIsImZyb21JbnQiLCJibnBGcm9tU3RyaW5nIiwiZnJvbVJhZGl4IiwiWkVSTyIsInN1YlRvIiwiYm5wQ2xhbXAiLCJiblRvU3RyaW5nIiwibmVnYXRlIiwidG9SYWRpeCIsImJuTmVnYXRlIiwiYm5BYnMiLCJibkNvbXBhcmVUbyIsIm5iaXRzIiwiYm5CaXRMZW5ndGgiLCJibnBETFNoaWZ0VG8iLCJibnBEUlNoaWZ0VG8iLCJibnBMU2hpZnRUbyIsImJucFJTaGlmdFRvIiwiYm5wU3ViVG8iLCJibnBNdWx0aXBseVRvIiwiYWJzIiwiYm5wU3F1YXJlVG8iLCJibnBEaXZSZW1UbyIsImNvcHlUbyIsImxTaGlmdFRvIiwiZGxTaGlmdFRvIiwiY29tcGFyZVRvIiwiT05FIiwiZHJTaGlmdFRvIiwiclNoaWZ0VG8iLCJibk1vZCIsImRpdlJlbVRvIiwiQ2xhc3NpYyIsImNDb252ZXJ0IiwibW9kIiwiY1JldmVydCIsImNSZWR1Y2UiLCJjTXVsVG8iLCJtdWx0aXBseVRvIiwicmVkdWNlIiwiY1NxclRvIiwic3F1YXJlVG8iLCJjb252ZXJ0IiwicmV2ZXJ0IiwibXVsVG8iLCJzcXJUbyIsImJucEludkRpZ2l0IiwiTW9udGdvbWVyeSIsIm1wIiwiaW52RGlnaXQiLCJtcGwiLCJtcGgiLCJ1bSIsIm10MiIsIm1vbnRDb252ZXJ0IiwibW9udFJldmVydCIsIm1vbnRSZWR1Y2UiLCJtb250U3FyVG8iLCJtb250TXVsVG8iLCJibnBJc0V2ZW4iLCJibnBFeHAiLCJibk1vZFBvd0ludCIsImlzRXZlbiIsImV4cCIsImJpdExlbmd0aCIsIm1vZFBvd0ludCIsImJuQ2xvbmUiLCJibkludFZhbHVlIiwiYm5CeXRlVmFsdWUiLCJiblNob3J0VmFsdWUiLCJibnBDaHVua1NpemUiLCJMTjIiLCJsb2ciLCJiblNpZ051bSIsImJucFRvUmFkaXgiLCJzaWdudW0iLCJjaHVua1NpemUiLCJpbnRWYWx1ZSIsImJucEZyb21SYWRpeCIsImRNdWx0aXBseSIsImRBZGRPZmZzZXQiLCJibnBGcm9tTnVtYmVyIiwidGVzdEJpdCIsImJpdHdpc2VUbyIsInNoaWZ0TGVmdCIsIm9wX29yIiwiaXNQcm9iYWJsZVByaW1lIiwibmV4dEJ5dGVzIiwiYm5Ub0J5dGVBcnJheSIsImJuRXF1YWxzIiwiYm5NaW4iLCJibk1heCIsImJucEJpdHdpc2VUbyIsIm9wX2FuZCIsImJuQW5kIiwiYm5PciIsIm9wX3hvciIsImJuWG9yIiwib3BfYW5kbm90IiwiYm5BbmROb3QiLCJibk5vdCIsImJuU2hpZnRMZWZ0IiwiYm5TaGlmdFJpZ2h0IiwibGJpdCIsImJuR2V0TG93ZXN0U2V0Qml0IiwiY2JpdCIsImJuQml0Q291bnQiLCJiblRlc3RCaXQiLCJibnBDaGFuZ2VCaXQiLCJiblNldEJpdCIsImNoYW5nZUJpdCIsImJuQ2xlYXJCaXQiLCJibkZsaXBCaXQiLCJibnBBZGRUbyIsImJuQWRkIiwiYWRkVG8iLCJiblN1YnRyYWN0IiwiYm5NdWx0aXBseSIsImJuU3F1YXJlIiwiYm5EaXZpZGUiLCJiblJlbWFpbmRlciIsImJuRGl2aWRlQW5kUmVtYWluZGVyIiwiYm5wRE11bHRpcGx5IiwiYm5wREFkZE9mZnNldCIsIk51bGxFeHAiLCJuTm9wIiwibk11bFRvIiwiblNxclRvIiwiYm5Qb3ciLCJibnBNdWx0aXBseUxvd2VyVG8iLCJibnBNdWx0aXBseVVwcGVyVG8iLCJCYXJyZXR0IiwicjIiLCJxMyIsIm11IiwiZGl2aWRlIiwiYmFycmV0dENvbnZlcnQiLCJiYXJyZXR0UmV2ZXJ0IiwiYmFycmV0dFJlZHVjZSIsIm11bHRpcGx5VXBwZXJUbyIsIm11bHRpcGx5TG93ZXJUbyIsImJhcnJldHRTcXJUbyIsImJhcnJldHRNdWxUbyIsImJuTW9kUG93IiwiYm5HQ0QiLCJnZXRMb3dlc3RTZXRCaXQiLCJibnBNb2RJbnQiLCJibk1vZEludmVyc2UiLCJzdWJ0cmFjdCIsImFkZCIsImxvd3ByaW1lcyIsImxwbGltIiwiYm5Jc1Byb2JhYmxlUHJpbWUiLCJtb2RJbnQiLCJtaWxsZXJSYWJpbiIsImJucE1pbGxlclJhYmluIiwic2hpZnRSaWdodCIsIm1vZFBvdyIsImJ5dGVWYWx1ZSIsInNob3J0VmFsdWUiLCJ0b0J5dGVBcnJheSIsImVxdWFscyIsImFuZCIsIm9yIiwieG9yIiwiYW5kTm90Iiwibm90IiwiYml0Q291bnQiLCJzZXRCaXQiLCJjbGVhckJpdCIsImZsaXBCaXQiLCJtdWx0aXBseSIsInJlbWFpbmRlciIsImRpdmlkZUFuZFJlbWFpbmRlciIsIm1vZEludmVyc2UiLCJnY2QiLCJzcXVhcmUiLCJBcmNmb3VyIiwiQVJDNGluaXQiLCJBUkM0bmV4dCIsIm5leHQiLCJwcm5nX25ld3N0YXRlIiwicm5nX3BzaXplIiwicm5nX3N0YXRlIiwicm5nX3Bvb2wiLCJybmdfcHB0ciIsInJuZ19zZWVkX2ludCIsInJuZ19zZWVkX3RpbWUiLCJEYXRlIiwiZ2V0VGltZSIsInVuZGVmaW5lZCIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwidWEiLCJVaW50OEFycmF5IiwiYXBwVmVyc2lvbiIsInJuZ19nZXRfYnl0ZSIsInJuZ19nZXRfYnl0ZXMiLCJTZWN1cmVSYW5kb20iLCJwYXJzZUJpZ0ludCIsImxpbmVicmsiLCJieXRlMkhleCIsInBrY3MxcGFkMiIsIm9hZXBfbWdmMV9hcnIiLCJvYWVwX3BhZCIsIktKVVIiLCJNZXNzYWdlRGlnZXN0IiwiVXRpbCIsImdldENhbm9uaWNhbEFsZ05hbWUiLCJnZXRIYXNoTGVuZ3RoIiwiaGV4dG9yc3RyIiwiaGFzaEhleCIsInJzdHJ0b2hleCIsIlJTQUtleSIsImRtcDEiLCJkbXExIiwiY29lZmYiLCJSU0FTZXRQdWJsaWMiLCJpc1B1YmxpYyIsImlzUHJpdmF0ZSIsIlJTQURvUHVibGljIiwiUlNBRW5jcnlwdCIsImRvUHVibGljIiwiUlNBRW5jcnlwdE9BRVAiLCJzZXRQdWJsaWMiLCJlbmNyeXB0IiwiZW5jcnlwdE9BRVAiLCJ0eXBlIiwiRUNGaWVsZEVsZW1lbnRGcCIsImZlRnBFcXVhbHMiLCJmZUZwVG9CaWdJbnRlZ2VyIiwiZmVGcE5lZ2F0ZSIsImZlRnBBZGQiLCJ0b0JpZ0ludGVnZXIiLCJmZUZwU3VidHJhY3QiLCJmZUZwTXVsdGlwbHkiLCJmZUZwU3F1YXJlIiwiZmVGcERpdmlkZSIsIkVDUG9pbnRGcCIsImN1cnZlIiwiemludiIsInBvaW50RnBHZXRYIiwiZnJvbUJpZ0ludGVnZXIiLCJwb2ludEZwR2V0WSIsInBvaW50RnBFcXVhbHMiLCJpc0luZmluaXR5IiwicG9pbnRGcElzSW5maW5pdHkiLCJwb2ludEZwTmVnYXRlIiwicG9pbnRGcEFkZCIsInR3aWNlIiwiZ2V0SW5maW5pdHkiLCJwb2ludEZwVHdpY2UiLCJwb2ludEZwTXVsdGlwbHkiLCJwb2ludEZwTXVsdGlwbHlUd28iLCJnZXRYIiwiZ2V0WSIsIm11bHRpcGx5VHdvIiwiRUNDdXJ2ZUZwIiwiaW5maW5pdHkiLCJjdXJ2ZUZwR2V0USIsImN1cnZlRnBHZXRBIiwiY3VydmVGcEdldEIiLCJjdXJ2ZUZwRXF1YWxzIiwiY3VydmVGcEdldEluZmluaXR5IiwiY3VydmVGcEZyb21CaWdJbnRlZ2VyIiwiY3VydmVGcERlY29kZVBvaW50SGV4IiwiZ2V0USIsImdldEEiLCJnZXRCIiwiZGVjb2RlUG9pbnRIZXgiLCJnZXRCeXRlTGVuZ3RoIiwiZ2V0RW5jb2RlZCIsInRvQnl0ZUFycmF5VW5zaWduZWQiLCJ1bnNoaWZ0IiwiZGVjb2RlRnJvbSIsImRlY29kZUZyb21IZXgiLCJhZGQyRCIsInR3aWNlMkQiLCJ2YWx1ZU9mIiwibXVsdGlwbHkyRCIsImlzT25DdXJ2ZSIsInZhbGlkYXRlIiwianNvblBhcnNlIiwiUmVnRXhwIiwiT2JqZWN0IiwibWF0Y2giLCJyZXBsYWNlIiwic2hpZnQiLCJhc24xIiwiQVNOMVV0aWwiLCJpbnRlZ2VyVG9CeXRlSGV4IiwiYmlnSW50VG9NaW5Ud29zQ29tcGxlbWVudHNIZXgiLCJnZXRQRU1TdHJpbmdGcm9tSGV4IiwiaGV4dG9wZW0iLCJuZXdPYmplY3QiLCJBU04xT2JqZWN0IiwiREVSQm9vbGVhbiIsIkRFUkludGVnZXIiLCJERVJCaXRTdHJpbmciLCJERVJPY3RldFN0cmluZyIsIkRFUk51bGwiLCJERVJPYmplY3RJZGVudGlmaWVyIiwiREVSRW51bWVyYXRlZCIsIkRFUlVURjhTdHJpbmciLCJERVJOdW1lcmljU3RyaW5nIiwiREVSUHJpbnRhYmxlU3RyaW5nIiwiREVSVGVsZXRleFN0cmluZyIsIkRFUklBNVN0cmluZyIsIkRFUlVUQ1RpbWUiLCJERVJHZW5lcmFsaXplZFRpbWUiLCJERVJWaXNpYmxlU3RyaW5nIiwiREVSQk1QU3RyaW5nIiwiREVSU2VxdWVuY2UiLCJERVJTZXQiLCJERVJUYWdnZWRPYmplY3QiLCJrZXlzIiwiYXJyYXkiLCJ0YWciLCJleHBsaWNpdCIsIm9iaiIsImpzb25Ub0FTTjFIRVgiLCJnZXRFbmNvZGVkSGV4Iiwib2lkSGV4VG9JbnQiLCJvaWRJbnRUb0hleCIsInNwbGl0IiwicGFyYW1zIiwiZ2V0TGVuZ3RoSGV4RnJvbVZhbHVlIiwiaFYiLCJoVExWIiwiaXNNb2RpZmllZCIsImdldEZyZXNoVmFsdWVIZXgiLCJoTCIsImhUIiwiZ2V0VmFsdWVIZXgiLCJzZXRCeVBhcmFtIiwidGx2IiwiREVSQWJzdHJhY3RTdHJpbmciLCJzdXBlcmNsYXNzIiwiY29uc3RydWN0b3IiLCJnZXRTdHJpbmciLCJzZXRTdHJpbmciLCJ1dGY4dG9oZXgiLCJ0b0xvd2VyQ2FzZSIsInNldFN0cmluZ0hleCIsInN0ciIsImhleCIsImV4dGVuZENsYXNzIiwiREVSQWJzdHJhY3RUaW1lIiwibG9jYWxEYXRlVG9VVEMiLCJnZXRUaW1lem9uZU9mZnNldCIsImZvcm1hdERhdGUiLCJ6ZXJvUGFkZGluZyIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInNldEJ5RGF0ZSIsImRhdGUiLCJzZXRCeURhdGVWYWx1ZSIsIlVUQyIsIkRFUkFic3RyYWN0U3RydWN0dXJlZCIsInNldEJ5QVNOMU9iamVjdEFycmF5IiwiYXNuMUFycmF5IiwiYXBwZW5kQVNOMU9iamVjdCIsInNldEJ5QmlnSW50ZWdlciIsInNldEJ5SW50ZWdlciIsInNldFZhbHVlSGV4IiwiYmlnaW50Iiwic2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzIiwic2V0VW51c2VkQml0c0FuZEhleFZhbHVlIiwic2V0QnlCaW5hcnlTdHJpbmciLCJzZXRCeUJvb2xlYW5BcnJheSIsIm5ld0ZhbHNlQXJyYXkiLCJiaW4iLCJzZXRWYWx1ZU9pZFN0cmluZyIsIm9pZHRvaGV4Iiwic2V0VmFsdWVOYW1lIiwieDUwOSIsIk9JRCIsIm5hbWUyb2lkIiwic2V0VmFsdWVOYW1lT3JPaWQiLCJvaWQiLCJuYW1lIiwic3RvaGV4IiwibWlsbGlzIiwic29ydEZsYWciLCJzb3J0Iiwic29ydGZsYWciLCJBU04xSEVYIiwiZ2V0ViIsImlzQVNOMUhFWCIsImlzRXhwbGljaXQiLCJhc24xT2JqZWN0Iiwic2V0QVNOMU9iamVjdCIsInRhZ2UiLCJ0YWdpIiwiZ2V0TGJsZW4iLCJnZXRMIiwiZ2V0VmJsZW4iLCJnZXRWaWR4IiwiZ2V0VExWIiwiZ2V0VExWYmxlbiIsImdldE5leHRTaWJsaW5nSWR4IiwiZ2V0Q2hpbGRJZHgiLCJnZXROdGhDaGlsZElkeCIsImdldElkeGJ5TGlzdCIsImdldElkeGJ5TGlzdEV4IiwiaXNDb250ZXh0VGFnIiwiZ2V0VExWYnlMaXN0IiwiZ2V0VExWYnlMaXN0RXgiLCJnZXRWYnlMaXN0IiwiZ2V0VmJ5TGlzdEV4IiwiZ2V0SW50IiwiYml0c3RydG9pbnQiLCJnZXRPSUQiLCJoZXh0b29pZCIsImdldE9JRE5hbWUiLCJvaWQybmFtZSIsImhleHRvb2lkc3RyIiwiZHVtcCIsIm9tbWl0X2xvbmdfb2N0ZXQiLCJoZXh0b3V0ZjgiLCJ1Y3MyaGV4dG91dGY4Iiwib2lkbmFtZSIsIkpTT04iLCJ4NTA5RXh0TmFtZSIsImJvb2wiLCJiaXRzdHIiLCJiaXRzdHJ0b2JpbnN0ciIsIm9jdHN0ciIsImNoZWNrU3RyaWN0REVSIiwibGFuZyIsImlzSGV4IiwiQmFzZTY0eCIsInN0b0JBIiwiQkF0b3MiLCJCQXRvaGV4Iiwic3RvYjY0Iiwic3RvYjY0dSIsImI2NHRvYjY0dSIsImI2NHV0b3MiLCJiNjR1dG9iNjQiLCJoZXh0b2I2NHUiLCJiNjR1dG9oZXgiLCJ1dGY4dG9iNjR1IiwiYjY0dXRvdXRmOCIsIkJ1ZmZlciIsImZyb20iLCJ1cmljbXB0b2hleCIsImVuY29kZVVSSUNvbXBvbmVudEFsbCIsImhleHRvdXJpY21wIiwidXRmOHRvYjY0IiwiYjY0dG91dGY4IiwiaGV4dG9iNjQiLCJoZXh0b2I2NG5sIiwiYjY0bmx0b2hleCIsInBlbXRvaGV4IiwiaGV4dG9BcnJheUJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiRGF0YVZpZXciLCJzZXRVaW50OCIsIkFycmF5QnVmZmVydG9oZXgiLCJieXRlTGVuZ3RoIiwiZ2V0VWludDgiLCJ6dWx1dG9tc2VjIiwienVsdXRvc2VjIiwienVsdXRvZGF0ZSIsImRhdGV0b3p1bHUiLCJnZXRVVENGdWxsWWVhciIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ0hvdXJzIiwiZ2V0VVRDTWludXRlcyIsImdldFVUQ1NlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJpcHY2dG9oZXgiLCJyZXBlYXQiLCJoZXh0b2lwdjYiLCJoZXh0b2lwIiwiaXB0b2hleCIsIm1hcCIsIm5ld2xpbmVfdG9Vbml4IiwibmV3bGluZV90b0RvcyIsImlzSW50ZWdlciIsImlzaGV4IiwiaXNCYXNlNjQiLCJpc0Jhc2U2NFVSTCIsImlzSW50ZWdlckFycmF5IiwiaXNQcmludGFibGUiLCJpc0lBNSIsImlzTWFpbCIsImhleHRvcG9zaGV4IiwiaW50YXJ5c3RydG9oZXgiLCJzdHJkaWZmaWR4Iiwic3RycGFkIiwiTmFOIiwiaW50dG9iaXRzdHIiLCJOdW1iZXIiLCJiaW5zdHJ0b2JpdHN0ciIsIkRJR0VTVElORk9IRUFEIiwic2hhMSIsInNoYTIyNCIsInNoYTI1NiIsInNoYTM4NCIsInNoYTUxMiIsIm1kMiIsIm1kNSIsInJpcGVtZDE2MCIsIkRFRkFVTFRQUk9WSURFUiIsImhtYWNtZDUiLCJobWFjc2hhMSIsImhtYWNzaGEyMjQiLCJobWFjc2hhMjU2IiwiaG1hY3NoYTM4NCIsImhtYWNzaGE1MTIiLCJobWFjcmlwZW1kMTYwIiwiTUQ1d2l0aFJTQSIsIlNIQTF3aXRoUlNBIiwiU0hBMjI0d2l0aFJTQSIsIlNIQTI1NndpdGhSU0EiLCJTSEEzODR3aXRoUlNBIiwiU0hBNTEyd2l0aFJTQSIsIlJJUEVNRDE2MHdpdGhSU0EiLCJNRDV3aXRoRUNEU0EiLCJTSEExd2l0aEVDRFNBIiwiU0hBMjI0d2l0aEVDRFNBIiwiU0hBMjU2d2l0aEVDRFNBIiwiU0hBMzg0d2l0aEVDRFNBIiwiU0hBNTEyd2l0aEVDRFNBIiwiUklQRU1EMTYwd2l0aEVDRFNBIiwiU0hBMXdpdGhEU0EiLCJTSEEyMjR3aXRoRFNBIiwiU0hBMjU2d2l0aERTQSIsIk1ENXdpdGhSU0FhbmRNR0YxIiwiU0hBd2l0aFJTQWFuZE1HRjEiLCJTSEExd2l0aFJTQWFuZE1HRjEiLCJTSEEyMjR3aXRoUlNBYW5kTUdGMSIsIlNIQTI1NndpdGhSU0FhbmRNR0YxIiwiU0hBMzg0d2l0aFJTQWFuZE1HRjEiLCJTSEE1MTJ3aXRoUlNBYW5kTUdGMSIsIlJJUEVNRDE2MHdpdGhSU0FhbmRNR0YxIiwiQ1JZUFRPSlNNRVNTQUdFRElHRVNUTkFNRSIsIk1ENSIsIlNIQTEiLCJTSEEyMjQiLCJSSVBFTUQxNjAiLCJnZXREaWdlc3RJbmZvSGV4IiwiZ2V0UGFkZGVkRGlnZXN0SW5mb0hleCIsImhhc2hTdHJpbmciLCJhbGciLCJkaWdlc3RTdHJpbmciLCJkaWdlc3RIZXgiLCJzaGEyNTZIZXgiLCJzaGE1MTJIZXgiLCJpc0tleSIsIkRTQSIsIkVDRFNBIiwicHJvdiIsIlNFQ1VSRVJBTkRPTUdFTiIsImdldFJhbmRvbUhleE9mTmJ5dGVzIiwiZ2V0UmFuZG9tQmlnSW50ZWdlck9mTmJ5dGVzIiwiZ2V0UmFuZG9tSGV4T2ZOYml0cyIsImdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzIiwiZ2V0UmFuZG9tQmlnSW50ZWdlclplcm9Ub01heCIsImdldFJhbmRvbUJpZ0ludGVnZXJNaW5Ub01heCIsInNldEFsZ0FuZFByb3ZpZGVyIiwibWQiLCJ1cGRhdGVTdHJpbmciLCJ1cGRhdGVIZXgiLCJkaWdlc3QiLCJzamNsIiwiaGFzaCIsImNvZGVjIiwidG9CaXRzIiwiZnJvbUJpdHMiLCJhbGdOYW1lIiwicHJvdk5hbWUiLCJIQVNITEVOR1RIIiwiTWFjIiwiYWxnUHJvdiIsIm1hYyIsInBhc3MiLCJkb0ZpbmFsIiwiZG9GaW5hbFN0cmluZyIsImRvRmluYWxIZXgiLCJzZXRQYXNzd29yZCIsInV0ZjgiLCJyc3RyIiwiYjY0IiwiYjY0dSIsIlNpZ25hdHVyZSIsIl9zZXRBbGdOYW1lcyIsIm1kQWxnTmFtZSIsInB1YmtleUFsZ05hbWUiLCJfemVyb1BhZGRpbmdPZlNpZ25hdHVyZSIsIktFWVVUSUwiLCJnZXRLZXkiLCJwcnZLZXkiLCJzdGF0ZSIsInB1YktleSIsInNpZ24iLCJzSGFzaEhleCIsImVjcHJ2aGV4IiwiZWNjdXJ2ZW5hbWUiLCJwcnYiLCJoU2lnbiIsInNpZ25XaXRoTWVzc2FnZUhhc2hQU1MiLCJwc3NTYWx0TGVuIiwic2lnbldpdGhNZXNzYWdlSGFzaCIsInNpZ25TdHJpbmciLCJzaWduSGV4IiwidmVyaWZ5IiwiZWNwdWJoZXgiLCJwdWIiLCJ2ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1MiLCJ2ZXJpZnlXaXRoTWVzc2FnZUhhc2giLCJhbGdQcm92TmFtZSIsImluaXRQYXJhbXMiLCJwc3NzYWx0bGVuIiwicHJ2a2V5cGVtIiwicHJ2a2V5cGFzIiwiQ2lwaGVyIiwiZ2V0QWxnQnlLZXlBbmROYW1lIiwiZGVjcnlwdCIsImRlY3J5cHRPQUVQIiwib2lkaGV4Mm5hbWUiLCJFQ1BhcmFtZXRlckRCIiwiZ2V0TmFtZSIsImdldEJpZ1JhbmRvbSIsInNldE5hbWVkQ3VydmUiLCJlY3BhcmFtcyIsImdldEJ5TmFtZSIsInBydktleUhleCIsInB1YktleUhleCIsImN1cnZlTmFtZSIsInNldFByaXZhdGVLZXlIZXgiLCJzZXRQdWJsaWNLZXlIZXgiLCJnZXRQdWJsaWNLZXlYWUhleCIsImtleWNoYXJsZW4iLCJnZXRTaG9ydE5JU1RQQ3VydmVOYW1lIiwiZ2VuZXJhdGVLZXlQYWlySGV4IiwiZ2VuZXJhdGVQdWJsaWNLZXlIZXgiLCJiaVJTU2lnVG9BU04xU2lnIiwiZnJvbUJ5dGVBcnJheVVuc2lnbmVkIiwic2VyaWFsaXplU2lnIiwidmVyaWZ5SGV4IiwicGFyc2VTaWdIZXgiLCJ2ZXJpZnlSYXciLCJCaXRjb2luIiwiaXNBcnJheSIsInBhcnNlU2lnIiwidG9CeXRlQXJyYXlTaWduZWQiLCJwYXJzZVNpZ0NvbXBhY3QiLCJyZWFkUEtDUzVQcnZLZXlIZXgiLCJyZWFkUEtDUzhQcnZLZXlIZXgiLCJyZWFkUEtDUzhQdWJLZXlIZXgiLCJyZWFkQ2VydFB1YktleUhleCIsInBhcnNlU2lnSGV4SW5IZXhSUyIsImFzbjFTaWdUb0NvbmNhdFNpZyIsImNvbmNhdFNpZ1RvQVNOMVNpZyIsImhleFJTU2lnVG9BU04xU2lnIiwicmVnaXN0IiwiQUVTIiwiVHJpcGxlREVTIiwiREVTIiwia2V5IiwiaXYiLCJjaXBoZXJ0ZXh0IiwicHJvYyIsImVwcm9jIiwia2V5bGVuIiwiaXZsZW4iLCJjaXBoZXIiLCJpdnNhbHQiLCJkYXRhIiwia2V5aGV4IiwiaXZoZXgiLCJ2ZXJzaW9uIiwicGFyc2VQS0NTNVBFTSIsImdldEtleUFuZFVudXNlZEl2QnlQYXNzY29kZUFuZEl2c2FsdCIsImRlY3J5cHRLZXlCNjQiLCJnZXREZWNyeXB0ZWRLZXlIZXgiLCJnZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgiLCJ0b1VwcGVyQ2FzZSIsInBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTOCIsImVuY3J5cHRpb25TY2hlbWVBbGciLCJlbmNyeXB0aW9uU2NoZW1lSVYiLCJwYmtkZjJTYWx0IiwicGJrZGYySXRlciIsImdldFBCS0RGMktleUhleEZyb21QYXJhbSIsIlBCS0RGMiIsImtleVNpemUiLCJpdGVyYXRpb25zIiwiX2dldFBsYWluUEtDUzhIZXhGcm9tRW5jcnlwdGVkUEtDUzhQRU0iLCJnZXRLZXlGcm9tRW5jcnlwdGVkUEtDUzhQRU0iLCJnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXgiLCJwYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4IiwiYWxncGFyYW0iLCJhbGdvaWQiLCJrZXlpZHgiLCJnZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhQRU0iLCJfZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4IiwicGFyc2VQdWJsaWNSYXdSU0FLZXlIZXgiLCJwYXJzZVB1YmxpY1BLQ1M4SGV4IiwieHkiLCJrdHkiLCJkcCIsImRxIiwiY28iLCJxaSIsInNldFByaXZhdGVFeCIsInNldFByaXZhdGUiLCJjcnYiLCJYNTA5IiwiZ2V0UHVibGljS2V5RnJvbUNlcnRIZXgiLCJnZXRQdWJsaWNLZXlGcm9tQ2VydFBFTSIsImdlbmVyYXRlS2V5cGFpciIsImdlbmVyYXRlIiwicHJ2S2V5T2JqIiwicHViS2V5T2JqIiwiZ2V0UEVNIiwiU3ViamVjdFB1YmxpY0tleUluZm8iLCJzZXEiLCJnZXRLZXlGcm9tQ1NSUEVNIiwiZ2V0S2V5RnJvbUNTUkhleCIsInBhcnNlQ1NSSGV4IiwicDhwdWJrZXloZXgiLCJnZXRLZXlJRCIsImdldEpXSyIsImdldFB1YmxpY0tleSIsImtpZCIsImp3cyIsIkpXUyIsImdldEpXS3RodW1icHJpbnQiLCJ4NWMiLCJ4NXQiLCJnZXRKV0tGcm9tS2V5IiwiZ2V0UG9zQXJyYXlPZkNoaWxkcmVuRnJvbUhleCIsImdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleCIsInJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZyIsInJlYWRQS0NTNVB1YktleUhleCIsInJlYWRDZXJ0SGV4IiwiZ2V0UHVibGljS2V5SGV4IiwiX1JFX0hFWERFQ09OTFkiLCJfcnNhc2lnbl9nZXRIZXhQYWRkZWREaWdlc3RJbmZvRm9yU3RyaW5nIiwiZG9Qcml2YXRlIiwicHNzX21nZjFfc3RyIiwic2lnblBTUyIsIl9yc2FzaWduX2dldERlY3J5cHRTaWduYXR1cmVCSSIsIl9yc2FzaWduX2dldEhleERpZ2VzdEluZm9Gcm9tU2lnIiwiX3JzYXNpZ25fZ2V0QWxnTmFtZUFuZEhhc2hGcm9tSGV4RGlzZ2VzdEluZm8iLCJ2ZXJpZnlQU1MiLCJTQUxUX0xFTl9ITEVOIiwiU0FMVF9MRU5fTUFYIiwiU0FMVF9MRU5fUkVDT1ZFUiIsIkFsZ29yaXRobUlkZW50aWZpZXIiLCJQU1NOQU1FMkFTTjFUTFYiLCJIRVgyU1RBRyIsImZvZmZzZXQiLCJhRXh0SW5mbyIsImdldFZlcnNpb24iLCJnZXRTZXJpYWxOdW1iZXJIZXgiLCJnZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZCIsImdldEFsZ29yaXRobUlkZW50aWZpZXJOYW1lIiwiZ2V0SXNzdWVyIiwiZ2V0WDUwME5hbWUiLCJnZXRJc3N1ZXJIZXgiLCJnZXRJc3N1ZXJTdHJpbmciLCJnZXRTdWJqZWN0IiwiZ2V0U3ViamVjdEhleCIsImdldFN1YmplY3RTdHJpbmciLCJnZXROb3RCZWZvcmUiLCJnZXROb3RBZnRlciIsImdldFNQS0kiLCJnZXRTUEtJVmFsdWUiLCJnZXRQdWJsaWNLZXlJZHgiLCJnZXRQdWJsaWNLZXlDb250ZW50SWR4IiwiZ2V0U2lnbmF0dXJlQWxnb3JpdGhtTmFtZSIsImdldFNpZ25hdHVyZVZhbHVlSGV4IiwidmVyaWZ5U2lnbmF0dXJlIiwicGFyc2VFeHQiLCJjcml0aWNhbCIsInZpZHgiLCJnZXRFeHRJbmZvIiwiZ2V0RXh0QmFzaWNDb25zdHJhaW50cyIsImV4dG5hbWUiLCJjQSIsInBhdGhMZW4iLCJnZXRFeHRLZXlVc2FnZSIsIm5hbWVzIiwiZ2V0RXh0S2V5VXNhZ2VTdHJpbmciLCJnZXRFeHRLZXlVc2FnZUJpbiIsIktFWVVTQUdFX05BTUUiLCJnZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllciIsImdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXIiLCJnZXRHZW5lcmFsTmFtZXMiLCJpc3N1ZXIiLCJzbiIsImdldEV4dEV4dEtleVVzYWdlIiwiZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lIiwiZ2V0RXh0U3ViamVjdEFsdE5hbWUiLCJnZXRFeHRJc3N1ZXJBbHROYW1lIiwiZ2V0R2VuZXJhbE5hbWUiLCJyZmM4MjIiLCJkbnMiLCJ1cmkiLCJpcCIsImRuIiwib3RoZXIiLCJnZXRPdGhlck5hbWUiLCJnZXRFeHRTdWJqZWN0QWx0TmFtZTIiLCJoZXgyZG4iLCJnZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHMiLCJnZXREaXN0cmlidXRpb25Qb2ludCIsImRwbmFtZSIsImdldERpc3RyaWJ1dGlvblBvaW50TmFtZSIsImZ1bGwiLCJnZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHNVUkkiLCJnZXRFeHRBSUFJbmZvIiwib2NzcCIsImNhaXNzdWVyIiwiZ2V0RXh0QXV0aG9yaXR5SW5mb0FjY2VzcyIsImdldEV4dENlcnRpZmljYXRlUG9saWNpZXMiLCJnZXRQb2xpY3lJbmZvcm1hdGlvbiIsInBvbGljeW9pZCIsImdldFBvbGljeVF1YWxpZmllckluZm8iLCJjcHMiLCJ1bm90aWNlIiwiZ2V0VXNlck5vdGljZSIsImV4cHRleHQiLCJnZXREaXNwbGF5VGV4dCIsImdldEV4dENSTE51bWJlciIsIm51bSIsImdldEV4dENSTFJlYXNvbiIsImNvZGUiLCJnZXRFeHRPY3NwTm9uY2UiLCJnZXRFeHRPY3NwTm9DaGVjayIsImdldEV4dEFkb2JlVGltZVN0YW1wIiwicmVxYXV0aCIsImdldFg1MDBOYW1lUnVsZSIsImRzIiwidmFsdWUiLCJnZXRYNTAwTmFtZUFycmF5IiwiZG5hcnJheXRvc3RyIiwiZ2V0UkROIiwiZ2V0QXR0clR5cGVBbmRWYWx1ZSIsIm9pZDJhdHlwZSIsInJlYWRDZXJ0UEVNIiwiZ2V0UGFyYW0iLCJzZXJpYWwiLCJzaWdhbGciLCJub3RiZWZvcmUiLCJub3RhZnRlciIsInN1YmplY3QiLCJzYmpwdWJrZXkiLCJleHQiLCJnZXRFeHRQYXJhbUFycmF5Iiwic2lnaGV4IiwiZ2V0RXh0UGFyYW0iLCJleHRuIiwiZmluZEV4dCIsInVwZGF0ZUV4dENEUEZ1bGxVUkkiLCJ1cGRhdGVFeHRBSUFPQ1NQIiwidXBkYXRlRXh0QUlBQ0FJc3N1ZXIiLCJnZXRJbmZvIiwiZG5hbWUiLCJoZXgycmRuIiwiaGV4MmF0dHJUeXBlVmFsdWUiLCJnZXRQdWJsaWNLZXlJbmZvUHJvcE9mQ2VydFBFTSIsImlzU2FmZUpTT05TdHJpbmciLCJwYXJzZUpXUyIsInBhcnNlZEpXUyIsInNpZ3ZhbEgiLCJoZWFkQjY0VSIsInBheWxvYWRCNjRVIiwic2lndmFsQjY0VSIsInNpIiwic2lndmFsQkkiLCJoZWFkUyIsInBheWxvYWRTIiwicmVhZFNhZmVKU09OU3RyaW5nIiwiandzYWxnMnNpZ2FsZyIsImhlYWRlck9iaiIsInBheWxvYWRPYmoiLCJoZWFkZXJQUCIsInBheWxvYWRQUCIsInNpZ0hleCIsInZlcmlmeUpXVCIsImluQXJyYXkiLCJpbmNsdWRlZEFycmF5IiwiaXNzIiwic3ViIiwiYXVkIiwiSW50RGF0ZSIsImdldE5vdyIsInZlcmlmeUF0IiwiZ3JhY2VQZXJpb2QiLCJuYmYiLCJpYXQiLCJqdGkiLCJIUzI1NiIsIkhTMzg0IiwiSFM1MTIiLCJSUzI1NiIsIlJTMzg0IiwiUlM1MTIiLCJFUzI1NiIsIkVTMzg0IiwiRVM1MTIiLCJQUzI1NiIsIlBTMzg0IiwiUFM1MTIiLCJub25lIiwiZ2V0RW5jb2RlZFNpZ25hdHVyZVZhbHVlRnJvbUpXUyIsImdldCIsImdldFp1bHUiLCJpbnREYXRlMlVUQ1N0cmluZyIsInRvVVRDU3RyaW5nIiwiaW50RGF0ZTJadWx1IiwiRURTQSIsIl9jcnlwdG8iLCJEZWZhdWx0QWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUiLCJhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSIsImFjY2Vzc1Rva2VuRXhwaXJpbmdUaW1lciIsIlRpbWVyIiwiYWNjZXNzVG9rZW5FeHBpcmVkVGltZXIiLCJfYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUiLCJfYWNjZXNzVG9rZW5FeHBpcmluZyIsIl9hY2Nlc3NUb2tlbkV4cGlyZWQiLCJsb2FkIiwiY29udGFpbmVyIiwiYWNjZXNzX3Rva2VuIiwiZXhwaXJlc19pbiIsImR1cmF0aW9uIiwiZGVidWciLCJleHBpcmluZyIsImNhbmNlbCIsImV4cGlyZWQiLCJ1bmxvYWQiLCJhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nIiwiY2IiLCJhZGRIYW5kbGVyIiwicmVtb3ZlQWNjZXNzVG9rZW5FeHBpcmluZyIsInJlbW92ZUhhbmRsZXIiLCJhZGRBY2Nlc3NUb2tlbkV4cGlyZWQiLCJyZW1vdmVBY2Nlc3NUb2tlbkV4cGlyZWQiLCJEZWZhdWx0SW50ZXJ2YWwiLCJjYWxsYmFjayIsImNsaWVudF9pZCIsInVybCIsImludGVydmFsIiwic3RvcE9uRXJyb3IiLCJfY2FsbGJhY2siLCJfY2xpZW50X2lkIiwiX3VybCIsIl9pbnRlcnZhbCIsIl9zdG9wT25FcnJvciIsImlkeCIsIl9mcmFtZV9vcmlnaW4iLCJfZnJhbWUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJwb3NpdGlvbiIsImRpc3BsYXkiLCJ3aWR0aCIsImhlaWdodCIsInNyYyIsIlByb21pc2UiLCJyZXNvbHZlIiwib25sb2FkIiwiYm9keSIsImFwcGVuZENoaWxkIiwiX2JvdW5kTWVzc2FnZUV2ZW50IiwiX21lc3NhZ2UiLCJiaW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9yaWdpbiIsInNvdXJjZSIsImNvbnRlbnRXaW5kb3ciLCJlcnJvciIsInN0b3AiLCJzdGFydCIsInNlc3Npb25fc3RhdGUiLCJfc2Vzc2lvbl9zdGF0ZSIsInNlbmQiLCJwb3N0TWVzc2FnZSIsIl90aW1lciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIkNsb2NrU2VydmljZSIsImdldEVwb2NoVGltZSIsIm5vdyIsInByZXBhcmUiLCJwb3B1cFdpbmRvd0ZlYXR1cmVzIiwicG9wdXAiLCJDb3Jkb3ZhUG9wdXBXaW5kb3ciLCJEZWZhdWx0UG9wdXBGZWF0dXJlcyIsIkRlZmF1bHRQb3B1cFRhcmdldCIsIl9wcm9taXNlIiwicmVqZWN0IiwiX3Jlc29sdmUiLCJfcmVqZWN0IiwiZmVhdHVyZXMiLCJ0YXJnZXQiLCJwb3B1cFdpbmRvd1RhcmdldCIsInJlZGlyZWN0X3VyaSIsInN0YXJ0VXJsIiwiX2lzSW5BcHBCcm93c2VySW5zdGFsbGVkIiwiY29yZG92YU1ldGFkYXRhIiwic29tZSIsIm5hdmlnYXRlIiwiX2Vycm9yIiwiY29yZG92YSIsInJlcXVpcmUiLCJtZXRhZGF0YSIsIl9wb3B1cCIsIkluQXBwQnJvd3NlciIsIm9wZW4iLCJfZXhpdENhbGxiYWNrRXZlbnQiLCJfZXhpdENhbGxiYWNrIiwiX2xvYWRTdGFydENhbGxiYWNrRXZlbnQiLCJfbG9hZFN0YXJ0Q2FsbGJhY2siLCJwcm9taXNlIiwiZXZlbnQiLCJfc3VjY2VzcyIsIm1lc3NhZ2UiLCJfY2xlYW51cCIsImNsb3NlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIkVycm9yUmVzcG9uc2UiLCJlcnJvcl9kZXNjcmlwdGlvbiIsImVycm9yX3VyaSIsIkV2ZW50IiwiX25hbWUiLCJfY2FsbGJhY2tzIiwiZmluZEluZGV4IiwiaXRlbSIsInJhaXNlIiwidGltZXIiLCJoYW5kbGUiLCJ0ZXN0aW5nIiwicmVxdWVzdCIsIl90ZXN0aW5nIiwic2V0WE1MSHR0cFJlcXVlc3QiLCJuZXdSZXF1ZXN0IiwibG9jYXRpb24iLCJsb2NhbFN0b3JhZ2UiLCJzZXNzaW9uU3RvcmFnZSIsIlhNTEh0dHBSZXF1ZXN0IiwiSUZyYW1lTmF2aWdhdG9yIiwiZnJhbWUiLCJJRnJhbWVXaW5kb3ciLCJub3RpZnlQYXJlbnQiLCJEZWZhdWx0VGltZW91dCIsInRpbWVvdXQiLCJzaWxlbnRSZXF1ZXN0VGltZW91dCIsInNldFRpbWVvdXQiLCJfdGltZW91dCIsImNsZWFyVGltZW91dCIsInJlbW92ZUNoaWxkIiwiX29yaWdpbiIsInN0YXJ0c1dpdGgiLCJocmVmIiwicGFyZW50IiwicHJvdG9jb2wiLCJob3N0IiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJyZW1vdmVJdGVtIiwiaW5kZXgiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiSm9zZVV0aWwiLCJLZXlVdGlsIiwiQWxsb3dlZFNpZ25pbmdBbGdzIiwiZ2V0Sm9zZVV0aWwiLCJwYXJzZUp3dCIsImp3dCIsInRva2VuIiwiaGVhZGVyIiwicGF5bG9hZCIsInZhbGlkYXRlSnd0IiwiYXVkaWVuY2UiLCJjbG9ja1NrZXciLCJ0aW1lSW5zZW5zaXRpdmUiLCJfdmFsaWRhdGVKd3QiLCJ2YWxpZGF0ZUp3dEF0dHJpYnV0ZXMiLCJ2YWxpZEF1ZGllbmNlIiwiYXpwIiwibG93ZXJOb3ciLCJ1cHBlck5vdyIsInRoZW4iLCJoZXhUb0Jhc2U2NFVybCIsIkpzb25TZXJ2aWNlIiwiYWRkaXRpb25hbENvbnRlbnRUeXBlcyIsIlhNTEh0dHBSZXF1ZXN0Q3RvciIsImp3dEhhbmRsZXIiLCJfY29udGVudFR5cGVzIiwiX1hNTEh0dHBSZXF1ZXN0IiwiX2p3dEhhbmRsZXIiLCJnZXRKc29uIiwicmVxIiwiYWxsb3dlZENvbnRlbnRUeXBlcyIsInN0YXR1cyIsImNvbnRlbnRUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJmb3VuZCIsImZpbmQiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsInNldFJlcXVlc3RIZWFkZXIiLCJwb3N0Rm9ybSIsImJhc2ljQXV0aCIsImJ0b2EiLCJub3BMb2dnZXIiLCJpbmZvIiwid2FybiIsIk5PTkUiLCJFUlJPUiIsIldBUk4iLCJJTkZPIiwiREVCVUciLCJsb2dnZXIiLCJsZXZlbCIsImFyZ3MiLCJPaWRjTWV0YWRhdGFVcmxQYXRoIiwic2V0dGluZ3MiLCJKc29uU2VydmljZUN0b3IiLCJfc2V0dGluZ3MiLCJfanNvblNlcnZpY2UiLCJyZXNldFNpZ25pbmdLZXlzIiwic2lnbmluZ0tleXMiLCJnZXRNZXRhZGF0YSIsIm1ldGFkYXRhVXJsIiwic2VlZCIsIm1ldGFkYXRhU2VlZCIsImFzc2lnbiIsIl9nZXRNZXRhZGF0YVByb3BlcnR5IiwiZ2V0QXV0aG9yaXphdGlvbkVuZHBvaW50IiwiZ2V0VXNlckluZm9FbmRwb2ludCIsImdldFRva2VuRW5kcG9pbnQiLCJvcHRpb25hbCIsImdldENoZWNrU2Vzc2lvbklmcmFtZSIsImdldEVuZFNlc3Npb25FbmRwb2ludCIsImdldFJldm9jYXRpb25FbmRwb2ludCIsImdldEtleXNFbmRwb2ludCIsImdldFNpZ25pbmdLZXlzIiwiandrc191cmkiLCJrZXlTZXQiLCJfbWV0YWRhdGFVcmwiLCJhdXRob3JpdHkiLCJjcmVhdGVTaWduaW5SZXF1ZXN0IiwicmVzcG9uc2VfdHlwZSIsInNjb3BlIiwicHJvbXB0IiwibWF4X2FnZSIsInVpX2xvY2FsZXMiLCJpZF90b2tlbl9oaW50IiwibG9naW5faGludCIsImFjcl92YWx1ZXMiLCJyZXNvdXJjZSIsInJlcXVlc3RfdXJpIiwicmVzcG9uc2VfbW9kZSIsImV4dHJhUXVlcnlQYXJhbXMiLCJleHRyYVRva2VuUGFyYW1zIiwicmVxdWVzdF90eXBlIiwic2tpcFVzZXJJbmZvIiwic3RhdGVTdG9yZSIsIlNpZ25pblJlcXVlc3QiLCJpc0NvZGUiLCJfbWV0YWRhdGFTZXJ2aWNlIiwic2lnbmluUmVxdWVzdCIsImNsaWVudF9zZWNyZXQiLCJzaWduaW5TdGF0ZSIsIl9zdGF0ZVN0b3JlIiwic2V0IiwiaWQiLCJ0b1N0b3JhZ2VTdHJpbmciLCJyZWFkU2lnbmluUmVzcG9uc2VTdGF0ZSIsInJlbW92ZVN0YXRlIiwidXNlUXVlcnkiLCJkZWxpbWl0ZXIiLCJyZXNwb25zZSIsIlNpZ25pblJlc3BvbnNlIiwic3RhdGVBcGkiLCJyZW1vdmUiLCJzdG9yZWRTdGF0ZVN0cmluZyIsIlNpZ25pblN0YXRlIiwiZnJvbVN0b3JhZ2VTdHJpbmciLCJwcm9jZXNzU2lnbmluUmVzcG9uc2UiLCJfdmFsaWRhdG9yIiwidmFsaWRhdGVTaWduaW5SZXNwb25zZSIsImNyZWF0ZVNpZ25vdXRSZXF1ZXN0IiwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpIiwiU2lnbm91dFJlcXVlc3QiLCJzaWdub3V0U3RhdGUiLCJyZWFkU2lnbm91dFJlc3BvbnNlU3RhdGUiLCJTaWdub3V0UmVzcG9uc2UiLCJzdGF0ZUtleSIsIlN0YXRlIiwicHJvY2Vzc1NpZ25vdXRSZXNwb25zZSIsInZhbGlkYXRlU2lnbm91dFJlc3BvbnNlIiwiY2xlYXJTdGFsZVN0YXRlIiwic3RhbGVTdGF0ZUFnZSIsInZhbGlkYXRvciIsIm1ldGFkYXRhU2VydmljZSIsIkRlZmF1bHRSZXNwb25zZVR5cGUiLCJEZWZhdWx0U2NvcGUiLCJEZWZhdWx0Q2xpZW50QXV0aGVudGljYXRpb24iLCJEZWZhdWx0U3RhbGVTdGF0ZUFnZSIsIkRlZmF1bHRDbG9ja1NrZXdJblNlY29uZHMiLCJjbGllbnRfYXV0aGVudGljYXRpb24iLCJmaWx0ZXJQcm90b2NvbENsYWltcyIsImxvYWRVc2VySW5mbyIsImNsb2NrU2VydmljZSIsInVzZXJJbmZvSnd0SXNzdWVyIiwibWVyZ2VDbGFpbXMiLCJSZXNwb25zZVZhbGlkYXRvckN0b3IiLCJSZXNwb25zZVZhbGlkYXRvciIsIk1ldGFkYXRhU2VydmljZUN0b3IiLCJfYXV0aG9yaXR5IiwiX21ldGFkYXRhIiwiX21ldGFkYXRhU2VlZCIsIl9zaWduaW5nS2V5cyIsIl9jbGllbnRfc2VjcmV0IiwiX3Jlc3BvbnNlX3R5cGUiLCJfc2NvcGUiLCJfcmVkaXJlY3RfdXJpIiwiX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9jbGllbnRfYXV0aGVudGljYXRpb24iLCJfcHJvbXB0IiwiX2Rpc3BsYXkiLCJfbWF4X2FnZSIsIl91aV9sb2NhbGVzIiwiX2Fjcl92YWx1ZXMiLCJfcmVzb3VyY2UiLCJfcmVzcG9uc2VfbW9kZSIsIl9maWx0ZXJQcm90b2NvbENsYWltcyIsIl9sb2FkVXNlckluZm8iLCJfc3RhbGVTdGF0ZUFnZSIsIl9jbG9ja1NrZXciLCJfY2xvY2tTZXJ2aWNlIiwiX3VzZXJJbmZvSnd0SXNzdWVyIiwiX21lcmdlQ2xhaW1zIiwiX2V4dHJhUXVlcnlQYXJhbXMiLCJfZXh0cmFUb2tlblBhcmFtcyIsIlBvcHVwTmF2aWdhdG9yIiwiUG9wdXBXaW5kb3ciLCJrZWVwT3BlbiIsIm5vdGlmeU9wZW5lciIsIkNoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCIsIl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIiLCJfY2hlY2tGb3JQb3B1cENsb3NlZCIsIl9pZCIsImZvY3VzIiwiY2xvc2VkIiwib3BlbmVyIiwiVXJsVXRpbGl0eSIsInBhcnNlVXJsRnJhZ21lbnQiLCJSZWRpcmVjdE5hdmlnYXRvciIsInVzZVJlcGxhY2VUb05hdmlnYXRlIiwiUHJvdG9jb2xDbGFpbXMiLCJVc2VySW5mb1NlcnZpY2VDdG9yIiwiVXNlckluZm9TZXJ2aWNlIiwiam9zZVV0aWwiLCJUb2tlbkNsaWVudEN0b3IiLCJUb2tlbkNsaWVudCIsIl91c2VySW5mb1NlcnZpY2UiLCJfam9zZVV0aWwiLCJfdG9rZW5DbGllbnQiLCJfcHJvY2Vzc1NpZ25pblBhcmFtcyIsIl92YWxpZGF0ZVRva2VucyIsIl9wcm9jZXNzQ2xhaW1zIiwibm9uY2UiLCJpZF90b2tlbiIsImNvZGVfdmVyaWZpZXIiLCJpc09wZW5JZENvbm5lY3QiLCJwcm9maWxlIiwiZ2V0Q2xhaW1zIiwiY2xhaW1zIiwiY2xhaW1zMSIsImNsYWltczIiLCJyZXN1bHQiLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiX3Byb2Nlc3NDb2RlIiwiX3ZhbGlkYXRlSWRUb2tlbkFuZEFjY2Vzc1Rva2VuIiwiX3ZhbGlkYXRlSWRUb2tlbiIsImV4Y2hhbmdlQ29kZSIsInRva2VuUmVzcG9uc2UiLCJfdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlcyIsImNsb2NrU2tld0luU2Vjb25kcyIsIl92YWxpZGF0ZUFjY2Vzc1Rva2VuIiwiX2dldFNpZ25pbmdLZXlGb3JKd3QiLCJfZmlsdGVyQnlBbGciLCJmaWx0ZXIiLCJfZ2V0U2lnbmluZ0tleUZvckp3dFdpdGhTaW5nbGVSZXRyeSIsImF0X2hhc2giLCJoYXNoQWxnIiwiaGFzaEJpdHMiLCJzaGEiLCJsZWZ0IiwibGVmdF9iNjR1IiwidXNlck1hbmFnZXIiLCJDaGVja1Nlc3Npb25JRnJhbWVDdG9yIiwiX3VzZXJNYW5hZ2VyIiwiX0NoZWNrU2Vzc2lvbklGcmFtZUN0b3IiLCJldmVudHMiLCJhZGRVc2VyTG9hZGVkIiwiX3N0YXJ0IiwiYWRkVXNlclVubG9hZGVkIiwiX3N0b3AiLCJnZXRVc2VyIiwidXNlciIsIm1vbml0b3JBbm9ueW1vdXNTZXNzaW9uIiwicXVlcnlTZXNzaW9uU3RhdHVzIiwidG1wVXNlciIsInNlc3Npb24iLCJzaWQiLCJjYXRjaCIsImVyciIsIl9zdWIiLCJfc2lkIiwiX2NoZWNrU2Vzc2lvbklGcmFtZSIsIl9jaGVja1Nlc3Npb25JbnRlcnZhbCIsIl9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvciIsInRpbWVySGFuZGxlIiwicmFpc2VFdmVudCIsIl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCIsIl9yYWlzZVVzZXJTaWduZWRPdXQiLCJfcmFpc2VVc2VyU2lnbmVkSW4iLCJjaGVja1Nlc3Npb25JbnRlcnZhbCIsInN0b3BDaGVja1Nlc3Npb25PbkVycm9yIiwib2lkYyIsImlzT2lkYyIsImFkZFF1ZXJ5UGFyYW0iLCJjb2RlX2NoYWxsZW5nZSIsImlzT0F1dGgiLCJPaWRjU2NvcGUiLCJ0b2tlbl90eXBlIiwiZXhwaXJlc19hdCIsInNjb3BlcyIsIl9ub25jZSIsIl9jb2RlX3ZlcmlmaWVyIiwiX2NvZGVfY2hhbGxlbmdlIiwiX3NraXBVc2VySW5mbyIsImNyZWF0ZWQiLCJzdG9yYWdlU3RyaW5nIiwiU2lsZW50UmVuZXdTZXJ2aWNlIiwiX3Rva2VuRXhwaXJpbmciLCJzaWduaW5TaWxlbnQiLCJfcmFpc2VTaWxlbnRSZW5ld0Vycm9yIiwiX2NyZWF0ZWQiLCJfcmVxdWVzdF90eXBlIiwic3RvcmFnZSIsImFnZSIsImN1dG9mZiIsImdldEFsbEtleXMiLCJwcm9taXNlcyIsImFsbCIsIlRpbWVyRHVyYXRpb24iLCJub3dGdW5jIiwiX25vd0Z1bmMiLCJleHBpcmF0aW9uIiwiX3RpbWVySGFuZGxlIiwiX2V4cGlyYXRpb24iLCJ0aW1lckR1cmF0aW9uIiwiZGlmZiIsImdyYW50X3R5cGUiLCJleGNoYW5nZVJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJBY2Nlc3NUb2tlblR5cGVIaW50IiwiUmVmcmVzaFRva2VuVHlwZUhpbnQiLCJfWE1MSHR0cFJlcXVlc3RDdG9yIiwicmV2b2tlIiwicmVxdWlyZWQiLCJfcmV2b2tlIiwieGhyIiwiZ2xvYmFsIiwibGFzdEluZGV4T2YiLCJyZWdleCIsImNvdW50ZXIiLCJleGVjIiwicHJvcCIsIl9nZXRDbGFpbXNGcm9tSnd0IiwiaXNzdWVyUHJvbWlzZSIsIlNpbGVudFJlbmV3U2VydmljZUN0b3IiLCJTZXNzaW9uTW9uaXRvckN0b3IiLCJUb2tlblJldm9jYXRpb25DbGllbnRDdG9yIiwiVXNlck1hbmFnZXJTZXR0aW5ncyIsIl9ldmVudHMiLCJVc2VyTWFuYWdlckV2ZW50cyIsIl9zaWxlbnRSZW5ld1NlcnZpY2UiLCJhdXRvbWF0aWNTaWxlbnRSZW5ldyIsInN0YXJ0U2lsZW50UmVuZXciLCJtb25pdG9yU2Vzc2lvbiIsIl9zZXNzaW9uTW9uaXRvciIsIl90b2tlblJldm9jYXRpb25DbGllbnQiLCJfbG9hZFVzZXIiLCJyZW1vdmVVc2VyIiwic3RvcmVVc2VyIiwic2lnbmluUmVkaXJlY3QiLCJuYXZQYXJhbXMiLCJfc2lnbmluU3RhcnQiLCJfcmVkaXJlY3ROYXZpZ2F0b3IiLCJzaWduaW5SZWRpcmVjdENhbGxiYWNrIiwiX3NpZ25pbkVuZCIsInNpZ25pblBvcHVwIiwicG9wdXBfcmVkaXJlY3RfdXJpIiwiX3NpZ25pbiIsIl9wb3B1cE5hdmlnYXRvciIsInNpZ25pblBvcHVwQ2FsbGJhY2siLCJfc2lnbmluQ2FsbGJhY2siLCJfdXNlUmVmcmVzaFRva2VuIiwiaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3IiwidmFsaWRhdGVTdWJPblNpbGVudFJlbmV3IiwiY3VycmVudF9zdWIiLCJfc2lnbmluU2lsZW50SWZyYW1lIiwiaWRUb2tlblZhbGlkYXRpb24iLCJfdmFsaWRhdGVJZFRva2VuRnJvbVRva2VuUmVmcmVzaFRva2VuIiwiYXV0aF90aW1lIiwic2lsZW50X3JlZGlyZWN0X3VyaSIsIl9pZnJhbWVOYXZpZ2F0b3IiLCJzaWduaW5TaWxlbnRDYWxsYmFjayIsInNpZ25pbkNhbGxiYWNrIiwic2lnbm91dENhbGxiYWNrIiwic2lnbm91dFJlZGlyZWN0Q2FsbGJhY2siLCJzaWdub3V0UG9wdXBDYWxsYmFjayIsInF1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlIiwibmF2UmVzcG9uc2UiLCJzaWduaW5SZXNwb25zZSIsIm5hdmlnYXRvclBhcmFtcyIsInNpZ25vdXRSZWRpcmVjdCIsInBvc3RMb2dvdXRSZWRpcmVjdFVyaSIsIl9zaWdub3V0U3RhcnQiLCJfc2lnbm91dEVuZCIsInNpZ25vdXRQb3B1cCIsInBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9zaWdub3V0IiwicmV2b2tlUHJvbWlzZSIsInJldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0IiwiX3Jldm9rZUludGVybmFsIiwic2lnbm91dFJlcXVlc3QiLCJzaWdub3V0UmVzcG9uc2UiLCJyZXZva2VBY2Nlc3NUb2tlbiIsInN1Y2Nlc3MiLCJfcmV2b2tlQWNjZXNzVG9rZW5JbnRlcm5hbCIsIl9yZXZva2VSZWZyZXNoVG9rZW5JbnRlcm5hbCIsImF0U3VjY2VzcyIsInJ0U3VjY2VzcyIsInN0b3BTaWxlbnRSZW5ldyIsIl91c2VyU3RvcmUiLCJfdXNlclN0b3JlS2V5IiwicmVkaXJlY3ROYXZpZ2F0b3IiLCJwb3B1cE5hdmlnYXRvciIsImlmcmFtZU5hdmlnYXRvciIsInVzZXJTdG9yZSIsIl91c2VyTG9hZGVkIiwiX3VzZXJVbmxvYWRlZCIsIl9zaWxlbnRSZW5ld0Vycm9yIiwiX3VzZXJTaWduZWRJbiIsIl91c2VyU2lnbmVkT3V0IiwiX3VzZXJTZXNzaW9uQ2hhbmdlZCIsInJlbW92ZVVzZXJMb2FkZWQiLCJyZW1vdmVVc2VyVW5sb2FkZWQiLCJhZGRTaWxlbnRSZW5ld0Vycm9yIiwicmVtb3ZlU2lsZW50UmVuZXdFcnJvciIsImFkZFVzZXJTaWduZWRJbiIsInJlbW92ZVVzZXJTaWduZWRJbiIsImFkZFVzZXJTaWduZWRPdXQiLCJyZW1vdmVVc2VyU2lnbmVkT3V0IiwiYWRkVXNlclNlc3Npb25DaGFuZ2VkIiwicmVtb3ZlVXNlclNlc3Npb25DaGFuZ2VkIiwiRGVmYXVsdENoZWNrU2Vzc2lvbkludGVydmFsIiwic3RvcmUiLCJfcG9wdXBfcmVkaXJlY3RfdXJpIiwiX3BvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSIsIl9wb3B1cFdpbmRvd0ZlYXR1cmVzIiwiX3BvcHVwV2luZG93VGFyZ2V0IiwiX3NpbGVudF9yZWRpcmVjdF91cmkiLCJfc2lsZW50UmVxdWVzdFRpbWVvdXQiLCJfYXV0b21hdGljU2lsZW50UmVuZXciLCJfdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3IiwiX2luY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyIsIl9tb25pdG9yU2Vzc2lvbiIsIl9tb25pdG9yQW5vbnltb3VzU2Vzc2lvbiIsIl9xdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZSIsIl9yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dCIsInByZWZpeCIsIl9zdG9yZSIsIl9wcmVmaXgiLCJfY3J5cHRvVXVpZHY0IiwiX3V1aWR2NCIsImhhc0NyeXB0byIsImhhc1JhbmRvbVZhbHVlcyIsInV1aWQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO1FDVkE7UUFDQTs7UUFFQTtRQUNBOztRQUVBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBO1FBQ0E7UUFDQTtRQUNBOztRQUVBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7OztRQUdBO1FBQ0E7O1FBRUE7UUFDQTs7UUFFQTtRQUNBO1FBQ0E7UUFDQSwwQ0FBMEMsZ0NBQWdDO1FBQzFF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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsVUFBVTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLHVDQUF1QyxTQUFTO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxpQkFBaUI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELEVBQUU7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUJBQWlCLFNBQVM7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGVBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQSxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsWUFBWTtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEscUJBQXFCLFNBQVM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFCQUFxQixTQUFTO0FBQzlCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx1REFBdUQsT0FBTztBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVELE9BQU87QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7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TyxDQUFDLENBQUMsR0FBRCxJQUFNLENBQUMsR0FBUCxHQUFXLENBQUMsR0FBWixHQUFnQixDQUFDLEdBQWpCLEdBQXFCLENBQUMsSUFBdkIsRUFBNkIzckMsT0FBN0IsQ0FBcUMsUUFBckMsRUFBK0M7QUFBQSxXQUN0RCxDQUFDN1osSUFBSW9DLEtBQUtsRCxNQUFMLEtBQWdCLEVBQWhCLElBQXNCYyxJQUFJLENBQS9CLEVBQWtDaEMsUUFBbEMsQ0FBMkMsRUFBM0MsQ0FEc0Q7QUFBQSxHQUEvQyxDQUFQO0FBR0g7O0FBRWMsU0FBU2tCLE1BQVQsR0FBa0I7QUFDL0IsTUFBSXVtRCxZQUFZNXhDLFVBQVUsV0FBVixJQUF5QkEsV0FBVyxJQUFwRDtBQUNBLE1BQUk2eEMsa0JBQWtCRCxhQUFjLE9BQU81eEMsT0FBT0UsZUFBZCxJQUFrQyxXQUF0RTtBQUNBLE1BQUk0eEMsT0FBT0Qsa0JBQWtCSCxhQUFsQixHQUFrQ0MsT0FBN0M7QUFDQSxTQUFPRyxPQUFPOXJDLE9BQVAsQ0FBZSxJQUFmLEVBQXFCLEVBQXJCLENBQVA7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDdkJELElBQU1wZSxVQUFVLGVBQWhCLEMsUUFBeUNBLE8sR0FBQUEsTyIsImZpbGUiOiJvaWRjLWNsaWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSB7XG5cdFx0dmFyIGEgPSBmYWN0b3J5KCk7XG5cdFx0Zm9yKHZhciBpIGluIGEpICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgPyBleHBvcnRzIDogcm9vdClbaV0gPSBhW2ldO1xuXHR9XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL2luZGV4LmpzXCIpO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9zcmMvTG9nLmpzJztcbmltcG9ydCB7IE9pZGNDbGllbnQgfSBmcm9tICcuL3NyYy9PaWRjQ2xpZW50LmpzJztcbmltcG9ydCB7IE9pZGNDbGllbnRTZXR0aW5ncyB9IGZyb20gJy4vc3JjL09pZGNDbGllbnRTZXR0aW5ncy5qcyc7XG5pbXBvcnQgeyBXZWJTdG9yYWdlU3RhdGVTdG9yZSB9IGZyb20gJy4vc3JjL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzJztcbmltcG9ydCB7IEluTWVtb3J5V2ViU3RvcmFnZSB9IGZyb20gJy4vc3JjL0luTWVtb3J5V2ViU3RvcmFnZS5qcyc7XG5pbXBvcnQgeyBVc2VyTWFuYWdlciB9IGZyb20gJy4vc3JjL1VzZXJNYW5hZ2VyLmpzJztcbmltcG9ydCB7IEFjY2Vzc1Rva2VuRXZlbnRzIH0gZnJvbSAnLi9zcmMvQWNjZXNzVG9rZW5FdmVudHMuanMnO1xuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9zcmMvTWV0YWRhdGFTZXJ2aWNlLmpzJztcbmltcG9ydCB7IENvcmRvdmFQb3B1cE5hdmlnYXRvciB9IGZyb20gJy4vc3JjL0NvcmRvdmFQb3B1cE5hdmlnYXRvci5qcyc7XG5pbXBvcnQgeyBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIH0gZnJvbSAnLi9zcmMvQ29yZG92YUlGcmFtZU5hdmlnYXRvci5qcyc7XG5pbXBvcnQgeyBDaGVja1Nlc3Npb25JRnJhbWUgfSBmcm9tICcuL3NyYy9DaGVja1Nlc3Npb25JRnJhbWUuanMnO1xuaW1wb3J0IHsgVG9rZW5SZXZvY2F0aW9uQ2xpZW50IH0gZnJvbSAnLi9zcmMvVG9rZW5SZXZvY2F0aW9uQ2xpZW50LmpzJztcbmltcG9ydCB7IFNlc3Npb25Nb25pdG9yIH0gZnJvbSAnLi9zcmMvU2Vzc2lvbk1vbml0b3IuanMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9zcmMvR2xvYmFsLmpzJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICcuL3NyYy9Vc2VyLmpzJztcblxuaW1wb3J0IHsgVmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbi5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICBWZXJzaW9uLFxuICAgIExvZyxcbiAgICBPaWRjQ2xpZW50LFxuICAgIE9pZGNDbGllbnRTZXR0aW5ncyxcbiAgICBXZWJTdG9yYWdlU3RhdGVTdG9yZSxcbiAgICBJbk1lbW9yeVdlYlN0b3JhZ2UsXG4gICAgVXNlck1hbmFnZXIsXG4gICAgQWNjZXNzVG9rZW5FdmVudHMsXG4gICAgTWV0YWRhdGFTZXJ2aWNlLFxuICAgIENvcmRvdmFQb3B1cE5hdmlnYXRvcixcbiAgICBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yLFxuICAgIENoZWNrU2Vzc2lvbklGcmFtZSxcbiAgICBUb2tlblJldm9jYXRpb25DbGllbnQsXG4gICAgU2Vzc2lvbk1vbml0b3IsXG4gICAgR2xvYmFsLFxuICAgIFVzZXJcbn07XG4iLCIvKlxuICoganNyc2FzaWduKGFsbCkgMTAuNS44ICgyMDIyLTAyLTI1KSAoYykgMjAxMC0yMDIxIEtlbmppIFVydXNoaW1hIHwga2p1ci5naXRodWIuaW8vanNyc2FzaWduL2xpY2Vuc2VcbiAqL1xuXG52YXIgbmF2aWdhdG9yID0ge307XG5uYXZpZ2F0b3IudXNlckFnZW50ID0gZmFsc2U7XG5cbnZhciB3aW5kb3cgPSB7fTtcblxuLyohIENyeXB0b0pTIHYzLjEuMiBjb3JlLWZpeC5qc1xuICogY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4gKiAoYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIGNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiAqIFRISVMgSVMgRklYIG9mICdjb3JlLmpzJyB0byBmaXggSG1hYyBpc3N1ZS5cbiAqIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL2lzc3Vlcy9kZXRhaWw/aWQ9ODRcbiAqIGh0dHBzOi8vY3J5cHRvLWpzLmdvb2dsZWNvZGUuY29tL3N2bi1oaXN0b3J5L3I2NjcvYnJhbmNoZXMvMy54L3NyYy9jb3JlLmpzXG4gKi9cbnZhciBDcnlwdG9KUz1DcnlwdG9KU3x8KGZ1bmN0aW9uKGUsZyl7dmFyIGE9e307dmFyIGI9YS5saWI9e307dmFyIGo9Yi5CYXNlPShmdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt9cmV0dXJue2V4dGVuZDpmdW5jdGlvbihwKXtuLnByb3RvdHlwZT10aGlzO3ZhciBvPW5ldyBuKCk7aWYocCl7by5taXhJbihwKX1pZighby5oYXNPd25Qcm9wZXJ0eShcImluaXRcIikpe28uaW5pdD1mdW5jdGlvbigpe28uJHN1cGVyLmluaXQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1vLmluaXQucHJvdG90eXBlPW87by4kc3VwZXI9dGhpcztyZXR1cm4gb30sY3JlYXRlOmZ1bmN0aW9uKCl7dmFyIG89dGhpcy5leHRlbmQoKTtvLmluaXQuYXBwbHkobyxhcmd1bWVudHMpO3JldHVybiBvfSxpbml0OmZ1bmN0aW9uKCl7fSxtaXhJbjpmdW5jdGlvbihwKXtmb3IodmFyIG8gaW4gcCl7aWYocC5oYXNPd25Qcm9wZXJ0eShvKSl7dGhpc1tvXT1wW29dfX1pZihwLmhhc093blByb3BlcnR5KFwidG9TdHJpbmdcIikpe3RoaXMudG9TdHJpbmc9cC50b1N0cmluZ319LGNsb25lOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaW5pdC5wcm90b3R5cGUuZXh0ZW5kKHRoaXMpfX19KCkpO3ZhciBsPWIuV29yZEFycmF5PWouZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKG8sbil7bz10aGlzLndvcmRzPW98fFtdO2lmKG4hPWcpe3RoaXMuc2lnQnl0ZXM9bn1lbHNle3RoaXMuc2lnQnl0ZXM9by5sZW5ndGgqNH19LHRvU3RyaW5nOmZ1bmN0aW9uKG4pe3JldHVybihufHxoKS5zdHJpbmdpZnkodGhpcyl9LGNvbmNhdDpmdW5jdGlvbih0KXt2YXIgcT10aGlzLndvcmRzO3ZhciBwPXQud29yZHM7dmFyIG49dGhpcy5zaWdCeXRlczt2YXIgcz10LnNpZ0J5dGVzO3RoaXMuY2xhbXAoKTtpZihuJTQpe2Zvcih2YXIgcj0wO3I8cztyKyspe3ZhciBvPShwW3I+Pj4yXT4+PigyNC0ociU0KSo4KSkmMjU1O3FbKG4rcik+Pj4yXXw9bzw8KDI0LSgobityKSU0KSo4KX19ZWxzZXtmb3IodmFyIHI9MDtyPHM7cis9NCl7cVsobityKT4+PjJdPXBbcj4+PjJdfX10aGlzLnNpZ0J5dGVzKz1zO3JldHVybiB0aGlzfSxjbGFtcDpmdW5jdGlvbigpe3ZhciBvPXRoaXMud29yZHM7dmFyIG49dGhpcy5zaWdCeXRlcztvW24+Pj4yXSY9NDI5NDk2NzI5NTw8KDMyLShuJTQpKjgpO28ubGVuZ3RoPWUuY2VpbChuLzQpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBuPWouY2xvbmUuY2FsbCh0aGlzKTtuLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCk7cmV0dXJuIG59LHJhbmRvbTpmdW5jdGlvbihwKXt2YXIgbz1bXTtmb3IodmFyIG49MDtuPHA7bis9NCl7by5wdXNoKChlLnJhbmRvbSgpKjQyOTQ5NjcyOTYpfDApfXJldHVybiBuZXcgbC5pbml0KG8scCl9fSk7dmFyIG09YS5lbmM9e307dmFyIGg9bS5IZXg9e3N0cmluZ2lmeTpmdW5jdGlvbihwKXt2YXIgcj1wLndvcmRzO3ZhciBvPXAuc2lnQnl0ZXM7dmFyIHE9W107Zm9yKHZhciBuPTA7bjxvO24rKyl7dmFyIHM9KHJbbj4+PjJdPj4+KDI0LShuJTQpKjgpKSYyNTU7cS5wdXNoKChzPj4+NCkudG9TdHJpbmcoMTYpKTtxLnB1c2goKHMmMTUpLnRvU3RyaW5nKDE2KSl9cmV0dXJuIHEuam9pbihcIlwiKX0scGFyc2U6ZnVuY3Rpb24ocCl7dmFyIG49cC5sZW5ndGg7dmFyIHE9W107Zm9yKHZhciBvPTA7bzxuO28rPTIpe3Fbbz4+PjNdfD1wYXJzZUludChwLnN1YnN0cihvLDIpLDE2KTw8KDI0LShvJTgpKjQpfXJldHVybiBuZXcgbC5pbml0KHEsbi8yKX19O3ZhciBkPW0uTGF0aW4xPXtzdHJpbmdpZnk6ZnVuY3Rpb24ocSl7dmFyIHI9cS53b3Jkczt2YXIgcD1xLnNpZ0J5dGVzO3ZhciBuPVtdO2Zvcih2YXIgbz0wO288cDtvKyspe3ZhciBzPShyW28+Pj4yXT4+PigyNC0obyU0KSo4KSkmMjU1O24ucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHMpKX1yZXR1cm4gbi5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihwKXt2YXIgbj1wLmxlbmd0aDt2YXIgcT1bXTtmb3IodmFyIG89MDtvPG47bysrKXtxW28+Pj4yXXw9KHAuY2hhckNvZGVBdChvKSYyNTUpPDwoMjQtKG8lNCkqOCl9cmV0dXJuIG5ldyBsLmluaXQocSxuKX19O3ZhciBjPW0uVXRmOD17c3RyaW5naWZ5OmZ1bmN0aW9uKG4pe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZShkLnN0cmluZ2lmeShuKSkpfWNhdGNoKG8pe3Rocm93IG5ldyBFcnJvcihcIk1hbGZvcm1lZCBVVEYtOCBkYXRhXCIpfX0scGFyc2U6ZnVuY3Rpb24obil7cmV0dXJuIGQucGFyc2UodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KG4pKSl9fTt2YXIgaT1iLkJ1ZmZlcmVkQmxvY2tBbGdvcml0aG09ai5leHRlbmQoe3Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5fZGF0YT1uZXcgbC5pbml0KCk7dGhpcy5fbkRhdGFCeXRlcz0wfSxfYXBwZW5kOmZ1bmN0aW9uKG4pe2lmKHR5cGVvZiBuPT1cInN0cmluZ1wiKXtuPWMucGFyc2Uobil9dGhpcy5fZGF0YS5jb25jYXQobik7dGhpcy5fbkRhdGFCeXRlcys9bi5zaWdCeXRlc30sX3Byb2Nlc3M6ZnVuY3Rpb24odyl7dmFyIHE9dGhpcy5fZGF0YTt2YXIgeD1xLndvcmRzO3ZhciBuPXEuc2lnQnl0ZXM7dmFyIHQ9dGhpcy5ibG9ja1NpemU7dmFyIHY9dCo0O3ZhciB1PW4vdjtpZih3KXt1PWUuY2VpbCh1KX1lbHNle3U9ZS5tYXgoKHV8MCktdGhpcy5fbWluQnVmZmVyU2l6ZSwwKX12YXIgcz11KnQ7dmFyIHI9ZS5taW4ocyo0LG4pO2lmKHMpe2Zvcih2YXIgcD0wO3A8cztwKz10KXt0aGlzLl9kb1Byb2Nlc3NCbG9jayh4LHApfXZhciBvPXguc3BsaWNlKDAscyk7cS5zaWdCeXRlcy09cn1yZXR1cm4gbmV3IGwuaW5pdChvLHIpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBuPWouY2xvbmUuY2FsbCh0aGlzKTtuLl9kYXRhPXRoaXMuX2RhdGEuY2xvbmUoKTtyZXR1cm4gbn0sX21pbkJ1ZmZlclNpemU6MH0pO3ZhciBmPWIuSGFzaGVyPWkuZXh0ZW5kKHtjZmc6ai5leHRlbmQoKSxpbml0OmZ1bmN0aW9uKG4pe3RoaXMuY2ZnPXRoaXMuY2ZnLmV4dGVuZChuKTt0aGlzLnJlc2V0KCl9LHJlc2V0OmZ1bmN0aW9uKCl7aS5yZXNldC5jYWxsKHRoaXMpO3RoaXMuX2RvUmVzZXQoKX0sdXBkYXRlOmZ1bmN0aW9uKG4pe3RoaXMuX2FwcGVuZChuKTt0aGlzLl9wcm9jZXNzKCk7cmV0dXJuIHRoaXN9LGZpbmFsaXplOmZ1bmN0aW9uKG4pe2lmKG4pe3RoaXMuX2FwcGVuZChuKX12YXIgbz10aGlzLl9kb0ZpbmFsaXplKCk7cmV0dXJuIG99LGJsb2NrU2l6ZTo1MTIvMzIsX2NyZWF0ZUhlbHBlcjpmdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24ocCxvKXtyZXR1cm4gbmV3IG4uaW5pdChvKS5maW5hbGl6ZShwKX19LF9jcmVhdGVIbWFjSGVscGVyOmZ1bmN0aW9uKG4pe3JldHVybiBmdW5jdGlvbihwLG8pe3JldHVybiBuZXcgay5ITUFDLmluaXQobixvKS5maW5hbGl6ZShwKX19fSk7dmFyIGs9YS5hbGdvPXt9O3JldHVybiBhfShNYXRoKSk7XG4vKlxuQ3J5cHRvSlMgdjMuMS4yIHg2NC1jb3JlLW1pbi5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oZyl7dmFyIGE9Q3J5cHRvSlMsZj1hLmxpYixlPWYuQmFzZSxoPWYuV29yZEFycmF5LGE9YS54NjQ9e307YS5Xb3JkPWUuZXh0ZW5kKHtpbml0OmZ1bmN0aW9uKGIsYyl7dGhpcy5oaWdoPWI7dGhpcy5sb3c9Y319KTthLldvcmRBcnJheT1lLmV4dGVuZCh7aW5pdDpmdW5jdGlvbihiLGMpe2I9dGhpcy53b3Jkcz1ifHxbXTt0aGlzLnNpZ0J5dGVzPWMhPWc/Yzo4KmIubGVuZ3RofSx0b1gzMjpmdW5jdGlvbigpe2Zvcih2YXIgYj10aGlzLndvcmRzLGM9Yi5sZW5ndGgsYT1bXSxkPTA7ZDxjO2QrKyl7dmFyIGU9YltkXTthLnB1c2goZS5oaWdoKTthLnB1c2goZS5sb3cpfXJldHVybiBoLmNyZWF0ZShhLHRoaXMuc2lnQnl0ZXMpfSxjbG9uZTpmdW5jdGlvbigpe2Zvcih2YXIgYj1lLmNsb25lLmNhbGwodGhpcyksYz1iLndvcmRzPXRoaXMud29yZHMuc2xpY2UoMCksYT1jLmxlbmd0aCxkPTA7ZDxhO2QrKyljW2RdPWNbZF0uY2xvbmUoKTtyZXR1cm4gYn19KX0pKCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgZW5jLWJhc2U2NC5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oKXt2YXIgaD1DcnlwdG9KUyxqPWgubGliLldvcmRBcnJheTtoLmVuYy5CYXNlNjQ9e3N0cmluZ2lmeTpmdW5jdGlvbihiKXt2YXIgZT1iLndvcmRzLGY9Yi5zaWdCeXRlcyxjPXRoaXMuX21hcDtiLmNsYW1wKCk7Yj1bXTtmb3IodmFyIGE9MDthPGY7YSs9Mylmb3IodmFyIGQ9KGVbYT4+PjJdPj4+MjQtOCooYSU0KSYyNTUpPDwxNnwoZVthKzE+Pj4yXT4+PjI0LTgqKChhKzEpJTQpJjI1NSk8PDh8ZVthKzI+Pj4yXT4+PjI0LTgqKChhKzIpJTQpJjI1NSxnPTA7ND5nJiZhKzAuNzUqZzxmO2crKyliLnB1c2goYy5jaGFyQXQoZD4+PjYqKDMtZykmNjMpKTtpZihlPWMuY2hhckF0KDY0KSlmb3IoO2IubGVuZ3RoJTQ7KWIucHVzaChlKTtyZXR1cm4gYi5qb2luKFwiXCIpfSxwYXJzZTpmdW5jdGlvbihiKXt2YXIgZT1iLmxlbmd0aCxmPXRoaXMuX21hcCxjPWYuY2hhckF0KDY0KTtjJiYoYz1iLmluZGV4T2YoYyksLTEhPWMmJihlPWMpKTtmb3IodmFyIGM9W10sYT0wLGQ9MDtkPFxuZTtkKyspaWYoZCU0KXt2YXIgZz1mLmluZGV4T2YoYi5jaGFyQXQoZC0xKSk8PDIqKGQlNCksaD1mLmluZGV4T2YoYi5jaGFyQXQoZCkpPj4+Ni0yKihkJTQpO2NbYT4+PjJdfD0oZ3xoKTw8MjQtOCooYSU0KTthKyt9cmV0dXJuIGouY3JlYXRlKGMsYSl9LF9tYXA6XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvPVwifX0pKCk7XG5cbi8qXG5DcnlwdG9KUyB2My4xLjIgc2hhMjU2LW1pbi5qc1xuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzXG4oYykgMjAwOS0yMDEzIGJ5IEplZmYgTW90dC4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbmNvZGUuZ29vZ2xlLmNvbS9wL2NyeXB0by1qcy93aWtpL0xpY2Vuc2VcbiovXG4oZnVuY3Rpb24oayl7Zm9yKHZhciBnPUNyeXB0b0pTLGg9Zy5saWIsdj1oLldvcmRBcnJheSxqPWguSGFzaGVyLGg9Zy5hbGdvLHM9W10sdD1bXSx1PWZ1bmN0aW9uKHEpe3JldHVybiA0Mjk0OTY3Mjk2KihxLShxfDApKXwwfSxsPTIsYj0wOzY0PmI7KXt2YXIgZDthOntkPWw7Zm9yKHZhciB3PWsuc3FydChkKSxyPTI7cjw9dztyKyspaWYoIShkJXIpKXtkPSExO2JyZWFrIGF9ZD0hMH1kJiYoOD5iJiYoc1tiXT11KGsucG93KGwsMC41KSkpLHRbYl09dShrLnBvdyhsLDEvMykpLGIrKyk7bCsrfXZhciBuPVtdLGg9aC5TSEEyNTY9ai5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgdi5pbml0KHMuc2xpY2UoMCkpfSxfZG9Qcm9jZXNzQmxvY2s6ZnVuY3Rpb24ocSxoKXtmb3IodmFyIGE9dGhpcy5faGFzaC53b3JkcyxjPWFbMF0sZD1hWzFdLGI9YVsyXSxrPWFbM10sZj1hWzRdLGc9YVs1XSxqPWFbNl0sbD1hWzddLGU9MDs2ND5lO2UrKyl7aWYoMTY+ZSluW2VdPVxucVtoK2VdfDA7ZWxzZXt2YXIgbT1uW2UtMTVdLHA9bltlLTJdO25bZV09KChtPDwyNXxtPj4+NyleKG08PDE0fG0+Pj4xOClebT4+PjMpK25bZS03XSsoKHA8PDE1fHA+Pj4xNyleKHA8PDEzfHA+Pj4xOSlecD4+PjEwKStuW2UtMTZdfW09bCsoKGY8PDI2fGY+Pj42KV4oZjw8MjF8Zj4+PjExKV4oZjw8N3xmPj4+MjUpKSsoZiZnXn5mJmopK3RbZV0rbltlXTtwPSgoYzw8MzB8Yz4+PjIpXihjPDwxOXxjPj4+MTMpXihjPDwxMHxjPj4+MjIpKSsoYyZkXmMmYl5kJmIpO2w9ajtqPWc7Zz1mO2Y9ayttfDA7az1iO2I9ZDtkPWM7Yz1tK3B8MH1hWzBdPWFbMF0rY3wwO2FbMV09YVsxXStkfDA7YVsyXT1hWzJdK2J8MDthWzNdPWFbM10ra3wwO2FbNF09YVs0XStmfDA7YVs1XT1hWzVdK2d8MDthWzZdPWFbNl0ranwwO2FbN109YVs3XStsfDB9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5fZGF0YSxiPWQud29yZHMsYT04KnRoaXMuX25EYXRhQnl0ZXMsYz04KmQuc2lnQnl0ZXM7XG5iW2M+Pj41XXw9MTI4PDwyNC1jJTMyO2JbKGMrNjQ+Pj45PDw0KSsxNF09ay5mbG9vcihhLzQyOTQ5NjcyOTYpO2JbKGMrNjQ+Pj45PDw0KSsxNV09YTtkLnNpZ0J5dGVzPTQqYi5sZW5ndGg7dGhpcy5fcHJvY2VzcygpO3JldHVybiB0aGlzLl9oYXNofSxjbG9uZTpmdW5jdGlvbigpe3ZhciBiPWouY2xvbmUuY2FsbCh0aGlzKTtiLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYn19KTtnLlNIQTI1Nj1qLl9jcmVhdGVIZWxwZXIoaCk7Zy5IbWFjU0hBMjU2PWouX2NyZWF0ZUhtYWNIZWxwZXIoaCl9KShNYXRoKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBzaGE1MTItbWluLmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXtyZXR1cm4gZC5jcmVhdGUuYXBwbHkoZCxhcmd1bWVudHMpfWZvcih2YXIgbj1DcnlwdG9KUyxyPW4ubGliLkhhc2hlcixlPW4ueDY0LGQ9ZS5Xb3JkLFQ9ZS5Xb3JkQXJyYXksZT1uLmFsZ28sZWE9W2EoMTExNjM1MjQwOCwzNjA5NzY3NDU4KSxhKDE4OTk0NDc0NDEsNjAyODkxNzI1KSxhKDMwNDkzMjM0NzEsMzk2NDQ4NDM5OSksYSgzOTIxMDA5NTczLDIxNzMyOTU1NDgpLGEoOTYxOTg3MTYzLDQwODE2Mjg0NzIpLGEoMTUwODk3MDk5MywzMDUzODM0MjY1KSxhKDI0NTM2MzU3NDgsMjkzNzY3MTU3OSksYSgyODcwNzYzMjIxLDM2NjQ2MDk1NjApLGEoMzYyNDM4MTA4MCwyNzM0ODgzMzk0KSxhKDMxMDU5ODQwMSwxMTY0OTk2NTQyKSxhKDYwNzIyNTI3OCwxMzIzNjEwNzY0KSxhKDE0MjY4ODE5ODcsMzU5MDMwNDk5NCksYSgxOTI1MDc4Mzg4LDQwNjgxODIzODMpLGEoMjE2MjA3ODIwNiw5OTEzMzYxMTMpLGEoMjYxNDg4ODEwMyw2MzM4MDMzMTcpLFxuYSgzMjQ4MjIyNTgwLDM0Nzk3NzQ4NjgpLGEoMzgzNTM5MDQwMSwyNjY2NjEzNDU4KSxhKDQwMjIyMjQ3NzQsOTQ0NzExMTM5KSxhKDI2NDM0NzA3OCwyMzQxMjYyNzczKSxhKDYwNDgwNzYyOCwyMDA3ODAwOTMzKSxhKDc3MDI1NTk4MywxNDk1OTkwOTAxKSxhKDEyNDkxNTAxMjIsMTg1NjQzMTIzNSksYSgxNTU1MDgxNjkyLDMxNzUyMTgxMzIpLGEoMTk5NjA2NDk4NiwyMTk4OTUwODM3KSxhKDI1NTQyMjA4ODIsMzk5OTcxOTMzOSksYSgyODIxODM0MzQ5LDc2Njc4NDAxNiksYSgyOTUyOTk2ODA4LDI1NjY1OTQ4NzkpLGEoMzIxMDMxMzY3MSwzMjAzMzM3OTU2KSxhKDMzMzY1NzE4OTEsMTAzNDQ1NzAyNiksYSgzNTg0NTI4NzExLDI0NjY5NDg5MDEpLGEoMTEzOTI2OTkzLDM3NTgzMjYzODMpLGEoMzM4MjQxODk1LDE2ODcxNzkzNiksYSg2NjYzMDcyMDUsMTE4ODE3OTk2NCksYSg3NzM1Mjk5MTIsMTU0NjA0NTczNCksYSgxMjk0NzU3MzcyLDE1MjI4MDU0ODUpLGEoMTM5NjE4MjI5MSxcbjI2NDM4MzM4MjMpLGEoMTY5NTE4MzcwMCwyMzQzNTI3MzkwKSxhKDE5ODY2NjEwNTEsMTAxNDQ3NzQ4MCksYSgyMTc3MDI2MzUwLDEyMDY3NTkxNDIpLGEoMjQ1Njk1NjAzNywzNDQwNzc2MjcpLGEoMjczMDQ4NTkyMSwxMjkwODYzNDYwKSxhKDI4MjAzMDI0MTEsMzE1ODQ1NDI3MyksYSgzMjU5NzMwODAwLDM1MDU5NTI2NTcpLGEoMzM0NTc2NDc3MSwxMDYyMTcwMDgpLGEoMzUxNjA2NTgxNywzNjA2MDA4MzQ0KSxhKDM2MDAzNTI4MDQsMTQzMjcyNTc3NiksYSg0MDk0NTcxOTA5LDE0NjcwMzE1OTQpLGEoMjc1NDIzMzQ0LDg1MTE2OTcyMCksYSg0MzAyMjc3MzQsMzEwMDgyMzc1MiksYSg1MDY5NDg2MTYsMTM2MzI1ODE5NSksYSg2NTkwNjA1NTYsMzc1MDY4NTU5MyksYSg4ODM5OTc4NzcsMzc4NTA1MDI4MCksYSg5NTgxMzk1NzEsMzMxODMwNzQyNyksYSgxMzIyODIyMjE4LDM4MTI3MjM0MDMpLGEoMTUzNzAwMjA2MywyMDAzMDM0OTk1KSxhKDE3NDc4NzM3NzksMzYwMjAzNjg5OSksXG5hKDE5NTU1NjIyMjIsMTU3NTk5MDAxMiksYSgyMDI0MTA0ODE1LDExMjU1OTI5MjgpLGEoMjIyNzczMDQ1MiwyNzE2OTA0MzA2KSxhKDIzNjE4NTI0MjQsNDQyNzc2MDQ0KSxhKDI0Mjg0MzY0NzQsNTkzNjk4MzQ0KSxhKDI3NTY3MzQxODcsMzczMzExMDI0OSksYSgzMjA0MDMxNDc5LDI5OTkzNTE1NzMpLGEoMzMyOTMyNTI5OCwzODE1OTIwNDI3KSxhKDMzOTE1Njk2MTQsMzkyODM4MzkwMCksYSgzNTE1MjY3MjcxLDU2NjI4MDcxMSksYSgzOTQwMTg3NjA2LDM0NTQwNjk1MzQpLGEoNDExODYzMDI3MSw0MDAwMjM5OTkyKSxhKDExNjQxODQ3NCwxOTE0MTM4NTU0KSxhKDE3NDI5MjQyMSwyNzMxMDU1MjcwKSxhKDI4OTM4MDM1NiwzMjAzOTkzMDA2KSxhKDQ2MDM5MzI2OSwzMjA2MjAzMTUpLGEoNjg1NDcxNzMzLDU4NzQ5NjgzNiksYSg4NTIxNDI5NzEsMTA4Njc5Mjg1MSksYSgxMDE3MDM2Mjk4LDM2NTU0MzEwMCksYSgxMTI2MDAwNTgwLDI2MTgyOTc2NzYpLGEoMTI4ODAzMzQ3MCxcbjM0MDk4NTUxNTgpLGEoMTUwMTUwNTk0OCw0MjM0NTA5ODY2KSxhKDE2MDcxNjc5MTUsOTg3MTY3NDY4KSxhKDE4MTY0MDIzMTYsMTI0NjE4OTU5MSldLHY9W10sdz0wOzgwPnc7dysrKXZbd109YSgpO2U9ZS5TSEE1MTI9ci5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgVC5pbml0KFtuZXcgZC5pbml0KDE3NzkwMzM3MDMsNDA4OTIzNTcyMCksbmV3IGQuaW5pdCgzMTQ0MTM0Mjc3LDIyMjc4NzM1OTUpLG5ldyBkLmluaXQoMTAxMzkwNDI0Miw0MjcxMTc1NzIzKSxuZXcgZC5pbml0KDI3NzM0ODA3NjIsMTU5NTc1MDEyOSksbmV3IGQuaW5pdCgxMzU5ODkzMTE5LDI5MTc1NjUxMzcpLG5ldyBkLmluaXQoMjYwMDgyMjkyNCw3MjU1MTExOTkpLG5ldyBkLmluaXQoNTI4NzM0NjM1LDQyMTUzODk1NDcpLG5ldyBkLmluaXQoMTU0MTQ1OTIyNSwzMjcwMzMyMDkpXSl9LF9kb1Byb2Nlc3NCbG9jazpmdW5jdGlvbihhLGQpe2Zvcih2YXIgZj10aGlzLl9oYXNoLndvcmRzLFxuRj1mWzBdLGU9ZlsxXSxuPWZbMl0scj1mWzNdLEc9Zls0XSxIPWZbNV0sST1mWzZdLGY9Zls3XSx3PUYuaGlnaCxKPUYubG93LFg9ZS5oaWdoLEs9ZS5sb3csWT1uLmhpZ2gsTD1uLmxvdyxaPXIuaGlnaCxNPXIubG93LCQ9Ry5oaWdoLE49Ry5sb3csYWE9SC5oaWdoLE89SC5sb3csYmE9SS5oaWdoLFA9SS5sb3csY2E9Zi5oaWdoLFE9Zi5sb3csaz13LGc9Six6PVgseD1LLEE9WSx5PUwsVT1aLEI9TSxsPSQsaD1OLFI9YWEsQz1PLFM9YmEsRD1QLFY9Y2EsRT1RLG09MDs4MD5tO20rKyl7dmFyIHM9dlttXTtpZigxNj5tKXZhciBqPXMuaGlnaD1hW2QrMiptXXwwLGI9cy5sb3c9YVtkKzIqbSsxXXwwO2Vsc2V7dmFyIGo9dlttLTE1XSxiPWouaGlnaCxwPWoubG93LGo9KGI+Pj4xfHA8PDMxKV4oYj4+Pjh8cDw8MjQpXmI+Pj43LHA9KHA+Pj4xfGI8PDMxKV4ocD4+Pjh8Yjw8MjQpXihwPj4+N3xiPDwyNSksdT12W20tMl0sYj11LmhpZ2gsYz11Lmxvdyx1PShiPj4+MTl8Yzw8MTMpXihiPDxcbjN8Yz4+PjI5KV5iPj4+NixjPShjPj4+MTl8Yjw8MTMpXihjPDwzfGI+Pj4yOSleKGM+Pj42fGI8PDI2KSxiPXZbbS03XSxXPWIuaGlnaCx0PXZbbS0xNl0scT10LmhpZ2gsdD10LmxvdyxiPXArYi5sb3csaj1qK1crKGI+Pj4wPHA+Pj4wPzE6MCksYj1iK2Msaj1qK3UrKGI+Pj4wPGM+Pj4wPzE6MCksYj1iK3Qsaj1qK3ErKGI+Pj4wPHQ+Pj4wPzE6MCk7cy5oaWdoPWo7cy5sb3c9Yn12YXIgVz1sJlJefmwmUyx0PWgmQ15+aCZELHM9ayZ6XmsmQV56JkEsVD1nJnheZyZ5XngmeSxwPShrPj4+Mjh8Zzw8NCleKGs8PDMwfGc+Pj4yKV4oazw8MjV8Zz4+PjcpLHU9KGc+Pj4yOHxrPDw0KV4oZzw8MzB8az4+PjIpXihnPDwyNXxrPj4+NyksYz1lYVttXSxmYT1jLmhpZ2gsZGE9Yy5sb3csYz1FKygoaD4+PjE0fGw8PDE4KV4oaD4+PjE4fGw8PDE0KV4oaDw8MjN8bD4+PjkpKSxxPVYrKChsPj4+MTR8aDw8MTgpXihsPj4+MTh8aDw8MTQpXihsPDwyM3xoPj4+OSkpKyhjPj4+MDxFPj4+MD8xOlxuMCksYz1jK3QscT1xK1crKGM+Pj4wPHQ+Pj4wPzE6MCksYz1jK2RhLHE9cStmYSsoYz4+PjA8ZGE+Pj4wPzE6MCksYz1jK2IscT1xK2orKGM+Pj4wPGI+Pj4wPzE6MCksYj11K1Qscz1wK3MrKGI+Pj4wPHU+Pj4wPzE6MCksVj1TLEU9RCxTPVIsRD1DLFI9bCxDPWgsaD1CK2N8MCxsPVUrcSsoaD4+PjA8Qj4+PjA/MTowKXwwLFU9QSxCPXksQT16LHk9eCx6PWsseD1nLGc9YytifDAsaz1xK3MrKGc+Pj4wPGM+Pj4wPzE6MCl8MH1KPUYubG93PUorZztGLmhpZ2g9dytrKyhKPj4+MDxnPj4+MD8xOjApO0s9ZS5sb3c9Syt4O2UuaGlnaD1YK3orKEs+Pj4wPHg+Pj4wPzE6MCk7TD1uLmxvdz1MK3k7bi5oaWdoPVkrQSsoTD4+PjA8eT4+PjA/MTowKTtNPXIubG93PU0rQjtyLmhpZ2g9WitVKyhNPj4+MDxCPj4+MD8xOjApO049Ry5sb3c9TitoO0cuaGlnaD0kK2wrKE4+Pj4wPGg+Pj4wPzE6MCk7Tz1ILmxvdz1PK0M7SC5oaWdoPWFhK1IrKE8+Pj4wPEM+Pj4wPzE6MCk7UD1JLmxvdz1QK0Q7XG5JLmhpZ2g9YmErUysoUD4+PjA8RD4+PjA/MTowKTtRPWYubG93PVErRTtmLmhpZ2g9Y2ErVisoUT4+PjA8RT4+PjA/MTowKX0sX2RvRmluYWxpemU6ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9kYXRhLGQ9YS53b3JkcyxmPTgqdGhpcy5fbkRhdGFCeXRlcyxlPTgqYS5zaWdCeXRlcztkW2U+Pj41XXw9MTI4PDwyNC1lJTMyO2RbKGUrMTI4Pj4+MTA8PDUpKzMwXT1NYXRoLmZsb29yKGYvNDI5NDk2NzI5Nik7ZFsoZSsxMjg+Pj4xMDw8NSkrMzFdPWY7YS5zaWdCeXRlcz00KmQubGVuZ3RoO3RoaXMuX3Byb2Nlc3MoKTtyZXR1cm4gdGhpcy5faGFzaC50b1gzMigpfSxjbG9uZTpmdW5jdGlvbigpe3ZhciBhPXIuY2xvbmUuY2FsbCh0aGlzKTthLl9oYXNoPXRoaXMuX2hhc2guY2xvbmUoKTtyZXR1cm4gYX0sYmxvY2tTaXplOjMyfSk7bi5TSEE1MTI9ci5fY3JlYXRlSGVscGVyKGUpO24uSG1hY1NIQTUxMj1yLl9jcmVhdGVIbWFjSGVscGVyKGUpfSkoKTtcblxuLypcbkNyeXB0b0pTIHYzLjEuMiBzaGEzODQtbWluLmpzXG5jb2RlLmdvb2dsZS5jb20vcC9jcnlwdG8tanNcbihjKSAyMDA5LTIwMTMgYnkgSmVmZiBNb3R0LiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuY29kZS5nb29nbGUuY29tL3AvY3J5cHRvLWpzL3dpa2kvTGljZW5zZVxuKi9cbihmdW5jdGlvbigpe3ZhciBjPUNyeXB0b0pTLGE9Yy54NjQsYj1hLldvcmQsZT1hLldvcmRBcnJheSxhPWMuYWxnbyxkPWEuU0hBNTEyLGE9YS5TSEEzODQ9ZC5leHRlbmQoe19kb1Jlc2V0OmZ1bmN0aW9uKCl7dGhpcy5faGFzaD1uZXcgZS5pbml0KFtuZXcgYi5pbml0KDM0MTgwNzAzNjUsMzIzODM3MTAzMiksbmV3IGIuaW5pdCgxNjU0MjcwMjUwLDkxNDE1MDY2MyksbmV3IGIuaW5pdCgyNDM4NTI5MzcwLDgxMjcwMjk5OSksbmV3IGIuaW5pdCgzNTU0NjIzNjAsNDE0NDkxMjY5NyksbmV3IGIuaW5pdCgxNzMxNDA1NDE1LDQyOTA3NzU4NTcpLG5ldyBiLmluaXQoMjM5NDE4MDIzMSwxNzUwNjAzMDI1KSxuZXcgYi5pbml0KDM2NzUwMDg1MjUsMTY5NDA3NjgzOSksbmV3IGIuaW5pdCgxMjAzMDYyODEzLDMyMDQwNzU0MjgpXSl9LF9kb0ZpbmFsaXplOmZ1bmN0aW9uKCl7dmFyIGE9ZC5fZG9GaW5hbGl6ZS5jYWxsKHRoaXMpO2Euc2lnQnl0ZXMtPTE2O3JldHVybiBhfX0pO2MuU0hBMzg0PVxuZC5fY3JlYXRlSGVscGVyKGEpO2MuSG1hY1NIQTM4ND1kLl9jcmVhdGVIbWFjSGVscGVyKGEpfSkoKTtcblxuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbnZhciBiNjRtYXA9XCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCI7dmFyIGI2NHBhZD1cIj1cIjtmdW5jdGlvbiBoZXgyYjY0KGQpe3ZhciBiO3ZhciBlO3ZhciBhPVwiXCI7Zm9yKGI9MDtiKzM8PWQubGVuZ3RoO2IrPTMpe2U9cGFyc2VJbnQoZC5zdWJzdHJpbmcoYixiKzMpLDE2KTthKz1iNjRtYXAuY2hhckF0KGU+PjYpK2I2NG1hcC5jaGFyQXQoZSY2Myl9aWYoYisxPT1kLmxlbmd0aCl7ZT1wYXJzZUludChkLnN1YnN0cmluZyhiLGIrMSksMTYpO2ErPWI2NG1hcC5jaGFyQXQoZTw8Mil9ZWxzZXtpZihiKzI9PWQubGVuZ3RoKXtlPXBhcnNlSW50KGQuc3Vic3RyaW5nKGIsYisyKSwxNik7YSs9YjY0bWFwLmNoYXJBdChlPj4yKStiNjRtYXAuY2hhckF0KChlJjMpPDw0KX19aWYoYjY0cGFkKXt3aGlsZSgoYS5sZW5ndGgmMyk+MCl7YSs9YjY0cGFkfX1yZXR1cm4gYX1mdW5jdGlvbiBiNjR0b2hleChmKXt2YXIgZD1cIlwiO3ZhciBlO3ZhciBiPTA7dmFyIGM7dmFyIGE7Zm9yKGU9MDtlPGYubGVuZ3RoOysrZSl7aWYoZi5jaGFyQXQoZSk9PWI2NHBhZCl7YnJlYWt9YT1iNjRtYXAuaW5kZXhPZihmLmNoYXJBdChlKSk7aWYoYTwwKXtjb250aW51ZX1pZihiPT0wKXtkKz1pbnQyY2hhcihhPj4yKTtjPWEmMztiPTF9ZWxzZXtpZihiPT0xKXtkKz1pbnQyY2hhcigoYzw8Mil8KGE+PjQpKTtjPWEmMTU7Yj0yfWVsc2V7aWYoYj09Mil7ZCs9aW50MmNoYXIoYyk7ZCs9aW50MmNoYXIoYT4+Mik7Yz1hJjM7Yj0zfWVsc2V7ZCs9aW50MmNoYXIoKGM8PDIpfChhPj40KSk7ZCs9aW50MmNoYXIoYSYxNSk7Yj0wfX19fWlmKGI9PTEpe2QrPWludDJjaGFyKGM8PDIpfXJldHVybiBkfWZ1bmN0aW9uIGI2NHRvQkEoZSl7dmFyIGQ9YjY0dG9oZXgoZSk7dmFyIGM7dmFyIGI9bmV3IEFycmF5KCk7Zm9yKGM9MDsyKmM8ZC5sZW5ndGg7KytjKXtiW2NdPXBhcnNlSW50KGQuc3Vic3RyaW5nKDIqYywyKmMrMiksMTYpfXJldHVybiBifTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG52YXIgZGJpdHM7dmFyIGNhbmFyeT0yNDQ4Mzc4MTQwOTQ1OTA7dmFyIGpfbG09KChjYW5hcnkmMTY3NzcyMTUpPT0xNTcxNTA3MCk7ZnVuY3Rpb24gQmlnSW50ZWdlcihlLGQsZil7aWYoZSE9bnVsbCl7aWYoXCJudW1iZXJcIj09dHlwZW9mIGUpe3RoaXMuZnJvbU51bWJlcihlLGQsZil9ZWxzZXtpZihkPT1udWxsJiZcInN0cmluZ1wiIT10eXBlb2YgZSl7dGhpcy5mcm9tU3RyaW5nKGUsMjU2KX1lbHNle3RoaXMuZnJvbVN0cmluZyhlLGQpfX19fWZ1bmN0aW9uIG5iaSgpe3JldHVybiBuZXcgQmlnSW50ZWdlcihudWxsKX1mdW5jdGlvbiBhbTEoZixhLGIsZSxoLGcpe3doaWxlKC0tZz49MCl7dmFyIGQ9YSp0aGlzW2YrK10rYltlXStoO2g9TWF0aC5mbG9vcihkLzY3MTA4ODY0KTtiW2UrK109ZCY2NzEwODg2M31yZXR1cm4gaH1mdW5jdGlvbiBhbTIoZixxLHIsZSxvLGEpe3ZhciBrPXEmMzI3NjcscD1xPj4xNTt3aGlsZSgtLWE+PTApe3ZhciBkPXRoaXNbZl0mMzI3Njc7dmFyIGc9dGhpc1tmKytdPj4xNTt2YXIgYj1wKmQrZyprO2Q9aypkKygoYiYzMjc2Nyk8PDE1KStyW2VdKyhvJjEwNzM3NDE4MjMpO289KGQ+Pj4zMCkrKGI+Pj4xNSkrcCpnKyhvPj4+MzApO3JbZSsrXT1kJjEwNzM3NDE4MjN9cmV0dXJuIG99ZnVuY3Rpb24gYW0zKGYscSxyLGUsbyxhKXt2YXIgaz1xJjE2MzgzLHA9cT4+MTQ7d2hpbGUoLS1hPj0wKXt2YXIgZD10aGlzW2ZdJjE2MzgzO3ZhciBnPXRoaXNbZisrXT4+MTQ7dmFyIGI9cCpkK2cqaztkPWsqZCsoKGImMTYzODMpPDwxNCkrcltlXStvO289KGQ+PjI4KSsoYj4+MTQpK3AqZztyW2UrK109ZCYyNjg0MzU0NTV9cmV0dXJuIG99aWYoal9sbSYmKG5hdmlnYXRvci5hcHBOYW1lPT1cIk1pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlclwiKSl7QmlnSW50ZWdlci5wcm90b3R5cGUuYW09YW0yO2RiaXRzPTMwfWVsc2V7aWYoal9sbSYmKG5hdmlnYXRvci5hcHBOYW1lIT1cIk5ldHNjYXBlXCIpKXtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbT1hbTE7ZGJpdHM9MjZ9ZWxzZXtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbT1hbTM7ZGJpdHM9Mjh9fUJpZ0ludGVnZXIucHJvdG90eXBlLkRCPWRiaXRzO0JpZ0ludGVnZXIucHJvdG90eXBlLkRNPSgoMTw8ZGJpdHMpLTEpO0JpZ0ludGVnZXIucHJvdG90eXBlLkRWPSgxPDxkYml0cyk7dmFyIEJJX0ZQPTUyO0JpZ0ludGVnZXIucHJvdG90eXBlLkZWPU1hdGgucG93KDIsQklfRlApO0JpZ0ludGVnZXIucHJvdG90eXBlLkYxPUJJX0ZQLWRiaXRzO0JpZ0ludGVnZXIucHJvdG90eXBlLkYyPTIqZGJpdHMtQklfRlA7dmFyIEJJX1JNPVwiMDEyMzQ1Njc4OWFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7dmFyIEJJX1JDPW5ldyBBcnJheSgpO3ZhciBycix2djtycj1cIjBcIi5jaGFyQ29kZUF0KDApO2Zvcih2dj0wO3Z2PD05OysrdnYpe0JJX1JDW3JyKytdPXZ2fXJyPVwiYVwiLmNoYXJDb2RlQXQoMCk7Zm9yKHZ2PTEwO3Z2PDM2OysrdnYpe0JJX1JDW3JyKytdPXZ2fXJyPVwiQVwiLmNoYXJDb2RlQXQoMCk7Zm9yKHZ2PTEwO3Z2PDM2OysrdnYpe0JJX1JDW3JyKytdPXZ2fWZ1bmN0aW9uIGludDJjaGFyKGEpe3JldHVybiBCSV9STS5jaGFyQXQoYSl9ZnVuY3Rpb24gaW50QXQoYixhKXt2YXIgZD1CSV9SQ1tiLmNoYXJDb2RlQXQoYSldO3JldHVybihkPT1udWxsKT8tMTpkfWZ1bmN0aW9uIGJucENvcHlUbyhiKXtmb3IodmFyIGE9dGhpcy50LTE7YT49MDstLWEpe2JbYV09dGhpc1thXX1iLnQ9dGhpcy50O2Iucz10aGlzLnN9ZnVuY3Rpb24gYm5wRnJvbUludChhKXt0aGlzLnQ9MTt0aGlzLnM9KGE8MCk/LTE6MDtpZihhPjApe3RoaXNbMF09YX1lbHNle2lmKGE8LTEpe3RoaXNbMF09YSt0aGlzLkRWfWVsc2V7dGhpcy50PTB9fX1mdW5jdGlvbiBuYnYoYSl7dmFyIGI9bmJpKCk7Yi5mcm9tSW50KGEpO3JldHVybiBifWZ1bmN0aW9uIGJucEZyb21TdHJpbmcoaCxjKXt2YXIgZTtpZihjPT0xNil7ZT00fWVsc2V7aWYoYz09OCl7ZT0zfWVsc2V7aWYoYz09MjU2KXtlPTh9ZWxzZXtpZihjPT0yKXtlPTF9ZWxzZXtpZihjPT0zMil7ZT01fWVsc2V7aWYoYz09NCl7ZT0yfWVsc2V7dGhpcy5mcm9tUmFkaXgoaCxjKTtyZXR1cm59fX19fX10aGlzLnQ9MDt0aGlzLnM9MDt2YXIgZz1oLmxlbmd0aCxkPWZhbHNlLGY9MDt3aGlsZSgtLWc+PTApe3ZhciBhPShlPT04KT9oW2ddJjI1NTppbnRBdChoLGcpO2lmKGE8MCl7aWYoaC5jaGFyQXQoZyk9PVwiLVwiKXtkPXRydWV9Y29udGludWV9ZD1mYWxzZTtpZihmPT0wKXt0aGlzW3RoaXMudCsrXT1hfWVsc2V7aWYoZitlPnRoaXMuREIpe3RoaXNbdGhpcy50LTFdfD0oYSYoKDE8PCh0aGlzLkRCLWYpKS0xKSk8PGY7dGhpc1t0aGlzLnQrK109KGE+Pih0aGlzLkRCLWYpKX1lbHNle3RoaXNbdGhpcy50LTFdfD1hPDxmfX1mKz1lO2lmKGY+PXRoaXMuREIpe2YtPXRoaXMuREJ9fWlmKGU9PTgmJihoWzBdJjEyOCkhPTApe3RoaXMucz0tMTtpZihmPjApe3RoaXNbdGhpcy50LTFdfD0oKDE8PCh0aGlzLkRCLWYpKS0xKTw8Zn19dGhpcy5jbGFtcCgpO2lmKGQpe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLHRoaXMpfX1mdW5jdGlvbiBibnBDbGFtcCgpe3ZhciBhPXRoaXMucyZ0aGlzLkRNO3doaWxlKHRoaXMudD4wJiZ0aGlzW3RoaXMudC0xXT09YSl7LS10aGlzLnR9fWZ1bmN0aW9uIGJuVG9TdHJpbmcoYyl7aWYodGhpcy5zPDApe3JldHVyblwiLVwiK3RoaXMubmVnYXRlKCkudG9TdHJpbmcoYyl9dmFyIGU7aWYoYz09MTYpe2U9NH1lbHNle2lmKGM9PTgpe2U9M31lbHNle2lmKGM9PTIpe2U9MX1lbHNle2lmKGM9PTMyKXtlPTV9ZWxzZXtpZihjPT00KXtlPTJ9ZWxzZXtyZXR1cm4gdGhpcy50b1JhZGl4KGMpfX19fX12YXIgZz0oMTw8ZSktMSxsLGE9ZmFsc2UsaD1cIlwiLGY9dGhpcy50O3ZhciBqPXRoaXMuREItKGYqdGhpcy5EQiklZTtpZihmLS0+MCl7aWYoajx0aGlzLkRCJiYobD10aGlzW2ZdPj5qKT4wKXthPXRydWU7aD1pbnQyY2hhcihsKX13aGlsZShmPj0wKXtpZihqPGUpe2w9KHRoaXNbZl0mKCgxPDxqKS0xKSk8PChlLWopO2x8PXRoaXNbLS1mXT4+KGorPXRoaXMuREItZSl9ZWxzZXtsPSh0aGlzW2ZdPj4oai09ZSkpJmc7aWYoajw9MCl7ais9dGhpcy5EQjstLWZ9fWlmKGw+MCl7YT10cnVlfWlmKGEpe2grPWludDJjaGFyKGwpfX19cmV0dXJuIGE/aDpcIjBcIn1mdW5jdGlvbiBibk5lZ2F0ZSgpe3ZhciBhPW5iaSgpO0JpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLGEpO3JldHVybiBhfWZ1bmN0aW9uIGJuQWJzKCl7cmV0dXJuKHRoaXMuczwwKT90aGlzLm5lZ2F0ZSgpOnRoaXN9ZnVuY3Rpb24gYm5Db21wYXJlVG8oYil7dmFyIGQ9dGhpcy5zLWIucztpZihkIT0wKXtyZXR1cm4gZH12YXIgYz10aGlzLnQ7ZD1jLWIudDtpZihkIT0wKXtyZXR1cm4odGhpcy5zPDApPy1kOmR9d2hpbGUoLS1jPj0wKXtpZigoZD10aGlzW2NdLWJbY10pIT0wKXtyZXR1cm4gZH19cmV0dXJuIDB9ZnVuY3Rpb24gbmJpdHMoYSl7dmFyIGM9MSxiO2lmKChiPWE+Pj4xNikhPTApe2E9YjtjKz0xNn1pZigoYj1hPj44KSE9MCl7YT1iO2MrPTh9aWYoKGI9YT4+NCkhPTApe2E9YjtjKz00fWlmKChiPWE+PjIpIT0wKXthPWI7Yys9Mn1pZigoYj1hPj4xKSE9MCl7YT1iO2MrPTF9cmV0dXJuIGN9ZnVuY3Rpb24gYm5CaXRMZW5ndGgoKXtpZih0aGlzLnQ8PTApe3JldHVybiAwfXJldHVybiB0aGlzLkRCKih0aGlzLnQtMSkrbmJpdHModGhpc1t0aGlzLnQtMV1eKHRoaXMucyZ0aGlzLkRNKSl9ZnVuY3Rpb24gYm5wRExTaGlmdFRvKGMsYil7dmFyIGE7Zm9yKGE9dGhpcy50LTE7YT49MDstLWEpe2JbYStjXT10aGlzW2FdfWZvcihhPWMtMTthPj0wOy0tYSl7YlthXT0wfWIudD10aGlzLnQrYztiLnM9dGhpcy5zfWZ1bmN0aW9uIGJucERSU2hpZnRUbyhjLGIpe2Zvcih2YXIgYT1jO2E8dGhpcy50OysrYSl7YlthLWNdPXRoaXNbYV19Yi50PU1hdGgubWF4KHRoaXMudC1jLDApO2Iucz10aGlzLnN9ZnVuY3Rpb24gYm5wTFNoaWZ0VG8oaixlKXt2YXIgYj1qJXRoaXMuREI7dmFyIGE9dGhpcy5EQi1iO3ZhciBnPSgxPDxhKS0xO3ZhciBmPU1hdGguZmxvb3Ioai90aGlzLkRCKSxoPSh0aGlzLnM8PGIpJnRoaXMuRE0sZDtmb3IoZD10aGlzLnQtMTtkPj0wOy0tZCl7ZVtkK2YrMV09KHRoaXNbZF0+PmEpfGg7aD0odGhpc1tkXSZnKTw8Yn1mb3IoZD1mLTE7ZD49MDstLWQpe2VbZF09MH1lW2ZdPWg7ZS50PXRoaXMudCtmKzE7ZS5zPXRoaXMucztlLmNsYW1wKCl9ZnVuY3Rpb24gYm5wUlNoaWZ0VG8oZyxkKXtkLnM9dGhpcy5zO3ZhciBlPU1hdGguZmxvb3IoZy90aGlzLkRCKTtpZihlPj10aGlzLnQpe2QudD0wO3JldHVybn12YXIgYj1nJXRoaXMuREI7dmFyIGE9dGhpcy5EQi1iO3ZhciBmPSgxPDxiKS0xO2RbMF09dGhpc1tlXT4+Yjtmb3IodmFyIGM9ZSsxO2M8dGhpcy50OysrYyl7ZFtjLWUtMV18PSh0aGlzW2NdJmYpPDxhO2RbYy1lXT10aGlzW2NdPj5ifWlmKGI+MCl7ZFt0aGlzLnQtZS0xXXw9KHRoaXMucyZmKTw8YX1kLnQ9dGhpcy50LWU7ZC5jbGFtcCgpfWZ1bmN0aW9uIGJucFN1YlRvKGQsZil7dmFyIGU9MCxnPTAsYj1NYXRoLm1pbihkLnQsdGhpcy50KTt3aGlsZShlPGIpe2crPXRoaXNbZV0tZFtlXTtmW2UrK109ZyZ0aGlzLkRNO2c+Pj10aGlzLkRCfWlmKGQudDx0aGlzLnQpe2ctPWQuczt3aGlsZShlPHRoaXMudCl7Zys9dGhpc1tlXTtmW2UrK109ZyZ0aGlzLkRNO2c+Pj10aGlzLkRCfWcrPXRoaXMuc31lbHNle2crPXRoaXMuczt3aGlsZShlPGQudCl7Zy09ZFtlXTtmW2UrK109ZyZ0aGlzLkRNO2c+Pj10aGlzLkRCfWctPWQuc31mLnM9KGc8MCk/LTE6MDtpZihnPC0xKXtmW2UrK109dGhpcy5EVitnfWVsc2V7aWYoZz4wKXtmW2UrK109Z319Zi50PWU7Zi5jbGFtcCgpfWZ1bmN0aW9uIGJucE11bHRpcGx5VG8oYyxlKXt2YXIgYj10aGlzLmFicygpLGY9Yy5hYnMoKTt2YXIgZD1iLnQ7ZS50PWQrZi50O3doaWxlKC0tZD49MCl7ZVtkXT0wfWZvcihkPTA7ZDxmLnQ7KytkKXtlW2QrYi50XT1iLmFtKDAsZltkXSxlLGQsMCxiLnQpfWUucz0wO2UuY2xhbXAoKTtpZih0aGlzLnMhPWMucyl7QmlnSW50ZWdlci5aRVJPLnN1YlRvKGUsZSl9fWZ1bmN0aW9uIGJucFNxdWFyZVRvKGQpe3ZhciBhPXRoaXMuYWJzKCk7dmFyIGI9ZC50PTIqYS50O3doaWxlKC0tYj49MCl7ZFtiXT0wfWZvcihiPTA7YjxhLnQtMTsrK2Ipe3ZhciBlPWEuYW0oYixhW2JdLGQsMipiLDAsMSk7aWYoKGRbYithLnRdKz1hLmFtKGIrMSwyKmFbYl0sZCwyKmIrMSxlLGEudC1iLTEpKT49YS5EVil7ZFtiK2EudF0tPWEuRFY7ZFtiK2EudCsxXT0xfX1pZihkLnQ+MCl7ZFtkLnQtMV0rPWEuYW0oYixhW2JdLGQsMipiLDAsMSl9ZC5zPTA7ZC5jbGFtcCgpfWZ1bmN0aW9uIGJucERpdlJlbVRvKG4saCxnKXt2YXIgdz1uLmFicygpO2lmKHcudDw9MCl7cmV0dXJufXZhciBrPXRoaXMuYWJzKCk7aWYoay50PHcudCl7aWYoaCE9bnVsbCl7aC5mcm9tSW50KDApfWlmKGchPW51bGwpe3RoaXMuY29weVRvKGcpfXJldHVybn1pZihnPT1udWxsKXtnPW5iaSgpfXZhciBkPW5iaSgpLGE9dGhpcy5zLGw9bi5zO3ZhciB2PXRoaXMuREItbmJpdHMod1t3LnQtMV0pO2lmKHY+MCl7dy5sU2hpZnRUbyh2LGQpO2subFNoaWZ0VG8odixnKX1lbHNle3cuY29weVRvKGQpO2suY29weVRvKGcpfXZhciBwPWQudDt2YXIgYj1kW3AtMV07aWYoYj09MCl7cmV0dXJufXZhciBvPWIqKDE8PHRoaXMuRjEpKygocD4xKT9kW3AtMl0+PnRoaXMuRjI6MCk7dmFyIEE9dGhpcy5GVi9vLHo9KDE8PHRoaXMuRjEpL28seD0xPDx0aGlzLkYyO3ZhciB1PWcudCxzPXUtcCxmPShoPT1udWxsKT9uYmkoKTpoO2QuZGxTaGlmdFRvKHMsZik7aWYoZy5jb21wYXJlVG8oZik+PTApe2dbZy50KytdPTE7Zy5zdWJUbyhmLGcpfUJpZ0ludGVnZXIuT05FLmRsU2hpZnRUbyhwLGYpO2Yuc3ViVG8oZCxkKTt3aGlsZShkLnQ8cCl7ZFtkLnQrK109MH13aGlsZSgtLXM+PTApe3ZhciBjPShnWy0tdV09PWIpP3RoaXMuRE06TWF0aC5mbG9vcihnW3VdKkErKGdbdS0xXSt4KSp6KTtpZigoZ1t1XSs9ZC5hbSgwLGMsZyxzLDAscCkpPGMpe2QuZGxTaGlmdFRvKHMsZik7Zy5zdWJUbyhmLGcpO3doaWxlKGdbdV08LS1jKXtnLnN1YlRvKGYsZyl9fX1pZihoIT1udWxsKXtnLmRyU2hpZnRUbyhwLGgpO2lmKGEhPWwpe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyhoLGgpfX1nLnQ9cDtnLmNsYW1wKCk7aWYodj4wKXtnLnJTaGlmdFRvKHYsZyl9aWYoYTwwKXtCaWdJbnRlZ2VyLlpFUk8uc3ViVG8oZyxnKX19ZnVuY3Rpb24gYm5Nb2QoYil7dmFyIGM9bmJpKCk7dGhpcy5hYnMoKS5kaXZSZW1UbyhiLG51bGwsYyk7aWYodGhpcy5zPDAmJmMuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTyk+MCl7Yi5zdWJUbyhjLGMpfXJldHVybiBjfWZ1bmN0aW9uIENsYXNzaWMoYSl7dGhpcy5tPWF9ZnVuY3Rpb24gY0NvbnZlcnQoYSl7aWYoYS5zPDB8fGEuY29tcGFyZVRvKHRoaXMubSk+PTApe3JldHVybiBhLm1vZCh0aGlzLm0pfWVsc2V7cmV0dXJuIGF9fWZ1bmN0aW9uIGNSZXZlcnQoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gY1JlZHVjZShhKXthLmRpdlJlbVRvKHRoaXMubSxudWxsLGEpfWZ1bmN0aW9uIGNNdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYik7dGhpcy5yZWR1Y2UoYil9ZnVuY3Rpb24gY1NxclRvKGEsYil7YS5zcXVhcmVUbyhiKTt0aGlzLnJlZHVjZShiKX1DbGFzc2ljLnByb3RvdHlwZS5jb252ZXJ0PWNDb252ZXJ0O0NsYXNzaWMucHJvdG90eXBlLnJldmVydD1jUmV2ZXJ0O0NsYXNzaWMucHJvdG90eXBlLnJlZHVjZT1jUmVkdWNlO0NsYXNzaWMucHJvdG90eXBlLm11bFRvPWNNdWxUbztDbGFzc2ljLnByb3RvdHlwZS5zcXJUbz1jU3FyVG87ZnVuY3Rpb24gYm5wSW52RGlnaXQoKXtpZih0aGlzLnQ8MSl7cmV0dXJuIDB9dmFyIGE9dGhpc1swXTtpZigoYSYxKT09MCl7cmV0dXJuIDB9dmFyIGI9YSYzO2I9KGIqKDItKGEmMTUpKmIpKSYxNTtiPShiKigyLShhJjI1NSkqYikpJjI1NTtiPShiKigyLSgoKGEmNjU1MzUpKmIpJjY1NTM1KSkpJjY1NTM1O2I9KGIqKDItYSpiJXRoaXMuRFYpKSV0aGlzLkRWO3JldHVybihiPjApP3RoaXMuRFYtYjotYn1mdW5jdGlvbiBNb250Z29tZXJ5KGEpe3RoaXMubT1hO3RoaXMubXA9YS5pbnZEaWdpdCgpO3RoaXMubXBsPXRoaXMubXAmMzI3Njc7dGhpcy5tcGg9dGhpcy5tcD4+MTU7dGhpcy51bT0oMTw8KGEuREItMTUpKS0xO3RoaXMubXQyPTIqYS50fWZ1bmN0aW9uIG1vbnRDb252ZXJ0KGEpe3ZhciBiPW5iaSgpO2EuYWJzKCkuZGxTaGlmdFRvKHRoaXMubS50LGIpO2IuZGl2UmVtVG8odGhpcy5tLG51bGwsYik7aWYoYS5zPDAmJmIuY29tcGFyZVRvKEJpZ0ludGVnZXIuWkVSTyk+MCl7dGhpcy5tLnN1YlRvKGIsYil9cmV0dXJuIGJ9ZnVuY3Rpb24gbW9udFJldmVydChhKXt2YXIgYj1uYmkoKTthLmNvcHlUbyhiKTt0aGlzLnJlZHVjZShiKTtyZXR1cm4gYn1mdW5jdGlvbiBtb250UmVkdWNlKGEpe3doaWxlKGEudDw9dGhpcy5tdDIpe2FbYS50KytdPTB9Zm9yKHZhciBjPTA7Yzx0aGlzLm0udDsrK2Mpe3ZhciBiPWFbY10mMzI3Njc7dmFyIGQ9KGIqdGhpcy5tcGwrKCgoYip0aGlzLm1waCsoYVtjXT4+MTUpKnRoaXMubXBsKSZ0aGlzLnVtKTw8MTUpKSZhLkRNO2I9Yyt0aGlzLm0udDthW2JdKz10aGlzLm0uYW0oMCxkLGEsYywwLHRoaXMubS50KTt3aGlsZShhW2JdPj1hLkRWKXthW2JdLT1hLkRWO2FbKytiXSsrfX1hLmNsYW1wKCk7YS5kclNoaWZ0VG8odGhpcy5tLnQsYSk7aWYoYS5jb21wYXJlVG8odGhpcy5tKT49MCl7YS5zdWJUbyh0aGlzLm0sYSl9fWZ1bmN0aW9uIG1vbnRTcXJUbyhhLGIpe2Euc3F1YXJlVG8oYik7dGhpcy5yZWR1Y2UoYil9ZnVuY3Rpb24gbW9udE11bFRvKGEsYyxiKXthLm11bHRpcGx5VG8oYyxiKTt0aGlzLnJlZHVjZShiKX1Nb250Z29tZXJ5LnByb3RvdHlwZS5jb252ZXJ0PW1vbnRDb252ZXJ0O01vbnRnb21lcnkucHJvdG90eXBlLnJldmVydD1tb250UmV2ZXJ0O01vbnRnb21lcnkucHJvdG90eXBlLnJlZHVjZT1tb250UmVkdWNlO01vbnRnb21lcnkucHJvdG90eXBlLm11bFRvPW1vbnRNdWxUbztNb250Z29tZXJ5LnByb3RvdHlwZS5zcXJUbz1tb250U3FyVG87ZnVuY3Rpb24gYm5wSXNFdmVuKCl7cmV0dXJuKCh0aGlzLnQ+MCk/KHRoaXNbMF0mMSk6dGhpcy5zKT09MH1mdW5jdGlvbiBibnBFeHAoaCxqKXtpZihoPjQyOTQ5NjcyOTV8fGg8MSl7cmV0dXJuIEJpZ0ludGVnZXIuT05FfXZhciBmPW5iaSgpLGE9bmJpKCksZD1qLmNvbnZlcnQodGhpcyksYz1uYml0cyhoKS0xO2QuY29weVRvKGYpO3doaWxlKC0tYz49MCl7ai5zcXJUbyhmLGEpO2lmKChoJigxPDxjKSk+MCl7ai5tdWxUbyhhLGQsZil9ZWxzZXt2YXIgYj1mO2Y9YTthPWJ9fXJldHVybiBqLnJldmVydChmKX1mdW5jdGlvbiBibk1vZFBvd0ludChiLGEpe3ZhciBjO2lmKGI8MjU2fHxhLmlzRXZlbigpKXtjPW5ldyBDbGFzc2ljKGEpfWVsc2V7Yz1uZXcgTW9udGdvbWVyeShhKX1yZXR1cm4gdGhpcy5leHAoYixjKX1CaWdJbnRlZ2VyLnByb3RvdHlwZS5jb3B5VG89Ym5wQ29weVRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmZyb21JbnQ9Ym5wRnJvbUludDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mcm9tU3RyaW5nPWJucEZyb21TdHJpbmc7QmlnSW50ZWdlci5wcm90b3R5cGUuY2xhbXA9Ym5wQ2xhbXA7QmlnSW50ZWdlci5wcm90b3R5cGUuZGxTaGlmdFRvPWJucERMU2hpZnRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5kclNoaWZ0VG89Ym5wRFJTaGlmdFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLmxTaGlmdFRvPWJucExTaGlmdFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLnJTaGlmdFRvPWJucFJTaGlmdFRvO0JpZ0ludGVnZXIucHJvdG90eXBlLnN1YlRvPWJucFN1YlRvO0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VG89Ym5wTXVsdGlwbHlUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmVUbz1ibnBTcXVhcmVUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5kaXZSZW1Ubz1ibnBEaXZSZW1UbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5pbnZEaWdpdD1ibnBJbnZEaWdpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5pc0V2ZW49Ym5wSXNFdmVuO0JpZ0ludGVnZXIucHJvdG90eXBlLmV4cD1ibnBFeHA7QmlnSW50ZWdlci5wcm90b3R5cGUudG9TdHJpbmc9Ym5Ub1N0cmluZztCaWdJbnRlZ2VyLnByb3RvdHlwZS5uZWdhdGU9Ym5OZWdhdGU7QmlnSW50ZWdlci5wcm90b3R5cGUuYWJzPWJuQWJzO0JpZ0ludGVnZXIucHJvdG90eXBlLmNvbXBhcmVUbz1ibkNvbXBhcmVUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5iaXRMZW5ndGg9Ym5CaXRMZW5ndGg7QmlnSW50ZWdlci5wcm90b3R5cGUubW9kPWJuTW9kO0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvd0ludD1ibk1vZFBvd0ludDtCaWdJbnRlZ2VyLlpFUk89bmJ2KDApO0JpZ0ludGVnZXIuT05FPW5idigxKTtcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG5mdW5jdGlvbiBibkNsb25lKCl7dmFyIGE9bmJpKCk7dGhpcy5jb3B5VG8oYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYm5JbnRWYWx1ZSgpe2lmKHRoaXMuczwwKXtpZih0aGlzLnQ9PTEpe3JldHVybiB0aGlzWzBdLXRoaXMuRFZ9ZWxzZXtpZih0aGlzLnQ9PTApe3JldHVybiAtMX19fWVsc2V7aWYodGhpcy50PT0xKXtyZXR1cm4gdGhpc1swXX1lbHNle2lmKHRoaXMudD09MCl7cmV0dXJuIDB9fX1yZXR1cm4oKHRoaXNbMV0mKCgxPDwoMzItdGhpcy5EQikpLTEpKTw8dGhpcy5EQil8dGhpc1swXX1mdW5jdGlvbiBibkJ5dGVWYWx1ZSgpe3JldHVybih0aGlzLnQ9PTApP3RoaXMuczoodGhpc1swXTw8MjQpPj4yNH1mdW5jdGlvbiBiblNob3J0VmFsdWUoKXtyZXR1cm4odGhpcy50PT0wKT90aGlzLnM6KHRoaXNbMF08PDE2KT4+MTZ9ZnVuY3Rpb24gYm5wQ2h1bmtTaXplKGEpe3JldHVybiBNYXRoLmZsb29yKE1hdGguTE4yKnRoaXMuREIvTWF0aC5sb2coYSkpfWZ1bmN0aW9uIGJuU2lnTnVtKCl7aWYodGhpcy5zPDApe3JldHVybiAtMX1lbHNle2lmKHRoaXMudDw9MHx8KHRoaXMudD09MSYmdGhpc1swXTw9MCkpe3JldHVybiAwfWVsc2V7cmV0dXJuIDF9fX1mdW5jdGlvbiBibnBUb1JhZGl4KGMpe2lmKGM9PW51bGwpe2M9MTB9aWYodGhpcy5zaWdudW0oKT09MHx8YzwyfHxjPjM2KXtyZXR1cm5cIjBcIn12YXIgZj10aGlzLmNodW5rU2l6ZShjKTt2YXIgZT1NYXRoLnBvdyhjLGYpO3ZhciBpPW5idihlKSxqPW5iaSgpLGg9bmJpKCksZz1cIlwiO3RoaXMuZGl2UmVtVG8oaSxqLGgpO3doaWxlKGouc2lnbnVtKCk+MCl7Zz0oZStoLmludFZhbHVlKCkpLnRvU3RyaW5nKGMpLnN1YnN0cigxKStnO2ouZGl2UmVtVG8oaSxqLGgpfXJldHVybiBoLmludFZhbHVlKCkudG9TdHJpbmcoYykrZ31mdW5jdGlvbiBibnBGcm9tUmFkaXgobSxoKXt0aGlzLmZyb21JbnQoMCk7aWYoaD09bnVsbCl7aD0xMH12YXIgZj10aGlzLmNodW5rU2l6ZShoKTt2YXIgZz1NYXRoLnBvdyhoLGYpLGU9ZmFsc2UsYT0wLGw9MDtmb3IodmFyIGM9MDtjPG0ubGVuZ3RoOysrYyl7dmFyIGs9aW50QXQobSxjKTtpZihrPDApe2lmKG0uY2hhckF0KGMpPT1cIi1cIiYmdGhpcy5zaWdudW0oKT09MCl7ZT10cnVlfWNvbnRpbnVlfWw9aCpsK2s7aWYoKythPj1mKXt0aGlzLmRNdWx0aXBseShnKTt0aGlzLmRBZGRPZmZzZXQobCwwKTthPTA7bD0wfX1pZihhPjApe3RoaXMuZE11bHRpcGx5KE1hdGgucG93KGgsYSkpO3RoaXMuZEFkZE9mZnNldChsLDApfWlmKGUpe0JpZ0ludGVnZXIuWkVSTy5zdWJUbyh0aGlzLHRoaXMpfX1mdW5jdGlvbiBibnBGcm9tTnVtYmVyKGYsZSxoKXtpZihcIm51bWJlclwiPT10eXBlb2YgZSl7aWYoZjwyKXt0aGlzLmZyb21JbnQoMSl9ZWxzZXt0aGlzLmZyb21OdW1iZXIoZixoKTtpZighdGhpcy50ZXN0Qml0KGYtMSkpe3RoaXMuYml0d2lzZVRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChmLTEpLG9wX29yLHRoaXMpfWlmKHRoaXMuaXNFdmVuKCkpe3RoaXMuZEFkZE9mZnNldCgxLDApfXdoaWxlKCF0aGlzLmlzUHJvYmFibGVQcmltZShlKSl7dGhpcy5kQWRkT2Zmc2V0KDIsMCk7aWYodGhpcy5iaXRMZW5ndGgoKT5mKXt0aGlzLnN1YlRvKEJpZ0ludGVnZXIuT05FLnNoaWZ0TGVmdChmLTEpLHRoaXMpfX19fWVsc2V7dmFyIGQ9bmV3IEFycmF5KCksZz1mJjc7ZC5sZW5ndGg9KGY+PjMpKzE7ZS5uZXh0Qnl0ZXMoZCk7aWYoZz4wKXtkWzBdJj0oKDE8PGcpLTEpfWVsc2V7ZFswXT0wfXRoaXMuZnJvbVN0cmluZyhkLDI1Nil9fWZ1bmN0aW9uIGJuVG9CeXRlQXJyYXkoKXt2YXIgYj10aGlzLnQsYz1uZXcgQXJyYXkoKTtjWzBdPXRoaXMuczt2YXIgZT10aGlzLkRCLShiKnRoaXMuREIpJTgsZixhPTA7aWYoYi0tPjApe2lmKGU8dGhpcy5EQiYmKGY9dGhpc1tiXT4+ZSkhPSh0aGlzLnMmdGhpcy5ETSk+PmUpe2NbYSsrXT1mfCh0aGlzLnM8PCh0aGlzLkRCLWUpKX13aGlsZShiPj0wKXtpZihlPDgpe2Y9KHRoaXNbYl0mKCgxPDxlKS0xKSk8PCg4LWUpO2Z8PXRoaXNbLS1iXT4+KGUrPXRoaXMuREItOCl9ZWxzZXtmPSh0aGlzW2JdPj4oZS09OCkpJjI1NTtpZihlPD0wKXtlKz10aGlzLkRCOy0tYn19aWYoKGYmMTI4KSE9MCl7Znw9LTI1Nn1pZihhPT0wJiYodGhpcy5zJjEyOCkhPShmJjEyOCkpeysrYX1pZihhPjB8fGYhPXRoaXMucyl7Y1thKytdPWZ9fX1yZXR1cm4gY31mdW5jdGlvbiBibkVxdWFscyhiKXtyZXR1cm4odGhpcy5jb21wYXJlVG8oYik9PTApfWZ1bmN0aW9uIGJuTWluKGIpe3JldHVybih0aGlzLmNvbXBhcmVUbyhiKTwwKT90aGlzOmJ9ZnVuY3Rpb24gYm5NYXgoYil7cmV0dXJuKHRoaXMuY29tcGFyZVRvKGIpPjApP3RoaXM6Yn1mdW5jdGlvbiBibnBCaXR3aXNlVG8oYyxoLGUpe3ZhciBkLGcsYj1NYXRoLm1pbihjLnQsdGhpcy50KTtmb3IoZD0wO2Q8YjsrK2Qpe2VbZF09aCh0aGlzW2RdLGNbZF0pfWlmKGMudDx0aGlzLnQpe2c9Yy5zJnRoaXMuRE07Zm9yKGQ9YjtkPHRoaXMudDsrK2Qpe2VbZF09aCh0aGlzW2RdLGcpfWUudD10aGlzLnR9ZWxzZXtnPXRoaXMucyZ0aGlzLkRNO2ZvcihkPWI7ZDxjLnQ7KytkKXtlW2RdPWgoZyxjW2RdKX1lLnQ9Yy50fWUucz1oKHRoaXMucyxjLnMpO2UuY2xhbXAoKX1mdW5jdGlvbiBvcF9hbmQoYSxiKXtyZXR1cm4gYSZifWZ1bmN0aW9uIGJuQW5kKGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3BfYW5kLGMpO3JldHVybiBjfWZ1bmN0aW9uIG9wX29yKGEsYil7cmV0dXJuIGF8Yn1mdW5jdGlvbiBibk9yKGIpe3ZhciBjPW5iaSgpO3RoaXMuYml0d2lzZVRvKGIsb3Bfb3IsYyk7cmV0dXJuIGN9ZnVuY3Rpb24gb3BfeG9yKGEsYil7cmV0dXJuIGFeYn1mdW5jdGlvbiBiblhvcihiKXt2YXIgYz1uYmkoKTt0aGlzLmJpdHdpc2VUbyhiLG9wX3hvcixjKTtyZXR1cm4gY31mdW5jdGlvbiBvcF9hbmRub3QoYSxiKXtyZXR1cm4gYSZ+Yn1mdW5jdGlvbiBibkFuZE5vdChiKXt2YXIgYz1uYmkoKTt0aGlzLmJpdHdpc2VUbyhiLG9wX2FuZG5vdCxjKTtyZXR1cm4gY31mdW5jdGlvbiBibk5vdCgpe3ZhciBiPW5iaSgpO2Zvcih2YXIgYT0wO2E8dGhpcy50OysrYSl7YlthXT10aGlzLkRNJn50aGlzW2FdfWIudD10aGlzLnQ7Yi5zPX50aGlzLnM7cmV0dXJuIGJ9ZnVuY3Rpb24gYm5TaGlmdExlZnQoYil7dmFyIGE9bmJpKCk7aWYoYjwwKXt0aGlzLnJTaGlmdFRvKC1iLGEpfWVsc2V7dGhpcy5sU2hpZnRUbyhiLGEpfXJldHVybiBhfWZ1bmN0aW9uIGJuU2hpZnRSaWdodChiKXt2YXIgYT1uYmkoKTtpZihiPDApe3RoaXMubFNoaWZ0VG8oLWIsYSl9ZWxzZXt0aGlzLnJTaGlmdFRvKGIsYSl9cmV0dXJuIGF9ZnVuY3Rpb24gbGJpdChhKXtpZihhPT0wKXtyZXR1cm4gLTF9dmFyIGI9MDtpZigoYSY2NTUzNSk9PTApe2E+Pj0xNjtiKz0xNn1pZigoYSYyNTUpPT0wKXthPj49ODtiKz04fWlmKChhJjE1KT09MCl7YT4+PTQ7Yis9NH1pZigoYSYzKT09MCl7YT4+PTI7Yis9Mn1pZigoYSYxKT09MCl7KytifXJldHVybiBifWZ1bmN0aW9uIGJuR2V0TG93ZXN0U2V0Qml0KCl7Zm9yKHZhciBhPTA7YTx0aGlzLnQ7KythKXtpZih0aGlzW2FdIT0wKXtyZXR1cm4gYSp0aGlzLkRCK2xiaXQodGhpc1thXSl9fWlmKHRoaXMuczwwKXtyZXR1cm4gdGhpcy50KnRoaXMuREJ9cmV0dXJuIC0xfWZ1bmN0aW9uIGNiaXQoYSl7dmFyIGI9MDt3aGlsZShhIT0wKXthJj1hLTE7KytifXJldHVybiBifWZ1bmN0aW9uIGJuQml0Q291bnQoKXt2YXIgYz0wLGE9dGhpcy5zJnRoaXMuRE07Zm9yKHZhciBiPTA7Yjx0aGlzLnQ7KytiKXtjKz1jYml0KHRoaXNbYl1eYSl9cmV0dXJuIGN9ZnVuY3Rpb24gYm5UZXN0Qml0KGIpe3ZhciBhPU1hdGguZmxvb3IoYi90aGlzLkRCKTtpZihhPj10aGlzLnQpe3JldHVybih0aGlzLnMhPTApfXJldHVybigodGhpc1thXSYoMTw8KGIldGhpcy5EQikpKSE9MCl9ZnVuY3Rpb24gYm5wQ2hhbmdlQml0KGMsYil7dmFyIGE9QmlnSW50ZWdlci5PTkUuc2hpZnRMZWZ0KGMpO3RoaXMuYml0d2lzZVRvKGEsYixhKTtyZXR1cm4gYX1mdW5jdGlvbiBiblNldEJpdChhKXtyZXR1cm4gdGhpcy5jaGFuZ2VCaXQoYSxvcF9vcil9ZnVuY3Rpb24gYm5DbGVhckJpdChhKXtyZXR1cm4gdGhpcy5jaGFuZ2VCaXQoYSxvcF9hbmRub3QpfWZ1bmN0aW9uIGJuRmxpcEJpdChhKXtyZXR1cm4gdGhpcy5jaGFuZ2VCaXQoYSxvcF94b3IpfWZ1bmN0aW9uIGJucEFkZFRvKGQsZil7dmFyIGU9MCxnPTAsYj1NYXRoLm1pbihkLnQsdGhpcy50KTt3aGlsZShlPGIpe2crPXRoaXNbZV0rZFtlXTtmW2UrK109ZyZ0aGlzLkRNO2c+Pj10aGlzLkRCfWlmKGQudDx0aGlzLnQpe2crPWQuczt3aGlsZShlPHRoaXMudCl7Zys9dGhpc1tlXTtmW2UrK109ZyZ0aGlzLkRNO2c+Pj10aGlzLkRCfWcrPXRoaXMuc31lbHNle2crPXRoaXMuczt3aGlsZShlPGQudCl7Zys9ZFtlXTtmW2UrK109ZyZ0aGlzLkRNO2c+Pj10aGlzLkRCfWcrPWQuc31mLnM9KGc8MCk/LTE6MDtpZihnPjApe2ZbZSsrXT1nfWVsc2V7aWYoZzwtMSl7ZltlKytdPXRoaXMuRFYrZ319Zi50PWU7Zi5jbGFtcCgpfWZ1bmN0aW9uIGJuQWRkKGIpe3ZhciBjPW5iaSgpO3RoaXMuYWRkVG8oYixjKTtyZXR1cm4gY31mdW5jdGlvbiBiblN1YnRyYWN0KGIpe3ZhciBjPW5iaSgpO3RoaXMuc3ViVG8oYixjKTtyZXR1cm4gY31mdW5jdGlvbiBibk11bHRpcGx5KGIpe3ZhciBjPW5iaSgpO3RoaXMubXVsdGlwbHlUbyhiLGMpO3JldHVybiBjfWZ1bmN0aW9uIGJuU3F1YXJlKCl7dmFyIGE9bmJpKCk7dGhpcy5zcXVhcmVUbyhhKTtyZXR1cm4gYX1mdW5jdGlvbiBibkRpdmlkZShiKXt2YXIgYz1uYmkoKTt0aGlzLmRpdlJlbVRvKGIsYyxudWxsKTtyZXR1cm4gY31mdW5jdGlvbiBiblJlbWFpbmRlcihiKXt2YXIgYz1uYmkoKTt0aGlzLmRpdlJlbVRvKGIsbnVsbCxjKTtyZXR1cm4gY31mdW5jdGlvbiBibkRpdmlkZUFuZFJlbWFpbmRlcihiKXt2YXIgZD1uYmkoKSxjPW5iaSgpO3RoaXMuZGl2UmVtVG8oYixkLGMpO3JldHVybiBuZXcgQXJyYXkoZCxjKX1mdW5jdGlvbiBibnBETXVsdGlwbHkoYSl7dGhpc1t0aGlzLnRdPXRoaXMuYW0oMCxhLTEsdGhpcywwLDAsdGhpcy50KTsrK3RoaXMudDt0aGlzLmNsYW1wKCl9ZnVuY3Rpb24gYm5wREFkZE9mZnNldChiLGEpe2lmKGI9PTApe3JldHVybn13aGlsZSh0aGlzLnQ8PWEpe3RoaXNbdGhpcy50KytdPTB9dGhpc1thXSs9Yjt3aGlsZSh0aGlzW2FdPj10aGlzLkRWKXt0aGlzW2FdLT10aGlzLkRWO2lmKCsrYT49dGhpcy50KXt0aGlzW3RoaXMudCsrXT0wfSsrdGhpc1thXX19ZnVuY3Rpb24gTnVsbEV4cCgpe31mdW5jdGlvbiBuTm9wKGEpe3JldHVybiBhfWZ1bmN0aW9uIG5NdWxUbyhhLGMsYil7YS5tdWx0aXBseVRvKGMsYil9ZnVuY3Rpb24gblNxclRvKGEsYil7YS5zcXVhcmVUbyhiKX1OdWxsRXhwLnByb3RvdHlwZS5jb252ZXJ0PW5Ob3A7TnVsbEV4cC5wcm90b3R5cGUucmV2ZXJ0PW5Ob3A7TnVsbEV4cC5wcm90b3R5cGUubXVsVG89bk11bFRvO051bGxFeHAucHJvdG90eXBlLnNxclRvPW5TcXJUbztmdW5jdGlvbiBiblBvdyhhKXtyZXR1cm4gdGhpcy5leHAoYSxuZXcgTnVsbEV4cCgpKX1mdW5jdGlvbiBibnBNdWx0aXBseUxvd2VyVG8oYixmLGUpe3ZhciBkPU1hdGgubWluKHRoaXMudCtiLnQsZik7ZS5zPTA7ZS50PWQ7d2hpbGUoZD4wKXtlWy0tZF09MH12YXIgYztmb3IoYz1lLnQtdGhpcy50O2Q8YzsrK2Qpe2VbZCt0aGlzLnRdPXRoaXMuYW0oMCxiW2RdLGUsZCwwLHRoaXMudCl9Zm9yKGM9TWF0aC5taW4oYi50LGYpO2Q8YzsrK2Qpe3RoaXMuYW0oMCxiW2RdLGUsZCwwLGYtZCl9ZS5jbGFtcCgpfWZ1bmN0aW9uIGJucE11bHRpcGx5VXBwZXJUbyhiLGUsZCl7LS1lO3ZhciBjPWQudD10aGlzLnQrYi50LWU7ZC5zPTA7d2hpbGUoLS1jPj0wKXtkW2NdPTB9Zm9yKGM9TWF0aC5tYXgoZS10aGlzLnQsMCk7YzxiLnQ7KytjKXtkW3RoaXMudCtjLWVdPXRoaXMuYW0oZS1jLGJbY10sZCwwLDAsdGhpcy50K2MtZSl9ZC5jbGFtcCgpO2QuZHJTaGlmdFRvKDEsZCl9ZnVuY3Rpb24gQmFycmV0dChhKXt0aGlzLnIyPW5iaSgpO3RoaXMucTM9bmJpKCk7QmlnSW50ZWdlci5PTkUuZGxTaGlmdFRvKDIqYS50LHRoaXMucjIpO3RoaXMubXU9dGhpcy5yMi5kaXZpZGUoYSk7dGhpcy5tPWF9ZnVuY3Rpb24gYmFycmV0dENvbnZlcnQoYSl7aWYoYS5zPDB8fGEudD4yKnRoaXMubS50KXtyZXR1cm4gYS5tb2QodGhpcy5tKX1lbHNle2lmKGEuY29tcGFyZVRvKHRoaXMubSk8MCl7cmV0dXJuIGF9ZWxzZXt2YXIgYj1uYmkoKTthLmNvcHlUbyhiKTt0aGlzLnJlZHVjZShiKTtyZXR1cm4gYn19fWZ1bmN0aW9uIGJhcnJldHRSZXZlcnQoYSl7cmV0dXJuIGF9ZnVuY3Rpb24gYmFycmV0dFJlZHVjZShhKXthLmRyU2hpZnRUbyh0aGlzLm0udC0xLHRoaXMucjIpO2lmKGEudD50aGlzLm0udCsxKXthLnQ9dGhpcy5tLnQrMTthLmNsYW1wKCl9dGhpcy5tdS5tdWx0aXBseVVwcGVyVG8odGhpcy5yMix0aGlzLm0udCsxLHRoaXMucTMpO3RoaXMubS5tdWx0aXBseUxvd2VyVG8odGhpcy5xMyx0aGlzLm0udCsxLHRoaXMucjIpO3doaWxlKGEuY29tcGFyZVRvKHRoaXMucjIpPDApe2EuZEFkZE9mZnNldCgxLHRoaXMubS50KzEpfWEuc3ViVG8odGhpcy5yMixhKTt3aGlsZShhLmNvbXBhcmVUbyh0aGlzLm0pPj0wKXthLnN1YlRvKHRoaXMubSxhKX19ZnVuY3Rpb24gYmFycmV0dFNxclRvKGEsYil7YS5zcXVhcmVUbyhiKTt0aGlzLnJlZHVjZShiKX1mdW5jdGlvbiBiYXJyZXR0TXVsVG8oYSxjLGIpe2EubXVsdGlwbHlUbyhjLGIpO3RoaXMucmVkdWNlKGIpfUJhcnJldHQucHJvdG90eXBlLmNvbnZlcnQ9YmFycmV0dENvbnZlcnQ7QmFycmV0dC5wcm90b3R5cGUucmV2ZXJ0PWJhcnJldHRSZXZlcnQ7QmFycmV0dC5wcm90b3R5cGUucmVkdWNlPWJhcnJldHRSZWR1Y2U7QmFycmV0dC5wcm90b3R5cGUubXVsVG89YmFycmV0dE11bFRvO0JhcnJldHQucHJvdG90eXBlLnNxclRvPWJhcnJldHRTcXJUbztmdW5jdGlvbiBibk1vZFBvdyhxLGYpe3ZhciBvPXEuYml0TGVuZ3RoKCksaCxiPW5idigxKSx2O2lmKG88PTApe3JldHVybiBifWVsc2V7aWYobzwxOCl7aD0xfWVsc2V7aWYobzw0OCl7aD0zfWVsc2V7aWYobzwxNDQpe2g9NH1lbHNle2lmKG88NzY4KXtoPTV9ZWxzZXtoPTZ9fX19fWlmKG88OCl7dj1uZXcgQ2xhc3NpYyhmKX1lbHNle2lmKGYuaXNFdmVuKCkpe3Y9bmV3IEJhcnJldHQoZil9ZWxzZXt2PW5ldyBNb250Z29tZXJ5KGYpfX12YXIgcD1uZXcgQXJyYXkoKSxkPTMscz1oLTEsYT0oMTw8aCktMTtwWzFdPXYuY29udmVydCh0aGlzKTtpZihoPjEpe3ZhciBBPW5iaSgpO3Yuc3FyVG8ocFsxXSxBKTt3aGlsZShkPD1hKXtwW2RdPW5iaSgpO3YubXVsVG8oQSxwW2QtMl0scFtkXSk7ZCs9Mn19dmFyIGw9cS50LTEseCx1PXRydWUsYz1uYmkoKSx5O289bmJpdHMocVtsXSktMTt3aGlsZShsPj0wKXtpZihvPj1zKXt4PShxW2xdPj4oby1zKSkmYX1lbHNle3g9KHFbbF0mKCgxPDwobysxKSktMSkpPDwocy1vKTtpZihsPjApe3h8PXFbbC0xXT4+KHRoaXMuREIrby1zKX19ZD1oO3doaWxlKCh4JjEpPT0wKXt4Pj49MTstLWR9aWYoKG8tPWQpPDApe28rPXRoaXMuREI7LS1sfWlmKHUpe3BbeF0uY29weVRvKGIpO3U9ZmFsc2V9ZWxzZXt3aGlsZShkPjEpe3Yuc3FyVG8oYixjKTt2LnNxclRvKGMsYik7ZC09Mn1pZihkPjApe3Yuc3FyVG8oYixjKX1lbHNle3k9YjtiPWM7Yz15fXYubXVsVG8oYyxwW3hdLGIpfXdoaWxlKGw+PTAmJihxW2xdJigxPDxvKSk9PTApe3Yuc3FyVG8oYixjKTt5PWI7Yj1jO2M9eTtpZigtLW88MCl7bz10aGlzLkRCLTE7LS1sfX19cmV0dXJuIHYucmV2ZXJ0KGIpfWZ1bmN0aW9uIGJuR0NEKGMpe3ZhciBiPSh0aGlzLnM8MCk/dGhpcy5uZWdhdGUoKTp0aGlzLmNsb25lKCk7dmFyIGg9KGMuczwwKT9jLm5lZ2F0ZSgpOmMuY2xvbmUoKTtpZihiLmNvbXBhcmVUbyhoKTwwKXt2YXIgZT1iO2I9aDtoPWV9dmFyIGQ9Yi5nZXRMb3dlc3RTZXRCaXQoKSxmPWguZ2V0TG93ZXN0U2V0Qml0KCk7aWYoZjwwKXtyZXR1cm4gYn1pZihkPGYpe2Y9ZH1pZihmPjApe2IuclNoaWZ0VG8oZixiKTtoLnJTaGlmdFRvKGYsaCl9d2hpbGUoYi5zaWdudW0oKT4wKXtpZigoZD1iLmdldExvd2VzdFNldEJpdCgpKT4wKXtiLnJTaGlmdFRvKGQsYil9aWYoKGQ9aC5nZXRMb3dlc3RTZXRCaXQoKSk+MCl7aC5yU2hpZnRUbyhkLGgpfWlmKGIuY29tcGFyZVRvKGgpPj0wKXtiLnN1YlRvKGgsYik7Yi5yU2hpZnRUbygxLGIpfWVsc2V7aC5zdWJUbyhiLGgpO2guclNoaWZ0VG8oMSxoKX19aWYoZj4wKXtoLmxTaGlmdFRvKGYsaCl9cmV0dXJuIGh9ZnVuY3Rpb24gYm5wTW9kSW50KGUpe2lmKGU8PTApe3JldHVybiAwfXZhciBjPXRoaXMuRFYlZSxiPSh0aGlzLnM8MCk/ZS0xOjA7aWYodGhpcy50PjApe2lmKGM9PTApe2I9dGhpc1swXSVlfWVsc2V7Zm9yKHZhciBhPXRoaXMudC0xO2E+PTA7LS1hKXtiPShjKmIrdGhpc1thXSklZX19fXJldHVybiBifWZ1bmN0aW9uIGJuTW9kSW52ZXJzZShmKXt2YXIgaj1mLmlzRXZlbigpO2lmKCh0aGlzLmlzRXZlbigpJiZqKXx8Zi5zaWdudW0oKT09MCl7cmV0dXJuIEJpZ0ludGVnZXIuWkVST312YXIgaT1mLmNsb25lKCksaD10aGlzLmNsb25lKCk7dmFyIGc9bmJ2KDEpLGU9bmJ2KDApLGw9bmJ2KDApLGs9bmJ2KDEpO3doaWxlKGkuc2lnbnVtKCkhPTApe3doaWxlKGkuaXNFdmVuKCkpe2kuclNoaWZ0VG8oMSxpKTtpZihqKXtpZighZy5pc0V2ZW4oKXx8IWUuaXNFdmVuKCkpe2cuYWRkVG8odGhpcyxnKTtlLnN1YlRvKGYsZSl9Zy5yU2hpZnRUbygxLGcpfWVsc2V7aWYoIWUuaXNFdmVuKCkpe2Uuc3ViVG8oZixlKX19ZS5yU2hpZnRUbygxLGUpfXdoaWxlKGguaXNFdmVuKCkpe2guclNoaWZ0VG8oMSxoKTtpZihqKXtpZighbC5pc0V2ZW4oKXx8IWsuaXNFdmVuKCkpe2wuYWRkVG8odGhpcyxsKTtrLnN1YlRvKGYsayl9bC5yU2hpZnRUbygxLGwpfWVsc2V7aWYoIWsuaXNFdmVuKCkpe2suc3ViVG8oZixrKX19ay5yU2hpZnRUbygxLGspfWlmKGkuY29tcGFyZVRvKGgpPj0wKXtpLnN1YlRvKGgsaSk7aWYoail7Zy5zdWJUbyhsLGcpfWUuc3ViVG8oayxlKX1lbHNle2guc3ViVG8oaSxoKTtpZihqKXtsLnN1YlRvKGcsbCl9ay5zdWJUbyhlLGspfX1pZihoLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSkhPTApe3JldHVybiBCaWdJbnRlZ2VyLlpFUk99aWYoay5jb21wYXJlVG8oZik+PTApe3JldHVybiBrLnN1YnRyYWN0KGYpfWlmKGsuc2lnbnVtKCk8MCl7ay5hZGRUbyhmLGspfWVsc2V7cmV0dXJuIGt9aWYoay5zaWdudW0oKTwwKXtyZXR1cm4gay5hZGQoZil9ZWxzZXtyZXR1cm4ga319dmFyIGxvd3ByaW1lcz1bMiwzLDUsNywxMSwxMywxNywxOSwyMywyOSwzMSwzNyw0MSw0Myw0Nyw1Myw1OSw2MSw2Nyw3MSw3Myw3OSw4Myw4OSw5NywxMDEsMTAzLDEwNywxMDksMTEzLDEyNywxMzEsMTM3LDEzOSwxNDksMTUxLDE1NywxNjMsMTY3LDE3MywxNzksMTgxLDE5MSwxOTMsMTk3LDE5OSwyMTEsMjIzLDIyNywyMjksMjMzLDIzOSwyNDEsMjUxLDI1NywyNjMsMjY5LDI3MSwyNzcsMjgxLDI4MywyOTMsMzA3LDMxMSwzMTMsMzE3LDMzMSwzMzcsMzQ3LDM0OSwzNTMsMzU5LDM2NywzNzMsMzc5LDM4MywzODksMzk3LDQwMSw0MDksNDE5LDQyMSw0MzEsNDMzLDQzOSw0NDMsNDQ5LDQ1Nyw0NjEsNDYzLDQ2Nyw0NzksNDg3LDQ5MSw0OTksNTAzLDUwOSw1MjEsNTIzLDU0MSw1NDcsNTU3LDU2Myw1NjksNTcxLDU3Nyw1ODcsNTkzLDU5OSw2MDEsNjA3LDYxMyw2MTcsNjE5LDYzMSw2NDEsNjQzLDY0Nyw2NTMsNjU5LDY2MSw2NzMsNjc3LDY4Myw2OTEsNzAxLDcwOSw3MTksNzI3LDczMyw3MzksNzQzLDc1MSw3NTcsNzYxLDc2OSw3NzMsNzg3LDc5Nyw4MDksODExLDgyMSw4MjMsODI3LDgyOSw4MzksODUzLDg1Nyw4NTksODYzLDg3Nyw4ODEsODgzLDg4Nyw5MDcsOTExLDkxOSw5MjksOTM3LDk0MSw5NDcsOTUzLDk2Nyw5NzEsOTc3LDk4Myw5OTEsOTk3XTt2YXIgbHBsaW09KDE8PDI2KS9sb3dwcmltZXNbbG93cHJpbWVzLmxlbmd0aC0xXTtmdW5jdGlvbiBibklzUHJvYmFibGVQcmltZShlKXt2YXIgZCxiPXRoaXMuYWJzKCk7aWYoYi50PT0xJiZiWzBdPD1sb3dwcmltZXNbbG93cHJpbWVzLmxlbmd0aC0xXSl7Zm9yKGQ9MDtkPGxvd3ByaW1lcy5sZW5ndGg7KytkKXtpZihiWzBdPT1sb3dwcmltZXNbZF0pe3JldHVybiB0cnVlfX1yZXR1cm4gZmFsc2V9aWYoYi5pc0V2ZW4oKSl7cmV0dXJuIGZhbHNlfWQ9MTt3aGlsZShkPGxvd3ByaW1lcy5sZW5ndGgpe3ZhciBhPWxvd3ByaW1lc1tkXSxjPWQrMTt3aGlsZShjPGxvd3ByaW1lcy5sZW5ndGgmJmE8bHBsaW0pe2EqPWxvd3ByaW1lc1tjKytdfWE9Yi5tb2RJbnQoYSk7d2hpbGUoZDxjKXtpZihhJWxvd3ByaW1lc1tkKytdPT0wKXtyZXR1cm4gZmFsc2V9fX1yZXR1cm4gYi5taWxsZXJSYWJpbihlKX1mdW5jdGlvbiBibnBNaWxsZXJSYWJpbihmKXt2YXIgZz10aGlzLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKTt2YXIgYz1nLmdldExvd2VzdFNldEJpdCgpO2lmKGM8PTApe3JldHVybiBmYWxzZX12YXIgaD1nLnNoaWZ0UmlnaHQoYyk7Zj0oZisxKT4+MTtpZihmPmxvd3ByaW1lcy5sZW5ndGgpe2Y9bG93cHJpbWVzLmxlbmd0aH12YXIgYj1uYmkoKTtmb3IodmFyIGU9MDtlPGY7KytlKXtiLmZyb21JbnQobG93cHJpbWVzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSpsb3dwcmltZXMubGVuZ3RoKV0pO3ZhciBsPWIubW9kUG93KGgsdGhpcyk7aWYobC5jb21wYXJlVG8oQmlnSW50ZWdlci5PTkUpIT0wJiZsLmNvbXBhcmVUbyhnKSE9MCl7dmFyIGQ9MTt3aGlsZShkKys8YyYmbC5jb21wYXJlVG8oZykhPTApe2w9bC5tb2RQb3dJbnQoMix0aGlzKTtpZihsLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk9PTApe3JldHVybiBmYWxzZX19aWYobC5jb21wYXJlVG8oZykhPTApe3JldHVybiBmYWxzZX19fXJldHVybiB0cnVlfUJpZ0ludGVnZXIucHJvdG90eXBlLmNodW5rU2l6ZT1ibnBDaHVua1NpemU7QmlnSW50ZWdlci5wcm90b3R5cGUudG9SYWRpeD1ibnBUb1JhZGl4O0JpZ0ludGVnZXIucHJvdG90eXBlLmZyb21SYWRpeD1ibnBGcm9tUmFkaXg7QmlnSW50ZWdlci5wcm90b3R5cGUuZnJvbU51bWJlcj1ibnBGcm9tTnVtYmVyO0JpZ0ludGVnZXIucHJvdG90eXBlLmJpdHdpc2VUbz1ibnBCaXR3aXNlVG87QmlnSW50ZWdlci5wcm90b3R5cGUuY2hhbmdlQml0PWJucENoYW5nZUJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGRUbz1ibnBBZGRUbztCaWdJbnRlZ2VyLnByb3RvdHlwZS5kTXVsdGlwbHk9Ym5wRE11bHRpcGx5O0JpZ0ludGVnZXIucHJvdG90eXBlLmRBZGRPZmZzZXQ9Ym5wREFkZE9mZnNldDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseUxvd2VyVG89Ym5wTXVsdGlwbHlMb3dlclRvO0JpZ0ludGVnZXIucHJvdG90eXBlLm11bHRpcGx5VXBwZXJUbz1ibnBNdWx0aXBseVVwcGVyVG87QmlnSW50ZWdlci5wcm90b3R5cGUubW9kSW50PWJucE1vZEludDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5taWxsZXJSYWJpbj1ibnBNaWxsZXJSYWJpbjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5jbG9uZT1ibkNsb25lO0JpZ0ludGVnZXIucHJvdG90eXBlLmludFZhbHVlPWJuSW50VmFsdWU7QmlnSW50ZWdlci5wcm90b3R5cGUuYnl0ZVZhbHVlPWJuQnl0ZVZhbHVlO0JpZ0ludGVnZXIucHJvdG90eXBlLnNob3J0VmFsdWU9Ym5TaG9ydFZhbHVlO0JpZ0ludGVnZXIucHJvdG90eXBlLnNpZ251bT1iblNpZ051bTtCaWdJbnRlZ2VyLnByb3RvdHlwZS50b0J5dGVBcnJheT1iblRvQnl0ZUFycmF5O0JpZ0ludGVnZXIucHJvdG90eXBlLmVxdWFscz1ibkVxdWFscztCaWdJbnRlZ2VyLnByb3RvdHlwZS5taW49Ym5NaW47QmlnSW50ZWdlci5wcm90b3R5cGUubWF4PWJuTWF4O0JpZ0ludGVnZXIucHJvdG90eXBlLmFuZD1ibkFuZDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5vcj1ibk9yO0JpZ0ludGVnZXIucHJvdG90eXBlLnhvcj1iblhvcjtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hbmROb3Q9Ym5BbmROb3Q7QmlnSW50ZWdlci5wcm90b3R5cGUubm90PWJuTm90O0JpZ0ludGVnZXIucHJvdG90eXBlLnNoaWZ0TGVmdD1iblNoaWZ0TGVmdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zaGlmdFJpZ2h0PWJuU2hpZnRSaWdodDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5nZXRMb3dlc3RTZXRCaXQ9Ym5HZXRMb3dlc3RTZXRCaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuYml0Q291bnQ9Ym5CaXRDb3VudDtCaWdJbnRlZ2VyLnByb3RvdHlwZS50ZXN0Qml0PWJuVGVzdEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zZXRCaXQ9Ym5TZXRCaXQ7QmlnSW50ZWdlci5wcm90b3R5cGUuY2xlYXJCaXQ9Ym5DbGVhckJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5mbGlwQml0PWJuRmxpcEJpdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5hZGQ9Ym5BZGQ7QmlnSW50ZWdlci5wcm90b3R5cGUuc3VidHJhY3Q9Ym5TdWJ0cmFjdDtCaWdJbnRlZ2VyLnByb3RvdHlwZS5tdWx0aXBseT1ibk11bHRpcGx5O0JpZ0ludGVnZXIucHJvdG90eXBlLmRpdmlkZT1ibkRpdmlkZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5yZW1haW5kZXI9Ym5SZW1haW5kZXI7QmlnSW50ZWdlci5wcm90b3R5cGUuZGl2aWRlQW5kUmVtYWluZGVyPWJuRGl2aWRlQW5kUmVtYWluZGVyO0JpZ0ludGVnZXIucHJvdG90eXBlLm1vZFBvdz1ibk1vZFBvdztCaWdJbnRlZ2VyLnByb3RvdHlwZS5tb2RJbnZlcnNlPWJuTW9kSW52ZXJzZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5wb3c9Ym5Qb3c7QmlnSW50ZWdlci5wcm90b3R5cGUuZ2NkPWJuR0NEO0JpZ0ludGVnZXIucHJvdG90eXBlLmlzUHJvYmFibGVQcmltZT1ibklzUHJvYmFibGVQcmltZTtCaWdJbnRlZ2VyLnByb3RvdHlwZS5zcXVhcmU9Ym5TcXVhcmU7XG4vKiEgKGMpIFRvbSBXdSB8IGh0dHA6Ly93d3ctY3Mtc3R1ZGVudHMuc3RhbmZvcmQuZWR1L350ancvanNibi9cbiAqL1xuZnVuY3Rpb24gQXJjZm91cigpe3RoaXMuaT0wO3RoaXMuaj0wO3RoaXMuUz1uZXcgQXJyYXkoKX1mdW5jdGlvbiBBUkM0aW5pdChkKXt2YXIgYyxhLGI7Zm9yKGM9MDtjPDI1NjsrK2Mpe3RoaXMuU1tjXT1jfWE9MDtmb3IoYz0wO2M8MjU2OysrYyl7YT0oYSt0aGlzLlNbY10rZFtjJWQubGVuZ3RoXSkmMjU1O2I9dGhpcy5TW2NdO3RoaXMuU1tjXT10aGlzLlNbYV07dGhpcy5TW2FdPWJ9dGhpcy5pPTA7dGhpcy5qPTB9ZnVuY3Rpb24gQVJDNG5leHQoKXt2YXIgYTt0aGlzLmk9KHRoaXMuaSsxKSYyNTU7dGhpcy5qPSh0aGlzLmordGhpcy5TW3RoaXMuaV0pJjI1NTthPXRoaXMuU1t0aGlzLmldO3RoaXMuU1t0aGlzLmldPXRoaXMuU1t0aGlzLmpdO3RoaXMuU1t0aGlzLmpdPWE7cmV0dXJuIHRoaXMuU1soYSt0aGlzLlNbdGhpcy5pXSkmMjU1XX1BcmNmb3VyLnByb3RvdHlwZS5pbml0PUFSQzRpbml0O0FyY2ZvdXIucHJvdG90eXBlLm5leHQ9QVJDNG5leHQ7ZnVuY3Rpb24gcHJuZ19uZXdzdGF0ZSgpe3JldHVybiBuZXcgQXJjZm91cigpfXZhciBybmdfcHNpemU9MjU2O1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbnZhciBybmdfc3RhdGU7dmFyIHJuZ19wb29sO3ZhciBybmdfcHB0cjtmdW5jdGlvbiBybmdfc2VlZF9pbnQoYSl7cm5nX3Bvb2xbcm5nX3BwdHIrK11ePWEmMjU1O3JuZ19wb29sW3JuZ19wcHRyKytdXj0oYT4+OCkmMjU1O3JuZ19wb29sW3JuZ19wcHRyKytdXj0oYT4+MTYpJjI1NTtybmdfcG9vbFtybmdfcHB0cisrXV49KGE+PjI0KSYyNTU7aWYocm5nX3BwdHI+PXJuZ19wc2l6ZSl7cm5nX3BwdHItPXJuZ19wc2l6ZX19ZnVuY3Rpb24gcm5nX3NlZWRfdGltZSgpe3JuZ19zZWVkX2ludChuZXcgRGF0ZSgpLmdldFRpbWUoKSl9aWYocm5nX3Bvb2w9PW51bGwpe3JuZ19wb29sPW5ldyBBcnJheSgpO3JuZ19wcHRyPTA7dmFyIHQ7aWYod2luZG93IT09dW5kZWZpbmVkJiYod2luZG93LmNyeXB0byE9PXVuZGVmaW5lZHx8d2luZG93Lm1zQ3J5cHRvIT09dW5kZWZpbmVkKSl7dmFyIGNyeXB0bz13aW5kb3cuY3J5cHRvfHx3aW5kb3cubXNDcnlwdG87aWYoY3J5cHRvLmdldFJhbmRvbVZhbHVlcyl7dmFyIHVhPW5ldyBVaW50OEFycmF5KDMyKTtjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKHVhKTtmb3IodD0wO3Q8MzI7Kyt0KXtybmdfcG9vbFtybmdfcHB0cisrXT11YVt0XX19ZWxzZXtpZihuYXZpZ2F0b3IuYXBwTmFtZT09XCJOZXRzY2FwZVwiJiZuYXZpZ2F0b3IuYXBwVmVyc2lvbjxcIjVcIil7dmFyIHo9d2luZG93LmNyeXB0by5yYW5kb20oMzIpO2Zvcih0PTA7dDx6Lmxlbmd0aDsrK3Qpe3JuZ19wb29sW3JuZ19wcHRyKytdPXouY2hhckNvZGVBdCh0KSYyNTV9fX19d2hpbGUocm5nX3BwdHI8cm5nX3BzaXplKXt0PU1hdGguZmxvb3IoNjU1MzYqTWF0aC5yYW5kb20oKSk7cm5nX3Bvb2xbcm5nX3BwdHIrK109dD4+Pjg7cm5nX3Bvb2xbcm5nX3BwdHIrK109dCYyNTV9cm5nX3BwdHI9MDtybmdfc2VlZF90aW1lKCl9ZnVuY3Rpb24gcm5nX2dldF9ieXRlKCl7aWYocm5nX3N0YXRlPT1udWxsKXtybmdfc2VlZF90aW1lKCk7cm5nX3N0YXRlPXBybmdfbmV3c3RhdGUoKTtybmdfc3RhdGUuaW5pdChybmdfcG9vbCk7Zm9yKHJuZ19wcHRyPTA7cm5nX3BwdHI8cm5nX3Bvb2wubGVuZ3RoOysrcm5nX3BwdHIpe3JuZ19wb29sW3JuZ19wcHRyXT0wfXJuZ19wcHRyPTB9cmV0dXJuIHJuZ19zdGF0ZS5uZXh0KCl9ZnVuY3Rpb24gcm5nX2dldF9ieXRlcyhiKXt2YXIgYTtmb3IoYT0wO2E8Yi5sZW5ndGg7KythKXtiW2FdPXJuZ19nZXRfYnl0ZSgpfX1mdW5jdGlvbiBTZWN1cmVSYW5kb20oKXt9U2VjdXJlUmFuZG9tLnByb3RvdHlwZS5uZXh0Qnl0ZXM9cm5nX2dldF9ieXRlcztcbi8qISAoYykgVG9tIFd1IHwgaHR0cDovL3d3dy1jcy1zdHVkZW50cy5zdGFuZm9yZC5lZHUvfnRqdy9qc2JuL1xuICovXG5mdW5jdGlvbiBwYXJzZUJpZ0ludChiLGEpe3JldHVybiBuZXcgQmlnSW50ZWdlcihiLGEpfWZ1bmN0aW9uIGxpbmVicmsoYyxkKXt2YXIgYT1cIlwiO3ZhciBiPTA7d2hpbGUoYitkPGMubGVuZ3RoKXthKz1jLnN1YnN0cmluZyhiLGIrZCkrXCJcXG5cIjtiKz1kfXJldHVybiBhK2Muc3Vic3RyaW5nKGIsYy5sZW5ndGgpfWZ1bmN0aW9uIGJ5dGUySGV4KGEpe2lmKGE8MTYpe3JldHVyblwiMFwiK2EudG9TdHJpbmcoMTYpfWVsc2V7cmV0dXJuIGEudG9TdHJpbmcoMTYpfX1mdW5jdGlvbiBwa2NzMXBhZDIoZSxoKXtpZihoPGUubGVuZ3RoKzExKXt0aHJvd1wiTWVzc2FnZSB0b28gbG9uZyBmb3IgUlNBXCI7cmV0dXJuIG51bGx9dmFyIGc9bmV3IEFycmF5KCk7dmFyIGQ9ZS5sZW5ndGgtMTt3aGlsZShkPj0wJiZoPjApe3ZhciBmPWUuY2hhckNvZGVBdChkLS0pO2lmKGY8MTI4KXtnWy0taF09Zn1lbHNle2lmKChmPjEyNykmJihmPDIwNDgpKXtnWy0taF09KGYmNjMpfDEyODtnWy0taF09KGY+PjYpfDE5Mn1lbHNle2dbLS1oXT0oZiY2Myl8MTI4O2dbLS1oXT0oKGY+PjYpJjYzKXwxMjg7Z1stLWhdPShmPj4xMil8MjI0fX19Z1stLWhdPTA7dmFyIGI9bmV3IFNlY3VyZVJhbmRvbSgpO3ZhciBhPW5ldyBBcnJheSgpO3doaWxlKGg+Mil7YVswXT0wO3doaWxlKGFbMF09PTApe2IubmV4dEJ5dGVzKGEpfWdbLS1oXT1hWzBdfWdbLS1oXT0yO2dbLS1oXT0wO3JldHVybiBuZXcgQmlnSW50ZWdlcihnKX1mdW5jdGlvbiBvYWVwX21nZjFfYXJyKGMsYSxlKXt2YXIgYj1cIlwiLGQ9MDt3aGlsZShiLmxlbmd0aDxhKXtiKz1lKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGMuY29uY2F0KFsoZCY0Mjc4MTkwMDgwKT4+MjQsKGQmMTY3MTE2ODApPj4xNiwoZCY2NTI4MCk+PjgsZCYyNTVdKSkpO2QrPTF9cmV0dXJuIGJ9ZnVuY3Rpb24gb2FlcF9wYWQocSxhLGYsbCl7dmFyIGM9S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdDt2YXIgbz1LSlVSLmNyeXB0by5VdGlsO3ZhciBiPW51bGw7aWYoIWYpe2Y9XCJzaGExXCJ9aWYodHlwZW9mIGY9PT1cInN0cmluZ1wiKXtiPWMuZ2V0Q2Fub25pY2FsQWxnTmFtZShmKTtsPWMuZ2V0SGFzaExlbmd0aChiKTtmPWZ1bmN0aW9uKGkpe3JldHVybiBoZXh0b3JzdHIoby5oYXNoSGV4KHJzdHJ0b2hleChpKSxiKSl9fWlmKHEubGVuZ3RoKzIqbCsyPmEpe3Rocm93XCJNZXNzYWdlIHRvbyBsb25nIGZvciBSU0FcIn12YXIgaz1cIlwiLGU7Zm9yKGU9MDtlPGEtcS5sZW5ndGgtMipsLTI7ZSs9MSl7ays9XCJcXHgwMFwifXZhciBoPWYoXCJcIikraytcIlxceDAxXCIrcTt2YXIgZz1uZXcgQXJyYXkobCk7bmV3IFNlY3VyZVJhbmRvbSgpLm5leHRCeXRlcyhnKTt2YXIgaj1vYWVwX21nZjFfYXJyKGcsaC5sZW5ndGgsZik7dmFyIHA9W107Zm9yKGU9MDtlPGgubGVuZ3RoO2UrPTEpe3BbZV09aC5jaGFyQ29kZUF0KGUpXmouY2hhckNvZGVBdChlKX12YXIgbT1vYWVwX21nZjFfYXJyKHAsZy5sZW5ndGgsZik7dmFyIGQ9WzBdO2ZvcihlPTA7ZTxnLmxlbmd0aDtlKz0xKXtkW2UrMV09Z1tlXV5tLmNoYXJDb2RlQXQoZSl9cmV0dXJuIG5ldyBCaWdJbnRlZ2VyKGQuY29uY2F0KHApKX1mdW5jdGlvbiBSU0FLZXkoKXt0aGlzLm49bnVsbDt0aGlzLmU9MDt0aGlzLmQ9bnVsbDt0aGlzLnA9bnVsbDt0aGlzLnE9bnVsbDt0aGlzLmRtcDE9bnVsbDt0aGlzLmRtcTE9bnVsbDt0aGlzLmNvZWZmPW51bGx9ZnVuY3Rpb24gUlNBU2V0UHVibGljKGIsYSl7dGhpcy5pc1B1YmxpYz10cnVlO3RoaXMuaXNQcml2YXRlPWZhbHNlO2lmKHR5cGVvZiBiIT09XCJzdHJpbmdcIil7dGhpcy5uPWI7dGhpcy5lPWF9ZWxzZXtpZihiIT1udWxsJiZhIT1udWxsJiZiLmxlbmd0aD4wJiZhLmxlbmd0aD4wKXt0aGlzLm49cGFyc2VCaWdJbnQoYiwxNik7dGhpcy5lPXBhcnNlSW50KGEsMTYpfWVsc2V7dGhyb3dcIkludmFsaWQgUlNBIHB1YmxpYyBrZXlcIn19fWZ1bmN0aW9uIFJTQURvUHVibGljKGEpe3JldHVybiBhLm1vZFBvd0ludCh0aGlzLmUsdGhpcy5uKX1mdW5jdGlvbiBSU0FFbmNyeXB0KGQpe3ZhciBhPXBrY3MxcGFkMihkLCh0aGlzLm4uYml0TGVuZ3RoKCkrNyk+PjMpO2lmKGE9PW51bGwpe3JldHVybiBudWxsfXZhciBlPXRoaXMuZG9QdWJsaWMoYSk7aWYoZT09bnVsbCl7cmV0dXJuIG51bGx9dmFyIGI9ZS50b1N0cmluZygxNik7aWYoKGIubGVuZ3RoJjEpPT0wKXtyZXR1cm4gYn1lbHNle3JldHVyblwiMFwiK2J9fWZ1bmN0aW9uIFJTQUVuY3J5cHRPQUVQKGYsZSxiKXt2YXIgYT1vYWVwX3BhZChmLCh0aGlzLm4uYml0TGVuZ3RoKCkrNyk+PjMsZSxiKTtpZihhPT1udWxsKXtyZXR1cm4gbnVsbH12YXIgZz10aGlzLmRvUHVibGljKGEpO2lmKGc9PW51bGwpe3JldHVybiBudWxsfXZhciBkPWcudG9TdHJpbmcoMTYpO2lmKChkLmxlbmd0aCYxKT09MCl7cmV0dXJuIGR9ZWxzZXtyZXR1cm5cIjBcIitkfX1SU0FLZXkucHJvdG90eXBlLmRvUHVibGljPVJTQURvUHVibGljO1JTQUtleS5wcm90b3R5cGUuc2V0UHVibGljPVJTQVNldFB1YmxpYztSU0FLZXkucHJvdG90eXBlLmVuY3J5cHQ9UlNBRW5jcnlwdDtSU0FLZXkucHJvdG90eXBlLmVuY3J5cHRPQUVQPVJTQUVuY3J5cHRPQUVQO1JTQUtleS5wcm90b3R5cGUudHlwZT1cIlJTQVwiO1xuLyohIChjKSBUb20gV3UgfCBodHRwOi8vd3d3LWNzLXN0dWRlbnRzLnN0YW5mb3JkLmVkdS9+dGp3L2pzYm4vXG4gKi9cbmZ1bmN0aW9uIEVDRmllbGRFbGVtZW50RnAoYixhKXt0aGlzLng9YTt0aGlzLnE9Yn1mdW5jdGlvbiBmZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMueC5lcXVhbHMoYS54KSl9ZnVuY3Rpb24gZmVGcFRvQmlnSW50ZWdlcigpe3JldHVybiB0aGlzLnh9ZnVuY3Rpb24gZmVGcE5lZ2F0ZSgpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54Lm5lZ2F0ZSgpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwQWRkKGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LmFkZChhLnRvQmlnSW50ZWdlcigpKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcFN1YnRyYWN0KGEpe3JldHVybiBuZXcgRUNGaWVsZEVsZW1lbnRGcCh0aGlzLnEsdGhpcy54LnN1YnRyYWN0KGEudG9CaWdJbnRlZ2VyKCkpLm1vZCh0aGlzLnEpKX1mdW5jdGlvbiBmZUZwTXVsdGlwbHkoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSx0aGlzLngubXVsdGlwbHkoYS50b0JpZ0ludGVnZXIoKSkubW9kKHRoaXMucSkpfWZ1bmN0aW9uIGZlRnBTcXVhcmUoKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5zcXVhcmUoKS5tb2QodGhpcy5xKSl9ZnVuY3Rpb24gZmVGcERpdmlkZShhKXtyZXR1cm4gbmV3IEVDRmllbGRFbGVtZW50RnAodGhpcy5xLHRoaXMueC5tdWx0aXBseShhLnRvQmlnSW50ZWdlcigpLm1vZEludmVyc2UodGhpcy5xKSkubW9kKHRoaXMucSkpfUVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmVxdWFscz1mZUZwRXF1YWxzO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnRvQmlnSW50ZWdlcj1mZUZwVG9CaWdJbnRlZ2VyO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLm5lZ2F0ZT1mZUZwTmVnYXRlO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmFkZD1mZUZwQWRkO0VDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLnN1YnRyYWN0PWZlRnBTdWJ0cmFjdDtFQ0ZpZWxkRWxlbWVudEZwLnByb3RvdHlwZS5tdWx0aXBseT1mZUZwTXVsdGlwbHk7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuc3F1YXJlPWZlRnBTcXVhcmU7RUNGaWVsZEVsZW1lbnRGcC5wcm90b3R5cGUuZGl2aWRlPWZlRnBEaXZpZGU7ZnVuY3Rpb24gRUNQb2ludEZwKGMsYSxkLGIpe3RoaXMuY3VydmU9Yzt0aGlzLng9YTt0aGlzLnk9ZDtpZihiPT1udWxsKXt0aGlzLno9QmlnSW50ZWdlci5PTkV9ZWxzZXt0aGlzLno9Yn10aGlzLnppbnY9bnVsbH1mdW5jdGlvbiBwb2ludEZwR2V0WCgpe2lmKHRoaXMuemludj09bnVsbCl7dGhpcy56aW52PXRoaXMuei5tb2RJbnZlcnNlKHRoaXMuY3VydmUucSl9cmV0dXJuIHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMuemludikubW9kKHRoaXMuY3VydmUucSkpfWZ1bmN0aW9uIHBvaW50RnBHZXRZKCl7aWYodGhpcy56aW52PT1udWxsKXt0aGlzLnppbnY9dGhpcy56Lm1vZEludmVyc2UodGhpcy5jdXJ2ZS5xKX1yZXR1cm4gdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcih0aGlzLnkudG9CaWdJbnRlZ2VyKCkubXVsdGlwbHkodGhpcy56aW52KS5tb2QodGhpcy5jdXJ2ZS5xKSl9ZnVuY3Rpb24gcG9pbnRGcEVxdWFscyhhKXtpZihhPT10aGlzKXtyZXR1cm4gdHJ1ZX1pZih0aGlzLmlzSW5maW5pdHkoKSl7cmV0dXJuIGEuaXNJbmZpbml0eSgpfWlmKGEuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpcy5pc0luZmluaXR5KCl9dmFyIGMsYjtjPWEueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueS50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShhLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZighYy5lcXVhbHMoQmlnSW50ZWdlci5aRVJPKSl7cmV0dXJuIGZhbHNlfWI9YS54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy54LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGEueikpLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBiLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBJc0luZmluaXR5KCl7aWYoKHRoaXMueD09bnVsbCkmJih0aGlzLnk9PW51bGwpKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gdGhpcy56LmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pJiYhdGhpcy55LnRvQmlnSW50ZWdlcigpLmVxdWFscyhCaWdJbnRlZ2VyLlpFUk8pfWZ1bmN0aW9uIHBvaW50RnBOZWdhdGUoKXtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMueCx0aGlzLnkubmVnYXRlKCksdGhpcy56KX1mdW5jdGlvbiBwb2ludEZwQWRkKGwpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gbH1pZihsLmlzSW5maW5pdHkoKSl7cmV0dXJuIHRoaXN9dmFyIHA9bC55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KHRoaXMueikuc3VidHJhY3QodGhpcy55LnRvQmlnSW50ZWdlcigpLm11bHRpcGx5KGwueikpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBvPWwueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseSh0aGlzLnopLnN1YnRyYWN0KHRoaXMueC50b0JpZ0ludGVnZXIoKS5tdWx0aXBseShsLnopKS5tb2QodGhpcy5jdXJ2ZS5xKTtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKG8pKXtpZihCaWdJbnRlZ2VyLlpFUk8uZXF1YWxzKHApKXtyZXR1cm4gdGhpcy50d2ljZSgpfXJldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGo9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBlPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgbj10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGM9bC54LnRvQmlnSW50ZWdlcigpO3ZhciBrPWwueS50b0JpZ0ludGVnZXIoKTt2YXIgbT1vLnNxdWFyZSgpO3ZhciBpPW0ubXVsdGlwbHkobyk7dmFyIGQ9ZS5tdWx0aXBseShtKTt2YXIgZz1wLnNxdWFyZSgpLm11bHRpcGx5KHRoaXMueik7dmFyIGE9Zy5zdWJ0cmFjdChkLnNoaWZ0TGVmdCgxKSkubXVsdGlwbHkobC56KS5zdWJ0cmFjdChpKS5tdWx0aXBseShvKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgaD1kLm11bHRpcGx5KGopLm11bHRpcGx5KHApLnN1YnRyYWN0KG4ubXVsdGlwbHkoaSkpLnN1YnRyYWN0KGcubXVsdGlwbHkocCkpLm11bHRpcGx5KGwueikuYWRkKHAubXVsdGlwbHkoaSkpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWkubXVsdGlwbHkodGhpcy56KS5tdWx0aXBseShsLnopLm1vZCh0aGlzLmN1cnZlLnEpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihhKSx0aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKGgpLGYpfWZ1bmN0aW9uIHBvaW50RnBUd2ljZSgpe2lmKHRoaXMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnkudG9CaWdJbnRlZ2VyKCkuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9bmV3IEJpZ0ludGVnZXIoXCIzXCIpO3ZhciBjPXRoaXMueC50b0JpZ0ludGVnZXIoKTt2YXIgaD10aGlzLnkudG9CaWdJbnRlZ2VyKCk7dmFyIGU9aC5tdWx0aXBseSh0aGlzLnopO3ZhciBqPWUubXVsdGlwbHkoaCkubW9kKHRoaXMuY3VydmUucSk7dmFyIGk9dGhpcy5jdXJ2ZS5hLnRvQmlnSW50ZWdlcigpO3ZhciBrPWMuc3F1YXJlKCkubXVsdGlwbHkoZyk7aWYoIUJpZ0ludGVnZXIuWkVSTy5lcXVhbHMoaSkpe2s9ay5hZGQodGhpcy56LnNxdWFyZSgpLm11bHRpcGx5KGkpKX1rPWsubW9kKHRoaXMuY3VydmUucSk7dmFyIGI9ay5zcXVhcmUoKS5zdWJ0cmFjdChjLnNoaWZ0TGVmdCgzKS5tdWx0aXBseShqKSkuc2hpZnRMZWZ0KDEpLm11bHRpcGx5KGUpLm1vZCh0aGlzLmN1cnZlLnEpO3ZhciBmPWsubXVsdGlwbHkoZykubXVsdGlwbHkoYykuc3VidHJhY3Qoai5zaGlmdExlZnQoMSkpLnNoaWZ0TGVmdCgyKS5tdWx0aXBseShqKS5zdWJ0cmFjdChrLnNxdWFyZSgpLm11bHRpcGx5KGspKS5tb2QodGhpcy5jdXJ2ZS5xKTt2YXIgZD1lLnNxdWFyZSgpLm11bHRpcGx5KGUpLnNoaWZ0TGVmdCgzKS5tb2QodGhpcy5jdXJ2ZS5xKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMuY3VydmUuZnJvbUJpZ0ludGVnZXIoYiksdGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihmKSxkKX1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHkoZCl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKGQuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIG09ZDt2YXIgbD1tLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGI9dGhpcy5uZWdhdGUoKTt2YXIgaj10aGlzO3ZhciBxPXRoaXMuY3VydmUucS5zdWJ0cmFjdChkKTt2YXIgbz1xLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGM9bmV3IEVDUG9pbnRGcCh0aGlzLmN1cnZlLHRoaXMueCx0aGlzLnkpO3ZhciBhPWMubmVnYXRlKCk7dmFyIGc7Zm9yKGc9bC5iaXRMZW5ndGgoKS0yO2c+MDstLWcpe2o9ai50d2ljZSgpO3ZhciBuPWwudGVzdEJpdChnKTt2YXIgZj1tLnRlc3RCaXQoZyk7aWYobiE9Zil7aj1qLmFkZChuP3RoaXM6Yil9fWZvcihnPW8uYml0TGVuZ3RoKCktMjtnPjA7LS1nKXtjPWMudHdpY2UoKTt2YXIgcD1vLnRlc3RCaXQoZyk7dmFyIHI9cS50ZXN0Qml0KGcpO2lmKHAhPXIpe2M9Yy5hZGQocD9jOmEpfX1yZXR1cm4gan1mdW5jdGlvbiBwb2ludEZwTXVsdGlwbHlUd28oYyxhLGIpe3ZhciBkO2lmKGMuYml0TGVuZ3RoKCk+Yi5iaXRMZW5ndGgoKSl7ZD1jLmJpdExlbmd0aCgpLTF9ZWxzZXtkPWIuYml0TGVuZ3RoKCktMX12YXIgZj10aGlzLmN1cnZlLmdldEluZmluaXR5KCk7dmFyIGU9dGhpcy5hZGQoYSk7d2hpbGUoZD49MCl7Zj1mLnR3aWNlKCk7aWYoYy50ZXN0Qml0KGQpKXtpZihiLnRlc3RCaXQoZCkpe2Y9Zi5hZGQoZSl9ZWxzZXtmPWYuYWRkKHRoaXMpfX1lbHNle2lmKGIudGVzdEJpdChkKSl7Zj1mLmFkZChhKX19LS1kfXJldHVybiBmfUVDUG9pbnRGcC5wcm90b3R5cGUuZ2V0WD1wb2ludEZwR2V0WDtFQ1BvaW50RnAucHJvdG90eXBlLmdldFk9cG9pbnRGcEdldFk7RUNQb2ludEZwLnByb3RvdHlwZS5lcXVhbHM9cG9pbnRGcEVxdWFscztFQ1BvaW50RnAucHJvdG90eXBlLmlzSW5maW5pdHk9cG9pbnRGcElzSW5maW5pdHk7RUNQb2ludEZwLnByb3RvdHlwZS5uZWdhdGU9cG9pbnRGcE5lZ2F0ZTtFQ1BvaW50RnAucHJvdG90eXBlLmFkZD1wb2ludEZwQWRkO0VDUG9pbnRGcC5wcm90b3R5cGUudHdpY2U9cG9pbnRGcFR3aWNlO0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHk9cG9pbnRGcE11bHRpcGx5O0VDUG9pbnRGcC5wcm90b3R5cGUubXVsdGlwbHlUd289cG9pbnRGcE11bHRpcGx5VHdvO2Z1bmN0aW9uIEVDQ3VydmVGcChlLGQsYyl7dGhpcy5xPWU7dGhpcy5hPXRoaXMuZnJvbUJpZ0ludGVnZXIoZCk7dGhpcy5iPXRoaXMuZnJvbUJpZ0ludGVnZXIoYyk7dGhpcy5pbmZpbml0eT1uZXcgRUNQb2ludEZwKHRoaXMsbnVsbCxudWxsKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0USgpe3JldHVybiB0aGlzLnF9ZnVuY3Rpb24gY3VydmVGcEdldEEoKXtyZXR1cm4gdGhpcy5hfWZ1bmN0aW9uIGN1cnZlRnBHZXRCKCl7cmV0dXJuIHRoaXMuYn1mdW5jdGlvbiBjdXJ2ZUZwRXF1YWxzKGEpe2lmKGE9PXRoaXMpe3JldHVybiB0cnVlfXJldHVybih0aGlzLnEuZXF1YWxzKGEucSkmJnRoaXMuYS5lcXVhbHMoYS5hKSYmdGhpcy5iLmVxdWFscyhhLmIpKX1mdW5jdGlvbiBjdXJ2ZUZwR2V0SW5maW5pdHkoKXtyZXR1cm4gdGhpcy5pbmZpbml0eX1mdW5jdGlvbiBjdXJ2ZUZwRnJvbUJpZ0ludGVnZXIoYSl7cmV0dXJuIG5ldyBFQ0ZpZWxkRWxlbWVudEZwKHRoaXMucSxhKX1mdW5jdGlvbiBjdXJ2ZUZwRGVjb2RlUG9pbnRIZXgoZCl7c3dpdGNoKHBhcnNlSW50KGQuc3Vic3RyKDAsMiksMTYpKXtjYXNlIDA6cmV0dXJuIHRoaXMuaW5maW5pdHk7Y2FzZSAyOmNhc2UgMzpyZXR1cm4gbnVsbDtjYXNlIDQ6Y2FzZSA2OmNhc2UgNzp2YXIgYT0oZC5sZW5ndGgtMikvMjt2YXIgYz1kLnN1YnN0cigyLGEpO3ZhciBiPWQuc3Vic3RyKGErMixhKTtyZXR1cm4gbmV3IEVDUG9pbnRGcCh0aGlzLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYywxNikpLHRoaXMuZnJvbUJpZ0ludGVnZXIobmV3IEJpZ0ludGVnZXIoYiwxNikpKTtkZWZhdWx0OnJldHVybiBudWxsfX1FQ0N1cnZlRnAucHJvdG90eXBlLmdldFE9Y3VydmVGcEdldFE7RUNDdXJ2ZUZwLnByb3RvdHlwZS5nZXRBPWN1cnZlRnBHZXRBO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0Qj1jdXJ2ZUZwR2V0QjtFQ0N1cnZlRnAucHJvdG90eXBlLmVxdWFscz1jdXJ2ZUZwRXF1YWxzO0VDQ3VydmVGcC5wcm90b3R5cGUuZ2V0SW5maW5pdHk9Y3VydmVGcEdldEluZmluaXR5O0VDQ3VydmVGcC5wcm90b3R5cGUuZnJvbUJpZ0ludGVnZXI9Y3VydmVGcEZyb21CaWdJbnRlZ2VyO0VDQ3VydmVGcC5wcm90b3R5cGUuZGVjb2RlUG9pbnRIZXg9Y3VydmVGcERlY29kZVBvaW50SGV4O1xuLyohIChjKSBTdGVmYW4gVGhvbWFzIHwgaHR0cHM6Ly9naXRodWIuY29tL2JpdGNvaW5qcy9iaXRjb2luanMtbGliXG4gKi9cbkVDRmllbGRFbGVtZW50RnAucHJvdG90eXBlLmdldEJ5dGVMZW5ndGg9ZnVuY3Rpb24oKXtyZXR1cm4gTWF0aC5mbG9vcigodGhpcy50b0JpZ0ludGVnZXIoKS5iaXRMZW5ndGgoKSs3KS84KX07RUNQb2ludEZwLnByb3RvdHlwZS5nZXRFbmNvZGVkPWZ1bmN0aW9uKGMpe3ZhciBkPWZ1bmN0aW9uKGgsZil7dmFyIGc9aC50b0J5dGVBcnJheVVuc2lnbmVkKCk7aWYoZjxnLmxlbmd0aCl7Zz1nLnNsaWNlKGcubGVuZ3RoLWYpfWVsc2V7d2hpbGUoZj5nLmxlbmd0aCl7Zy51bnNoaWZ0KDApfX1yZXR1cm4gZ307dmFyIGE9dGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGU9dGhpcy5nZXRZKCkudG9CaWdJbnRlZ2VyKCk7dmFyIGI9ZChhLDMyKTtpZihjKXtpZihlLmlzRXZlbigpKXtiLnVuc2hpZnQoMil9ZWxzZXtiLnVuc2hpZnQoMyl9fWVsc2V7Yi51bnNoaWZ0KDQpO2I9Yi5jb25jYXQoZChlLDMyKSl9cmV0dXJuIGJ9O0VDUG9pbnRGcC5kZWNvZGVGcm9tPWZ1bmN0aW9uKGcsYyl7dmFyIGY9Y1swXTt2YXIgZT1jLmxlbmd0aC0xO3ZhciBkPWMuc2xpY2UoMSwxK2UvMik7dmFyIGI9Yy5zbGljZSgxK2UvMiwxK2UpO2QudW5zaGlmdCgwKTtiLnVuc2hpZnQoMCk7dmFyIGE9bmV3IEJpZ0ludGVnZXIoZCk7dmFyIGg9bmV3IEJpZ0ludGVnZXIoYik7cmV0dXJuIG5ldyBFQ1BvaW50RnAoZyxnLmZyb21CaWdJbnRlZ2VyKGEpLGcuZnJvbUJpZ0ludGVnZXIoaCkpfTtFQ1BvaW50RnAuZGVjb2RlRnJvbUhleD1mdW5jdGlvbihnLGMpe3ZhciBmPWMuc3Vic3RyKDAsMik7dmFyIGU9Yy5sZW5ndGgtMjt2YXIgZD1jLnN1YnN0cigyLGUvMik7dmFyIGI9Yy5zdWJzdHIoMitlLzIsZS8yKTt2YXIgYT1uZXcgQmlnSW50ZWdlcihkLDE2KTt2YXIgaD1uZXcgQmlnSW50ZWdlcihiLDE2KTtyZXR1cm4gbmV3IEVDUG9pbnRGcChnLGcuZnJvbUJpZ0ludGVnZXIoYSksZy5mcm9tQmlnSW50ZWdlcihoKSl9O0VDUG9pbnRGcC5wcm90b3R5cGUuYWRkMkQ9ZnVuY3Rpb24oYyl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiBjfWlmKGMuaXNJbmZpbml0eSgpKXtyZXR1cm4gdGhpc31pZih0aGlzLnguZXF1YWxzKGMueCkpe2lmKHRoaXMueS5lcXVhbHMoYy55KSl7cmV0dXJuIHRoaXMudHdpY2UoKX1yZXR1cm4gdGhpcy5jdXJ2ZS5nZXRJbmZpbml0eSgpfXZhciBnPWMueC5zdWJ0cmFjdCh0aGlzLngpO3ZhciBlPWMueS5zdWJ0cmFjdCh0aGlzLnkpO3ZhciBhPWUuZGl2aWRlKGcpO3ZhciBkPWEuc3F1YXJlKCkuc3VidHJhY3QodGhpcy54KS5zdWJ0cmFjdChjLngpO3ZhciBmPWEubXVsdGlwbHkodGhpcy54LnN1YnRyYWN0KGQpKS5zdWJ0cmFjdCh0aGlzLnkpO3JldHVybiBuZXcgRUNQb2ludEZwKHRoaXMuY3VydmUsZCxmKX07RUNQb2ludEZwLnByb3RvdHlwZS50d2ljZTJEPWZ1bmN0aW9uKCl7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKHRoaXMueS50b0JpZ0ludGVnZXIoKS5zaWdudW0oKT09MCl7cmV0dXJuIHRoaXMuY3VydmUuZ2V0SW5maW5pdHkoKX12YXIgYj10aGlzLmN1cnZlLmZyb21CaWdJbnRlZ2VyKEJpZ0ludGVnZXIudmFsdWVPZigyKSk7dmFyIGU9dGhpcy5jdXJ2ZS5mcm9tQmlnSW50ZWdlcihCaWdJbnRlZ2VyLnZhbHVlT2YoMykpO3ZhciBhPXRoaXMueC5zcXVhcmUoKS5tdWx0aXBseShlKS5hZGQodGhpcy5jdXJ2ZS5hKS5kaXZpZGUodGhpcy55Lm11bHRpcGx5KGIpKTt2YXIgYz1hLnNxdWFyZSgpLnN1YnRyYWN0KHRoaXMueC5tdWx0aXBseShiKSk7dmFyIGQ9YS5tdWx0aXBseSh0aGlzLnguc3VidHJhY3QoYykpLnN1YnRyYWN0KHRoaXMueSk7cmV0dXJuIG5ldyBFQ1BvaW50RnAodGhpcy5jdXJ2ZSxjLGQpfTtFQ1BvaW50RnAucHJvdG90eXBlLm11bHRpcGx5MkQ9ZnVuY3Rpb24oYil7aWYodGhpcy5pc0luZmluaXR5KCkpe3JldHVybiB0aGlzfWlmKGIuc2lnbnVtKCk9PTApe3JldHVybiB0aGlzLmN1cnZlLmdldEluZmluaXR5KCl9dmFyIGc9Yjt2YXIgZj1nLm11bHRpcGx5KG5ldyBCaWdJbnRlZ2VyKFwiM1wiKSk7dmFyIGw9dGhpcy5uZWdhdGUoKTt2YXIgZD10aGlzO3ZhciBjO2ZvcihjPWYuYml0TGVuZ3RoKCktMjtjPjA7LS1jKXtkPWQudHdpY2UoKTt2YXIgYT1mLnRlc3RCaXQoYyk7dmFyIGo9Zy50ZXN0Qml0KGMpO2lmKGEhPWope2Q9ZC5hZGQyRChhP3RoaXM6bCl9fXJldHVybiBkfTtFQ1BvaW50RnAucHJvdG90eXBlLmlzT25DdXJ2ZT1mdW5jdGlvbigpe3ZhciBkPXRoaXMuZ2V0WCgpLnRvQmlnSW50ZWdlcigpO3ZhciBpPXRoaXMuZ2V0WSgpLnRvQmlnSW50ZWdlcigpO3ZhciBmPXRoaXMuY3VydmUuZ2V0QSgpLnRvQmlnSW50ZWdlcigpO3ZhciBjPXRoaXMuY3VydmUuZ2V0QigpLnRvQmlnSW50ZWdlcigpO3ZhciBoPXRoaXMuY3VydmUuZ2V0USgpO3ZhciBlPWkubXVsdGlwbHkoaSkubW9kKGgpO3ZhciBnPWQubXVsdGlwbHkoZCkubXVsdGlwbHkoZCkuYWRkKGYubXVsdGlwbHkoZCkpLmFkZChjKS5tb2QoaCk7cmV0dXJuIGUuZXF1YWxzKGcpfTtFQ1BvaW50RnAucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCIoXCIrdGhpcy5nZXRYKCkudG9CaWdJbnRlZ2VyKCkudG9TdHJpbmcoKStcIixcIit0aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKS50b1N0cmluZygpK1wiKVwifTtFQ1BvaW50RnAucHJvdG90eXBlLnZhbGlkYXRlPWZ1bmN0aW9uKCl7dmFyIGM9dGhpcy5jdXJ2ZS5nZXRRKCk7aWYodGhpcy5pc0luZmluaXR5KCkpe3Rocm93IG5ldyBFcnJvcihcIlBvaW50IGlzIGF0IGluZmluaXR5LlwiKX12YXIgYT10aGlzLmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgYj10aGlzLmdldFkoKS50b0JpZ0ludGVnZXIoKTtpZihhLmNvbXBhcmVUbyhCaWdJbnRlZ2VyLk9ORSk8MHx8YS5jb21wYXJlVG8oYy5zdWJ0cmFjdChCaWdJbnRlZ2VyLk9ORSkpPjApe3Rocm93IG5ldyBFcnJvcihcInggY29vcmRpbmF0ZSBvdXQgb2YgYm91bmRzXCIpfWlmKGIuY29tcGFyZVRvKEJpZ0ludGVnZXIuT05FKTwwfHxiLmNvbXBhcmVUbyhjLnN1YnRyYWN0KEJpZ0ludGVnZXIuT05FKSk+MCl7dGhyb3cgbmV3IEVycm9yKFwieSBjb29yZGluYXRlIG91dCBvZiBib3VuZHNcIil9aWYoIXRoaXMuaXNPbkN1cnZlKCkpe3Rocm93IG5ldyBFcnJvcihcIlBvaW50IGlzIG5vdCBvbiB0aGUgY3VydmUuXCIpfWlmKHRoaXMubXVsdGlwbHkoYykuaXNJbmZpbml0eSgpKXt0aHJvdyBuZXcgRXJyb3IoXCJQb2ludCBpcyBub3QgYSBzY2FsYXIgbXVsdGlwbGUgb2YgRy5cIil9cmV0dXJuIHRydWV9O1xuLyohIE1pa2UgU2FtdWVsIChjKSAyMDA5IHwgY29kZS5nb29nbGUuY29tL3AvanNvbi1zYW5zLWV2YWxcbiAqL1xudmFyIGpzb25QYXJzZT0oZnVuY3Rpb24oKXt2YXIgZT1cIig/Oi0/XFxcXGIoPzowfFsxLTldWzAtOV0qKSg/OlxcXFwuWzAtOV0rKT8oPzpbZUVdWystXT9bMC05XSspP1xcXFxiKVwiO3ZhciBqPScoPzpbXlxcXFwwLVxcXFx4MDhcXFxceDBhLVxcXFx4MWZcIlxcXFxcXFxcXXxcXFxcXFxcXCg/OltcIi9cXFxcXFxcXGJmbnJ0XXx1WzAtOUEtRmEtZl17NH0pKSc7dmFyIGk9Jyg/OlwiJytqKycqXCIpJzt2YXIgZD1uZXcgUmVnRXhwKFwiKD86ZmFsc2V8dHJ1ZXxudWxsfFtcXFxce1xcXFx9XFxcXFtcXFxcXV18XCIrZStcInxcIitpK1wiKVwiLFwiZ1wiKTt2YXIgaz1uZXcgUmVnRXhwKFwiXFxcXFxcXFwoPzooW151XSl8dSguezR9KSlcIixcImdcIik7dmFyIGc9eydcIic6J1wiJyxcIi9cIjpcIi9cIixcIlxcXFxcIjpcIlxcXFxcIixiOlwiXFxiXCIsZjpcIlxcZlwiLG46XCJcXG5cIixyOlwiXFxyXCIsdDpcIlxcdFwifTtmdW5jdGlvbiBoKGwsbSxuKXtyZXR1cm4gbT9nW21dOlN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobiwxNikpfXZhciBjPW5ldyBTdHJpbmcoXCJcIik7dmFyIGE9XCJcXFxcXCI7dmFyIGY9e1wie1wiOk9iamVjdCxcIltcIjpBcnJheX07dmFyIGI9T2JqZWN0Lmhhc093blByb3BlcnR5O3JldHVybiBmdW5jdGlvbih1LHEpe3ZhciBwPXUubWF0Y2goZCk7dmFyIHg7dmFyIHY9cFswXTt2YXIgbD1mYWxzZTtpZihcIntcIj09PXYpe3g9e319ZWxzZXtpZihcIltcIj09PXYpe3g9W119ZWxzZXt4PVtdO2w9dHJ1ZX19dmFyIHQ7dmFyIHI9W3hdO2Zvcih2YXIgbz0xLWwsbT1wLmxlbmd0aDtvPG07KytvKXt2PXBbb107dmFyIHc7c3dpdGNoKHYuY2hhckNvZGVBdCgwKSl7ZGVmYXVsdDp3PXJbMF07d1t0fHx3Lmxlbmd0aF09Kyh2KTt0PXZvaWQgMDticmVhaztjYXNlIDM0OnY9di5zdWJzdHJpbmcoMSx2Lmxlbmd0aC0xKTtpZih2LmluZGV4T2YoYSkhPT0tMSl7dj12LnJlcGxhY2UoayxoKX13PXJbMF07aWYoIXQpe2lmKHcgaW5zdGFuY2VvZiBBcnJheSl7dD13Lmxlbmd0aH1lbHNle3Q9dnx8YzticmVha319d1t0XT12O3Q9dm9pZCAwO2JyZWFrO2Nhc2UgOTE6dz1yWzBdO3IudW5zaGlmdCh3W3R8fHcubGVuZ3RoXT1bXSk7dD12b2lkIDA7YnJlYWs7Y2FzZSA5MzpyLnNoaWZ0KCk7YnJlYWs7Y2FzZSAxMDI6dz1yWzBdO3dbdHx8dy5sZW5ndGhdPWZhbHNlO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTEwOnc9clswXTt3W3R8fHcubGVuZ3RoXT1udWxsO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTE2Onc9clswXTt3W3R8fHcubGVuZ3RoXT10cnVlO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTIzOnc9clswXTtyLnVuc2hpZnQod1t0fHx3Lmxlbmd0aF09e30pO3Q9dm9pZCAwO2JyZWFrO2Nhc2UgMTI1OnIuc2hpZnQoKTticmVha319aWYobCl7aWYoci5sZW5ndGghPT0xKXt0aHJvdyBuZXcgRXJyb3IoKX14PXhbMF19ZWxzZXtpZihyLmxlbmd0aCl7dGhyb3cgbmV3IEVycm9yKCl9fWlmKHEpe3ZhciBzPWZ1bmN0aW9uKEMsQil7dmFyIEQ9Q1tCXTtpZihEJiZ0eXBlb2YgRD09PVwib2JqZWN0XCIpe3ZhciBuPW51bGw7Zm9yKHZhciB6IGluIEQpe2lmKGIuY2FsbChELHopJiZEIT09Qyl7dmFyIHk9cyhELHopO2lmKHkhPT12b2lkIDApe0Rbel09eX1lbHNle2lmKCFuKXtuPVtdfW4ucHVzaCh6KX19fWlmKG4pe2Zvcih2YXIgQT1uLmxlbmd0aDstLUE+PTA7KXtkZWxldGUgRFtuW0FdXX19fXJldHVybiBxLmNhbGwoQyxCLEQpfTt4PXMoe1wiXCI6eH0sXCJcIil9cmV0dXJuIHh9fSkoKTtcbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5hc24xPT1cInVuZGVmaW5lZFwifHwhS0pVUi5hc24xKXtLSlVSLmFzbjE9e319S0pVUi5hc24xLkFTTjFVdGlsPW5ldyBmdW5jdGlvbigpe3RoaXMuaW50ZWdlclRvQnl0ZUhleD1mdW5jdGlvbihhKXt2YXIgYj1hLnRvU3RyaW5nKDE2KTtpZigoYi5sZW5ndGglMik9PTEpe2I9XCIwXCIrYn1yZXR1cm4gYn07dGhpcy5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleD1mdW5jdGlvbihqKXt2YXIgZj1qLnRvU3RyaW5nKDE2KTtpZihmLnN1YnN0cigwLDEpIT1cIi1cIil7aWYoZi5sZW5ndGglMj09MSl7Zj1cIjBcIitmfWVsc2V7aWYoIWYubWF0Y2goL15bMC03XS8pKXtmPVwiMDBcIitmfX19ZWxzZXt2YXIgYT1mLnN1YnN0cigxKTt2YXIgZT1hLmxlbmd0aDtpZihlJTI9PTEpe2UrPTF9ZWxzZXtpZighZi5tYXRjaCgvXlswLTddLykpe2UrPTJ9fXZhciBnPVwiXCI7Zm9yKHZhciBkPTA7ZDxlO2QrKyl7Zys9XCJmXCJ9dmFyIGM9bmV3IEJpZ0ludGVnZXIoZywxNik7dmFyIGI9Yy54b3IoaikuYWRkKEJpZ0ludGVnZXIuT05FKTtmPWIudG9TdHJpbmcoMTYpLnJlcGxhY2UoL14tLyxcIlwiKX1yZXR1cm4gZn07dGhpcy5nZXRQRU1TdHJpbmdGcm9tSGV4PWZ1bmN0aW9uKGEsYil7cmV0dXJuIGhleHRvcGVtKGEsYil9O3RoaXMubmV3T2JqZWN0PWZ1bmN0aW9uKGspe3ZhciBGPUtKVVIsbz1GLmFzbjEsdj1vLkFTTjFPYmplY3QsQj1vLkRFUkJvb2xlYW4sZT1vLkRFUkludGVnZXIsdD1vLkRFUkJpdFN0cmluZyxoPW8uREVST2N0ZXRTdHJpbmcseD1vLkRFUk51bGwseT1vLkRFUk9iamVjdElkZW50aWZpZXIsbT1vLkRFUkVudW1lcmF0ZWQsZz1vLkRFUlVURjhTdHJpbmcsZj1vLkRFUk51bWVyaWNTdHJpbmcsQT1vLkRFUlByaW50YWJsZVN0cmluZyx3PW8uREVSVGVsZXRleFN0cmluZyxxPW8uREVSSUE1U3RyaW5nLEU9by5ERVJVVENUaW1lLGo9by5ERVJHZW5lcmFsaXplZFRpbWUsYj1vLkRFUlZpc2libGVTdHJpbmcsbD1vLkRFUkJNUFN0cmluZyxuPW8uREVSU2VxdWVuY2UsYz1vLkRFUlNldCxzPW8uREVSVGFnZ2VkT2JqZWN0LHA9by5BU04xVXRpbC5uZXdPYmplY3Q7aWYoayBpbnN0YW5jZW9mIG8uQVNOMU9iamVjdCl7cmV0dXJuIGt9dmFyIHU9T2JqZWN0LmtleXMoayk7aWYodS5sZW5ndGghPTEpe3Rocm93IG5ldyBFcnJvcihcImtleSBvZiBwYXJhbSBzaGFsbCBiZSBvbmx5IG9uZS5cIil9dmFyIEg9dVswXTtpZihcIjphc24xOmJvb2w6aW50OmJpdHN0cjpvY3RzdHI6bnVsbDpvaWQ6ZW51bTp1dGY4c3RyOm51bXN0cjpwcm5zdHI6dGVsc3RyOmlhNXN0cjp1dGN0aW1lOmdlbnRpbWU6dmlzc3RyOmJtcHN0cjpzZXE6c2V0OnRhZzpcIi5pbmRleE9mKFwiOlwiK0grXCI6XCIpPT0tMSl7dGhyb3cgbmV3IEVycm9yKFwidW5kZWZpbmVkIGtleTogXCIrSCl9aWYoSD09XCJib29sXCIpe3JldHVybiBuZXcgQihrW0hdKX1pZihIPT1cImludFwiKXtyZXR1cm4gbmV3IGUoa1tIXSl9aWYoSD09XCJiaXRzdHJcIil7cmV0dXJuIG5ldyB0KGtbSF0pfWlmKEg9PVwib2N0c3RyXCIpe3JldHVybiBuZXcgaChrW0hdKX1pZihIPT1cIm51bGxcIil7cmV0dXJuIG5ldyB4KGtbSF0pfWlmKEg9PVwib2lkXCIpe3JldHVybiBuZXcgeShrW0hdKX1pZihIPT1cImVudW1cIil7cmV0dXJuIG5ldyBtKGtbSF0pfWlmKEg9PVwidXRmOHN0clwiKXtyZXR1cm4gbmV3IGcoa1tIXSl9aWYoSD09XCJudW1zdHJcIil7cmV0dXJuIG5ldyBmKGtbSF0pfWlmKEg9PVwicHJuc3RyXCIpe3JldHVybiBuZXcgQShrW0hdKX1pZihIPT1cInRlbHN0clwiKXtyZXR1cm4gbmV3IHcoa1tIXSl9aWYoSD09XCJpYTVzdHJcIil7cmV0dXJuIG5ldyBxKGtbSF0pfWlmKEg9PVwidXRjdGltZVwiKXtyZXR1cm4gbmV3IEUoa1tIXSl9aWYoSD09XCJnZW50aW1lXCIpe3JldHVybiBuZXcgaihrW0hdKX1pZihIPT1cInZpc3N0clwiKXtyZXR1cm4gbmV3IGIoa1tIXSl9aWYoSD09XCJibXBzdHJcIil7cmV0dXJuIG5ldyBsKGtbSF0pfWlmKEg9PVwiYXNuMVwiKXtyZXR1cm4gbmV3IHYoa1tIXSl9aWYoSD09XCJzZXFcIil7dmFyIGQ9a1tIXTt2YXIgRz1bXTtmb3IodmFyIHo9MDt6PGQubGVuZ3RoO3orKyl7dmFyIEQ9cChkW3pdKTtHLnB1c2goRCl9cmV0dXJuIG5ldyBuKHthcnJheTpHfSl9aWYoSD09XCJzZXRcIil7dmFyIGQ9a1tIXTt2YXIgRz1bXTtmb3IodmFyIHo9MDt6PGQubGVuZ3RoO3orKyl7dmFyIEQ9cChkW3pdKTtHLnB1c2goRCl9cmV0dXJuIG5ldyBjKHthcnJheTpHfSl9aWYoSD09XCJ0YWdcIil7dmFyIEM9a1tIXTtpZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoQyk9PT1cIltvYmplY3QgQXJyYXldXCImJkMubGVuZ3RoPT0zKXt2YXIgcj1wKENbMl0pO3JldHVybiBuZXcgcyh7dGFnOkNbMF0sZXhwbGljaXQ6Q1sxXSxvYmo6cn0pfWVsc2V7cmV0dXJuIG5ldyBzKEMpfX19O3RoaXMuanNvblRvQVNOMUhFWD1mdW5jdGlvbihiKXt2YXIgYT10aGlzLm5ld09iamVjdChiKTtyZXR1cm4gYS5nZXRFbmNvZGVkSGV4KCl9fTtLSlVSLmFzbjEuQVNOMVV0aWwub2lkSGV4VG9JbnQ9ZnVuY3Rpb24oYSl7dmFyIGo9XCJcIjt2YXIgaz1wYXJzZUludChhLnN1YnN0cigwLDIpLDE2KTt2YXIgZD1NYXRoLmZsb29yKGsvNDApO3ZhciBjPWslNDA7dmFyIGo9ZCtcIi5cIitjO3ZhciBlPVwiXCI7Zm9yKHZhciBmPTI7ZjxhLmxlbmd0aDtmKz0yKXt2YXIgZz1wYXJzZUludChhLnN1YnN0cihmLDIpLDE2KTt2YXIgaD0oXCIwMDAwMDAwMFwiK2cudG9TdHJpbmcoMikpLnNsaWNlKC04KTtlPWUraC5zdWJzdHIoMSw3KTtpZihoLnN1YnN0cigwLDEpPT1cIjBcIil7dmFyIGI9bmV3IEJpZ0ludGVnZXIoZSwyKTtqPWorXCIuXCIrYi50b1N0cmluZygxMCk7ZT1cIlwifX1yZXR1cm4gan07S0pVUi5hc24xLkFTTjFVdGlsLm9pZEludFRvSGV4PWZ1bmN0aW9uKGYpe3ZhciBlPWZ1bmN0aW9uKGEpe3ZhciBrPWEudG9TdHJpbmcoMTYpO2lmKGsubGVuZ3RoPT0xKXtrPVwiMFwiK2t9cmV0dXJuIGt9O3ZhciBkPWZ1bmN0aW9uKG8pe3ZhciBuPVwiXCI7dmFyIGs9bmV3IEJpZ0ludGVnZXIobywxMCk7dmFyIGE9ay50b1N0cmluZygyKTt2YXIgbD03LWEubGVuZ3RoJTc7aWYobD09Nyl7bD0wfXZhciBxPVwiXCI7Zm9yKHZhciBtPTA7bTxsO20rKyl7cSs9XCIwXCJ9YT1xK2E7Zm9yKHZhciBtPTA7bTxhLmxlbmd0aC0xO20rPTcpe3ZhciBwPWEuc3Vic3RyKG0sNyk7aWYobSE9YS5sZW5ndGgtNyl7cD1cIjFcIitwfW4rPWUocGFyc2VJbnQocCwyKSl9cmV0dXJuIG59O2lmKCFmLm1hdGNoKC9eWzAtOS5dKyQvKSl7dGhyb3dcIm1hbGZvcm1lZCBvaWQgc3RyaW5nOiBcIitmfXZhciBnPVwiXCI7dmFyIGI9Zi5zcGxpdChcIi5cIik7dmFyIGo9cGFyc2VJbnQoYlswXSkqNDArcGFyc2VJbnQoYlsxXSk7Zys9ZShqKTtiLnNwbGljZSgwLDIpO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtnKz1kKGJbY10pfXJldHVybiBnfTtLSlVSLmFzbjEuQVNOMU9iamVjdD1mdW5jdGlvbihlKXt2YXIgYz10cnVlO3ZhciBiPW51bGw7dmFyIGQ9XCIwMFwiO3ZhciBmPVwiMDBcIjt2YXIgYT1cIlwiO3RoaXMucGFyYW1zPW51bGw7dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWU9ZnVuY3Rpb24oKXtpZih0eXBlb2YgdGhpcy5oVj09XCJ1bmRlZmluZWRcInx8dGhpcy5oVj09bnVsbCl7dGhyb3cgbmV3IEVycm9yKFwidGhpcy5oViBpcyBudWxsIG9yIHVuZGVmaW5lZFwiKX1pZih0aGlzLmhWLmxlbmd0aCUyPT0xKXt0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZSBoZXggbXVzdCBiZSBldmVuIGxlbmd0aDogbj1cIithLmxlbmd0aCtcIix2PVwiK3RoaXMuaFYpfXZhciBqPXRoaXMuaFYubGVuZ3RoLzI7dmFyIGk9ai50b1N0cmluZygxNik7aWYoaS5sZW5ndGglMj09MSl7aT1cIjBcIitpfWlmKGo8MTI4KXtyZXR1cm4gaX1lbHNle3ZhciBoPWkubGVuZ3RoLzI7aWYoaD4xNSl7dGhyb3cgbmV3IEVycm9yKFwiQVNOLjEgbGVuZ3RoIHRvbyBsb25nIHRvIHJlcHJlc2VudCBieSA4eDogbiA9IFwiK2oudG9TdHJpbmcoMTYpKX12YXIgZz0xMjgraDtyZXR1cm4gZy50b1N0cmluZygxNikraX19O3RoaXMuZ2V0RW5jb2RlZEhleD1mdW5jdGlvbigpe2lmKHRoaXMuaFRMVj09bnVsbHx8dGhpcy5pc01vZGlmaWVkKXt0aGlzLmhWPXRoaXMuZ2V0RnJlc2hWYWx1ZUhleCgpO3RoaXMuaEw9dGhpcy5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKTt0aGlzLmhUTFY9dGhpcy5oVCt0aGlzLmhMK3RoaXMuaFY7dGhpcy5pc01vZGlmaWVkPWZhbHNlfXJldHVybiB0aGlzLmhUTFZ9O3RoaXMuZ2V0VmFsdWVIZXg9ZnVuY3Rpb24oKXt0aGlzLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gdGhpcy5oVn07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuXCJcIn07dGhpcy5zZXRCeVBhcmFtPWZ1bmN0aW9uKGcpe3RoaXMucGFyYW1zPWd9O2lmKGUhPXVuZGVmaW5lZCl7aWYoZS50bHYhPXVuZGVmaW5lZCl7dGhpcy5oVExWPWUudGx2O3RoaXMuaXNNb2RpZmllZD1mYWxzZX19fTtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmc9ZnVuY3Rpb24oYyl7S0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt2YXIgYj1udWxsO3ZhciBhPW51bGw7dGhpcy5nZXRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zfTt0aGlzLnNldFN0cmluZz1mdW5jdGlvbihkKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9ZDt0aGlzLmhWPXV0Zjh0b2hleCh0aGlzLnMpLnRvTG93ZXJDYXNlKCl9O3RoaXMuc2V0U3RyaW5nSGV4PWZ1bmN0aW9uKGQpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1udWxsO3RoaXMuaFY9ZH07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBjIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYz09XCJzdHJpbmdcIil7dGhpcy5zZXRTdHJpbmcoYyl9ZWxzZXtpZih0eXBlb2YgYy5zdHIhPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0U3RyaW5nKGMuc3RyKX1lbHNle2lmKHR5cGVvZiBjLmhleCE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRTdHJpbmdIZXgoYy5oZXgpfX19fX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lPWZ1bmN0aW9uKGMpe0tKVVIuYXNuMS5ERVJBYnN0cmFjdFRpbWUuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBiPW51bGw7dmFyIGE9bnVsbDt0aGlzLmxvY2FsRGF0ZVRvVVRDPWZ1bmN0aW9uKGcpe3ZhciBlPWcuZ2V0VGltZSgpKyhnLmdldFRpbWV6b25lT2Zmc2V0KCkqNjAwMDApO3ZhciBmPW5ldyBEYXRlKGUpO3JldHVybiBmfTt0aGlzLmZvcm1hdERhdGU9ZnVuY3Rpb24obSxvLGUpe3ZhciBnPXRoaXMuemVyb1BhZGRpbmc7dmFyIG49dGhpcy5sb2NhbERhdGVUb1VUQyhtKTt2YXIgcD1TdHJpbmcobi5nZXRGdWxsWWVhcigpKTtpZihvPT1cInV0Y1wiKXtwPXAuc3Vic3RyKDIsMil9dmFyIGw9ZyhTdHJpbmcobi5nZXRNb250aCgpKzEpLDIpO3ZhciBxPWcoU3RyaW5nKG4uZ2V0RGF0ZSgpKSwyKTt2YXIgaD1nKFN0cmluZyhuLmdldEhvdXJzKCkpLDIpO3ZhciBpPWcoU3RyaW5nKG4uZ2V0TWludXRlcygpKSwyKTt2YXIgaj1nKFN0cmluZyhuLmdldFNlY29uZHMoKSksMik7dmFyIHI9cCtsK3EraCtpK2o7aWYoZT09PXRydWUpe3ZhciBmPW4uZ2V0TWlsbGlzZWNvbmRzKCk7aWYoZiE9MCl7dmFyIGs9ZyhTdHJpbmcoZiksMyk7az1rLnJlcGxhY2UoL1swXSskLyxcIlwiKTtyPXIrXCIuXCIra319cmV0dXJuIHIrXCJaXCJ9O3RoaXMuemVyb1BhZGRpbmc9ZnVuY3Rpb24oZSxkKXtpZihlLmxlbmd0aD49ZCl7cmV0dXJuIGV9cmV0dXJuIG5ldyBBcnJheShkLWUubGVuZ3RoKzEpLmpvaW4oXCIwXCIpK2V9O3RoaXMuc2V0QnlQYXJhbT1mdW5jdGlvbihkKXt0aGlzLmhWPW51bGw7dGhpcy5oVExWPW51bGw7dGhpcy5wYXJhbXM9ZH07dGhpcy5nZXRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gdW5kZWZpbmVkfTt0aGlzLnNldFN0cmluZz1mdW5jdGlvbihkKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTtpZih0aGlzLnBhcmFtcz09dW5kZWZpbmVkKXt0aGlzLnBhcmFtcz17fX10aGlzLnBhcmFtcy5zdHI9ZH07dGhpcy5zZXRCeURhdGU9ZnVuY3Rpb24oZCl7dGhpcy5oVExWPW51bGw7dGhpcy5pc01vZGlmaWVkPXRydWU7aWYodGhpcy5wYXJhbXM9PXVuZGVmaW5lZCl7dGhpcy5wYXJhbXM9e319dGhpcy5wYXJhbXMuZGF0ZT1kfTt0aGlzLnNldEJ5RGF0ZVZhbHVlPWZ1bmN0aW9uKGgsaixlLGQsZixnKXt2YXIgaT1uZXcgRGF0ZShEYXRlLlVUQyhoLGotMSxlLGQsZixnLDApKTt0aGlzLnNldEJ5RGF0ZShpKX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaFZ9fTtleHRlbmRDbGFzcyhLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkPWZ1bmN0aW9uKGIpe0tKVVIuYXNuMS5ERVJBYnN0cmFjdFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dmFyIGE9bnVsbDt0aGlzLnNldEJ5QVNOMU9iamVjdEFycmF5PWZ1bmN0aW9uKGMpe3RoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMuYXNuMUFycmF5PWN9O3RoaXMuYXBwZW5kQVNOMU9iamVjdD1mdW5jdGlvbihjKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmFzbjFBcnJheS5wdXNoKGMpfTt0aGlzLmFzbjFBcnJheT1uZXcgQXJyYXkoKTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGIuYXJyYXkhPVwidW5kZWZpbmVkXCIpe3RoaXMuYXNuMUFycmF5PWIuYXJyYXl9fX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCxLSlVSLmFzbjEuQVNOMU9iamVjdCk7S0pVUi5hc24xLkRFUkJvb2xlYW49ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUkJvb2xlYW4uc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3RoaXMuaFQ9XCIwMVwiO2lmKGE9PWZhbHNlKXt0aGlzLmhUTFY9XCIwMTAxMDBcIn1lbHNle3RoaXMuaFRMVj1cIjAxMDFmZlwifX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUkJvb2xlYW4sS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJJbnRlZ2VyPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJJbnRlZ2VyLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDJcIjt0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPUtKVVIuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChiKX07dGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24oYyl7dmFyIGI9bmV3IEJpZ0ludGVnZXIoU3RyaW5nKGMpLDEwKTt0aGlzLnNldEJ5QmlnSW50ZWdlcihiKX07dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihiKXt0aGlzLmhWPWJ9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGEuYmlnaW50IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldEJ5QmlnSW50ZWdlcihhLmJpZ2ludCl9ZWxzZXtpZih0eXBlb2YgYVtcImludFwiXSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUludGVnZXIoYVtcImludFwiXSl9ZWxzZXtpZih0eXBlb2YgYT09XCJudW1iZXJcIil7dGhpcy5zZXRCeUludGVnZXIoYSl9ZWxzZXtpZih0eXBlb2YgYS5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0VmFsdWVIZXgoYS5oZXgpfX19fX19O2V4dGVuZENsYXNzKEtKVVIuYXNuMS5ERVJJbnRlZ2VyLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSQml0U3RyaW5nPWZ1bmN0aW9uKGIpe2lmKGIhPT11bmRlZmluZWQmJnR5cGVvZiBiLm9iaiE9PVwidW5kZWZpbmVkXCIpe3ZhciBhPUtKVVIuYXNuMS5BU04xVXRpbC5uZXdPYmplY3QoYi5vYmopO2IuaGV4PVwiMDBcIithLmdldEVuY29kZWRIZXgoKX1LSlVSLmFzbjEuREVSQml0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDNcIjt0aGlzLnNldEhleFZhbHVlSW5jbHVkaW5nVW51c2VkQml0cz1mdW5jdGlvbihjKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPWN9O3RoaXMuc2V0VW51c2VkQml0c0FuZEhleFZhbHVlPWZ1bmN0aW9uKGMsZSl7aWYoYzwwfHw3PGMpe3Rocm93XCJ1bnVzZWQgYml0cyBzaGFsbCBiZSBmcm9tIDAgdG8gNzogdSA9IFwiK2N9dmFyIGQ9XCIwXCIrYzt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPWQrZX07dGhpcy5zZXRCeUJpbmFyeVN0cmluZz1mdW5jdGlvbihlKXtlPWUucmVwbGFjZSgvMCskLyxcIlwiKTt2YXIgZj04LWUubGVuZ3RoJTg7aWYoZj09OCl7Zj0wfWZvcih2YXIgZz0wO2c8PWY7ZysrKXtlKz1cIjBcIn12YXIgaj1cIlwiO2Zvcih2YXIgZz0wO2c8ZS5sZW5ndGgtMTtnKz04KXt2YXIgZD1lLnN1YnN0cihnLDgpO3ZhciBjPXBhcnNlSW50KGQsMikudG9TdHJpbmcoMTYpO2lmKGMubGVuZ3RoPT0xKXtjPVwiMFwiK2N9ais9Y310aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPVwiMFwiK2Yran07dGhpcy5zZXRCeUJvb2xlYW5BcnJheT1mdW5jdGlvbihlKXt2YXIgZD1cIlwiO2Zvcih2YXIgYz0wO2M8ZS5sZW5ndGg7YysrKXtpZihlW2NdPT10cnVlKXtkKz1cIjFcIn1lbHNle2QrPVwiMFwifX10aGlzLnNldEJ5QmluYXJ5U3RyaW5nKGQpfTt0aGlzLm5ld0ZhbHNlQXJyYXk9ZnVuY3Rpb24oZSl7dmFyIGM9bmV3IEFycmF5KGUpO2Zvcih2YXIgZD0wO2Q8ZTtkKyspe2NbZF09ZmFsc2V9cmV0dXJuIGN9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYiE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGI9PVwic3RyaW5nXCImJmIudG9Mb3dlckNhc2UoKS5tYXRjaCgvXlswLTlhLWZdKyQvKSl7dGhpcy5zZXRIZXhWYWx1ZUluY2x1ZGluZ1VudXNlZEJpdHMoYil9ZWxzZXtpZih0eXBlb2YgYi5oZXghPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0SGV4VmFsdWVJbmNsdWRpbmdVbnVzZWRCaXRzKGIuaGV4KX1lbHNle2lmKHR5cGVvZiBiLmJpbiE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUJpbmFyeVN0cmluZyhiLmJpbil9ZWxzZXtpZih0eXBlb2YgYi5hcnJheSE9XCJ1bmRlZmluZWRcIil7dGhpcy5zZXRCeUJvb2xlYW5BcnJheShiLmFycmF5KX19fX19fTtleHRlbmRDbGFzcyhLSlVSLmFzbjEuREVSQml0U3RyaW5nLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmc9ZnVuY3Rpb24oYil7aWYoYiE9PXVuZGVmaW5lZCYmdHlwZW9mIGIub2JqIT09XCJ1bmRlZmluZWRcIil7dmFyIGE9S0pVUi5hc24xLkFTTjFVdGlsLm5ld09iamVjdChiLm9iaik7Yi5oZXg9YS5nZXRFbmNvZGVkSGV4KCl9S0pVUi5hc24xLkRFUk9jdGV0U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGIpO3RoaXMuaFQ9XCIwNFwifTtleHRlbmRDbGFzcyhLSlVSLmFzbjEuREVST2N0ZXRTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSTnVsbD1mdW5jdGlvbigpe0tKVVIuYXNuMS5ERVJOdWxsLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMDVcIjt0aGlzLmhUTFY9XCIwNTAwXCJ9O2V4dGVuZENsYXNzKEtKVVIuYXNuMS5ERVJOdWxsLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllcj1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVST2JqZWN0SWRlbnRpZmllci5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7dGhpcy5oVD1cIjA2XCI7dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLnM9bnVsbDt0aGlzLmhWPWJ9O3RoaXMuc2V0VmFsdWVPaWRTdHJpbmc9ZnVuY3Rpb24oYil7dmFyIGM9b2lkdG9oZXgoYik7aWYoYz09bnVsbCl7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIG9pZCBzdHJpbmc6IFwiK2IpfXRoaXMuaFRMVj1udWxsO3RoaXMuaXNNb2RpZmllZD10cnVlO3RoaXMucz1udWxsO3RoaXMuaFY9Y307dGhpcy5zZXRWYWx1ZU5hbWU9ZnVuY3Rpb24oYyl7dmFyIGI9S0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkKGMpO2lmKGIhPT1cIlwiKXt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGIpfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwiREVST2JqZWN0SWRlbnRpZmllciBvaWROYW1lIHVuZGVmaW5lZDogXCIrYyl9fTt0aGlzLnNldFZhbHVlTmFtZU9yT2lkPWZ1bmN0aW9uKGIpe2lmKGIubWF0Y2goL15bMC0yXS5bMC05Ll0rJC8pKXt0aGlzLnNldFZhbHVlT2lkU3RyaW5nKGIpfWVsc2V7dGhpcy5zZXRWYWx1ZU5hbWUoYil9fTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5oVn07dGhpcy5zZXRCeVBhcmFtPWZ1bmN0aW9uKGIpe2lmKHR5cGVvZiBiPT09XCJzdHJpbmdcIil7dGhpcy5zZXRWYWx1ZU5hbWVPck9pZChiKX1lbHNle2lmKGIub2lkIT09dW5kZWZpbmVkKXt0aGlzLnNldFZhbHVlTmFtZU9yT2lkKGIub2lkKX1lbHNle2lmKGIubmFtZSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRWYWx1ZU5hbWVPck9pZChiLm5hbWUpfWVsc2V7aWYoYi5oZXghPT11bmRlZmluZWQpe3RoaXMuc2V0VmFsdWVIZXgoYi5oZXgpfX19fX07aWYoYSE9PXVuZGVmaW5lZCl7dGhpcy5zZXRCeVBhcmFtKGEpfX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUk9iamVjdElkZW50aWZpZXIsS0pVUi5hc24xLkFTTjFPYmplY3QpO0tKVVIuYXNuMS5ERVJFbnVtZXJhdGVkPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJFbnVtZXJhdGVkLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzKTt0aGlzLmhUPVwiMGFcIjt0aGlzLnNldEJ5QmlnSW50ZWdlcj1mdW5jdGlvbihiKXt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTt0aGlzLmhWPUtKVVIuYXNuMS5BU04xVXRpbC5iaWdJbnRUb01pblR3b3NDb21wbGVtZW50c0hleChiKX07dGhpcy5zZXRCeUludGVnZXI9ZnVuY3Rpb24oYyl7dmFyIGI9bmV3IEJpZ0ludGVnZXIoU3RyaW5nKGMpLDEwKTt0aGlzLnNldEJ5QmlnSW50ZWdlcihiKX07dGhpcy5zZXRWYWx1ZUhleD1mdW5jdGlvbihiKXt0aGlzLmhWPWJ9O3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhWfTtpZih0eXBlb2YgYSE9XCJ1bmRlZmluZWRcIil7aWYodHlwZW9mIGFbXCJpbnRcIl0hPVwidW5kZWZpbmVkXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGFbXCJpbnRcIl0pfWVsc2V7aWYodHlwZW9mIGE9PVwibnVtYmVyXCIpe3RoaXMuc2V0QnlJbnRlZ2VyKGEpfWVsc2V7aWYodHlwZW9mIGEuaGV4IT1cInVuZGVmaW5lZFwiKXt0aGlzLnNldFZhbHVlSGV4KGEuaGV4KX19fX19O2V4dGVuZENsYXNzKEtKVVIuYXNuMS5ERVJFbnVtZXJhdGVkLEtKVVIuYXNuMS5BU04xT2JqZWN0KTtLSlVSLmFzbjEuREVSVVRGOFN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVVRGOFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMGNcIn07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUlVURjhTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSTnVtZXJpY1N0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTJcIn07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUk51bWVyaWNTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSUHJpbnRhYmxlU3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjEzXCJ9O2V4dGVuZENsYXNzKEtKVVIuYXNuMS5ERVJQcmludGFibGVTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSVGVsZXRleFN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSVGVsZXRleFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMTRcIn07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUlRlbGV0ZXhTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSSUE1U3RyaW5nPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJJQTVTdHJpbmcuc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsYSk7dGhpcy5oVD1cIjE2XCJ9O2V4dGVuZENsYXNzKEtKVVIuYXNuMS5ERVJJQTVTdHJpbmcsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RyaW5nKTtLSlVSLmFzbjEuREVSVmlzaWJsZVN0cmluZz1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSSUE1U3RyaW5nLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxYVwifTtleHRlbmRDbGFzcyhLSlVSLmFzbjEuREVSVmlzaWJsZVN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJCTVBTdHJpbmc9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUkJNUFN0cmluZy5zdXBlcmNsYXNzLmNvbnN0cnVjdG9yLmNhbGwodGhpcyxhKTt0aGlzLmhUPVwiMWVcIn07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUkJNUFN0cmluZyxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJpbmcpO0tKVVIuYXNuMS5ERVJVVENUaW1lPWZ1bmN0aW9uKGEpe0tKVVIuYXNuMS5ERVJVVENUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxN1wiO3RoaXMucGFyYW1zPXVuZGVmaW5lZDt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgZD10aGlzLnBhcmFtcztpZih0aGlzLnBhcmFtcz09dW5kZWZpbmVkKXtkPXtkYXRlOm5ldyBEYXRlKCl9fWlmKHR5cGVvZiBkPT1cInN0cmluZ1wiKXtpZihkLm1hdGNoKC9eWzAtOV17MTJ9WiQvKXx8ZC5tYXRjaCgvXlswLTldezEyfVxcLlswLTldK1okLykpe3RoaXMuaFY9c3RvaGV4KGQpfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIHN0cmluZyBmb3IgR2VuZXJhbGl6ZWRUaW1lOiBcIitkKX19ZWxzZXtpZihkLnN0ciE9dW5kZWZpbmVkKXt0aGlzLmhWPXN0b2hleChkLnN0cil9ZWxzZXtpZihkLmRhdGU9PXVuZGVmaW5lZCYmZC5taWxsaXM9PXRydWUpe3ZhciBjPW5ldyBEYXRlKCk7dGhpcy5oVj1zdG9oZXgodGhpcy5mb3JtYXREYXRlKGMsXCJ1dGNcIix0cnVlKSl9ZWxzZXtpZihkLmRhdGUhPXVuZGVmaW5lZCYmZC5kYXRlIGluc3RhbmNlb2YgRGF0ZSl7dmFyIGI9KGQubWlsbGlzPT09dHJ1ZSk7dGhpcy5oVj1zdG9oZXgodGhpcy5mb3JtYXREYXRlKGQuZGF0ZSxcInV0Y1wiLGIpKX1lbHNle2lmKGQgaW5zdGFuY2VvZiBEYXRlKXt0aGlzLmhWPXN0b2hleCh0aGlzLmZvcm1hdERhdGUoZCxcInV0Y1wiKSl9fX19fWlmKHRoaXMuaFY9PXVuZGVmaW5lZCl7dGhyb3cgbmV3IEVycm9yKFwicGFyYW1ldGVyIG5vdCBzcGVjaWZpZWQgcHJvcGVybHkgZm9yIFVUQ1RpbWVcIil9cmV0dXJuIHRoaXMuaFZ9O2lmKGEhPXVuZGVmaW5lZCl7dGhpcy5zZXRCeVBhcmFtKGEpfX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUlVUQ1RpbWUsS0pVUi5hc24xLkRFUkFic3RyYWN0VGltZSk7S0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZT1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSR2VuZXJhbGl6ZWRUaW1lLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIxOFwiO3RoaXMucGFyYW1zPWE7dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGQ9dGhpcy5wYXJhbXM7aWYodGhpcy5wYXJhbXM9PXVuZGVmaW5lZCl7ZD17ZGF0ZTpuZXcgRGF0ZSgpfX1pZih0eXBlb2YgZD09XCJzdHJpbmdcIil7aWYoZC5tYXRjaCgvXlswLTldezE0fVokLyl8fGQubWF0Y2goL15bMC05XXsxNH1cXC5bMC05XStaJC8pKXt0aGlzLmhWPXN0b2hleChkKX1lbHNle3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBzdHJpbmcgZm9yIEdlbmVyYWxpemVkVGltZTogXCIrZCl9fWVsc2V7aWYoZC5zdHIhPXVuZGVmaW5lZCl7dGhpcy5oVj1zdG9oZXgoZC5zdHIpfWVsc2V7aWYoZC5kYXRlPT11bmRlZmluZWQmJmQubWlsbGlzPT10cnVlKXt2YXIgYz1uZXcgRGF0ZSgpO3RoaXMuaFY9c3RvaGV4KHRoaXMuZm9ybWF0RGF0ZShjLFwiZ2VuXCIsdHJ1ZSkpfWVsc2V7aWYoZC5kYXRlIT11bmRlZmluZWQmJmQuZGF0ZSBpbnN0YW5jZW9mIERhdGUpe3ZhciBiPShkLm1pbGxpcz09PXRydWUpO3RoaXMuaFY9c3RvaGV4KHRoaXMuZm9ybWF0RGF0ZShkLmRhdGUsXCJnZW5cIixiKSl9ZWxzZXtpZihkIGluc3RhbmNlb2YgRGF0ZSl7dGhpcy5oVj1zdG9oZXgodGhpcy5mb3JtYXREYXRlKGQsXCJnZW5cIikpfX19fX1pZih0aGlzLmhWPT11bmRlZmluZWQpe3Rocm93IG5ldyBFcnJvcihcInBhcmFtZXRlciBub3Qgc3BlY2lmaWVkIHByb3Blcmx5IGZvciBHZW5lcmFsaXplZFRpbWVcIil9cmV0dXJuIHRoaXMuaFZ9O2lmKGEhPXVuZGVmaW5lZCl7dGhpcy5zZXRCeVBhcmFtKGEpfX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUkdlbmVyYWxpemVkVGltZSxLSlVSLmFzbjEuREVSQWJzdHJhY3RUaW1lKTtLSlVSLmFzbjEuREVSU2VxdWVuY2U9ZnVuY3Rpb24oYSl7S0pVUi5hc24xLkRFUlNlcXVlbmNlLnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIzMFwiO3RoaXMuZ2V0RnJlc2hWYWx1ZUhleD1mdW5jdGlvbigpe3ZhciBjPVwiXCI7Zm9yKHZhciBiPTA7Yjx0aGlzLmFzbjFBcnJheS5sZW5ndGg7YisrKXt2YXIgZD10aGlzLmFzbjFBcnJheVtiXTtjKz1kLmdldEVuY29kZWRIZXgoKX10aGlzLmhWPWM7cmV0dXJuIHRoaXMuaFZ9fTtleHRlbmRDbGFzcyhLSlVSLmFzbjEuREVSU2VxdWVuY2UsS0pVUi5hc24xLkRFUkFic3RyYWN0U3RydWN0dXJlZCk7S0pVUi5hc24xLkRFUlNldD1mdW5jdGlvbihhKXtLSlVSLmFzbjEuREVSU2V0LnN1cGVyY2xhc3MuY29uc3RydWN0b3IuY2FsbCh0aGlzLGEpO3RoaXMuaFQ9XCIzMVwiO3RoaXMuc29ydEZsYWc9dHJ1ZTt0aGlzLmdldEZyZXNoVmFsdWVIZXg9ZnVuY3Rpb24oKXt2YXIgYj1uZXcgQXJyYXkoKTtmb3IodmFyIGM9MDtjPHRoaXMuYXNuMUFycmF5Lmxlbmd0aDtjKyspe3ZhciBkPXRoaXMuYXNuMUFycmF5W2NdO2IucHVzaChkLmdldEVuY29kZWRIZXgoKSl9aWYodGhpcy5zb3J0RmxhZz09dHJ1ZSl7Yi5zb3J0KCl9dGhpcy5oVj1iLmpvaW4oXCJcIik7cmV0dXJuIHRoaXMuaFZ9O2lmKHR5cGVvZiBhIT1cInVuZGVmaW5lZFwiKXtpZih0eXBlb2YgYS5zb3J0ZmxhZyE9XCJ1bmRlZmluZWRcIiYmYS5zb3J0ZmxhZz09ZmFsc2Upe3RoaXMuc29ydEZsYWc9ZmFsc2V9fX07ZXh0ZW5kQ2xhc3MoS0pVUi5hc24xLkRFUlNldCxLSlVSLmFzbjEuREVSQWJzdHJhY3RTdHJ1Y3R1cmVkKTtLSlVSLmFzbjEuREVSVGFnZ2VkT2JqZWN0PWZ1bmN0aW9uKGYpe0tKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3Quc3VwZXJjbGFzcy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpO3ZhciBkPUtKVVIuYXNuMSxlPUFTTjFIRVgsYT1lLmdldFYsYz1lLmlzQVNOMUhFWCxiPWQuQVNOMVV0aWwubmV3T2JqZWN0O3RoaXMuaFQ9XCJhMFwiO3RoaXMuaFY9XCJcIjt0aGlzLmlzRXhwbGljaXQ9dHJ1ZTt0aGlzLmFzbjFPYmplY3Q9bnVsbDt0aGlzLnBhcmFtcz17dGFnOlwiYTBcIixleHBsaWNpdDp0cnVlfTt0aGlzLnNldEFTTjFPYmplY3Q9ZnVuY3Rpb24oZyxoLGkpe3RoaXMucGFyYW1zPXt0YWc6aCxleHBsaWNpdDpnLG9iajppfX07dGhpcy5nZXRGcmVzaFZhbHVlSGV4PWZ1bmN0aW9uKCl7dmFyIGg9dGhpcy5wYXJhbXM7aWYoaC5leHBsaWNpdD09dW5kZWZpbmVkKXtoLmV4cGxpY2l0PXRydWV9aWYoaC50YWdlIT11bmRlZmluZWQpe2gudGFnPWgudGFnZTtoLmV4cGxpY2l0PXRydWV9aWYoaC50YWdpIT11bmRlZmluZWQpe2gudGFnPWgudGFnaTtoLmV4cGxpY2l0PWZhbHNlfWlmKGguc3RyIT11bmRlZmluZWQpe3RoaXMuaFY9dXRmOHRvaGV4KGguc3RyKX1lbHNle2lmKGguaGV4IT11bmRlZmluZWQpe3RoaXMuaFY9aC5oZXh9ZWxzZXtpZihoLm9iaiE9dW5kZWZpbmVkKXt2YXIgZztpZihoLm9iaiBpbnN0YW5jZW9mIGQuQVNOMU9iamVjdCl7Zz1oLm9iai5nZXRFbmNvZGVkSGV4KCl9ZWxzZXtpZih0eXBlb2YgaC5vYmo9PVwib2JqZWN0XCIpe2c9YihoLm9iaikuZ2V0RW5jb2RlZEhleCgpfX1pZihoLmV4cGxpY2l0KXt0aGlzLmhWPWd9ZWxzZXt0aGlzLmhWPWEoZywwKX19ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJzdHIsIGhleCBub3Igb2JqIG5vdCBzcGVjaWZpZWRcIil9fX1pZihoLnRhZz09dW5kZWZpbmVkKXtoLnRhZz1cImEwXCJ9dGhpcy5oVD1oLnRhZzt0aGlzLmhUTFY9bnVsbDt0aGlzLmlzTW9kaWZpZWQ9dHJ1ZTtyZXR1cm4gdGhpcy5oVn07dGhpcy5zZXRCeVBhcmFtPWZ1bmN0aW9uKGcpe3RoaXMucGFyYW1zPWd9O2lmKGYhPT11bmRlZmluZWQpe3RoaXMuc2V0QnlQYXJhbShmKX19O2V4dGVuZENsYXNzKEtKVVIuYXNuMS5ERVJUYWdnZWRPYmplY3QsS0pVUi5hc24xLkFTTjFPYmplY3QpO1xuXG52YXIgQVNOMUhFWD1uZXcgZnVuY3Rpb24oKXt9O0FTTjFIRVguZ2V0TGJsZW49ZnVuY3Rpb24oYyxhKXtpZihjLnN1YnN0cihhKzIsMSkhPVwiOFwiKXtyZXR1cm4gMX12YXIgYj1wYXJzZUludChjLnN1YnN0cihhKzMsMSkpO2lmKGI9PTApe3JldHVybiAtMX1pZigwPGImJmI8MTApe3JldHVybiBiKzF9cmV0dXJuIC0yfTtBU04xSEVYLmdldEw9ZnVuY3Rpb24oYyxiKXt2YXIgYT1BU04xSEVYLmdldExibGVuKGMsYik7aWYoYTwxKXtyZXR1cm5cIlwifXJldHVybiBjLnN1YnN0cihiKzIsYSoyKX07QVNOMUhFWC5nZXRWYmxlbj1mdW5jdGlvbihkLGEpe3ZhciBjLGI7Yz1BU04xSEVYLmdldEwoZCxhKTtpZihjPT1cIlwiKXtyZXR1cm4gLTF9aWYoYy5zdWJzdHIoMCwxKT09PVwiOFwiKXtiPW5ldyBCaWdJbnRlZ2VyKGMuc3Vic3RyKDIpLDE2KX1lbHNle2I9bmV3IEJpZ0ludGVnZXIoYywxNil9cmV0dXJuIGIuaW50VmFsdWUoKX07QVNOMUhFWC5nZXRWaWR4PWZ1bmN0aW9uKGMsYil7dmFyIGE9QVNOMUhFWC5nZXRMYmxlbihjLGIpO2lmKGE8MCl7cmV0dXJuIGF9cmV0dXJuIGIrKGErMSkqMn07QVNOMUhFWC5nZXRWPWZ1bmN0aW9uKGQsYSl7dmFyIGM9QVNOMUhFWC5nZXRWaWR4KGQsYSk7dmFyIGI9QVNOMUhFWC5nZXRWYmxlbihkLGEpO3JldHVybiBkLnN1YnN0cihjLGIqMil9O0FTTjFIRVguZ2V0VExWPWZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuc3Vic3RyKGEsMikrQVNOMUhFWC5nZXRMKGIsYSkrQVNOMUhFWC5nZXRWKGIsYSl9O0FTTjFIRVguZ2V0VExWYmxlbj1mdW5jdGlvbihiLGEpe3JldHVybiAyK0FTTjFIRVguZ2V0TGJsZW4oYixhKSoyK0FTTjFIRVguZ2V0VmJsZW4oYixhKSoyfTtBU04xSEVYLmdldE5leHRTaWJsaW5nSWR4PWZ1bmN0aW9uKGQsYSl7dmFyIGM9QVNOMUhFWC5nZXRWaWR4KGQsYSk7dmFyIGI9QVNOMUhFWC5nZXRWYmxlbihkLGEpO3JldHVybiBjK2IqMn07QVNOMUhFWC5nZXRDaGlsZElkeD1mdW5jdGlvbihlLGspe3ZhciBsPUFTTjFIRVg7dmFyIGo9W107dmFyIGMsZixnO2M9bC5nZXRWaWR4KGUsayk7Zj1sLmdldFZibGVuKGUsaykqMjtpZihlLnN1YnN0cihrLDIpPT1cIjAzXCIpe2MrPTI7Zi09Mn1nPTA7dmFyIGQ9Yzt3aGlsZShnPD1mKXt2YXIgYj1sLmdldFRMVmJsZW4oZSxkKTtnKz1iO2lmKGc8PWYpe2oucHVzaChkKX1kKz1iO2lmKGc+PWYpe2JyZWFrfX1yZXR1cm4gan07QVNOMUhFWC5nZXROdGhDaGlsZElkeD1mdW5jdGlvbihkLGIsZSl7dmFyIGM9QVNOMUhFWC5nZXRDaGlsZElkeChkLGIpO3JldHVybiBjW2VdfTtBU04xSEVYLmdldElkeGJ5TGlzdD1mdW5jdGlvbihlLGQsYyxpKXt2YXIgZz1BU04xSEVYO3ZhciBmLGI7aWYoYy5sZW5ndGg9PTApe2lmKGkhPT11bmRlZmluZWQpe2lmKGUuc3Vic3RyKGQsMikhPT1pKXtyZXR1cm4gLTF9fXJldHVybiBkfWY9Yy5zaGlmdCgpO2I9Zy5nZXRDaGlsZElkeChlLGQpO2lmKGY+PWIubGVuZ3RoKXtyZXR1cm4gLTF9cmV0dXJuIGcuZ2V0SWR4YnlMaXN0KGUsYltmXSxjLGkpfTtBU04xSEVYLmdldElkeGJ5TGlzdEV4PWZ1bmN0aW9uKGYsayxiLGcpe3ZhciBtPUFTTjFIRVg7dmFyIGQsbDtpZihiLmxlbmd0aD09MCl7aWYoZyE9PXVuZGVmaW5lZCl7aWYoZi5zdWJzdHIoaywyKSE9PWcpe3JldHVybiAtMX19cmV0dXJuIGt9ZD1iLnNoaWZ0KCk7bD1tLmdldENoaWxkSWR4KGYsayk7dmFyIGo9MDtmb3IodmFyIGU9MDtlPGwubGVuZ3RoO2UrKyl7dmFyIGM9Zi5zdWJzdHIobFtlXSwyKTtpZigodHlwZW9mIGQ9PVwibnVtYmVyXCImJighbS5pc0NvbnRleHRUYWcoYykpJiZqPT1kKXx8KHR5cGVvZiBkPT1cInN0cmluZ1wiJiZtLmlzQ29udGV4dFRhZyhjLGQpKSl7cmV0dXJuIG0uZ2V0SWR4YnlMaXN0RXgoZixsW2VdLGIsZyl9aWYoIW0uaXNDb250ZXh0VGFnKGMpKXtqKyt9fXJldHVybiAtMX07QVNOMUhFWC5nZXRUTFZieUxpc3Q9ZnVuY3Rpb24oZCxjLGIsZil7dmFyIGU9QVNOMUhFWDt2YXIgYT1lLmdldElkeGJ5TGlzdChkLGMsYixmKTtpZihhPT0tMSl7cmV0dXJuIG51bGx9aWYoYT49ZC5sZW5ndGgpe3JldHVybiBudWxsfXJldHVybiBlLmdldFRMVihkLGEpfTtBU04xSEVYLmdldFRMVmJ5TGlzdEV4PWZ1bmN0aW9uKGQsYyxiLGYpe3ZhciBlPUFTTjFIRVg7dmFyIGE9ZS5nZXRJZHhieUxpc3RFeChkLGMsYixmKTtpZihhPT0tMSl7cmV0dXJuIG51bGx9cmV0dXJuIGUuZ2V0VExWKGQsYSl9O0FTTjFIRVguZ2V0VmJ5TGlzdD1mdW5jdGlvbihlLGMsYixnLGkpe3ZhciBmPUFTTjFIRVg7dmFyIGEsZDthPWYuZ2V0SWR4YnlMaXN0KGUsYyxiLGcpO2lmKGE9PS0xKXtyZXR1cm4gbnVsbH1pZihhPj1lLmxlbmd0aCl7cmV0dXJuIG51bGx9ZD1mLmdldFYoZSxhKTtpZihpPT09dHJ1ZSl7ZD1kLnN1YnN0cigyKX1yZXR1cm4gZH07QVNOMUhFWC5nZXRWYnlMaXN0RXg9ZnVuY3Rpb24oYixlLGEsZCxmKXt2YXIgaj1BU04xSEVYO3ZhciBnLGMsaTtnPWouZ2V0SWR4YnlMaXN0RXgoYixlLGEsZCk7aWYoZz09LTEpe3JldHVybiBudWxsfWk9ai5nZXRWKGIsZyk7aWYoYi5zdWJzdHIoZywyKT09XCIwM1wiJiZmIT09ZmFsc2Upe2k9aS5zdWJzdHIoMil9cmV0dXJuIGl9O0FTTjFIRVguZ2V0SW50PWZ1bmN0aW9uKGUsYixmKXtpZihmPT11bmRlZmluZWQpe2Y9LTF9dHJ5e3ZhciBjPWUuc3Vic3RyKGIsMik7aWYoYyE9XCIwMlwiJiZjIT1cIjAzXCIpe3JldHVybiBmfXZhciBhPUFTTjFIRVguZ2V0VihlLGIpO2lmKGM9PVwiMDJcIil7cmV0dXJuIHBhcnNlSW50KGEsMTYpfWVsc2V7cmV0dXJuIGJpdHN0cnRvaW50KGEpfX1jYXRjaChkKXtyZXR1cm4gZn19O0FTTjFIRVguZ2V0T0lEPWZ1bmN0aW9uKGMsYSxkKXtpZihkPT11bmRlZmluZWQpe2Q9bnVsbH10cnl7aWYoYy5zdWJzdHIoYSwyKSE9XCIwNlwiKXtyZXR1cm4gZH12YXIgZT1BU04xSEVYLmdldFYoYyxhKTtyZXR1cm4gaGV4dG9vaWQoZSl9Y2F0Y2goYil7cmV0dXJuIGR9fTtBU04xSEVYLmdldE9JRE5hbWU9ZnVuY3Rpb24oZCxhLGYpe2lmKGY9PXVuZGVmaW5lZCl7Zj1udWxsfXRyeXt2YXIgZT1BU04xSEVYLmdldE9JRChkLGEsZik7aWYoZT09Zil7cmV0dXJuIGZ9dmFyIGI9S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGUpO2lmKGI9PVwiXCIpe3JldHVybiBlfXJldHVybiBifWNhdGNoKGMpe3JldHVybiBmfX07QVNOMUhFWC5nZXRTdHJpbmc9ZnVuY3Rpb24oZCxiLGUpe2lmKGU9PXVuZGVmaW5lZCl7ZT1udWxsfXRyeXt2YXIgYT1BU04xSEVYLmdldFYoZCxiKTtyZXR1cm4gaGV4dG9yc3RyKGEpfWNhdGNoKGMpe3JldHVybiBlfX07QVNOMUhFWC5oZXh0b29pZHN0cj1mdW5jdGlvbihlKXt2YXIgaD1mdW5jdGlvbihiLGEpe2lmKGIubGVuZ3RoPj1hKXtyZXR1cm4gYn1yZXR1cm4gbmV3IEFycmF5KGEtYi5sZW5ndGgrMSkuam9pbihcIjBcIikrYn07dmFyIGw9W107dmFyIG89ZS5zdWJzdHIoMCwyKTt2YXIgZj1wYXJzZUludChvLDE2KTtsWzBdPW5ldyBTdHJpbmcoTWF0aC5mbG9vcihmLzQwKSk7bFsxXT1uZXcgU3RyaW5nKGYlNDApO3ZhciBtPWUuc3Vic3RyKDIpO3ZhciBrPVtdO2Zvcih2YXIgZz0wO2c8bS5sZW5ndGgvMjtnKyspe2sucHVzaChwYXJzZUludChtLnN1YnN0cihnKjIsMiksMTYpKX12YXIgaj1bXTt2YXIgZD1cIlwiO2Zvcih2YXIgZz0wO2c8ay5sZW5ndGg7ZysrKXtpZihrW2ddJjEyOCl7ZD1kK2goKGtbZ10mMTI3KS50b1N0cmluZygyKSw3KX1lbHNle2Q9ZCtoKChrW2ddJjEyNykudG9TdHJpbmcoMiksNyk7ai5wdXNoKG5ldyBTdHJpbmcocGFyc2VJbnQoZCwyKSkpO2Q9XCJcIn19dmFyIG49bC5qb2luKFwiLlwiKTtpZihqLmxlbmd0aD4wKXtuPW4rXCIuXCIrai5qb2luKFwiLlwiKX1yZXR1cm4gbn07QVNOMUhFWC5kdW1wPWZ1bmN0aW9uKHQsYyxsLGcpe3ZhciBwPUFTTjFIRVg7dmFyIGo9cC5nZXRWO3ZhciB5PXAuZHVtcDt2YXIgdz1wLmdldENoaWxkSWR4O3ZhciBlPXQ7aWYodCBpbnN0YW5jZW9mIEtKVVIuYXNuMS5BU04xT2JqZWN0KXtlPXQuZ2V0RW5jb2RlZEhleCgpfXZhciBxPWZ1bmN0aW9uKEEsaSl7aWYoQS5sZW5ndGg8PWkqMil7cmV0dXJuIEF9ZWxzZXt2YXIgdj1BLnN1YnN0cigwLGkpK1wiLi4odG90YWwgXCIrQS5sZW5ndGgvMitcImJ5dGVzKS4uXCIrQS5zdWJzdHIoQS5sZW5ndGgtaSxpKTtyZXR1cm4gdn19O2lmKGM9PT11bmRlZmluZWQpe2M9e29tbWl0X2xvbmdfb2N0ZXQ6MzJ9fWlmKGw9PT11bmRlZmluZWQpe2w9MH1pZihnPT09dW5kZWZpbmVkKXtnPVwiXCJ9dmFyIHg9Yy5vbW1pdF9sb25nX29jdGV0O3ZhciB6PWUuc3Vic3RyKGwsMik7aWYoej09XCIwMVwiKXt2YXIgaD1qKGUsbCk7aWYoaD09XCIwMFwiKXtyZXR1cm4gZytcIkJPT0xFQU4gRkFMU0VcXG5cIn1lbHNle3JldHVybiBnK1wiQk9PTEVBTiBUUlVFXFxuXCJ9fWlmKHo9PVwiMDJcIil7dmFyIGg9aihlLGwpO3JldHVybiBnK1wiSU5URUdFUiBcIitxKGgseCkrXCJcXG5cIn1pZih6PT1cIjAzXCIpe3ZhciBoPWooZSxsKTtpZihwLmlzQVNOMUhFWChoLnN1YnN0cigyKSkpe3ZhciBrPWcrXCJCSVRTVFJJTkcsIGVuY2Fwc3VsYXRlc1xcblwiO2s9ayt5KGguc3Vic3RyKDIpLGMsMCxnK1wiICBcIik7cmV0dXJuIGt9ZWxzZXtyZXR1cm4gZytcIkJJVFNUUklORyBcIitxKGgseCkrXCJcXG5cIn19aWYoej09XCIwNFwiKXt2YXIgaD1qKGUsbCk7aWYocC5pc0FTTjFIRVgoaCkpe3ZhciBrPWcrXCJPQ1RFVFNUUklORywgZW5jYXBzdWxhdGVzXFxuXCI7az1rK3koaCxjLDAsZytcIiAgXCIpO3JldHVybiBrfWVsc2V7cmV0dXJuIGcrXCJPQ1RFVFNUUklORyBcIitxKGgseCkrXCJcXG5cIn19aWYoej09XCIwNVwiKXtyZXR1cm4gZytcIk5VTExcXG5cIn1pZih6PT1cIjA2XCIpe3ZhciBtPWooZSxsKTt2YXIgYj1LSlVSLmFzbjEuQVNOMVV0aWwub2lkSGV4VG9JbnQobSk7dmFyIG89S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKGIpO3ZhciBhPWIucmVwbGFjZSgvXFwuL2csXCIgXCIpO2lmKG8hPVwiXCIpe3JldHVybiBnK1wiT2JqZWN0SWRlbnRpZmllciBcIitvK1wiIChcIithK1wiKVxcblwifWVsc2V7cmV0dXJuIGcrXCJPYmplY3RJZGVudGlmaWVyIChcIithK1wiKVxcblwifX1pZih6PT1cIjBhXCIpe3JldHVybiBnK1wiRU5VTUVSQVRFRCBcIitwYXJzZUludChqKGUsbCkpK1wiXFxuXCJ9aWYoej09XCIwY1wiKXtyZXR1cm4gZytcIlVURjhTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKHo9PVwiMTNcIil7cmV0dXJuIGcrXCJQcmludGFibGVTdHJpbmcgJ1wiK2hleHRvdXRmOChqKGUsbCkpK1wiJ1xcblwifWlmKHo9PVwiMTRcIil7cmV0dXJuIGcrXCJUZWxldGV4U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjE2XCIpe3JldHVybiBnK1wiSUE1U3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjE3XCIpe3JldHVybiBnK1wiVVRDVGltZSBcIitoZXh0b3V0ZjgoaihlLGwpKStcIlxcblwifWlmKHo9PVwiMThcIil7cmV0dXJuIGcrXCJHZW5lcmFsaXplZFRpbWUgXCIraGV4dG91dGY4KGooZSxsKSkrXCJcXG5cIn1pZih6PT1cIjFhXCIpe3JldHVybiBnK1wiVmlzdWFsU3RyaW5nICdcIitoZXh0b3V0ZjgoaihlLGwpKStcIidcXG5cIn1pZih6PT1cIjFlXCIpe3JldHVybiBnK1wiQk1QU3RyaW5nICdcIit1Y3MyaGV4dG91dGY4KGooZSxsKSkrXCInXFxuXCJ9aWYoej09XCIzMFwiKXtpZihlLnN1YnN0cihsLDQpPT1cIjMwMDBcIil7cmV0dXJuIGcrXCJTRVFVRU5DRSB7fVxcblwifXZhciBrPWcrXCJTRVFVRU5DRVxcblwiO3ZhciBkPXcoZSxsKTt2YXIgZj1jO2lmKChkLmxlbmd0aD09Mnx8ZC5sZW5ndGg9PTMpJiZlLnN1YnN0cihkWzBdLDIpPT1cIjA2XCImJmUuc3Vic3RyKGRbZC5sZW5ndGgtMV0sMik9PVwiMDRcIil7dmFyIG89cC5vaWRuYW1lKGooZSxkWzBdKSk7dmFyIHI9SlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShjKSk7ci54NTA5RXh0TmFtZT1vO2Y9cn1mb3IodmFyIHU9MDt1PGQubGVuZ3RoO3UrKyl7az1rK3koZSxmLGRbdV0sZytcIiAgXCIpfXJldHVybiBrfWlmKHo9PVwiMzFcIil7dmFyIGs9ZytcIlNFVFxcblwiO3ZhciBkPXcoZSxsKTtmb3IodmFyIHU9MDt1PGQubGVuZ3RoO3UrKyl7az1rK3koZSxjLGRbdV0sZytcIiAgXCIpfXJldHVybiBrfXZhciB6PXBhcnNlSW50KHosMTYpO2lmKCh6JjEyOCkhPTApe3ZhciBuPXomMzE7aWYoKHomMzIpIT0wKXt2YXIgaz1nK1wiW1wiK24rXCJdXFxuXCI7dmFyIGQ9dyhlLGwpO2Zvcih2YXIgdT0wO3U8ZC5sZW5ndGg7dSsrKXtrPWsreShlLGMsZFt1XSxnK1wiICBcIil9cmV0dXJuIGt9ZWxzZXt2YXIgaD1qKGUsbCk7aWYoQVNOMUhFWC5pc0FTTjFIRVgoaCkpe3ZhciBrPWcrXCJbXCIrbitcIl1cXG5cIjtrPWsreShoLGMsMCxnK1wiICBcIik7cmV0dXJuIGt9ZWxzZXtpZihoLnN1YnN0cigwLDgpPT1cIjY4NzQ3NDcwXCIpe2g9aGV4dG91dGY4KGgpfWVsc2V7aWYoYy54NTA5RXh0TmFtZT09PVwic3ViamVjdEFsdE5hbWVcIiYmbj09Mil7aD1oZXh0b3V0ZjgoaCl9fX12YXIgaz1nK1wiW1wiK24rXCJdIFwiK2grXCJcXG5cIjtyZXR1cm4ga319cmV0dXJuIGcrXCJVTktOT1dOKFwiK3orXCIpIFwiK2ooZSxsKStcIlxcblwifTtBU04xSEVYLnBhcnNlPWZ1bmN0aW9uKHYpe3ZhciBxPUFTTjFIRVgsZj1xLnBhcnNlLGE9cS5pc0FTTjFIRVgsbD1xLmdldFYsYj1xLmdldFRMVix3PXEuZ2V0Q2hpbGRJZHgsaT1LSlVSLmFzbjEsZT1pLkFTTjFVdGlsLm9pZEhleFRvSW50LHo9aS54NTA5Lk9JRC5vaWQybmFtZSxrPWhleHRvdXRmODt2YXIgYz17XCIwY1wiOlwidXRmOHN0clwiLFwiMTNcIjpcInBybnN0clwiLFwiMTRcIjpcInRlbHN0clwiLFwiMTZcIjpcImlhNXN0clwiLFwiMTdcIjpcInV0Y3RpbWVcIixcIjE4XCI6XCJnZW50aW1lXCIsXCIxYVwiOlwidmlzc3RyXCIsXCIxZVwiOlwiYm1wc3RyXCIsXCIzMFwiOlwic2VxXCIsXCIzMVwiOlwic2V0XCJ9O3ZhciByPWZ1bmN0aW9uKEYpe3ZhciBCPVtdO3ZhciBDPXcoRiwwKTtmb3IodmFyIEU9MDtFPEMubGVuZ3RoO0UrKyl7dmFyIHM9Q1tFXTt2YXIgZD1iKEYscyk7dmFyIEQ9ZihkKTtCLnB1c2goRCl9cmV0dXJuIEJ9O3ZhciBBPXYuc3Vic3RyKDAsMik7dmFyIGo9e307dmFyIG89bCh2LDApO2lmKEE9PVwiMDFcIil7aWYodj09XCIwMTAxZmZcIil7cmV0dXJue2Jvb2w6dHJ1ZX19cmV0dXJue2Jvb2w6ZmFsc2V9fWVsc2V7aWYoQT09XCIwMlwiKXtyZXR1cm57XCJpbnRcIjp7aGV4Om99fX1lbHNle2lmKEE9PVwiMDNcIil7dHJ5e2lmKG8uc3Vic3RyKDAsMikhPVwiMDBcIil7dGhyb3dcIm5vdCBlbmNhcFwifXZhciB0PW8uc3Vic3RyKDIpO2lmKCFhKHQpKXt0aHJvd1wibm90IGVuY2FwXCJ9cmV0dXJue2JpdHN0cjp7b2JqOmYodCl9fX1jYXRjaCh4KXt2YXIgbT1udWxsO2lmKG8ubGVuZ3RoPD02KXttPWJpdHN0cnRvYmluc3RyKG8pfWlmKG09PW51bGwpe3JldHVybntiaXRzdHI6e2hleDpvfX19ZWxzZXtyZXR1cm57Yml0c3RyOntiaW46bX19fX19ZWxzZXtpZihBPT1cIjA0XCIpe3RyeXtpZighYShvKSl7dGhyb3dcIm5vdCBlbmNhcFwifXJldHVybntvY3RzdHI6e29iajpmKG8pfX19Y2F0Y2goeCl7cmV0dXJue29jdHN0cjp7aGV4Om99fX19ZWxzZXtpZihBPT1cIjA1XCIpe3JldHVybntcIm51bGxcIjpcIlwifX1lbHNle2lmKEE9PVwiMDZcIil7dmFyIGc9ZShvKTt2YXIgcD16KGcpO2lmKHA9PVwiXCIpe3JldHVybntvaWQ6Z319ZWxzZXtyZXR1cm57b2lkOnB9fX1lbHNle2lmKEE9PVwiMGFcIil7aWYoby5sZW5ndGg+NCl7cmV0dXJue1wiZW51bVwiOntoZXg6b319fWVsc2V7cmV0dXJue1wiZW51bVwiOnBhcnNlSW50KG8sMTYpfX19ZWxzZXtpZihBPT1cIjMwXCJ8fEE9PVwiMzFcIil7altjW0FdXT1yKHYpO3JldHVybiBqfWVsc2V7aWYoXCI6MGM6MTM6MTQ6MTY6MTc6MTg6MWE6MWU6XCIuaW5kZXhPZihBKSE9LTEpe3ZhciBuPWsobyk7altjW0FdXT17c3RyOm59O3JldHVybiBqfWVsc2V7aWYoQS5tYXRjaCgvXjhbMC05XSQvKSl7dmFyIG49ayhvKTtpZihuPT1udWxsfG49PVwiXCJ8KG4ubWF0Y2goL1tcXHgwMC1cXHgxRlxceDdGLVxceDlGXS8pIT1udWxsKXwobi5tYXRjaCgvW1xcdTAwMDAtXFx1MDAxRlxcdTAwODDigJNcXHUwMDlGXS8pIT1udWxsKSl7cmV0dXJue3RhZzp7dGFnOkEsZXhwbGljaXQ6ZmFsc2UsaGV4Om99fX1lbHNle3JldHVybnt0YWc6e3RhZzpBLGV4cGxpY2l0OmZhbHNlLHN0cjpufX19fWVsc2V7aWYoQS5tYXRjaCgvXmFbMC05XSQvKSl7dHJ5e2lmKCFhKG8pKXt0aHJvd1wibm90IGVuY2FwXCJ9cmV0dXJue3RhZzp7dGFnOkEsZXhwbGljaXQ6dHJ1ZSxvYmo6ZihvKX19fWNhdGNoKHgpe3JldHVybnt0YWc6e3RhZzpBLGV4cGxpY2l0OnRydWUsaGV4Om99fX19ZWxzZXt2YXIgeT1uZXcgS0pVUi5hc24xLkFTTjFPYmplY3QoKTt5LmhWPW87dmFyIHU9eS5nZXRMZW5ndGhIZXhGcm9tVmFsdWUoKTtyZXR1cm57YXNuMTp7dGx2OkErdStvfX19fX19fX19fX19fX07QVNOMUhFWC5pc0NvbnRleHRUYWc9ZnVuY3Rpb24oYyxiKXtjPWMudG9Mb3dlckNhc2UoKTt2YXIgZixlO3RyeXtmPXBhcnNlSW50KGMsMTYpfWNhdGNoKGQpe3JldHVybiAtMX1pZihiPT09dW5kZWZpbmVkKXtpZigoZiYxOTIpPT0xMjgpe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX10cnl7dmFyIGE9Yi5tYXRjaCgvXlxcW1swLTldK1xcXSQvKTtpZihhPT1udWxsKXtyZXR1cm4gZmFsc2V9ZT1wYXJzZUludChiLnN1YnN0cigxLGIubGVuZ3RoLTEpLDEwKTtpZihlPjMxKXtyZXR1cm4gZmFsc2V9aWYoKChmJjE5Mik9PTEyOCkmJigoZiYzMSk9PWUpKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gZmFsc2V9Y2F0Y2goZCl7cmV0dXJuIGZhbHNlfX07QVNOMUhFWC5pc0FTTjFIRVg9ZnVuY3Rpb24oZSl7dmFyIGQ9QVNOMUhFWDtpZihlLmxlbmd0aCUyPT0xKXtyZXR1cm4gZmFsc2V9dmFyIGM9ZC5nZXRWYmxlbihlLDApO3ZhciBiPWUuc3Vic3RyKDAsMik7dmFyIGY9ZC5nZXRMKGUsMCk7dmFyIGE9ZS5sZW5ndGgtYi5sZW5ndGgtZi5sZW5ndGg7aWYoYT09YyoyKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gZmFsc2V9O0FTTjFIRVguY2hlY2tTdHJpY3RERVI9ZnVuY3Rpb24oZyxvLGQsYyxyKXt2YXIgcz1BU04xSEVYO2lmKGQ9PT11bmRlZmluZWQpe2lmKHR5cGVvZiBnIT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgRXJyb3IoXCJub3QgaGV4IHN0cmluZ1wiKX1nPWcudG9Mb3dlckNhc2UoKTtpZighS0pVUi5sYW5nLlN0cmluZy5pc0hleChnKSl7dGhyb3cgbmV3IEVycm9yKFwibm90IGhleCBzdHJpbmdcIil9ZD1nLmxlbmd0aDtjPWcubGVuZ3RoLzI7aWYoYzwxMjgpe3I9MX1lbHNle3I9TWF0aC5jZWlsKGMudG9TdHJpbmcoMTYpKSsxfX12YXIgaz1zLmdldEwoZyxvKTtpZihrLmxlbmd0aD5yKjIpe3Rocm93IG5ldyBFcnJvcihcIkwgb2YgVExWIHRvbyBsb25nOiBpZHg9XCIrbyl9dmFyIG49cy5nZXRWYmxlbihnLG8pO2lmKG4+Yyl7dGhyb3cgbmV3IEVycm9yKFwidmFsdWUgb2YgTCB0b28gbG9uZyB0aGFuIGhleDogaWR4PVwiK28pfXZhciBxPXMuZ2V0VExWKGcsbyk7dmFyIGY9cS5sZW5ndGgtMi1zLmdldEwoZyxvKS5sZW5ndGg7aWYoZiE9PShuKjIpKXt0aHJvdyBuZXcgRXJyb3IoXCJWIHN0cmluZyBsZW5ndGggYW5kIEwncyB2YWx1ZSBub3QgdGhlIHNhbWU6XCIrZitcIi9cIisobioyKSl9aWYobz09PTApe2lmKGcubGVuZ3RoIT1xLmxlbmd0aCl7dGhyb3cgbmV3IEVycm9yKFwidG90YWwgbGVuZ3RoIGFuZCBUTFYgbGVuZ3RoIHVubWF0Y2g6XCIrZy5sZW5ndGgrXCIhPVwiK3EubGVuZ3RoKX19dmFyIGI9Zy5zdWJzdHIobywyKTtpZihiPT09XCIwMlwiKXt2YXIgYT1zLmdldFZpZHgoZyxvKTtpZihnLnN1YnN0cihhLDIpPT1cIjAwXCImJmcuY2hhckNvZGVBdChhKzIpPDU2KXt0aHJvdyBuZXcgRXJyb3IoXCJub3QgbGVhc3QgemVyb3MgZm9yIERFUiBJTlRFR0VSXCIpfX1pZihwYXJzZUludChiLDE2KSYzMil7dmFyIHA9cy5nZXRWYmxlbihnLG8pO3ZhciBtPTA7dmFyIGw9cy5nZXRDaGlsZElkeChnLG8pO2Zvcih2YXIgZT0wO2U8bC5sZW5ndGg7ZSsrKXt2YXIgaj1zLmdldFRMVihnLGxbZV0pO20rPWoubGVuZ3RoO3MuY2hlY2tTdHJpY3RERVIoZyxsW2VdLGQsYyxyKX1pZigocCoyKSE9bSl7dGhyb3cgbmV3IEVycm9yKFwic3VtIG9mIGNoaWxkcmVuJ3MgVExWIGxlbmd0aCBhbmQgTCB1bm1hdGNoOiBcIisocCoyKStcIiE9XCIrbSl9fX07QVNOMUhFWC5vaWRuYW1lPWZ1bmN0aW9uKGEpe3ZhciBjPUtKVVIuYXNuMTtpZihLSlVSLmxhbmcuU3RyaW5nLmlzSGV4KGEpKXthPWMuQVNOMVV0aWwub2lkSGV4VG9JbnQoYSl9dmFyIGI9Yy54NTA5Lk9JRC5vaWQybmFtZShhKTtpZihiPT09XCJcIil7Yj1hfXJldHVybiBifTtcblxudmFyIEtKVVI7aWYodHlwZW9mIEtKVVI9PVwidW5kZWZpbmVkXCJ8fCFLSlVSKXtLSlVSPXt9fWlmKHR5cGVvZiBLSlVSLmxhbmc9PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmxhbmcpe0tKVVIubGFuZz17fX1LSlVSLmxhbmcuU3RyaW5nPWZ1bmN0aW9uKCl7fTtmdW5jdGlvbiBCYXNlNjR4KCl7fWZ1bmN0aW9uIHN0b0JBKGQpe3ZhciBiPW5ldyBBcnJheSgpO2Zvcih2YXIgYz0wO2M8ZC5sZW5ndGg7YysrKXtiW2NdPWQuY2hhckNvZGVBdChjKX1yZXR1cm4gYn1mdW5jdGlvbiBCQXRvcyhiKXt2YXIgZD1cIlwiO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGg7YysrKXtkPWQrU3RyaW5nLmZyb21DaGFyQ29kZShiW2NdKX1yZXR1cm4gZH1mdW5jdGlvbiBCQXRvaGV4KGIpe3ZhciBlPVwiXCI7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBjPWJbZF0udG9TdHJpbmcoMTYpO2lmKGMubGVuZ3RoPT0xKXtjPVwiMFwiK2N9ZT1lK2N9cmV0dXJuIGV9ZnVuY3Rpb24gc3RvaGV4KGEpe3JldHVybiBCQXRvaGV4KHN0b0JBKGEpKX1mdW5jdGlvbiBzdG9iNjQoYSl7cmV0dXJuIGhleDJiNjQoc3RvaGV4KGEpKX1mdW5jdGlvbiBzdG9iNjR1KGEpe3JldHVybiBiNjR0b2I2NHUoaGV4MmI2NChzdG9oZXgoYSkpKX1mdW5jdGlvbiBiNjR1dG9zKGEpe3JldHVybiBCQXRvcyhiNjR0b0JBKGI2NHV0b2I2NChhKSkpfWZ1bmN0aW9uIGI2NHRvYjY0dShhKXthPWEucmVwbGFjZSgvXFw9L2csXCJcIik7YT1hLnJlcGxhY2UoL1xcKy9nLFwiLVwiKTthPWEucmVwbGFjZSgvXFwvL2csXCJfXCIpO3JldHVybiBhfWZ1bmN0aW9uIGI2NHV0b2I2NChhKXtpZihhLmxlbmd0aCU0PT0yKXthPWErXCI9PVwifWVsc2V7aWYoYS5sZW5ndGglND09Myl7YT1hK1wiPVwifX1hPWEucmVwbGFjZSgvLS9nLFwiK1wiKTthPWEucmVwbGFjZSgvXy9nLFwiL1wiKTtyZXR1cm4gYX1mdW5jdGlvbiBoZXh0b2I2NHUoYSl7aWYoYS5sZW5ndGglMj09MSl7YT1cIjBcIithfXJldHVybiBiNjR0b2I2NHUoaGV4MmI2NChhKSl9ZnVuY3Rpb24gYjY0dXRvaGV4KGEpe3JldHVybiBiNjR0b2hleChiNjR1dG9iNjQoYSkpfXZhciB1dGY4dG9iNjR1LGI2NHV0b3V0Zjg7aWYodHlwZW9mIEJ1ZmZlcj09PVwiZnVuY3Rpb25cIil7dXRmOHRvYjY0dT1mdW5jdGlvbihhKXtyZXR1cm4gYjY0dG9iNjR1KEJ1ZmZlci5mcm9tKGEsXCJ1dGY4XCIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpKX07YjY0dXRvdXRmOD1mdW5jdGlvbihhKXtyZXR1cm4gQnVmZmVyLmZyb20oYjY0dXRvYjY0KGEpLFwiYmFzZTY0XCIpLnRvU3RyaW5nKFwidXRmOFwiKX19ZWxzZXt1dGY4dG9iNjR1PWZ1bmN0aW9uKGEpe3JldHVybiBoZXh0b2I2NHUodXJpY21wdG9oZXgoZW5jb2RlVVJJQ29tcG9uZW50QWxsKGEpKSl9O2I2NHV0b3V0Zjg9ZnVuY3Rpb24oYSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChoZXh0b3VyaWNtcChiNjR1dG9oZXgoYSkpKX19ZnVuY3Rpb24gdXRmOHRvYjY0KGEpe3JldHVybiBoZXgyYjY0KHVyaWNtcHRvaGV4KGVuY29kZVVSSUNvbXBvbmVudEFsbChhKSkpfWZ1bmN0aW9uIGI2NHRvdXRmOChhKXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGhleHRvdXJpY21wKGI2NHRvaGV4KGEpKSl9ZnVuY3Rpb24gdXRmOHRvaGV4KGEpe3JldHVybiB1cmljbXB0b2hleChlbmNvZGVVUklDb21wb25lbnRBbGwoYSkpLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gaGV4dG91dGY4KGIpe3RyeXtyZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KGhleHRvdXJpY21wKGIpKX1jYXRjaChhKXtyZXR1cm4gbnVsbH19ZnVuY3Rpb24gaGV4dG9yc3RyKGMpe3ZhciBiPVwiXCI7Zm9yKHZhciBhPTA7YTxjLmxlbmd0aC0xO2ErPTIpe2IrPVN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQoYy5zdWJzdHIoYSwyKSwxNikpfXJldHVybiBifWZ1bmN0aW9uIHJzdHJ0b2hleChjKXt2YXIgYT1cIlwiO2Zvcih2YXIgYj0wO2I8Yy5sZW5ndGg7YisrKXthKz0oXCIwXCIrYy5jaGFyQ29kZUF0KGIpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTIpfXJldHVybiBhfWZ1bmN0aW9uIGhleHRvYjY0KGEpe3JldHVybiBoZXgyYjY0KGEpfWZ1bmN0aW9uIGhleHRvYjY0bmwoYil7dmFyIGE9aGV4dG9iNjQoYik7dmFyIGM9YS5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTtjPWMucmVwbGFjZSgvXFxyXFxuJC8sXCJcIik7cmV0dXJuIGN9ZnVuY3Rpb24gYjY0bmx0b2hleChiKXt2YXIgYT1iLnJlcGxhY2UoL1teMC05QS1aYS16XFwvKz1dKi9nLFwiXCIpO3ZhciBjPWI2NHRvaGV4KGEpO3JldHVybiBjfWZ1bmN0aW9uIGhleHRvcGVtKGEsYil7dmFyIGM9aGV4dG9iNjRubChhKTtyZXR1cm5cIi0tLS0tQkVHSU4gXCIrYitcIi0tLS0tXFxyXFxuXCIrYytcIlxcclxcbi0tLS0tRU5EIFwiK2IrXCItLS0tLVxcclxcblwifWZ1bmN0aW9uIHBlbXRvaGV4KGEsYil7aWYoYS5pbmRleE9mKFwiLS0tLS1CRUdJTiBcIik9PS0xKXt0aHJvd1wiY2FuJ3QgZmluZCBQRU0gaGVhZGVyOiBcIitifWlmKGIhPT11bmRlZmluZWQpe2E9YS5yZXBsYWNlKG5ldyBSZWdFeHAoXCJeW15dKi0tLS0tQkVHSU4gXCIrYitcIi0tLS0tXCIpLFwiXCIpO2E9YS5yZXBsYWNlKG5ldyBSZWdFeHAoXCItLS0tLUVORCBcIitiK1wiLS0tLS1bXl0qJFwiKSxcIlwiKX1lbHNle2E9YS5yZXBsYWNlKC9eW15dKi0tLS0tQkVHSU4gW14tXSstLS0tLS8sXCJcIik7YT1hLnJlcGxhY2UoLy0tLS0tRU5EIFteLV0rLS0tLS1bXl0qJC8sXCJcIil9cmV0dXJuIGI2NG5sdG9oZXgoYSl9ZnVuY3Rpb24gaGV4dG9BcnJheUJ1ZmZlcihkKXtpZihkLmxlbmd0aCUyIT0wKXt0aHJvd1wiaW5wdXQgaXMgbm90IGV2ZW4gbGVuZ3RoXCJ9aWYoZC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKT09bnVsbCl7dGhyb3dcImlucHV0IGlzIG5vdCBoZXhhZGVjaW1hbFwifXZhciBiPW5ldyBBcnJheUJ1ZmZlcihkLmxlbmd0aC8yKTt2YXIgYT1uZXcgRGF0YVZpZXcoYik7Zm9yKHZhciBjPTA7YzxkLmxlbmd0aC8yO2MrKyl7YS5zZXRVaW50OChjLHBhcnNlSW50KGQuc3Vic3RyKGMqMiwyKSwxNikpfXJldHVybiBifWZ1bmN0aW9uIEFycmF5QnVmZmVydG9oZXgoYil7dmFyIGQ9XCJcIjt2YXIgYT1uZXcgRGF0YVZpZXcoYik7Zm9yKHZhciBjPTA7YzxiLmJ5dGVMZW5ndGg7YysrKXtkKz0oXCIwMFwiK2EuZ2V0VWludDgoYykudG9TdHJpbmcoMTYpKS5zbGljZSgtMil9cmV0dXJuIGR9ZnVuY3Rpb24genVsdXRvbXNlYyhuKXt2YXIgbCxqLG0sZSxmLGksYixrO3ZhciBhLGgsZyxjO2M9bi5tYXRjaCgvXihcXGR7Mn18XFxkezR9KShcXGRcXGQpKFxcZFxcZCkoXFxkXFxkKShcXGRcXGQpKFxcZFxcZCkofFxcLlxcZCspWiQvKTtpZihjKXthPWNbMV07bD1wYXJzZUludChhKTtpZihhLmxlbmd0aD09PTIpe2lmKDUwPD1sJiZsPDEwMCl7bD0xOTAwK2x9ZWxzZXtpZigwPD1sJiZsPDUwKXtsPTIwMDArbH19fWo9cGFyc2VJbnQoY1syXSktMTttPXBhcnNlSW50KGNbM10pO2U9cGFyc2VJbnQoY1s0XSk7Zj1wYXJzZUludChjWzVdKTtpPXBhcnNlSW50KGNbNl0pO2I9MDtoPWNbN107aWYoaCE9PVwiXCIpe2c9KGguc3Vic3RyKDEpK1wiMDBcIikuc3Vic3RyKDAsMyk7Yj1wYXJzZUludChnKX1yZXR1cm4gRGF0ZS5VVEMobCxqLG0sZSxmLGksYil9dGhyb3dcInVuc3VwcG9ydGVkIHp1bHUgZm9ybWF0OiBcIitufWZ1bmN0aW9uIHp1bHV0b3NlYyhhKXt2YXIgYj16dWx1dG9tc2VjKGEpO3JldHVybiB+fihiLzEwMDApfWZ1bmN0aW9uIHp1bHV0b2RhdGUoYSl7cmV0dXJuIG5ldyBEYXRlKHp1bHV0b21zZWMoYSkpfWZ1bmN0aW9uIGRhdGV0b3p1bHUoZyxlLGYpe3ZhciBiO3ZhciBhPWcuZ2V0VVRDRnVsbFllYXIoKTtpZihlKXtpZihhPDE5NTB8fDIwNDk8YSl7dGhyb3dcIm5vdCBwcm9wZXIgeWVhciBmb3IgVVRDVGltZTogXCIrYX1iPShcIlwiK2EpLnNsaWNlKC0yKX1lbHNle2I9KFwiMDAwXCIrYSkuc2xpY2UoLTQpfWIrPShcIjBcIisoZy5nZXRVVENNb250aCgpKzEpKS5zbGljZSgtMik7Yis9KFwiMFwiK2cuZ2V0VVRDRGF0ZSgpKS5zbGljZSgtMik7Yis9KFwiMFwiK2cuZ2V0VVRDSG91cnMoKSkuc2xpY2UoLTIpO2IrPShcIjBcIitnLmdldFVUQ01pbnV0ZXMoKSkuc2xpY2UoLTIpO2IrPShcIjBcIitnLmdldFVUQ1NlY29uZHMoKSkuc2xpY2UoLTIpO2lmKGYpe3ZhciBjPWcuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7aWYoYyE9PTApe2M9KFwiMDBcIitjKS5zbGljZSgtMyk7Yz1jLnJlcGxhY2UoLzArJC9nLFwiXCIpO2IrPVwiLlwiK2N9fWIrPVwiWlwiO3JldHVybiBifWZ1bmN0aW9uIHVyaWNtcHRvaGV4KGEpe3JldHVybiBhLnJlcGxhY2UoLyUvZyxcIlwiKX1mdW5jdGlvbiBoZXh0b3VyaWNtcChhKXtyZXR1cm4gYS5yZXBsYWNlKC8oLi4pL2csXCIlJDFcIil9ZnVuY3Rpb24gaXB2NnRvaGV4KGcpe3ZhciBiPVwibWFsZm9ybWVkIElQdjYgYWRkcmVzc1wiO2lmKCFnLm1hdGNoKC9eWzAtOUEtRmEtZjpdKyQvKSl7dGhyb3cgYn1nPWcudG9Mb3dlckNhc2UoKTt2YXIgZD1nLnNwbGl0KFwiOlwiKS5sZW5ndGgtMTtpZihkPDIpe3Rocm93IGJ9dmFyIGU9XCI6XCIucmVwZWF0KDctZCsyKTtnPWcucmVwbGFjZShcIjo6XCIsZSk7dmFyIGM9Zy5zcGxpdChcIjpcIik7aWYoYy5sZW5ndGghPTgpe3Rocm93IGJ9Zm9yKHZhciBmPTA7Zjw4O2YrKyl7Y1tmXT0oXCIwMDAwXCIrY1tmXSkuc2xpY2UoLTQpfXJldHVybiBjLmpvaW4oXCJcIil9ZnVuY3Rpb24gaGV4dG9pcHY2KGUpe2lmKCFlLm1hdGNoKC9eWzAtOUEtRmEtZl17MzJ9JC8pKXt0aHJvd1wibWFsZm9ybWVkIElQdjYgYWRkcmVzcyBvY3RldFwifWU9ZS50b0xvd2VyQ2FzZSgpO3ZhciBiPWUubWF0Y2goLy57MSw0fS9nKTtmb3IodmFyIGQ9MDtkPDg7ZCsrKXtiW2RdPWJbZF0ucmVwbGFjZSgvXjArLyxcIlwiKTtpZihiW2RdPT1cIlwiKXtiW2RdPVwiMFwifX1lPVwiOlwiK2Iuam9pbihcIjpcIikrXCI6XCI7dmFyIGM9ZS5tYXRjaCgvOigwOil7Mix9L2cpO2lmKGM9PT1udWxsKXtyZXR1cm4gZS5zbGljZSgxLC0xKX12YXIgZj1cIlwiO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXtpZihjW2RdLmxlbmd0aD5mLmxlbmd0aCl7Zj1jW2RdfX1lPWUucmVwbGFjZShmLFwiOjpcIik7cmV0dXJuIGUuc2xpY2UoMSwtMSl9ZnVuY3Rpb24gaGV4dG9pcChiKXt2YXIgZD1cIm1hbGZvcm1lZCBoZXggdmFsdWVcIjtpZighYi5tYXRjaCgvXihbMC05QS1GYS1mXVswLTlBLUZhLWZdKXsxLH0kLykpe3Rocm93IGR9aWYoYi5sZW5ndGg9PTgpe3ZhciBjO3RyeXtjPXBhcnNlSW50KGIuc3Vic3RyKDAsMiksMTYpK1wiLlwiK3BhcnNlSW50KGIuc3Vic3RyKDIsMiksMTYpK1wiLlwiK3BhcnNlSW50KGIuc3Vic3RyKDQsMiksMTYpK1wiLlwiK3BhcnNlSW50KGIuc3Vic3RyKDYsMiksMTYpO3JldHVybiBjfWNhdGNoKGEpe3Rocm93IGR9fWVsc2V7aWYoYi5sZW5ndGg9PTMyKXtyZXR1cm4gaGV4dG9pcHY2KGIpfWVsc2V7cmV0dXJuIGJ9fX1mdW5jdGlvbiBpcHRvaGV4KGYpe3ZhciBqPVwibWFsZm9ybWVkIElQIGFkZHJlc3NcIjtmPWYudG9Mb3dlckNhc2UoZik7aWYoZi5tYXRjaCgvXlswLTkuXSskLykpe3ZhciBiPWYuc3BsaXQoXCIuXCIpO2lmKGIubGVuZ3RoIT09NCl7dGhyb3cgan12YXIgZz1cIlwiO3RyeXtmb3IodmFyIGU9MDtlPDQ7ZSsrKXt2YXIgaD1wYXJzZUludChiW2VdKTtnKz0oXCIwXCIraC50b1N0cmluZygxNikpLnNsaWNlKC0yKX1yZXR1cm4gZ31jYXRjaChjKXt0aHJvdyBqfX1lbHNle2lmKGYubWF0Y2goL15bMC05YS1mOl0rJC8pJiZmLmluZGV4T2YoXCI6XCIpIT09LTEpe3JldHVybiBpcHY2dG9oZXgoZil9ZWxzZXt0aHJvdyBqfX19ZnVuY3Rpb24gdWNzMmhleHRvdXRmOChkKXtmdW5jdGlvbiBlKGYpe3ZhciBoPXBhcnNlSW50KGYuc3Vic3RyKDAsMiksMTYpO3ZhciBhPXBhcnNlSW50KGYuc3Vic3RyKDIpLDE2KTtpZihoPT0wJmE8MTI4KXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShhKX1pZihoPDgpe3ZhciBqPTE5MnwoKGgmNyk8PDMpfCgoYSYxOTIpPj42KTt2YXIgaT0xMjh8KGEmNjMpO3JldHVybiBoZXh0b3V0Zjgoai50b1N0cmluZygxNikraS50b1N0cmluZygxNikpfXZhciBqPTIyNHwoKGgmMjQwKT4+NCk7dmFyIGk9MTI4fCgoaCYxNSk8PDIpfCgoYSYxOTIpPj42KTt2YXIgZz0xMjh8KGEmNjMpO3JldHVybiBoZXh0b3V0Zjgoai50b1N0cmluZygxNikraS50b1N0cmluZygxNikrZy50b1N0cmluZygxNikpfXZhciBjPWQubWF0Y2goLy57NH0vZyk7dmFyIGI9Yy5tYXAoZSk7cmV0dXJuIGIuam9pbihcIlwiKX1mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRBbGwoYSl7dmFyIGQ9ZW5jb2RlVVJJQ29tcG9uZW50KGEpO3ZhciBiPVwiXCI7Zm9yKHZhciBjPTA7YzxkLmxlbmd0aDtjKyspe2lmKGRbY109PVwiJVwiKXtiPWIrZC5zdWJzdHIoYywzKTtjPWMrMn1lbHNle2I9YitcIiVcIitzdG9oZXgoZFtjXSl9fXJldHVybiBifWZ1bmN0aW9uIG5ld2xpbmVfdG9Vbml4KGEpe2E9YS5yZXBsYWNlKC9cXHJcXG4vbWcsXCJcXG5cIik7cmV0dXJuIGF9ZnVuY3Rpb24gbmV3bGluZV90b0RvcyhhKXthPWEucmVwbGFjZSgvXFxyXFxuL21nLFwiXFxuXCIpO2E9YS5yZXBsYWNlKC9cXG4vbWcsXCJcXHJcXG5cIik7cmV0dXJuIGF9S0pVUi5sYW5nLlN0cmluZy5pc0ludGVnZXI9ZnVuY3Rpb24oYSl7aWYoYS5tYXRjaCgvXlswLTldKyQvKSl7cmV0dXJuIHRydWV9ZWxzZXtpZihhLm1hdGNoKC9eLVswLTldKyQvKSl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fX07S0pVUi5sYW5nLlN0cmluZy5pc0hleD1mdW5jdGlvbihhKXtyZXR1cm4gaXNoZXgoYSl9O2Z1bmN0aW9uIGlzaGV4KGEpe2lmKGEubGVuZ3RoJTI9PTAmJihhLm1hdGNoKC9eWzAtOWEtZl0rJC8pfHxhLm1hdGNoKC9eWzAtOUEtRl0rJC8pKSl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fUtKVVIubGFuZy5TdHJpbmcuaXNCYXNlNjQ9ZnVuY3Rpb24oYSl7YT1hLnJlcGxhY2UoL1xccysvZyxcIlwiKTtpZihhLm1hdGNoKC9eWzAtOUEtWmEteitcXC9dKz17MCwzfSQvKSYmYS5sZW5ndGglND09MCl7cmV0dXJuIHRydWV9ZWxzZXtyZXR1cm4gZmFsc2V9fTtLSlVSLmxhbmcuU3RyaW5nLmlzQmFzZTY0VVJMPWZ1bmN0aW9uKGEpe2lmKGEubWF0Y2goL1srLz1dLykpe3JldHVybiBmYWxzZX1hPWI2NHV0b2I2NChhKTtyZXR1cm4gS0pVUi5sYW5nLlN0cmluZy5pc0Jhc2U2NChhKX07S0pVUi5sYW5nLlN0cmluZy5pc0ludGVnZXJBcnJheT1mdW5jdGlvbihhKXthPWEucmVwbGFjZSgvXFxzKy9nLFwiXCIpO2lmKGEubWF0Y2goL15cXFtbMC05LF0rXFxdJC8pKXtyZXR1cm4gdHJ1ZX1lbHNle3JldHVybiBmYWxzZX19O0tKVVIubGFuZy5TdHJpbmcuaXNQcmludGFibGU9ZnVuY3Rpb24oYSl7aWYoYS5tYXRjaCgvXlswLTlBLVphLXogJygpKywtLi86PT9dKiQvKSE9PW51bGwpe3JldHVybiB0cnVlfXJldHVybiBmYWxzZX07S0pVUi5sYW5nLlN0cmluZy5pc0lBNT1mdW5jdGlvbihhKXtpZihhLm1hdGNoKC9eW1xceDIwLVxceDIxXFx4MjMtXFx4N2ZdKiQvKSE9PW51bGwpe3JldHVybiB0cnVlfXJldHVybiBmYWxzZX07S0pVUi5sYW5nLlN0cmluZy5pc01haWw9ZnVuY3Rpb24oYSl7aWYoYS5tYXRjaCgvXltBLVphLXowLTldezF9W0EtWmEtejAtOV8uLV0qQHsxfVtBLVphLXowLTlfLi1dezEsfVxcLltBLVphLXowLTldezEsfSQvKSE9PW51bGwpe3JldHVybiB0cnVlfXJldHVybiBmYWxzZX07ZnVuY3Rpb24gaGV4dG9wb3NoZXgoYSl7aWYoYS5sZW5ndGglMj09MSl7cmV0dXJuXCIwXCIrYX1pZihhLnN1YnN0cigwLDEpPlwiN1wiKXtyZXR1cm5cIjAwXCIrYX1yZXR1cm4gYX1mdW5jdGlvbiBpbnRhcnlzdHJ0b2hleChiKXtiPWIucmVwbGFjZSgvXlxccypcXFtcXHMqLyxcIlwiKTtiPWIucmVwbGFjZSgvXFxzKlxcXVxccyokLyxcIlwiKTtiPWIucmVwbGFjZSgvXFxzKi9nLFwiXCIpO3RyeXt2YXIgYz1iLnNwbGl0KC8sLykubWFwKGZ1bmN0aW9uKGcsZSxoKXt2YXIgZj1wYXJzZUludChnKTtpZihmPDB8fDI1NTxmKXt0aHJvd1wiaW50ZWdlciBub3QgaW4gcmFuZ2UgMC0yNTVcIn12YXIgZD0oXCIwMFwiK2YudG9TdHJpbmcoMTYpKS5zbGljZSgtMik7cmV0dXJuIGR9KS5qb2luKFwiXCIpO3JldHVybiBjfWNhdGNoKGEpe3Rocm93XCJtYWxmb3JtZWQgaW50ZWdlciBhcnJheSBzdHJpbmc6IFwiK2F9fXZhciBzdHJkaWZmaWR4PWZ1bmN0aW9uKGMsYSl7dmFyIGQ9Yy5sZW5ndGg7aWYoYy5sZW5ndGg+YS5sZW5ndGgpe2Q9YS5sZW5ndGh9Zm9yKHZhciBiPTA7YjxkO2IrKyl7aWYoYy5jaGFyQ29kZUF0KGIpIT1hLmNoYXJDb2RlQXQoYikpe3JldHVybiBifX1pZihjLmxlbmd0aCE9YS5sZW5ndGgpe3JldHVybiBkfXJldHVybiAtMX07ZnVuY3Rpb24gb2lkdG9oZXgoZyl7dmFyIGY9ZnVuY3Rpb24oYSl7dmFyIGw9YS50b1N0cmluZygxNik7aWYobC5sZW5ndGg9PTEpe2w9XCIwXCIrbH1yZXR1cm4gbH07dmFyIGU9ZnVuY3Rpb24ocCl7dmFyIG89XCJcIjt2YXIgbD1wYXJzZUludChwLDEwKTt2YXIgYT1sLnRvU3RyaW5nKDIpO3ZhciBtPTctYS5sZW5ndGglNztpZihtPT03KXttPTB9dmFyIHI9XCJcIjtmb3IodmFyIG49MDtuPG07bisrKXtyKz1cIjBcIn1hPXIrYTtmb3IodmFyIG49MDtuPGEubGVuZ3RoLTE7bis9Nyl7dmFyIHE9YS5zdWJzdHIobiw3KTtpZihuIT1hLmxlbmd0aC03KXtxPVwiMVwiK3F9bys9ZihwYXJzZUludChxLDIpKX1yZXR1cm4gb307dHJ5e2lmKCFnLm1hdGNoKC9eWzAtOS5dKyQvKSl7cmV0dXJuIG51bGx9dmFyIGo9XCJcIjt2YXIgYj1nLnNwbGl0KFwiLlwiKTt2YXIgaz1wYXJzZUludChiWzBdLDEwKSo0MCtwYXJzZUludChiWzFdLDEwKTtqKz1mKGspO2Iuc3BsaWNlKDAsMik7Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe2orPWUoYltkXSl9cmV0dXJuIGp9Y2F0Y2goYyl7cmV0dXJuIG51bGx9fWZ1bmN0aW9uIGhleHRvb2lkKGcpe2lmKCFpc2hleChnKSl7cmV0dXJuIG51bGx9dHJ5e3ZhciBtPVtdO3ZhciBwPWcuc3Vic3RyKDAsMik7dmFyIGU9cGFyc2VJbnQocCwxNik7bVswXT1uZXcgU3RyaW5nKE1hdGguZmxvb3IoZS80MCkpO21bMV09bmV3IFN0cmluZyhlJTQwKTt2YXIgbj1nLnN1YnN0cigyKTt2YXIgbD1bXTtmb3IodmFyIGY9MDtmPG4ubGVuZ3RoLzI7ZisrKXtsLnB1c2gocGFyc2VJbnQobi5zdWJzdHIoZioyLDIpLDE2KSl9dmFyIGs9W107dmFyIGQ9XCJcIjtmb3IodmFyIGY9MDtmPGwubGVuZ3RoO2YrKyl7aWYobFtmXSYxMjgpe2Q9ZCtzdHJwYWQoKGxbZl0mMTI3KS50b1N0cmluZygyKSw3KX1lbHNle2Q9ZCtzdHJwYWQoKGxbZl0mMTI3KS50b1N0cmluZygyKSw3KTtrLnB1c2gobmV3IFN0cmluZyhwYXJzZUludChkLDIpKSk7ZD1cIlwifX12YXIgbz1tLmpvaW4oXCIuXCIpO2lmKGsubGVuZ3RoPjApe289bytcIi5cIitrLmpvaW4oXCIuXCIpfXJldHVybiBvfWNhdGNoKGope3JldHVybiBudWxsfX12YXIgc3RycGFkPWZ1bmN0aW9uKGMsYixhKXtpZihhPT11bmRlZmluZWQpe2E9XCIwXCJ9aWYoYy5sZW5ndGg+PWIpe3JldHVybiBjfXJldHVybiBuZXcgQXJyYXkoYi1jLmxlbmd0aCsxKS5qb2luKGEpK2N9O2Z1bmN0aW9uIGJpdHN0cnRvaW50KGUpe2lmKGUubGVuZ3RoJTIhPTApe3JldHVybiAtMX1lPWUudG9Mb3dlckNhc2UoKTtpZihlLm1hdGNoKC9eWzAtOWEtZl0rJC8pPT1udWxsKXtyZXR1cm4gLTF9dHJ5e3ZhciBhPWUuc3Vic3RyKDAsMik7aWYoYT09XCIwMFwiKXtyZXR1cm4gcGFyc2VJbnQoZS5zdWJzdHIoMiksMTYpfXZhciBiPXBhcnNlSW50KGEsMTYpO2lmKGI+Nyl7cmV0dXJuIC0xfXZhciBnPWUuc3Vic3RyKDIpO3ZhciBkPXBhcnNlSW50KGcsMTYpLnRvU3RyaW5nKDIpO2lmKGQ9PVwiMFwiKXtkPVwiMDAwMDAwMDBcIn1kPWQuc2xpY2UoMCwwLWIpO3ZhciBmPXBhcnNlSW50KGQsMik7aWYoZj09TmFOKXtyZXR1cm4gLTF9cmV0dXJuIGZ9Y2F0Y2goYyl7cmV0dXJuIC0xfX1mdW5jdGlvbiBpbnR0b2JpdHN0cihlKXtpZih0eXBlb2YgZSE9XCJudW1iZXJcIil7cmV0dXJuIG51bGx9aWYoZTwwKXtyZXR1cm4gbnVsbH12YXIgYz1OdW1iZXIoZSkudG9TdHJpbmcoMik7dmFyIGI9OC1jLmxlbmd0aCU4O2lmKGI9PTgpe2I9MH1jPWMrc3RycGFkKFwiXCIsYixcIjBcIik7dmFyIGQ9cGFyc2VJbnQoYywyKS50b1N0cmluZygxNik7aWYoZC5sZW5ndGglMj09MSl7ZD1cIjBcIitkfXZhciBhPVwiMFwiK2I7cmV0dXJuIGErZH1mdW5jdGlvbiBiaXRzdHJ0b2JpbnN0cihhKXt2YXIgYj1iaXRzdHJ0b2ludChhKTtpZihiPT0tMSl7cmV0dXJuIG51bGx9cmV0dXJuIGIudG9TdHJpbmcoMil9ZnVuY3Rpb24gYmluc3RydG9iaXRzdHIoYil7aWYodHlwZW9mIGIhPVwic3RyaW5nXCIpe3JldHVybiBudWxsfWlmKGIubWF0Y2goL15bMDFdKyQvKT09bnVsbCl7cmV0dXJuIG51bGx9dHJ5e3ZhciBjPXBhcnNlSW50KGIsMik7cmV0dXJuIGludHRvYml0c3RyKGMpfWNhdGNoKGEpe3JldHVybiBudWxsfX1mdW5jdGlvbiBleHRlbmRDbGFzcyhjLGEpe3ZhciBiPWZ1bmN0aW9uKCl7fTtiLnByb3RvdHlwZT1hLnByb3RvdHlwZTtjLnByb3RvdHlwZT1uZXcgYigpO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5zdXBlcmNsYXNzPWEucHJvdG90eXBlO2lmKGEucHJvdG90eXBlLmNvbnN0cnVjdG9yPT1PYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yKXthLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1hfX07XG5cbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uVXRpbD1uZXcgZnVuY3Rpb24oKXt0aGlzLkRJR0VTVElORk9IRUFEPXtzaGExOlwiMzAyMTMwMDkwNjA1MmIwZTAzMDIxYTA1MDAwNDE0XCIsc2hhMjI0OlwiMzAyZDMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjA0MDUwMDA0MWNcIixzaGEyNTY6XCIzMDMxMzAwZDA2MDk2MDg2NDgwMTY1MDMwNDAyMDEwNTAwMDQyMFwiLHNoYTM4NDpcIjMwNDEzMDBkMDYwOTYwODY0ODAxNjUwMzA0MDIwMjA1MDAwNDMwXCIsc2hhNTEyOlwiMzA1MTMwMGQwNjA5NjA4NjQ4MDE2NTAzMDQwMjAzMDUwMDA0NDBcIixtZDI6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjAyMDUwMDA0MTBcIixtZDU6XCIzMDIwMzAwYzA2MDgyYTg2NDg4NmY3MGQwMjA1MDUwMDA0MTBcIixyaXBlbWQxNjA6XCIzMDIxMzAwOTA2MDUyYjI0MDMwMjAxMDUwMDA0MTRcIix9O3RoaXMuREVGQVVMVFBST1ZJREVSPXttZDU6XCJjcnlwdG9qc1wiLHNoYTE6XCJjcnlwdG9qc1wiLHNoYTIyNDpcImNyeXB0b2pzXCIsc2hhMjU2OlwiY3J5cHRvanNcIixzaGEzODQ6XCJjcnlwdG9qc1wiLHNoYTUxMjpcImNyeXB0b2pzXCIscmlwZW1kMTYwOlwiY3J5cHRvanNcIixobWFjbWQ1OlwiY3J5cHRvanNcIixobWFjc2hhMTpcImNyeXB0b2pzXCIsaG1hY3NoYTIyNDpcImNyeXB0b2pzXCIsaG1hY3NoYTI1NjpcImNyeXB0b2pzXCIsaG1hY3NoYTM4NDpcImNyeXB0b2pzXCIsaG1hY3NoYTUxMjpcImNyeXB0b2pzXCIsaG1hY3JpcGVtZDE2MDpcImNyeXB0b2pzXCIsTUQ1d2l0aFJTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTIyNHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTUxMndpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhSU0E6XCJjcnlwdG9qcy9qc3JzYVwiLE1ENXdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMXdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTM4NHdpdGhFQ0RTQTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aEVDRFNBOlwiY3J5cHRvanMvanNyc2FcIixSSVBFTUQxNjB3aXRoRUNEU0E6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyMjR3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixTSEEyNTZ3aXRoRFNBOlwiY3J5cHRvanMvanNyc2FcIixNRDV3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTF3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBMjI0d2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFNIQTI1NndpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIixTSEEzODR3aXRoUlNBYW5kTUdGMTpcImNyeXB0b2pzL2pzcnNhXCIsU0hBNTEyd2l0aFJTQWFuZE1HRjE6XCJjcnlwdG9qcy9qc3JzYVwiLFJJUEVNRDE2MHdpdGhSU0FhbmRNR0YxOlwiY3J5cHRvanMvanNyc2FcIix9O3RoaXMuQ1JZUFRPSlNNRVNTQUdFRElHRVNUTkFNRT17bWQ1OkNyeXB0b0pTLmFsZ28uTUQ1LHNoYTE6Q3J5cHRvSlMuYWxnby5TSEExLHNoYTIyNDpDcnlwdG9KUy5hbGdvLlNIQTIyNCxzaGEyNTY6Q3J5cHRvSlMuYWxnby5TSEEyNTYsc2hhMzg0OkNyeXB0b0pTLmFsZ28uU0hBMzg0LHNoYTUxMjpDcnlwdG9KUy5hbGdvLlNIQTUxMixyaXBlbWQxNjA6Q3J5cHRvSlMuYWxnby5SSVBFTUQxNjB9O3RoaXMuZ2V0RGlnZXN0SW5mb0hleD1mdW5jdGlvbihhLGIpe2lmKHR5cGVvZiB0aGlzLkRJR0VTVElORk9IRUFEW2JdPT1cInVuZGVmaW5lZFwiKXt0aHJvd1wiYWxnIG5vdCBzdXBwb3J0ZWQgaW4gVXRpbC5ESUdFU1RJTkZPSEVBRDogXCIrYn1yZXR1cm4gdGhpcy5ESUdFU1RJTkZPSEVBRFtiXSthfTt0aGlzLmdldFBhZGRlZERpZ2VzdEluZm9IZXg9ZnVuY3Rpb24oaCxhLGope3ZhciBjPXRoaXMuZ2V0RGlnZXN0SW5mb0hleChoLGEpO3ZhciBkPWovNDtpZihjLmxlbmd0aCsyMj5kKXt0aHJvd1wia2V5IGlzIHRvbyBzaG9ydCBmb3IgU2lnQWxnOiBrZXlsZW49XCIraitcIixcIithfXZhciBiPVwiMDAwMVwiO3ZhciBrPVwiMDBcIitjO3ZhciBnPVwiXCI7dmFyIGw9ZC1iLmxlbmd0aC1rLmxlbmd0aDtmb3IodmFyIGY9MDtmPGw7Zis9Mil7Zys9XCJmZlwifXZhciBlPWIrZytrO3JldHVybiBlfTt0aGlzLmhhc2hTdHJpbmc9ZnVuY3Rpb24oYSxjKXt2YXIgYj1uZXcgS0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdCh7YWxnOmN9KTtyZXR1cm4gYi5kaWdlc3RTdHJpbmcoYSl9O3RoaXMuaGFzaEhleD1mdW5jdGlvbihiLGMpe3ZhciBhPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6Y30pO3JldHVybiBhLmRpZ2VzdEhleChiKX07dGhpcy5zaGExPWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmhhc2hTdHJpbmcoYSxcInNoYTFcIil9O3RoaXMuc2hhMjU2PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmhhc2hTdHJpbmcoYSxcInNoYTI1NlwiKX07dGhpcy5zaGEyNTZIZXg9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuaGFzaEhleChhLFwic2hhMjU2XCIpfTt0aGlzLnNoYTUxMj1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5oYXNoU3RyaW5nKGEsXCJzaGE1MTJcIil9O3RoaXMuc2hhNTEySGV4PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLmhhc2hIZXgoYSxcInNoYTUxMlwiKX07dGhpcy5pc0tleT1mdW5jdGlvbihhKXtpZihhIGluc3RhbmNlb2YgUlNBS2V5fHxhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRFNBfHxhIGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX19O0tKVVIuY3J5cHRvLlV0aWwubWQ1PWZ1bmN0aW9uKGEpe3ZhciBiPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6XCJtZDVcIixwcm92OlwiY3J5cHRvanNcIn0pO3JldHVybiBiLmRpZ2VzdFN0cmluZyhhKX07S0pVUi5jcnlwdG8uVXRpbC5yaXBlbWQxNjA9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IEtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Qoe2FsZzpcInJpcGVtZDE2MFwiLHByb3Y6XCJjcnlwdG9qc1wifSk7cmV0dXJuIGIuZGlnZXN0U3RyaW5nKGEpfTtLSlVSLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTj1uZXcgU2VjdXJlUmFuZG9tKCk7S0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21IZXhPZk5ieXRlcz1mdW5jdGlvbihiKXt2YXIgYT1uZXcgQXJyYXkoYik7S0pVUi5jcnlwdG8uVXRpbC5TRUNVUkVSQU5ET01HRU4ubmV4dEJ5dGVzKGEpO3JldHVybiBCQXRvaGV4KGEpfTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5ieXRlcz1mdW5jdGlvbihhKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoS0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21IZXhPZk5ieXRlcyhhKSwxNil9O0tKVVIuY3J5cHRvLlV0aWwuZ2V0UmFuZG9tSGV4T2ZOYml0cz1mdW5jdGlvbihkKXt2YXIgYz1kJTg7dmFyIGE9KGQtYykvODt2YXIgYj1uZXcgQXJyYXkoYSsxKTtLSlVSLmNyeXB0by5VdGlsLlNFQ1VSRVJBTkRPTUdFTi5uZXh0Qnl0ZXMoYik7YlswXT0oKCgyNTU8PGMpJjI1NSleMjU1KSZiWzBdO3JldHVybiBCQXRvaGV4KGIpfTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzPWZ1bmN0aW9uKGEpe3JldHVybiBuZXcgQmlnSW50ZWdlcihLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUhleE9mTmJpdHMoYSksMTYpfTtLSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJaZXJvVG9NYXg9ZnVuY3Rpb24oYil7dmFyIGE9Yi5iaXRMZW5ndGgoKTt3aGlsZSgxKXt2YXIgYz1LSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJPZk5iaXRzKGEpO2lmKGIuY29tcGFyZVRvKGMpIT0tMSl7cmV0dXJuIGN9fX07S0pVUi5jcnlwdG8uVXRpbC5nZXRSYW5kb21CaWdJbnRlZ2VyTWluVG9NYXg9ZnVuY3Rpb24oZSxiKXt2YXIgYz1lLmNvbXBhcmVUbyhiKTtpZihjPT0xKXt0aHJvd1wiYmlNaW4gaXMgZ3JlYXRlciB0aGFuIGJpTWF4XCJ9aWYoYz09MCl7cmV0dXJuIGV9dmFyIGE9Yi5zdWJ0cmFjdChlKTt2YXIgZD1LSlVSLmNyeXB0by5VdGlsLmdldFJhbmRvbUJpZ0ludGVnZXJaZXJvVG9NYXgoYSk7cmV0dXJuIGQuYWRkKGUpfTtLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0PWZ1bmN0aW9uKGMpe3ZhciBiPW51bGw7dmFyIGE9bnVsbDt2YXIgZD1udWxsO3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24oZyxmKXtnPUtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0Q2Fub25pY2FsQWxnTmFtZShnKTtpZihnIT09bnVsbCYmZj09PXVuZGVmaW5lZCl7Zj1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUltnXX1pZihcIjptZDU6c2hhMTpzaGEyMjQ6c2hhMjU2OnNoYTM4NDpzaGE1MTI6cmlwZW1kMTYwOlwiLmluZGV4T2YoZykhPS0xJiZmPT1cImNyeXB0b2pzXCIpe3RyeXt0aGlzLm1kPUtKVVIuY3J5cHRvLlV0aWwuQ1JZUFRPSlNNRVNTQUdFRElHRVNUTkFNRVtnXS5jcmVhdGUoKX1jYXRjaChlKXt0aHJvd1wic2V0QWxnQW5kUHJvdmlkZXIgaGFzaCBhbGcgc2V0IGZhaWwgYWxnPVwiK2crXCIvXCIrZX10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihoKXt0aGlzLm1kLnVwZGF0ZShoKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oaCl7dmFyIGk9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShoKTt0aGlzLm1kLnVwZGF0ZShpKX07dGhpcy5kaWdlc3Q9ZnVuY3Rpb24oKXt2YXIgaD10aGlzLm1kLmZpbmFsaXplKCk7cmV0dXJuIGgudG9TdHJpbmcoQ3J5cHRvSlMuZW5jLkhleCl9O3RoaXMuZGlnZXN0U3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlU3RyaW5nKGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihoKXt0aGlzLnVwZGF0ZUhleChoKTtyZXR1cm4gdGhpcy5kaWdlc3QoKX19aWYoXCI6c2hhMjU2OlwiLmluZGV4T2YoZykhPS0xJiZmPT1cInNqY2xcIil7dHJ5e3RoaXMubWQ9bmV3IHNqY2wuaGFzaC5zaGEyNTYoKX1jYXRjaChlKXt0aHJvd1wic2V0QWxnQW5kUHJvdmlkZXIgaGFzaCBhbGcgc2V0IGZhaWwgYWxnPVwiK2crXCIvXCIrZX10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihoKXt0aGlzLm1kLnVwZGF0ZShoKX07dGhpcy51cGRhdGVIZXg9ZnVuY3Rpb24oaSl7dmFyIGg9c2pjbC5jb2RlYy5oZXgudG9CaXRzKGkpO3RoaXMubWQudXBkYXRlKGgpfTt0aGlzLmRpZ2VzdD1mdW5jdGlvbigpe3ZhciBoPXRoaXMubWQuZmluYWxpemUoKTtyZXR1cm4gc2pjbC5jb2RlYy5oZXguZnJvbUJpdHMoaCl9O3RoaXMuZGlnZXN0U3RyaW5nPWZ1bmN0aW9uKGgpe3RoaXMudXBkYXRlU3RyaW5nKGgpO3JldHVybiB0aGlzLmRpZ2VzdCgpfTt0aGlzLmRpZ2VzdEhleD1mdW5jdGlvbihoKXt0aGlzLnVwZGF0ZUhleChoKTtyZXR1cm4gdGhpcy5kaWdlc3QoKX19fTt0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihlKXt0aHJvd1widXBkYXRlU3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGUpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3Q9ZnVuY3Rpb24oKXt0aHJvd1wiZGlnZXN0KCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdOYW1lK1wiL1wiK3RoaXMucHJvdk5hbWV9O3RoaXMuZGlnZXN0U3RyaW5nPWZ1bmN0aW9uKGUpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ05hbWUrXCIvXCIrdGhpcy5wcm92TmFtZX07dGhpcy5kaWdlc3RIZXg9ZnVuY3Rpb24oZSl7dGhyb3dcImRpZ2VzdEhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnTmFtZStcIi9cIit0aGlzLnByb3ZOYW1lfTtpZihjIT09dW5kZWZpbmVkKXtpZihjLmFsZyE9PXVuZGVmaW5lZCl7dGhpcy5hbGdOYW1lPWMuYWxnO2lmKGMucHJvdj09PXVuZGVmaW5lZCl7dGhpcy5wcm92TmFtZT1LSlVSLmNyeXB0by5VdGlsLkRFRkFVTFRQUk9WSURFUlt0aGlzLmFsZ05hbWVdfXRoaXMuc2V0QWxnQW5kUHJvdmlkZXIodGhpcy5hbGdOYW1lLHRoaXMucHJvdk5hbWUpfX19O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuZ2V0Q2Fub25pY2FsQWxnTmFtZT1mdW5jdGlvbihhKXtpZih0eXBlb2YgYT09PVwic3RyaW5nXCIpe2E9YS50b0xvd2VyQ2FzZSgpO2E9YS5yZXBsYWNlKC8tLyxcIlwiKX1yZXR1cm4gYX07S0pVUi5jcnlwdG8uTWVzc2FnZURpZ2VzdC5nZXRIYXNoTGVuZ3RoPWZ1bmN0aW9uKGMpe3ZhciBiPUtKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3Q7dmFyIGE9Yi5nZXRDYW5vbmljYWxBbGdOYW1lKGMpO2lmKGIuSEFTSExFTkdUSFthXT09PXVuZGVmaW5lZCl7dGhyb3dcIm5vdCBzdXBwb3J0ZWQgYWxnb3JpdGhtOiBcIitjfXJldHVybiBiLkhBU0hMRU5HVEhbYV19O0tKVVIuY3J5cHRvLk1lc3NhZ2VEaWdlc3QuSEFTSExFTkdUSD17bWQ1OjE2LHNoYTE6MjAsc2hhMjI0OjI4LHNoYTI1NjozMixzaGEzODQ6NDgsc2hhNTEyOjY0LHJpcGVtZDE2MDoyMH07S0pVUi5jcnlwdG8uTWFjPWZ1bmN0aW9uKGQpe3ZhciBmPW51bGw7dmFyIGM9bnVsbDt2YXIgYT1udWxsO3ZhciBlPW51bGw7dmFyIGI9bnVsbDt0aGlzLnNldEFsZ0FuZFByb3ZpZGVyPWZ1bmN0aW9uKGssaSl7az1rLnRvTG93ZXJDYXNlKCk7aWYoaz09bnVsbCl7az1cImhtYWNzaGExXCJ9az1rLnRvTG93ZXJDYXNlKCk7aWYoay5zdWJzdHIoMCw0KSE9XCJobWFjXCIpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciB1bnN1cHBvcnRlZCBITUFDIGFsZzogXCIra31pZihpPT09dW5kZWZpbmVkKXtpPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW2tdfXRoaXMuYWxnUHJvdj1rK1wiL1wiK2k7dmFyIGc9ay5zdWJzdHIoNCk7aWYoXCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKGcpIT0tMSYmaT09XCJjcnlwdG9qc1wiKXt0cnl7dmFyIGo9S0pVUi5jcnlwdG8uVXRpbC5DUllQVE9KU01FU1NBR0VESUdFU1ROQU1FW2ddO3RoaXMubWFjPUNyeXB0b0pTLmFsZ28uSE1BQy5jcmVhdGUoaix0aGlzLnBhc3MpfWNhdGNoKGgpe3Rocm93XCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBoYXNoQWxnPVwiK2crXCIvXCIraH10aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihsKXt0aGlzLm1hYy51cGRhdGUobCl9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGwpe3ZhciBtPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UobCk7dGhpcy5tYWMudXBkYXRlKG0pfTt0aGlzLmRvRmluYWw9ZnVuY3Rpb24oKXt2YXIgbD10aGlzLm1hYy5maW5hbGl6ZSgpO3JldHVybiBsLnRvU3RyaW5nKENyeXB0b0pTLmVuYy5IZXgpfTt0aGlzLmRvRmluYWxTdHJpbmc9ZnVuY3Rpb24obCl7dGhpcy51cGRhdGVTdHJpbmcobCk7cmV0dXJuIHRoaXMuZG9GaW5hbCgpfTt0aGlzLmRvRmluYWxIZXg9ZnVuY3Rpb24obCl7dGhpcy51cGRhdGVIZXgobCk7cmV0dXJuIHRoaXMuZG9GaW5hbCgpfX19O3RoaXMudXBkYXRlU3RyaW5nPWZ1bmN0aW9uKGcpe3Rocm93XCJ1cGRhdGVTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKGcpe3Rocm93XCJ1cGRhdGVIZXgoaGV4KSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbD1mdW5jdGlvbigpe3Rocm93XCJkaWdlc3QoKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZy9wcm92OiBcIit0aGlzLmFsZ1Byb3Z9O3RoaXMuZG9GaW5hbFN0cmluZz1mdW5jdGlvbihnKXt0aHJvd1wiZGlnZXN0U3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGcvcHJvdjogXCIrdGhpcy5hbGdQcm92fTt0aGlzLmRvRmluYWxIZXg9ZnVuY3Rpb24oZyl7dGhyb3dcImRpZ2VzdEhleChoZXgpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnL3Byb3Y6IFwiK3RoaXMuYWxnUHJvdn07dGhpcy5zZXRQYXNzd29yZD1mdW5jdGlvbihoKXtpZih0eXBlb2YgaD09XCJzdHJpbmdcIil7dmFyIGc9aDtpZihoLmxlbmd0aCUyPT0xfHwhaC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7Zz1yc3RydG9oZXgoaCl9dGhpcy5wYXNzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoZyk7cmV0dXJufWlmKHR5cGVvZiBoIT1cIm9iamVjdFwiKXt0aHJvd1wiS0pVUi5jcnlwdG8uTWFjIHVuc3VwcG9ydGVkIHBhc3N3b3JkIHR5cGU6IFwiK2h9dmFyIGc9bnVsbDtpZihoLmhleCE9PXVuZGVmaW5lZCl7aWYoaC5oZXgubGVuZ3RoJTIhPTB8fCFoLmhleC5tYXRjaCgvXlswLTlBLUZhLWZdKyQvKSl7dGhyb3dcIk1hYzogd3JvbmcgaGV4IHBhc3N3b3JkOiBcIitoLmhleH1nPWguaGV4fWlmKGgudXRmOCE9PXVuZGVmaW5lZCl7Zz11dGY4dG9oZXgoaC51dGY4KX1pZihoLnJzdHIhPT11bmRlZmluZWQpe2c9cnN0cnRvaGV4KGgucnN0cil9aWYoaC5iNjQhPT11bmRlZmluZWQpe2c9YjY0dG9oZXgoaC5iNjQpfWlmKGguYjY0dSE9PXVuZGVmaW5lZCl7Zz1iNjR1dG9oZXgoaC5iNjR1KX1pZihnPT1udWxsKXt0aHJvd1wiS0pVUi5jcnlwdG8uTWFjIHVuc3VwcG9ydGVkIHBhc3N3b3JkIHR5cGU6IFwiK2h9dGhpcy5wYXNzPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoZyl9O2lmKGQhPT11bmRlZmluZWQpe2lmKGQucGFzcyE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQYXNzd29yZChkLnBhc3MpfWlmKGQuYWxnIT09dW5kZWZpbmVkKXt0aGlzLmFsZ05hbWU9ZC5hbGc7aWYoZC5wcm92PT09dW5kZWZpbmVkKXt0aGlzLnByb3ZOYW1lPUtKVVIuY3J5cHRvLlV0aWwuREVGQVVMVFBST1ZJREVSW3RoaXMuYWxnTmFtZV19dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSl9fX07S0pVUi5jcnlwdG8uU2lnbmF0dXJlPWZ1bmN0aW9uKG8pe3ZhciBxPW51bGw7dmFyIG49bnVsbDt2YXIgcj1udWxsO3ZhciBjPW51bGw7dmFyIGw9bnVsbDt2YXIgZD1udWxsO3ZhciBrPW51bGw7dmFyIGg9bnVsbDt2YXIgcD1udWxsO3ZhciBlPW51bGw7dmFyIGI9LTE7dmFyIGc9bnVsbDt2YXIgaj1udWxsO3ZhciBhPW51bGw7dmFyIGk9bnVsbDt2YXIgZj1udWxsO3RoaXMuX3NldEFsZ05hbWVzPWZ1bmN0aW9uKCl7dmFyIHM9dGhpcy5hbGdOYW1lLm1hdGNoKC9eKC4rKXdpdGgoLispJC8pO2lmKHMpe3RoaXMubWRBbGdOYW1lPXNbMV0udG9Mb3dlckNhc2UoKTt0aGlzLnB1YmtleUFsZ05hbWU9c1syXS50b0xvd2VyQ2FzZSgpO2lmKHRoaXMucHVia2V5QWxnTmFtZT09XCJyc2FhbmRtZ2YxXCImJnRoaXMubWRBbGdOYW1lPT1cInNoYVwiKXt0aGlzLm1kQWxnTmFtZT1cInNoYTFcIn19fTt0aGlzLl96ZXJvUGFkZGluZ09mU2lnbmF0dXJlPWZ1bmN0aW9uKHgsdyl7dmFyIHY9XCJcIjt2YXIgdD13LzQteC5sZW5ndGg7Zm9yKHZhciB1PTA7dTx0O3UrKyl7dj12K1wiMFwifXJldHVybiB2K3h9O3RoaXMuc2V0QWxnQW5kUHJvdmlkZXI9ZnVuY3Rpb24odSx0KXt0aGlzLl9zZXRBbGdOYW1lcygpO2lmKHQhPVwiY3J5cHRvanMvanNyc2FcIil7dGhyb3cgbmV3IEVycm9yKFwicHJvdmlkZXIgbm90IHN1cHBvcnRlZDogXCIrdCl9aWYoXCI6bWQ1OnNoYTE6c2hhMjI0OnNoYTI1NjpzaGEzODQ6c2hhNTEyOnJpcGVtZDE2MDpcIi5pbmRleE9mKHRoaXMubWRBbGdOYW1lKSE9LTEpe3RyeXt0aGlzLm1kPW5ldyBLSlVSLmNyeXB0by5NZXNzYWdlRGlnZXN0KHthbGc6dGhpcy5tZEFsZ05hbWV9KX1jYXRjaChzKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRBbGdBbmRQcm92aWRlciBoYXNoIGFsZyBzZXQgZmFpbCBhbGc9XCIrdGhpcy5tZEFsZ05hbWUrXCIvXCIrcyl9dGhpcy5pbml0PWZ1bmN0aW9uKHcseCl7dmFyIHk9bnVsbDt0cnl7aWYoeD09PXVuZGVmaW5lZCl7eT1LRVlVVElMLmdldEtleSh3KX1lbHNle3k9S0VZVVRJTC5nZXRLZXkodyx4KX19Y2F0Y2godil7dGhyb3dcImluaXQgZmFpbGVkOlwiK3Z9aWYoeS5pc1ByaXZhdGU9PT10cnVlKXt0aGlzLnBydktleT15O3RoaXMuc3RhdGU9XCJTSUdOXCJ9ZWxzZXtpZih5LmlzUHVibGljPT09dHJ1ZSl7dGhpcy5wdWJLZXk9eTt0aGlzLnN0YXRlPVwiVkVSSUZZXCJ9ZWxzZXt0aHJvd1wiaW5pdCBmYWlsZWQuOlwiK3l9fX07dGhpcy51cGRhdGVTdHJpbmc9ZnVuY3Rpb24odil7dGhpcy5tZC51cGRhdGVTdHJpbmcodil9O3RoaXMudXBkYXRlSGV4PWZ1bmN0aW9uKHYpe3RoaXMubWQudXBkYXRlSGV4KHYpfTt0aGlzLnNpZ249ZnVuY3Rpb24oKXt0aGlzLnNIYXNoSGV4PXRoaXMubWQuZGlnZXN0KCk7aWYodGhpcy5wcnZLZXk9PT11bmRlZmluZWQmJnRoaXMuZWNwcnZoZXghPT11bmRlZmluZWQmJnRoaXMuZWNjdXJ2ZW5hbWUhPT11bmRlZmluZWQmJktKVVIuY3J5cHRvLkVDRFNBIT09dW5kZWZpbmVkKXt0aGlzLnBydktleT1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnRoaXMuZWNjdXJ2ZW5hbWUscHJ2OnRoaXMuZWNwcnZoZXh9KX1pZih0aGlzLnBydktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT09XCJyc2FhbmRtZ2YxXCIpe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaFBTUyh0aGlzLnNIYXNoSGV4LHRoaXMubWRBbGdOYW1lLHRoaXMucHNzU2FsdExlbil9ZWxzZXtpZih0aGlzLnBydktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT09XCJyc2FcIil7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgsdGhpcy5tZEFsZ05hbWUpfWVsc2V7aWYodGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSl7dGhpcy5oU2lnbj10aGlzLnBydktleS5zaWduV2l0aE1lc3NhZ2VIYXNoKHRoaXMuc0hhc2hIZXgpfWVsc2V7aWYodGhpcy5wcnZLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0Epe3RoaXMuaFNpZ249dGhpcy5wcnZLZXkuc2lnbldpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4KX1lbHNle3Rocm93XCJTaWduYXR1cmU6IHVuc3VwcG9ydGVkIHByaXZhdGUga2V5IGFsZzogXCIrdGhpcy5wdWJrZXlBbGdOYW1lfX19fXJldHVybiB0aGlzLmhTaWdufTt0aGlzLnNpZ25TdHJpbmc9ZnVuY3Rpb24odil7dGhpcy51cGRhdGVTdHJpbmcodik7cmV0dXJuIHRoaXMuc2lnbigpfTt0aGlzLnNpZ25IZXg9ZnVuY3Rpb24odil7dGhpcy51cGRhdGVIZXgodik7cmV0dXJuIHRoaXMuc2lnbigpfTt0aGlzLnZlcmlmeT1mdW5jdGlvbih2KXt0aGlzLnNIYXNoSGV4PXRoaXMubWQuZGlnZXN0KCk7aWYodGhpcy5wdWJLZXk9PT11bmRlZmluZWQmJnRoaXMuZWNwdWJoZXghPT11bmRlZmluZWQmJnRoaXMuZWNjdXJ2ZW5hbWUhPT11bmRlZmluZWQmJktKVVIuY3J5cHRvLkVDRFNBIT09dW5kZWZpbmVkKXt0aGlzLnB1YktleT1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOnRoaXMuZWNjdXJ2ZW5hbWUscHViOnRoaXMuZWNwdWJoZXh9KX1pZih0aGlzLnB1YktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT09XCJyc2FhbmRtZ2YxXCIpe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1ModGhpcy5zSGFzaEhleCx2LHRoaXMubWRBbGdOYW1lLHRoaXMucHNzU2FsdExlbil9ZWxzZXtpZih0aGlzLnB1YktleSBpbnN0YW5jZW9mIFJTQUtleSYmdGhpcy5wdWJrZXlBbGdOYW1lPT09XCJyc2FcIil7cmV0dXJuIHRoaXMucHViS2V5LnZlcmlmeVdpdGhNZXNzYWdlSGFzaCh0aGlzLnNIYXNoSGV4LHYpfWVsc2V7aWYoS0pVUi5jcnlwdG8uRUNEU0EhPT11bmRlZmluZWQmJnRoaXMucHViS2V5IGluc3RhbmNlb2YgS0pVUi5jcnlwdG8uRUNEU0Epe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle2lmKEtKVVIuY3J5cHRvLkRTQSE9PXVuZGVmaW5lZCYmdGhpcy5wdWJLZXkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5EU0Epe3JldHVybiB0aGlzLnB1YktleS52ZXJpZnlXaXRoTWVzc2FnZUhhc2godGhpcy5zSGFzaEhleCx2KX1lbHNle3Rocm93XCJTaWduYXR1cmU6IHVuc3VwcG9ydGVkIHB1YmxpYyBrZXkgYWxnOiBcIit0aGlzLnB1YmtleUFsZ05hbWV9fX19fX19O3RoaXMuaW5pdD1mdW5jdGlvbihzLHQpe3Rocm93XCJpbml0KGtleSwgcGFzcykgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnVwZGF0ZVN0cmluZz1mdW5jdGlvbihzKXt0aHJvd1widXBkYXRlU3RyaW5nKHN0cikgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnVwZGF0ZUhleD1mdW5jdGlvbihzKXt0aHJvd1widXBkYXRlSGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnNpZ249ZnVuY3Rpb24oKXt0aHJvd1wic2lnbigpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5zaWduU3RyaW5nPWZ1bmN0aW9uKHMpe3Rocm93XCJkaWdlc3RTdHJpbmcoc3RyKSBub3Qgc3VwcG9ydGVkIGZvciB0aGlzIGFsZzpwcm92PVwiK3RoaXMuYWxnUHJvdk5hbWV9O3RoaXMuc2lnbkhleD1mdW5jdGlvbihzKXt0aHJvd1wiZGlnZXN0SGV4KGhleCkgbm90IHN1cHBvcnRlZCBmb3IgdGhpcyBhbGc6cHJvdj1cIit0aGlzLmFsZ1Byb3ZOYW1lfTt0aGlzLnZlcmlmeT1mdW5jdGlvbihzKXt0aHJvd1widmVyaWZ5KGhTaWdWYWwpIG5vdCBzdXBwb3J0ZWQgZm9yIHRoaXMgYWxnOnByb3Y9XCIrdGhpcy5hbGdQcm92TmFtZX07dGhpcy5pbml0UGFyYW1zPW87aWYobyE9PXVuZGVmaW5lZCl7aWYoby5hbGchPT11bmRlZmluZWQpe3RoaXMuYWxnTmFtZT1vLmFsZztpZihvLnByb3Y9PT11bmRlZmluZWQpe3RoaXMucHJvdk5hbWU9S0pVUi5jcnlwdG8uVXRpbC5ERUZBVUxUUFJPVklERVJbdGhpcy5hbGdOYW1lXX1lbHNle3RoaXMucHJvdk5hbWU9by5wcm92fXRoaXMuYWxnUHJvdk5hbWU9dGhpcy5hbGdOYW1lK1wiOlwiK3RoaXMucHJvdk5hbWU7dGhpcy5zZXRBbGdBbmRQcm92aWRlcih0aGlzLmFsZ05hbWUsdGhpcy5wcm92TmFtZSk7dGhpcy5fc2V0QWxnTmFtZXMoKX1pZihvLnBzc3NhbHRsZW4hPT11bmRlZmluZWQpe3RoaXMucHNzU2FsdExlbj1vLnBzc3NhbHRsZW59aWYoby5wcnZrZXlwZW0hPT11bmRlZmluZWQpe2lmKG8ucHJ2a2V5cGFzIT09dW5kZWZpbmVkKXt0aHJvd1wiYm90aCBwcnZrZXlwZW0gYW5kIHBydmtleXBhcyBwYXJhbWV0ZXJzIG5vdCBzdXBwb3J0ZWRcIn1lbHNle3RyeXt2YXIgcT1LRVlVVElMLmdldEtleShvLnBydmtleXBlbSk7dGhpcy5pbml0KHEpfWNhdGNoKG0pe3Rocm93XCJmYXRhbCBlcnJvciB0byBsb2FkIHBlbSBwcml2YXRlIGtleTogXCIrbX19fX19O0tKVVIuY3J5cHRvLkNpcGhlcj1mdW5jdGlvbihhKXt9O0tKVVIuY3J5cHRvLkNpcGhlci5lbmNyeXB0PWZ1bmN0aW9uKGUsZixkKXtpZihmIGluc3RhbmNlb2YgUlNBS2V5JiZmLmlzUHVibGljKXt2YXIgYz1LSlVSLmNyeXB0by5DaXBoZXIuZ2V0QWxnQnlLZXlBbmROYW1lKGYsZCk7aWYoYz09PVwiUlNBXCIpe3JldHVybiBmLmVuY3J5cHQoZSl9aWYoYz09PVwiUlNBT0FFUFwiKXtyZXR1cm4gZi5lbmNyeXB0T0FFUChlLFwic2hhMVwiKX12YXIgYj1jLm1hdGNoKC9eUlNBT0FFUChcXGQrKSQvKTtpZihiIT09bnVsbCl7cmV0dXJuIGYuZW5jcnlwdE9BRVAoZSxcInNoYVwiK2JbMV0pfXRocm93XCJDaXBoZXIuZW5jcnlwdDogdW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBSU0FLZXk6IFwiK2R9ZWxzZXt0aHJvd1wiQ2lwaGVyLmVuY3J5cHQ6IHVuc3VwcG9ydGVkIGtleSBvciBhbGdvcml0aG1cIn19O0tKVVIuY3J5cHRvLkNpcGhlci5kZWNyeXB0PWZ1bmN0aW9uKGUsZixkKXtpZihmIGluc3RhbmNlb2YgUlNBS2V5JiZmLmlzUHJpdmF0ZSl7dmFyIGM9S0pVUi5jcnlwdG8uQ2lwaGVyLmdldEFsZ0J5S2V5QW5kTmFtZShmLGQpO2lmKGM9PT1cIlJTQVwiKXtyZXR1cm4gZi5kZWNyeXB0KGUpfWlmKGM9PT1cIlJTQU9BRVBcIil7cmV0dXJuIGYuZGVjcnlwdE9BRVAoZSxcInNoYTFcIil9dmFyIGI9Yy5tYXRjaCgvXlJTQU9BRVAoXFxkKykkLyk7aWYoYiE9PW51bGwpe3JldHVybiBmLmRlY3J5cHRPQUVQKGUsXCJzaGFcIitiWzFdKX10aHJvd1wiQ2lwaGVyLmRlY3J5cHQ6IHVuc3VwcG9ydGVkIGFsZ29yaXRobSBmb3IgUlNBS2V5OiBcIitkfWVsc2V7dGhyb3dcIkNpcGhlci5kZWNyeXB0OiB1bnN1cHBvcnRlZCBrZXkgb3IgYWxnb3JpdGhtXCJ9fTtLSlVSLmNyeXB0by5DaXBoZXIuZ2V0QWxnQnlLZXlBbmROYW1lPWZ1bmN0aW9uKGIsYSl7aWYoYiBpbnN0YW5jZW9mIFJTQUtleSl7aWYoXCI6UlNBOlJTQU9BRVA6UlNBT0FFUDIyNDpSU0FPQUVQMjU2OlJTQU9BRVAzODQ6UlNBT0FFUDUxMjpcIi5pbmRleE9mKGEpIT0tMSl7cmV0dXJuIGF9aWYoYT09PW51bGx8fGE9PT11bmRlZmluZWQpe3JldHVyblwiUlNBXCJ9dGhyb3dcImdldEFsZ0J5S2V5QW5kTmFtZTogbm90IHN1cHBvcnRlZCBhbGdvcml0aG0gbmFtZSBmb3IgUlNBS2V5OiBcIithfXRocm93XCJnZXRBbGdCeUtleUFuZE5hbWU6IG5vdCBzdXBwb3J0ZWQgYWxnb3JpdGhtIG5hbWU6IFwiK2F9O0tKVVIuY3J5cHRvLk9JRD1uZXcgZnVuY3Rpb24oKXt0aGlzLm9pZGhleDJuYW1lPXtcIjJhODY0ODg2ZjcwZDAxMDEwMVwiOlwicnNhRW5jcnlwdGlvblwiLFwiMmE4NjQ4Y2UzZDAyMDFcIjpcImVjUHVibGljS2V5XCIsXCIyYTg2NDhjZTM4MDQwMVwiOlwiZHNhXCIsXCIyYTg2NDhjZTNkMDMwMTA3XCI6XCJzZWNwMjU2cjFcIixcIjJiODEwNDAwMWZcIjpcInNlY3AxOTJrMVwiLFwiMmI4MTA0MDAyMVwiOlwic2VjcDIyNHIxXCIsXCIyYjgxMDQwMDBhXCI6XCJzZWNwMjU2azFcIixcIjJiODEwNDAwMjJcIjpcInNlY3AzODRyMVwiLFwiMmI4MTA0MDAyM1wiOlwic2VjcDUyMXIxXCIsXCIyYTg2NDhjZTM4MDQwM1wiOlwiU0hBMXdpdGhEU0FcIixcIjYwODY0ODAxNjUwMzA0MDMwMVwiOlwiU0hBMjI0d2l0aERTQVwiLFwiNjA4NjQ4MDE2NTAzMDQwMzAyXCI6XCJTSEEyNTZ3aXRoRFNBXCIsfX07XG5cbmlmKHR5cGVvZiBLSlVSPT1cInVuZGVmaW5lZFwifHwhS0pVUil7S0pVUj17fX1pZih0eXBlb2YgS0pVUi5jcnlwdG89PVwidW5kZWZpbmVkXCJ8fCFLSlVSLmNyeXB0byl7S0pVUi5jcnlwdG89e319S0pVUi5jcnlwdG8uRUNEU0E9ZnVuY3Rpb24oZSl7dmFyIGc9XCJzZWNwMjU2cjFcIjt2YXIgcD1udWxsO3ZhciBiPW51bGw7dmFyIGk9bnVsbDt2YXIgaj1FcnJvcixmPUJpZ0ludGVnZXIsaD1FQ1BvaW50RnAsbT1LSlVSLmNyeXB0by5FQ0RTQSxjPUtKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIsZD1tLmdldE5hbWUscT1BU04xSEVYLG49cS5nZXRWYnlMaXN0RXgsaz1xLmlzQVNOMUhFWDt2YXIgYT1uZXcgU2VjdXJlUmFuZG9tKCk7dmFyIG89bnVsbDt0aGlzLnR5cGU9XCJFQ1wiO3RoaXMuaXNQcml2YXRlPWZhbHNlO3RoaXMuaXNQdWJsaWM9ZmFsc2U7ZnVuY3Rpb24gbCh4LHQsdyxzKXt2YXIgcj1NYXRoLm1heCh0LmJpdExlbmd0aCgpLHMuYml0TGVuZ3RoKCkpO3ZhciB5PXguYWRkMkQodyk7dmFyIHY9eC5jdXJ2ZS5nZXRJbmZpbml0eSgpO2Zvcih2YXIgdT1yLTE7dT49MDstLXUpe3Y9di50d2ljZTJEKCk7di56PWYuT05FO2lmKHQudGVzdEJpdCh1KSl7aWYocy50ZXN0Qml0KHUpKXt2PXYuYWRkMkQoeSl9ZWxzZXt2PXYuYWRkMkQoeCl9fWVsc2V7aWYocy50ZXN0Qml0KHUpKXt2PXYuYWRkMkQodyl9fX1yZXR1cm4gdn10aGlzLmdldEJpZ1JhbmRvbT1mdW5jdGlvbihyKXtyZXR1cm4gbmV3IGYoci5iaXRMZW5ndGgoKSxhKS5tb2Qoci5zdWJ0cmFjdChmLk9ORSkpLmFkZChmLk9ORSl9O3RoaXMuc2V0TmFtZWRDdXJ2ZT1mdW5jdGlvbihyKXt0aGlzLmVjcGFyYW1zPWMuZ2V0QnlOYW1lKHIpO3RoaXMucHJ2S2V5SGV4PW51bGw7dGhpcy5wdWJLZXlIZXg9bnVsbDt0aGlzLmN1cnZlTmFtZT1yfTt0aGlzLnNldFByaXZhdGVLZXlIZXg9ZnVuY3Rpb24ocil7dGhpcy5pc1ByaXZhdGU9dHJ1ZTt0aGlzLnBydktleUhleD1yfTt0aGlzLnNldFB1YmxpY0tleUhleD1mdW5jdGlvbihyKXt0aGlzLmlzUHVibGljPXRydWU7dGhpcy5wdWJLZXlIZXg9cn07dGhpcy5nZXRQdWJsaWNLZXlYWUhleD1mdW5jdGlvbigpe3ZhciB0PXRoaXMucHViS2V5SGV4O2lmKHQuc3Vic3RyKDAsMikhPT1cIjA0XCIpe3Rocm93XCJ0aGlzIG1ldGhvZCBzdXBwb3J0cyB1bmNvbXByZXNzZWQgZm9ybWF0KDA0KSBvbmx5XCJ9dmFyIHM9dGhpcy5lY3BhcmFtcy5rZXljaGFybGVuO2lmKHQubGVuZ3RoIT09MitzKjIpe3Rocm93XCJtYWxmb3JtZWQgcHVibGljIGtleSBoZXggbGVuZ3RoXCJ9dmFyIHI9e307ci54PXQuc3Vic3RyKDIscyk7ci55PXQuc3Vic3RyKDIrcyk7cmV0dXJuIHJ9O3RoaXMuZ2V0U2hvcnROSVNUUEN1cnZlTmFtZT1mdW5jdGlvbigpe3ZhciByPXRoaXMuY3VydmVOYW1lO2lmKHI9PT1cInNlY3AyNTZyMVwifHxyPT09XCJOSVNUIFAtMjU2XCJ8fHI9PT1cIlAtMjU2XCJ8fHI9PT1cInByaW1lMjU2djFcIil7cmV0dXJuXCJQLTI1NlwifWlmKHI9PT1cInNlY3AzODRyMVwifHxyPT09XCJOSVNUIFAtMzg0XCJ8fHI9PT1cIlAtMzg0XCIpe3JldHVyblwiUC0zODRcIn1pZihyPT09XCJzZWNwNTIxcjFcInx8cj09PVwiTklTVCBQLTUyMVwifHxyPT09XCJQLTUyMVwiKXtyZXR1cm5cIlAtNTIxXCJ9cmV0dXJuIG51bGx9O3RoaXMuZ2VuZXJhdGVLZXlQYWlySGV4PWZ1bmN0aW9uKCl7dmFyIHM9dGhpcy5lY3BhcmFtcy5uO3ZhciB1PXRoaXMuZ2V0QmlnUmFuZG9tKHMpO3ZhciByPXRoaXMuZWNwYXJhbXMua2V5Y2hhcmxlbjt2YXIgdD0oXCIwMDAwMDAwMDAwXCIrdS50b1N0cmluZygxNikpLnNsaWNlKC1yKTt0aGlzLnNldFByaXZhdGVLZXlIZXgodCk7dmFyIHY9dGhpcy5nZW5lcmF0ZVB1YmxpY0tleUhleCgpO3JldHVybntlY3BydmhleDp0LGVjcHViaGV4OnZ9fTt0aGlzLmdlbmVyYXRlUHVibGljS2V5SGV4PWZ1bmN0aW9uKCl7dmFyIHU9bmV3IGYodGhpcy5wcnZLZXlIZXgsMTYpO3ZhciB3PXRoaXMuZWNwYXJhbXMuRy5tdWx0aXBseSh1KTt2YXIgdD13LmdldFgoKS50b0JpZ0ludGVnZXIoKTt2YXIgcz13LmdldFkoKS50b0JpZ0ludGVnZXIoKTt2YXIgcj10aGlzLmVjcGFyYW1zLmtleWNoYXJsZW47dmFyIHk9KFwiMDAwMDAwMDAwMFwiK3QudG9TdHJpbmcoMTYpKS5zbGljZSgtcik7dmFyIHY9KFwiMDAwMDAwMDAwMFwiK3MudG9TdHJpbmcoMTYpKS5zbGljZSgtcik7dmFyIHg9XCIwNFwiK3krdjt0aGlzLnNldFB1YmxpY0tleUhleCh4KTtyZXR1cm4geH07dGhpcy5zaWduV2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLnNpZ25IZXgocix0aGlzLnBydktleUhleCl9O3RoaXMuc2lnbkhleD1mdW5jdGlvbih4LHUpe3ZhciBBPW5ldyBmKHUsMTYpO3ZhciB2PXRoaXMuZWNwYXJhbXMubjt2YXIgej1uZXcgZih4LnN1YnN0cmluZygwLHRoaXMuZWNwYXJhbXMua2V5Y2hhcmxlbiksMTYpO2Rve3ZhciB3PXRoaXMuZ2V0QmlnUmFuZG9tKHYpO3ZhciBCPXRoaXMuZWNwYXJhbXMuRzt2YXIgeT1CLm11bHRpcGx5KHcpO3ZhciB0PXkuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZCh2KX13aGlsZSh0LmNvbXBhcmVUbyhmLlpFUk8pPD0wKTt2YXIgQz13Lm1vZEludmVyc2UodikubXVsdGlwbHkoei5hZGQoQS5tdWx0aXBseSh0KSkpLm1vZCh2KTtyZXR1cm4gbS5iaVJTU2lnVG9BU04xU2lnKHQsQyl9O3RoaXMuc2lnbj1mdW5jdGlvbih3LEIpe3ZhciB6PUI7dmFyIHU9dGhpcy5lY3BhcmFtcy5uO3ZhciB5PWYuZnJvbUJ5dGVBcnJheVVuc2lnbmVkKHcpO2Rve3ZhciB2PXRoaXMuZ2V0QmlnUmFuZG9tKHUpO3ZhciBBPXRoaXMuZWNwYXJhbXMuRzt2YXIgeD1BLm11bHRpcGx5KHYpO3ZhciB0PXguZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZCh1KX13aGlsZSh0LmNvbXBhcmVUbyhCaWdJbnRlZ2VyLlpFUk8pPD0wKTt2YXIgQz12Lm1vZEludmVyc2UodSkubXVsdGlwbHkoeS5hZGQoei5tdWx0aXBseSh0KSkpLm1vZCh1KTtyZXR1cm4gdGhpcy5zZXJpYWxpemVTaWcodCxDKX07dGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24ocyxyKXtyZXR1cm4gdGhpcy52ZXJpZnlIZXgocyxyLHRoaXMucHViS2V5SGV4KX07dGhpcy52ZXJpZnlIZXg9ZnVuY3Rpb24odix5LHUpe3RyeXt2YXIgdCxCO3ZhciB3PW0ucGFyc2VTaWdIZXgoeSk7dD13LnI7Qj13LnM7dmFyIHg9aC5kZWNvZGVGcm9tSGV4KHRoaXMuZWNwYXJhbXMuY3VydmUsdSk7dmFyIHo9bmV3IGYodi5zdWJzdHJpbmcoMCx0aGlzLmVjcGFyYW1zLmtleWNoYXJsZW4pLDE2KTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcoeix0LEIseCl9Y2F0Y2goQSl7cmV0dXJuIGZhbHNlfX07dGhpcy52ZXJpZnk9ZnVuY3Rpb24oeixBLHUpe3ZhciB3LHQ7aWYoQml0Y29pbi5VdGlsLmlzQXJyYXkoQSkpe3ZhciB5PXRoaXMucGFyc2VTaWcoQSk7dz15LnI7dD15LnN9ZWxzZXtpZihcIm9iamVjdFwiPT09dHlwZW9mIEEmJkEuciYmQS5zKXt3PUEucjt0PUEuc31lbHNle3Rocm93XCJJbnZhbGlkIHZhbHVlIGZvciBzaWduYXR1cmVcIn19dmFyIHY7aWYodSBpbnN0YW5jZW9mIEVDUG9pbnRGcCl7dj11fWVsc2V7aWYoQml0Y29pbi5VdGlsLmlzQXJyYXkodSkpe3Y9aC5kZWNvZGVGcm9tKHRoaXMuZWNwYXJhbXMuY3VydmUsdSl9ZWxzZXt0aHJvd1wiSW52YWxpZCBmb3JtYXQgZm9yIHB1YmtleSB2YWx1ZSwgbXVzdCBiZSBieXRlIGFycmF5IG9yIEVDUG9pbnRGcFwifX12YXIgeD1mLmZyb21CeXRlQXJyYXlVbnNpZ25lZCh6KTtyZXR1cm4gdGhpcy52ZXJpZnlSYXcoeCx3LHQsdil9O3RoaXMudmVyaWZ5UmF3PWZ1bmN0aW9uKHosdCxFLHkpe3ZhciB4PXRoaXMuZWNwYXJhbXMubjt2YXIgRD10aGlzLmVjcGFyYW1zLkc7aWYodC5jb21wYXJlVG8oZi5PTkUpPDB8fHQuY29tcGFyZVRvKHgpPj0wKXtyZXR1cm4gZmFsc2V9aWYoRS5jb21wYXJlVG8oZi5PTkUpPDB8fEUuY29tcGFyZVRvKHgpPj0wKXtyZXR1cm4gZmFsc2V9dmFyIEE9RS5tb2RJbnZlcnNlKHgpO3ZhciB3PXoubXVsdGlwbHkoQSkubW9kKHgpO3ZhciB1PXQubXVsdGlwbHkoQSkubW9kKHgpO3ZhciBCPUQubXVsdGlwbHkodykuYWRkKHkubXVsdGlwbHkodSkpO3ZhciBDPUIuZ2V0WCgpLnRvQmlnSW50ZWdlcigpLm1vZCh4KTtyZXR1cm4gQy5lcXVhbHModCl9O3RoaXMuc2VyaWFsaXplU2lnPWZ1bmN0aW9uKHYsdSl7dmFyIHc9di50b0J5dGVBcnJheVNpZ25lZCgpO3ZhciB0PXUudG9CeXRlQXJyYXlTaWduZWQoKTt2YXIgeD1bXTt4LnB1c2goMik7eC5wdXNoKHcubGVuZ3RoKTt4PXguY29uY2F0KHcpO3gucHVzaCgyKTt4LnB1c2godC5sZW5ndGgpO3g9eC5jb25jYXQodCk7eC51bnNoaWZ0KHgubGVuZ3RoKTt4LnVuc2hpZnQoNDgpO3JldHVybiB4fTt0aGlzLnBhcnNlU2lnPWZ1bmN0aW9uKHkpe3ZhciB4O2lmKHlbMF0hPTQ4KXt0aHJvdyBuZXcgRXJyb3IoXCJTaWduYXR1cmUgbm90IGEgdmFsaWQgREVSU2VxdWVuY2VcIil9eD0yO2lmKHlbeF0hPTIpe3Rocm93IG5ldyBFcnJvcihcIkZpcnN0IGVsZW1lbnQgaW4gc2lnbmF0dXJlIG11c3QgYmUgYSBERVJJbnRlZ2VyXCIpfXZhciB3PXkuc2xpY2UoeCsyLHgrMit5W3grMV0pO3grPTIreVt4KzFdO2lmKHlbeF0hPTIpe3Rocm93IG5ldyBFcnJvcihcIlNlY29uZCBlbGVtZW50IGluIHNpZ25hdHVyZSBtdXN0IGJlIGEgREVSSW50ZWdlclwiKX12YXIgdD15LnNsaWNlKHgrMix4KzIreVt4KzFdKTt4Kz0yK3lbeCsxXTt2YXIgdj1mLmZyb21CeXRlQXJyYXlVbnNpZ25lZCh3KTt2YXIgdT1mLmZyb21CeXRlQXJyYXlVbnNpZ25lZCh0KTtyZXR1cm57cjp2LHM6dX19O3RoaXMucGFyc2VTaWdDb21wYWN0PWZ1bmN0aW9uKHcpe2lmKHcubGVuZ3RoIT09NjUpe3Rocm93XCJTaWduYXR1cmUgaGFzIHRoZSB3cm9uZyBsZW5ndGhcIn12YXIgdD13WzBdLTI3O2lmKHQ8MHx8dD43KXt0aHJvd1wiSW52YWxpZCBzaWduYXR1cmUgdHlwZVwifXZhciB4PXRoaXMuZWNwYXJhbXMubjt2YXIgdj1mLmZyb21CeXRlQXJyYXlVbnNpZ25lZCh3LnNsaWNlKDEsMzMpKS5tb2QoeCk7dmFyIHU9Zi5mcm9tQnl0ZUFycmF5VW5zaWduZWQody5zbGljZSgzMyw2NSkpLm1vZCh4KTtyZXR1cm57cjp2LHM6dSxpOnR9fTt0aGlzLnJlYWRQS0NTNVBydktleUhleD1mdW5jdGlvbih1KXtpZihrKHUpPT09ZmFsc2Upe3Rocm93IG5ldyBFcnJvcihcIm5vdCBBU04uMSBoZXggc3RyaW5nXCIpfXZhciByLHQsdjt0cnl7cj1uKHUsMCxbXCJbMF1cIiwwXSxcIjA2XCIpO3Q9bih1LDAsWzFdLFwiMDRcIik7dHJ5e3Y9bih1LDAsW1wiWzFdXCIsMF0sXCIwM1wiKX1jYXRjaChzKXt9fWNhdGNoKHMpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTIzEvNSBwbGFpbiBFQ0MgcHJpdmF0ZSBrZXlcIil9dGhpcy5jdXJ2ZU5hbWU9ZChyKTtpZih0aGlzLmN1cnZlTmFtZT09PXVuZGVmaW5lZCl7dGhyb3dcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIn10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO3RoaXMuc2V0UHVibGljS2V5SGV4KHYpO3RoaXMuc2V0UHJpdmF0ZUtleUhleCh0KTt0aGlzLmlzUHVibGljPWZhbHNlfTt0aGlzLnJlYWRQS0NTOFBydktleUhleD1mdW5jdGlvbih2KXtpZihrKHYpPT09ZmFsc2Upe3Rocm93IG5ldyBqKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIil9dmFyIHQscix1LHc7dHJ5e3Q9bih2LDAsWzEsMF0sXCIwNlwiKTtyPW4odiwwLFsxLDFdLFwiMDZcIik7dT1uKHYsMCxbMiwwLDFdLFwiMDRcIik7dHJ5e3c9bih2LDAsWzIsMCxcIlsxXVwiLDBdLFwiMDNcIil9Y2F0Y2gocyl7fX1jYXRjaChzKXt0aHJvdyBuZXcgaihcIm1hbGZvcm1lZCBQS0NTIzggcGxhaW4gRUNDIHByaXZhdGUga2V5XCIpfXRoaXMuY3VydmVOYW1lPWQocik7aWYodGhpcy5jdXJ2ZU5hbWU9PT11bmRlZmluZWQpe3Rocm93IG5ldyBqKFwidW5zdXBwb3J0ZWQgY3VydmUgbmFtZVwiKX10aGlzLnNldE5hbWVkQ3VydmUodGhpcy5jdXJ2ZU5hbWUpO3RoaXMuc2V0UHVibGljS2V5SGV4KHcpO3RoaXMuc2V0UHJpdmF0ZUtleUhleCh1KTt0aGlzLmlzUHVibGljPWZhbHNlfTt0aGlzLnJlYWRQS0NTOFB1YktleUhleD1mdW5jdGlvbih1KXtpZihrKHUpPT09ZmFsc2Upe3Rocm93IG5ldyBqKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIil9dmFyIHQscix2O3RyeXt0PW4odSwwLFswLDBdLFwiMDZcIik7cj1uKHUsMCxbMCwxXSxcIjA2XCIpO3Y9bih1LDAsWzFdLFwiMDNcIil9Y2F0Y2gocyl7dGhyb3cgbmV3IGooXCJtYWxmb3JtZWQgUEtDUyM4IEVDQyBwdWJsaWMga2V5XCIpfXRoaXMuY3VydmVOYW1lPWQocik7aWYodGhpcy5jdXJ2ZU5hbWU9PT1udWxsKXt0aHJvdyBuZXcgaihcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIil9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleCh2KX07dGhpcy5yZWFkQ2VydFB1YktleUhleD1mdW5jdGlvbih0LHYpe2lmKGsodCk9PT1mYWxzZSl7dGhyb3cgbmV3IGooXCJub3QgQVNOLjEgaGV4IHN0cmluZ1wiKX12YXIgcix1O3RyeXtyPW4odCwwLFswLDUsMCwxXSxcIjA2XCIpO3U9bih0LDAsWzAsNSwxXSxcIjAzXCIpfWNhdGNoKHMpe3Rocm93IG5ldyBqKFwibWFsZm9ybWVkIFguNTA5IGNlcnRpZmljYXRlIEVDQyBwdWJsaWMga2V5XCIpfXRoaXMuY3VydmVOYW1lPWQocik7aWYodGhpcy5jdXJ2ZU5hbWU9PT1udWxsKXt0aHJvdyBuZXcgaihcInVuc3VwcG9ydGVkIGN1cnZlIG5hbWVcIil9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTt0aGlzLnNldFB1YmxpY0tleUhleCh1KX07aWYoZSE9PXVuZGVmaW5lZCl7aWYoZS5jdXJ2ZSE9PXVuZGVmaW5lZCl7dGhpcy5jdXJ2ZU5hbWU9ZS5jdXJ2ZX19aWYodGhpcy5jdXJ2ZU5hbWU9PT11bmRlZmluZWQpe3RoaXMuY3VydmVOYW1lPWd9dGhpcy5zZXROYW1lZEN1cnZlKHRoaXMuY3VydmVOYW1lKTtpZihlIT09dW5kZWZpbmVkKXtpZihlLnBydiE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQcml2YXRlS2V5SGV4KGUucHJ2KX1pZihlLnB1YiE9PXVuZGVmaW5lZCl7dGhpcy5zZXRQdWJsaWNLZXlIZXgoZS5wdWIpfX19O0tKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4PWZ1bmN0aW9uKGEpe3ZhciBiPUtKVVIuY3J5cHRvLkVDRFNBLnBhcnNlU2lnSGV4SW5IZXhSUyhhKTt2YXIgZD1uZXcgQmlnSW50ZWdlcihiLnIsMTYpO3ZhciBjPW5ldyBCaWdJbnRlZ2VyKGIucywxNik7cmV0dXJue3I6ZCxzOmN9fTtLSlVSLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleEluSGV4UlM9ZnVuY3Rpb24oZil7dmFyIGo9QVNOMUhFWCxpPWouZ2V0Q2hpbGRJZHgsZz1qLmdldFY7ai5jaGVja1N0cmljdERFUihmLDApO2lmKGYuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3cgbmV3IEVycm9yKFwic2lnbmF0dXJlIGlzIG5vdCBhIEFTTi4xIHNlcXVlbmNlXCIpfXZhciBoPWkoZiwwKTtpZihoLmxlbmd0aCE9Mil7dGhyb3cgbmV3IEVycm9yKFwic2lnbmF0dXJlIHNoYWxsIGhhdmUgdHdvIGVsZW1lbnRzXCIpfXZhciBlPWhbMF07dmFyIGQ9aFsxXTtpZihmLnN1YnN0cihlLDIpIT1cIjAyXCIpe3Rocm93IG5ldyBFcnJvcihcIjFzdCBpdGVtIG5vdCBBU04uMSBpbnRlZ2VyXCIpfWlmKGYuc3Vic3RyKGQsMikhPVwiMDJcIil7dGhyb3cgbmV3IEVycm9yKFwiMm5kIGl0ZW0gbm90IEFTTi4xIGludGVnZXJcIil9dmFyIGM9ZyhmLGUpO3ZhciBiPWcoZixkKTtyZXR1cm57cjpjLHM6Yn19O0tKVVIuY3J5cHRvLkVDRFNBLmFzbjFTaWdUb0NvbmNhdFNpZz1mdW5jdGlvbihkKXt2YXIgZT1LSlVSLmNyeXB0by5FQ0RTQS5wYXJzZVNpZ0hleEluSGV4UlMoZCk7dmFyIGI9ZS5yO3ZhciBhPWUucztpZihiLmxlbmd0aD49MTMwJiZiLmxlbmd0aDw9MTM0KXtpZihiLmxlbmd0aCUyIT0wKXt0aHJvdyBFcnJvcihcInVua25vd24gRUNEU0Egc2lnIHIgbGVuZ3RoIGVycm9yXCIpfWlmKGEubGVuZ3RoJTIhPTApe3Rocm93IEVycm9yKFwidW5rbm93biBFQ0RTQSBzaWcgcyBsZW5ndGggZXJyb3JcIil9aWYoYi5zdWJzdHIoMCwyKT09XCIwMFwiKXtiPWIuc3Vic3RyKDIpfWlmKGEuc3Vic3RyKDAsMik9PVwiMDBcIil7YT1hLnN1YnN0cigyKX12YXIgYz1NYXRoLm1heChiLmxlbmd0aCxhLmxlbmd0aCk7Yj0oXCIwMDAwMDBcIitiKS5zbGljZSgtYyk7YT0oXCIwMDAwMDBcIithKS5zbGljZSgtYyk7cmV0dXJuIGIrYX1pZihiLnN1YnN0cigwLDIpPT1cIjAwXCImJihiLmxlbmd0aCUzMik9PTIpe2I9Yi5zdWJzdHIoMil9aWYoYS5zdWJzdHIoMCwyKT09XCIwMFwiJiYoYS5sZW5ndGglMzIpPT0yKXthPWEuc3Vic3RyKDIpfWlmKChiLmxlbmd0aCUzMik9PTMwKXtiPVwiMDBcIitifWlmKChhLmxlbmd0aCUzMik9PTMwKXthPVwiMDBcIithfWlmKGIubGVuZ3RoJTMyIT0wKXt0aHJvdyBFcnJvcihcInVua25vd24gRUNEU0Egc2lnIHIgbGVuZ3RoIGVycm9yXCIpfWlmKGEubGVuZ3RoJTMyIT0wKXt0aHJvdyBFcnJvcihcInVua25vd24gRUNEU0Egc2lnIHMgbGVuZ3RoIGVycm9yXCIpfXJldHVybiBiK2F9O0tKVVIuY3J5cHRvLkVDRFNBLmNvbmNhdFNpZ1RvQVNOMVNpZz1mdW5jdGlvbihhKXtpZihhLmxlbmd0aCU0IT0wKXt0aHJvdyBFcnJvcihcInVua25vd24gRUNEU0EgY29uY2F0aW5hdGVkIHItcyBzaWcgbGVuZ3RoIGVycm9yXCIpfXZhciBjPWEuc3Vic3RyKDAsYS5sZW5ndGgvMik7dmFyIGI9YS5zdWJzdHIoYS5sZW5ndGgvMik7cmV0dXJuIEtKVVIuY3J5cHRvLkVDRFNBLmhleFJTU2lnVG9BU04xU2lnKGMsYil9O0tKVVIuY3J5cHRvLkVDRFNBLmhleFJTU2lnVG9BU04xU2lnPWZ1bmN0aW9uKGIsYSl7dmFyIGQ9bmV3IEJpZ0ludGVnZXIoYiwxNik7dmFyIGM9bmV3IEJpZ0ludGVnZXIoYSwxNik7cmV0dXJuIEtKVVIuY3J5cHRvLkVDRFNBLmJpUlNTaWdUb0FTTjFTaWcoZCxjKX07S0pVUi5jcnlwdG8uRUNEU0EuYmlSU1NpZ1RvQVNOMVNpZz1mdW5jdGlvbihmLGQpe3ZhciBjPUtKVVIuYXNuMTt2YXIgYj1uZXcgYy5ERVJJbnRlZ2VyKHtiaWdpbnQ6Zn0pO3ZhciBhPW5ldyBjLkRFUkludGVnZXIoe2JpZ2ludDpkfSk7dmFyIGU9bmV3IGMuREVSU2VxdWVuY2Uoe2FycmF5OltiLGFdfSk7cmV0dXJuIGUuZ2V0RW5jb2RlZEhleCgpfTtLSlVSLmNyeXB0by5FQ0RTQS5nZXROYW1lPWZ1bmN0aW9uKGEpe2lmKGE9PT1cIjJiODEwNDAwMWZcIil7cmV0dXJuXCJzZWNwMTkyazFcIn1pZihhPT09XCIyYTg2NDhjZTNkMDMwMTA3XCIpe3JldHVyblwic2VjcDI1NnIxXCJ9aWYoYT09PVwiMmI4MTA0MDAwYVwiKXtyZXR1cm5cInNlY3AyNTZrMVwifWlmKGE9PT1cIjJiODEwNDAwMjFcIil7cmV0dXJuXCJzZWNwMjI0cjFcIn1pZihhPT09XCIyYjgxMDQwMDIyXCIpe3JldHVyblwic2VjcDM4NHIxXCJ9aWYoYT09PVwiMmI4MTA0MDAyM1wiKXtyZXR1cm5cInNlY3A1MjFyMVwifWlmKFwifHNlY3AyNTZyMXxOSVNUIFAtMjU2fFAtMjU2fHByaW1lMjU2djF8XCIuaW5kZXhPZihhKSE9PS0xKXtyZXR1cm5cInNlY3AyNTZyMVwifWlmKFwifHNlY3AyNTZrMXxcIi5pbmRleE9mKGEpIT09LTEpe3JldHVyblwic2VjcDI1NmsxXCJ9aWYoXCJ8c2VjcDIyNHIxfE5JU1QgUC0yMjR8UC0yMjR8XCIuaW5kZXhPZihhKSE9PS0xKXtyZXR1cm5cInNlY3AyMjRyMVwifWlmKFwifHNlY3AzODRyMXxOSVNUIFAtMzg0fFAtMzg0fFwiLmluZGV4T2YoYSkhPT0tMSl7cmV0dXJuXCJzZWNwMzg0cjFcIn1pZihcInxzZWNwNTIxcjF8TklTVCBQLTUyMXxQLTUyMXxcIi5pbmRleE9mKGEpIT09LTEpe3JldHVyblwic2VjcDUyMXIxXCJ9cmV0dXJuIG51bGx9O1xuXG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuY3J5cHRvPT1cInVuZGVmaW5lZFwifHwhS0pVUi5jcnlwdG8pe0tKVVIuY3J5cHRvPXt9fUtKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREI9bmV3IGZ1bmN0aW9uKCl7dmFyIGI9e307dmFyIGM9e307ZnVuY3Rpb24gYShkKXtyZXR1cm4gbmV3IEJpZ0ludGVnZXIoZCwxNil9dGhpcy5nZXRCeU5hbWU9ZnVuY3Rpb24oZSl7dmFyIGQ9ZTtpZih0eXBlb2YgY1tkXSE9XCJ1bmRlZmluZWRcIil7ZD1jW2VdfWlmKHR5cGVvZiBiW2RdIT1cInVuZGVmaW5lZFwiKXtyZXR1cm4gYltkXX10aHJvd1widW5yZWdpc3RlcmVkIEVDIGN1cnZlIG5hbWU6IFwiK2R9O3RoaXMucmVnaXN0PWZ1bmN0aW9uKEEsbCxvLGcsbSxlLGosZixrLHUsZCx4KXtiW0FdPXt9O3ZhciBzPWEobyk7dmFyIHo9YShnKTt2YXIgeT1hKG0pO3ZhciB0PWEoZSk7dmFyIHc9YShqKTt2YXIgcj1uZXcgRUNDdXJ2ZUZwKHMseix5KTt2YXIgcT1yLmRlY29kZVBvaW50SGV4KFwiMDRcIitmK2spO2JbQV1bXCJuYW1lXCJdPUE7YltBXVtcImtleWxlblwiXT1sO2JbQV1bXCJrZXljaGFybGVuXCJdPU1hdGguY2VpbChsLzgpKjI7YltBXVtcImN1cnZlXCJdPXI7YltBXVtcIkdcIl09cTtiW0FdW1wiblwiXT10O2JbQV1bXCJoXCJdPXc7YltBXVtcIm9pZFwiXT1kO2JbQV1bXCJpbmZvXCJdPXg7Zm9yKHZhciB2PTA7djx1Lmxlbmd0aDt2Kyspe2NbdVt2XV09QX19fTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxMjhyMVwiLDEyOCxcIkZGRkZGRkZERkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIsXCJGRkZGRkZGREZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQ1wiLFwiRTg3NTc5QzExMDc5RjQzREQ4MjQ5OTNDMkNFRTVFRDNcIixcIkZGRkZGRkZFMDAwMDAwMDA3NUEzMEQxQjkwMzhBMTE1XCIsXCIxXCIsXCIxNjFGRjc1MjhCODk5QjJEMEMyODYwN0NBNTJDNUI4NlwiLFwiQ0Y1QUM4Mzk1QkFGRUIxM0MwMkRBMjkyRERFRDdBODNcIixbXSxcIlwiLFwic2VjcDEyOHIxIDogU0VDRyBjdXJ2ZSBvdmVyIGEgMTI4IGJpdCBwcmltZSBmaWVsZFwiKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AxNjBrMVwiLDE2MCxcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkFDNzNcIixcIjBcIixcIjdcIixcIjAxMDAwMDAwMDAwMDAwMDAwMDAwMDFCOEZBMTZERkFCOUFDQTE2QjZCM1wiLFwiMVwiLFwiM0I0QzM4MkNFMzdBQTE5MkE0MDE5RTc2MzAzNkY0RjVERDREN0VCQlwiLFwiOTM4Q0Y5MzUzMThGRENFRDZCQzI4Mjg2NTMxNzMzQzNGMDNDNEZFRVwiLFtdLFwiXCIsXCJzZWNwMTYwazEgOiBTRUNHIGN1cnZlIG92ZXIgYSAxNjAgYml0IHByaW1lIGZpZWxkXCIpO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDE2MHIxXCIsMTYwLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY3RkZGRkZGRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY3RkZGRkZGQ1wiLFwiMUM5N0JFRkM1NEJEN0E4QjY1QUNGODlGODFENEQ0QURDNTY1RkE0NVwiLFwiMDEwMDAwMDAwMDAwMDAwMDAwMDAwMUY0QzhGOTI3QUVEM0NBNzUyMjU3XCIsXCIxXCIsXCI0QTk2QjU2ODhFRjU3MzI4NDY2NDY5ODk2OEMzOEJCOTEzQ0JGQzgyXCIsXCIyM0E2Mjg1NTMxNjg5NDdENTlEQ0M5MTIwNDIzNTEzNzdBQzVGQjMyXCIsW10sXCJcIixcInNlY3AxNjByMSA6IFNFQ0cgY3VydmUgb3ZlciBhIDE2MCBiaXQgcHJpbWUgZmllbGRcIik7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTkyazFcIiwxOTIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkVFMzdcIixcIjBcIixcIjNcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRTI2RjJGQzE3MEY2OTQ2NkE3NERFRkQ4RFwiLFwiMVwiLFwiREI0RkYxMEVDMDU3RTlBRTI2QjA3RDAyODBCN0Y0MzQxREE1RDFCMUVBRTA2QzdEXCIsXCI5QjJGMkY2RDlDNTYyOEE3ODQ0MTYzRDAxNUJFODYzNDQwODJBQTg4RDk1RTJGOURcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMTkycjFcIiwxOTIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGRkZGRkZGRkZcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGQ1wiLFwiNjQyMTA1MTlFNTlDODBFNzBGQTdFOUFCNzIyNDMwNDlGRUI4REVFQ0MxNDZCOUIxXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkY5OURFRjgzNjE0NkJDOUIxQjREMjI4MzFcIixcIjFcIixcIjE4OERBODBFQjAzMDkwRjY3Q0JGMjBFQjQzQTE4ODAwRjRGRjBBRkQ4MkZGMTAxMlwiLFwiMDcxOTJCOTVGRkM4REE3ODYzMTAxMUVENkIyNENERDU3M0Y5NzdBMTFFNzk0ODExXCIsW10pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDIyNHIxXCIsMjI0LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDFcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFXCIsXCJCNDA1MEE4NTBDMDRCM0FCRjU0MTMyNTY1MDQ0QjBCN0Q3QkZEOEJBMjcwQjM5NDMyMzU1RkZCNFwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRjE2QTJFMEI4RjAzRTEzREQyOTQ1NUM1QzJBM0RcIixcIjFcIixcIkI3MEUwQ0JENkJCNEJGN0YzMjEzOTBCOTRBMDNDMUQzNTZDMjExMjIzNDMyODBENjExNUMxRDIxXCIsXCJCRDM3NjM4OEI1RjcyM0ZCNEMyMkRGRTZDRDQzNzVBMDVBMDc0NzY0NDRENTgxOTk4NTAwN0UzNFwiLFtdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3AyNTZrMVwiLDI1NixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZDMkZcIixcIjBcIixcIjdcIixcIkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFQkFBRURDRTZBRjQ4QTAzQkJGRDI1RThDRDAzNjQxNDFcIixcIjFcIixcIjc5QkU2NjdFRjlEQ0JCQUM1NUEwNjI5NUNFODcwQjA3MDI5QkZDREIyRENFMjhEOTU5RjI4MTVCMTZGODE3OThcIixcIjQ4M0FEQTc3MjZBM0M0NjU1REE0RkJGQzBFMTEwOEE4RkQxN0I0NDhBNjg1NTQxOTlDNDdEMDhGRkIxMEQ0QjhcIixbXSk7S0pVUi5jcnlwdG8uRUNQYXJhbWV0ZXJEQi5yZWdpc3QoXCJzZWNwMjU2cjFcIiwyNTYsXCJGRkZGRkZGRjAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIsXCJGRkZGRkZGRjAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZDXCIsXCI1QUM2MzVEOEFBM0E5M0U3QjNFQkJENTU3Njk4ODZCQzY1MUQwNkIwQ0M1M0IwRjYzQkNFM0MzRTI3RDI2MDRCXCIsXCJGRkZGRkZGRjAwMDAwMDAwRkZGRkZGRkZGRkZGRkZGRkJDRTZGQUFEQTcxNzlFODRGM0I5Q0FDMkZDNjMyNTUxXCIsXCIxXCIsXCI2QjE3RDFGMkUxMkM0MjQ3RjhCQ0U2RTU2M0E0NDBGMjc3MDM3RDgxMkRFQjMzQTBGNEExMzk0NUQ4OThDMjk2XCIsXCI0RkUzNDJFMkZFMUE3RjlCOEVFN0VCNEE3QzBGOUUxNjJCQ0UzMzU3NkIzMTVFQ0VDQkI2NDA2ODM3QkY1MUY1XCIsW1wiTklTVCBQLTI1NlwiLFwiUC0yNTZcIixcInByaW1lMjU2djFcIl0pO0tKVVIuY3J5cHRvLkVDUGFyYW1ldGVyREIucmVnaXN0KFwic2VjcDM4NHIxXCIsMzg0LFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRUZGRkZGRkZGMDAwMDAwMDAwMDAwMDAwMEZGRkZGRkZGXCIsXCJGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZFRkZGRkZGRkYwMDAwMDAwMDAwMDAwMDAwRkZGRkZGRkNcIixcIkIzMzEyRkE3RTIzRUU3RTQ5ODhFMDU2QkUzRjgyRDE5MTgxRDlDNkVGRTgxNDExMjAzMTQwODhGNTAxMzg3NUFDNjU2Mzk4RDhBMkVEMTlEMkE4NUM4RUREM0VDMkFFRlwiLFwiRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQzc2MzREODFGNDM3MkRERjU4MUEwREIyNDhCMEE3N0FFQ0VDMTk2QUNDQzUyOTczXCIsXCIxXCIsXCJBQTg3Q0EyMkJFOEIwNTM3OEVCMUM3MUVGMzIwQUQ3NDZFMUQzQjYyOEJBNzlCOTg1OUY3NDFFMDgyNTQyQTM4NTUwMkYyNURCRjU1Mjk2QzNBNTQ1RTM4NzI3NjBBQjdcIixcIjM2MTdkZTRhOTYyNjJjNmY1ZDllOThiZjkyOTJkYzI5ZjhmNDFkYmQyODlhMTQ3Y2U5ZGEzMTEzYjVmMGI4YzAwYTYwYjFjZTFkN2U4MTlkN2E0MzFkN2M5MGVhMGU1ZlwiLFtcIk5JU1QgUC0zODRcIixcIlAtMzg0XCJdKTtLSlVSLmNyeXB0by5FQ1BhcmFtZXRlckRCLnJlZ2lzdChcInNlY3A1MjFyMVwiLDUyMSxcIjFGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGXCIsXCIxRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGQ1wiLFwiMDUxOTUzRUI5NjE4RTFDOUExRjkyOUEyMUEwQjY4NTQwRUVBMkRBNzI1Qjk5QjMxNUYzQjhCNDg5OTE4RUYxMDlFMTU2MTkzOTUxRUM3RTkzN0IxNjUyQzBCRDNCQjFCRjA3MzU3M0RGODgzRDJDMzRGMUVGNDUxRkQ0NkI1MDNGMDBcIixcIjFGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkE1MTg2ODc4M0JGMkY5NjZCN0ZDQzAxNDhGNzA5QTVEMDNCQjVDOUI4ODk5QzQ3QUVCQjZGQjcxRTkxMzg2NDA5XCIsXCIxXCIsXCIwMEM2ODU4RTA2QjcwNDA0RTlDRDlFM0VDQjY2MjM5NUI0NDI5QzY0ODEzOTA1M0ZCNTIxRjgyOEFGNjA2QjREM0RCQUExNEI1RTc3RUZFNzU5MjhGRTFEQzEyN0EyRkZBOERFMzM0OEIzQzE4NTZBNDI5QkY5N0U3RTMxQzJFNUJENjZcIixcIjAxMTgzOTI5NmE3ODlhM2JjMDA0NWM4YTVmYjQyYzdkMWJkOTk4ZjU0NDQ5NTc5YjQ0NjgxN2FmYmQxNzI3M2U2NjJjOTdlZTcyOTk1ZWY0MjY0MGM1NTBiOTAxM2ZhZDA3NjEzNTNjNzA4NmEyNzJjMjQwODhiZTk0NzY5ZmQxNjY1MFwiLFtcIk5JU1QgUC01MjFcIixcIlAtNTIxXCJdKTtcblxudmFyIEtFWVVUSUw9ZnVuY3Rpb24oKXt2YXIgZD1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGsoQ3J5cHRvSlMuQUVTLHAscixxKX07dmFyIGU9ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBrKENyeXB0b0pTLlRyaXBsZURFUyxwLHIscSl9O3ZhciBhPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gayhDcnlwdG9KUy5ERVMscCxyLHEpfTt2YXIgaz1mdW5jdGlvbihzLHgsdSxxKXt2YXIgcj1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHgpO3ZhciB3PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodSk7dmFyIHA9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShxKTt2YXIgdD17fTt0LmtleT13O3QuaXY9cDt0LmNpcGhlcnRleHQ9cjt2YXIgdj1zLmRlY3J5cHQodCx3LHtpdjpwfSk7cmV0dXJuIENyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHYpfTt2YXIgbD1mdW5jdGlvbihwLHIscSl7cmV0dXJuIGcoQ3J5cHRvSlMuQUVTLHAscixxKX07dmFyIG89ZnVuY3Rpb24ocCxyLHEpe3JldHVybiBnKENyeXB0b0pTLlRyaXBsZURFUyxwLHIscSl9O3ZhciBmPWZ1bmN0aW9uKHAscixxKXtyZXR1cm4gZyhDcnlwdG9KUy5ERVMscCxyLHEpfTt2YXIgZz1mdW5jdGlvbih0LHksdixxKXt2YXIgcz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHkpO3ZhciB4PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uodik7dmFyIHA9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZShxKTt2YXIgdz10LmVuY3J5cHQocyx4LHtpdjpwfSk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh3LnRvU3RyaW5nKCkpO3ZhciB1PUNyeXB0b0pTLmVuYy5CYXNlNjQuc3RyaW5naWZ5KHIpO3JldHVybiB1fTt2YXIgaT17XCJBRVMtMjU2LUNCQ1wiOntwcm9jOmQsZXByb2M6bCxrZXlsZW46MzIsaXZsZW46MTZ9LFwiQUVTLTE5Mi1DQkNcIjp7cHJvYzpkLGVwcm9jOmwsa2V5bGVuOjI0LGl2bGVuOjE2fSxcIkFFUy0xMjgtQ0JDXCI6e3Byb2M6ZCxlcHJvYzpsLGtleWxlbjoxNixpdmxlbjoxNn0sXCJERVMtRURFMy1DQkNcIjp7cHJvYzplLGVwcm9jOm8sa2V5bGVuOjI0LGl2bGVuOjh9LFwiREVTLUNCQ1wiOntwcm9jOmEsZXByb2M6ZixrZXlsZW46OCxpdmxlbjo4fX07dmFyIGM9ZnVuY3Rpb24ocCl7cmV0dXJuIGlbcF1bXCJwcm9jXCJdfTt2YXIgbT1mdW5jdGlvbihwKXt2YXIgcj1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbShwKTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeShyKTtyZXR1cm4gcX07dmFyIG49ZnVuY3Rpb24odil7dmFyIHc9e307dmFyIHE9di5tYXRjaChuZXcgUmVnRXhwKFwiREVLLUluZm86IChbXixdKyksKFswLTlBLUZhLWZdKylcIixcIm1cIikpO2lmKHEpe3cuY2lwaGVyPXFbMV07dy5pdnNhbHQ9cVsyXX12YXIgcD12Lm1hdGNoKG5ldyBSZWdFeHAoXCItLS0tLUJFR0lOIChbQS1aXSspIFBSSVZBVEUgS0VZLS0tLS1cIikpO2lmKHApe3cudHlwZT1wWzFdfXZhciB1PS0xO3ZhciB4PTA7aWYodi5pbmRleE9mKFwiXFxyXFxuXFxyXFxuXCIpIT0tMSl7dT12LmluZGV4T2YoXCJcXHJcXG5cXHJcXG5cIik7eD0yfWlmKHYuaW5kZXhPZihcIlxcblxcblwiKSE9LTEpe3U9di5pbmRleE9mKFwiXFxuXFxuXCIpO3g9MX12YXIgdD12LmluZGV4T2YoXCItLS0tLUVORFwiKTtpZih1IT0tMSYmdCE9LTEpe3ZhciByPXYuc3Vic3RyaW5nKHUreCoyLHQteCk7cj1yLnJlcGxhY2UoL1xccysvZyxcIlwiKTt3LmRhdGE9cn1yZXR1cm4gd307dmFyIGo9ZnVuY3Rpb24ocSx5LHApe3ZhciB2PXAuc3Vic3RyaW5nKDAsMTYpO3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2Uodik7dmFyIHI9Q3J5cHRvSlMuZW5jLlV0ZjgucGFyc2UoeSk7dmFyIHU9aVtxXVtcImtleWxlblwiXStpW3FdW1wiaXZsZW5cIl07dmFyIHg9XCJcIjt2YXIgdz1udWxsO2Zvcig7Oyl7dmFyIHM9Q3J5cHRvSlMuYWxnby5NRDUuY3JlYXRlKCk7aWYodyE9bnVsbCl7cy51cGRhdGUodyl9cy51cGRhdGUocik7cy51cGRhdGUodCk7dz1zLmZpbmFsaXplKCk7eD14K0NyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHcpO2lmKHgubGVuZ3RoPj11KjIpe2JyZWFrfX12YXIgej17fTt6LmtleWhleD14LnN1YnN0cigwLGlbcV1bXCJrZXlsZW5cIl0qMik7ei5pdmhleD14LnN1YnN0cihpW3FdW1wia2V5bGVuXCJdKjIsaVtxXVtcIml2bGVuXCJdKjIpO3JldHVybiB6fTt2YXIgYj1mdW5jdGlvbihwLHYscix3KXt2YXIgcz1DcnlwdG9KUy5lbmMuQmFzZTY0LnBhcnNlKHApO3ZhciBxPUNyeXB0b0pTLmVuYy5IZXguc3RyaW5naWZ5KHMpO3ZhciB1PWlbdl1bXCJwcm9jXCJdO3ZhciB0PXUocSxyLHcpO3JldHVybiB0fTt2YXIgaD1mdW5jdGlvbihwLHMscSx1KXt2YXIgcj1pW3NdW1wiZXByb2NcIl07dmFyIHQ9cihwLHEsdSk7cmV0dXJuIHR9O3JldHVybnt2ZXJzaW9uOlwiMS4wLjBcIixwYXJzZVBLQ1M1UEVNOmZ1bmN0aW9uKHApe3JldHVybiBuKHApfSxnZXRLZXlBbmRVbnVzZWRJdkJ5UGFzc2NvZGVBbmRJdnNhbHQ6ZnVuY3Rpb24ocSxwLHIpe3JldHVybiBqKHEscCxyKX0sZGVjcnlwdEtleUI2NDpmdW5jdGlvbihwLHIscSxzKXtyZXR1cm4gYihwLHIscSxzKX0sZ2V0RGVjcnlwdGVkS2V5SGV4OmZ1bmN0aW9uKHkseCl7dmFyIHE9bih5KTt2YXIgdD1xLnR5cGU7dmFyIHI9cS5jaXBoZXI7dmFyIHA9cS5pdnNhbHQ7dmFyIHM9cS5kYXRhO3ZhciB3PWoocix4LHApO3ZhciB2PXcua2V5aGV4O3ZhciB1PWIocyxyLHYscCk7cmV0dXJuIHV9LGdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleDpmdW5jdGlvbih4LHMsQSx0LHIpe3ZhciBwPVwiXCI7aWYodHlwZW9mIHQ9PVwidW5kZWZpbmVkXCJ8fHQ9PW51bGwpe3Q9XCJBRVMtMjU2LUNCQ1wifWlmKHR5cGVvZiBpW3RdPT1cInVuZGVmaW5lZFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJLRVlVVElMIHVuc3VwcG9ydGVkIGFsZ29yaXRobTogXCIrdCl9aWYodHlwZW9mIHI9PVwidW5kZWZpbmVkXCJ8fHI9PW51bGwpe3ZhciB2PWlbdF1bXCJpdmxlblwiXTt2YXIgdT1tKHYpO3I9dS50b1VwcGVyQ2FzZSgpfXZhciB6PWoodCxBLHIpO3ZhciB5PXoua2V5aGV4O3ZhciB3PWgocyx0LHkscik7dmFyIHE9dy5yZXBsYWNlKC8oLns2NH0pL2csXCIkMVxcclxcblwiKTt2YXIgcD1cIi0tLS0tQkVHSU4gXCIreCtcIiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cCs9XCJQcm9jLVR5cGU6IDQsRU5DUllQVEVEXFxyXFxuXCI7cCs9XCJERUstSW5mbzogXCIrdCtcIixcIityK1wiXFxyXFxuXCI7cCs9XCJcXHJcXG5cIjtwKz1xO3ArPVwiXFxyXFxuLS0tLS1FTkQgXCIreCtcIiBQUklWQVRFIEtFWS0tLS0tXFxyXFxuXCI7cmV0dXJuIHB9LHBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTODpmdW5jdGlvbih5KXt2YXIgQj1BU04xSEVYO3ZhciB6PUIuZ2V0Q2hpbGRJZHg7dmFyIHc9Qi5nZXRWO3ZhciB0PXt9O3ZhciByPXooeSwwKTtpZihyLmxlbmd0aCE9Mil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMCkuaXRlbXMgIT0gMjogXCIrci5sZW5ndGgpfXQuY2lwaGVydGV4dD13KHksclsxXSk7dmFyIEE9eih5LHJbMF0pO2lmKEEubGVuZ3RoIT0yKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgZm9ybWF0OiBTRVFVRU5DRSgwLjApLml0ZW1zICE9IDI6IFwiK0EubGVuZ3RoKX1pZih3KHksQVswXSkhPVwiMmE4NjQ4ODZmNzBkMDEwNTBkXCIpe3Rocm93IG5ldyBFcnJvcihcInRoaXMgb25seSBzdXBwb3J0cyBwa2NzNVBCRVMyXCIpfXZhciBwPXooeSxBWzFdKTtpZihBLmxlbmd0aCE9Mil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEpLml0ZW1zICE9IDI6IFwiK3AubGVuZ3RoKX12YXIgcT16KHkscFsxXSk7aWYocS5sZW5ndGghPTIpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjEpLml0ZW1zICE9IDI6IFwiK3EubGVuZ3RoKX1pZih3KHkscVswXSkhPVwiMmE4NjQ4ODZmNzBkMDMwN1wiKXt0aHJvd1widGhpcyBvbmx5IHN1cHBvcnRzIFRyaXBsZURFU1wifXQuZW5jcnlwdGlvblNjaGVtZUFsZz1cIlRyaXBsZURFU1wiO3QuZW5jcnlwdGlvblNjaGVtZUlWPXcoeSxxWzFdKTt2YXIgcz16KHkscFswXSk7aWYocy5sZW5ndGghPTIpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBmb3JtYXQ6IFNFUVVFTkNFKDAuMC4xLjApLml0ZW1zICE9IDI6IFwiK3MubGVuZ3RoKX1pZih3KHksc1swXSkhPVwiMmE4NjQ4ODZmNzBkMDEwNTBjXCIpe3Rocm93IG5ldyBFcnJvcihcInRoaXMgb25seSBzdXBwb3J0cyBwa2NzNVBCS0RGMlwiKX12YXIgeD16KHksc1sxXSk7aWYoeC5sZW5ndGg8Mil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGZvcm1hdDogU0VRVUVOQ0UoMC4wLjEuMC4xKS5pdGVtcyA8IDI6IFwiK3gubGVuZ3RoKX10LnBia2RmMlNhbHQ9dyh5LHhbMF0pO3ZhciB1PXcoeSx4WzFdKTt0cnl7dC5wYmtkZjJJdGVyPXBhcnNlSW50KHUsMTYpfWNhdGNoKHYpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBmb3JtYXQgcGJrZGYySXRlcjogXCIrdSl9cmV0dXJuIHR9LGdldFBCS0RGMktleUhleEZyb21QYXJhbTpmdW5jdGlvbih1LHApe3ZhciB0PUNyeXB0b0pTLmVuYy5IZXgucGFyc2UodS5wYmtkZjJTYWx0KTt2YXIgcT11LnBia2RmMkl0ZXI7dmFyIHM9Q3J5cHRvSlMuUEJLREYyKHAsdCx7a2V5U2l6ZToxOTIvMzIsaXRlcmF0aW9uczpxfSk7dmFyIHI9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocyk7cmV0dXJuIHJ9LF9nZXRQbGFpblBLQ1M4SGV4RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHgseSl7dmFyIHI9cGVtdG9oZXgoeCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKTt2YXIgcD10aGlzLnBhcnNlSGV4T2ZFbmNyeXB0ZWRQS0NTOChyKTt2YXIgdT1LRVlVVElMLmdldFBCS0RGMktleUhleEZyb21QYXJhbShwLHkpO3ZhciB2PXt9O3YuY2lwaGVydGV4dD1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAuY2lwaGVydGV4dCk7dmFyIHQ9Q3J5cHRvSlMuZW5jLkhleC5wYXJzZSh1KTt2YXIgcz1DcnlwdG9KUy5lbmMuSGV4LnBhcnNlKHAuZW5jcnlwdGlvblNjaGVtZUlWKTt2YXIgdz1DcnlwdG9KUy5UcmlwbGVERVMuZGVjcnlwdCh2LHQse2l2OnN9KTt2YXIgcT1DcnlwdG9KUy5lbmMuSGV4LnN0cmluZ2lmeSh3KTtyZXR1cm4gcX0sZ2V0S2V5RnJvbUVuY3J5cHRlZFBLQ1M4UEVNOmZ1bmN0aW9uKHMscSl7dmFyIHA9dGhpcy5fZ2V0UGxhaW5QS0NTOEhleEZyb21FbmNyeXB0ZWRQS0NTOFBFTShzLHEpO3ZhciByPXRoaXMuZ2V0S2V5RnJvbVBsYWluUHJpdmF0ZVBLQ1M4SGV4KHApO3JldHVybiByfSxwYXJzZVBsYWluUHJpdmF0ZVBLQ1M4SGV4OmZ1bmN0aW9uKHMpe3ZhciB2PUFTTjFIRVg7dmFyIHU9di5nZXRDaGlsZElkeDt2YXIgdD12LmdldFY7dmFyIHE9e307cS5hbGdwYXJhbT1udWxsO2lmKHMuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIHBsYWluIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAxKVwiKX12YXIgcj11KHMsMCk7aWYoci5sZW5ndGg8Myl7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIHBsYWluIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDAyKVwiKX1pZihzLnN1YnN0cihyWzFdLDIpIT1cIjMwXCIpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwMylcIil9dmFyIHA9dShzLHJbMV0pO2lmKHAubGVuZ3RoIT0yKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUzggcHJpdmF0ZSBrZXkoY29kZTowMDQpXCIpfWlmKHMuc3Vic3RyKHBbMF0sMikhPVwiMDZcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFBLQ1M4IHByaXZhdGUga2V5KGNvZGU6MDA1KVwiKX1xLmFsZ29pZD10KHMscFswXSk7aWYocy5zdWJzdHIocFsxXSwyKT09XCIwNlwiKXtxLmFsZ3BhcmFtPXQocyxwWzFdKX1pZihzLnN1YnN0cihyWzJdLDIpIT1cIjA0XCIpe3Rocm93IG5ldyBFcnJvcihcIm1hbGZvcm1lZCBQS0NTOCBwcml2YXRlIGtleShjb2RlOjAwNilcIil9cS5rZXlpZHg9di5nZXRWaWR4KHMsclsyXSk7cmV0dXJuIHF9LGdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTTpmdW5jdGlvbihxKXt2YXIgcD1wZW10b2hleChxLFwiUFJJVkFURSBLRVlcIik7dmFyIHI9dGhpcy5nZXRLZXlGcm9tUGxhaW5Qcml2YXRlUEtDUzhIZXgocCk7cmV0dXJuIHJ9LGdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleDpmdW5jdGlvbihwKXt2YXIgcT10aGlzLnBhcnNlUGxhaW5Qcml2YXRlUEtDUzhIZXgocCk7dmFyIHI7aWYocS5hbGdvaWQ9PVwiMmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3I9bmV3IFJTQUtleSgpfWVsc2V7aWYocS5hbGdvaWQ9PVwiMmE4NjQ4Y2UzODA0MDFcIil7cj1uZXcgS0pVUi5jcnlwdG8uRFNBKCl9ZWxzZXtpZihxLmFsZ29pZD09XCIyYTg2NDhjZTNkMDIwMVwiKXtyPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSgpfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgcHJpdmF0ZSBrZXkgYWxnb3JpdGhtXCIpfX19ci5yZWFkUEtDUzhQcnZLZXlIZXgocCk7cmV0dXJuIHJ9LF9nZXRLZXlGcm9tUHVibGljUEtDUzhIZXg6ZnVuY3Rpb24ocSl7dmFyIHA7dmFyIHI9QVNOMUhFWC5nZXRWYnlMaXN0KHEsMCxbMCwwXSxcIjA2XCIpO2lmKHI9PT1cIjJhODY0ODg2ZjcwZDAxMDEwMVwiKXtwPW5ldyBSU0FLZXkoKX1lbHNle2lmKHI9PT1cIjJhODY0OGNlMzgwNDAxXCIpe3A9bmV3IEtKVVIuY3J5cHRvLkRTQSgpfWVsc2V7aWYocj09PVwiMmE4NjQ4Y2UzZDAyMDFcIil7cD1uZXcgS0pVUi5jcnlwdG8uRUNEU0EoKX1lbHNle3Rocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIFBLQ1MjOCBwdWJsaWMga2V5IGhleFwiKX19fXAucmVhZFBLQ1M4UHViS2V5SGV4KHEpO3JldHVybiBwfSxwYXJzZVB1YmxpY1Jhd1JTQUtleUhleDpmdW5jdGlvbihyKXt2YXIgdT1BU04xSEVYO3ZhciB0PXUuZ2V0Q2hpbGRJZHg7dmFyIHM9dS5nZXRWO3ZhciBwPXt9O2lmKHIuc3Vic3RyKDAsMikhPVwiMzBcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDEpXCIpfXZhciBxPXQociwwKTtpZihxLmxlbmd0aCE9Mil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDIpXCIpfWlmKHIuc3Vic3RyKHFbMF0sMikhPVwiMDJcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJTQSBrZXkoY29kZTowMDMpXCIpfXAubj1zKHIscVswXSk7aWYoci5zdWJzdHIocVsxXSwyKSE9XCIwMlwiKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUlNBIGtleShjb2RlOjAwNClcIil9cC5lPXMocixxWzFdKTtyZXR1cm4gcH0scGFyc2VQdWJsaWNQS0NTOEhleDpmdW5jdGlvbih0KXt2YXIgdj1BU04xSEVYO3ZhciB1PXYuZ2V0Q2hpbGRJZHg7dmFyIHM9di5nZXRWO3ZhciBxPXt9O3EuYWxncGFyYW09bnVsbDt2YXIgcj11KHQsMCk7aWYoci5sZW5ndGghPTIpe3Rocm93IG5ldyBFcnJvcihcIm91dGVyIERFUlNlcXVlbmNlIHNoYWxsIGhhdmUgMiBlbGVtZW50czogXCIrci5sZW5ndGgpfXZhciB3PXJbMF07aWYodC5zdWJzdHIodywyKSE9XCIzMFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMSlcIil9dmFyIHA9dSh0LHcpO2lmKHAubGVuZ3RoIT0yKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMilcIil9aWYodC5zdWJzdHIocFswXSwyKSE9XCIwNlwiKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUzggcHVibGljIGtleShjb2RlOjAwMylcIil9cS5hbGdvaWQ9cyh0LHBbMF0pO2lmKHQuc3Vic3RyKHBbMV0sMik9PVwiMDZcIil7cS5hbGdwYXJhbT1zKHQscFsxXSl9ZWxzZXtpZih0LnN1YnN0cihwWzFdLDIpPT1cIjMwXCIpe3EuYWxncGFyYW09e307cS5hbGdwYXJhbS5wPXYuZ2V0VmJ5TGlzdCh0LHBbMV0sWzBdLFwiMDJcIik7cS5hbGdwYXJhbS5xPXYuZ2V0VmJ5TGlzdCh0LHBbMV0sWzFdLFwiMDJcIik7cS5hbGdwYXJhbS5nPXYuZ2V0VmJ5TGlzdCh0LHBbMV0sWzJdLFwiMDJcIil9fWlmKHQuc3Vic3RyKHJbMV0sMikhPVwiMDNcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFBLQ1M4IHB1YmxpYyBrZXkoY29kZTowMDQpXCIpfXEua2V5PXModCxyWzFdKS5zdWJzdHIoMik7cmV0dXJuIHF9LH19KCk7S0VZVVRJTC5nZXRLZXk9ZnVuY3Rpb24obCxrLG4pe3ZhciBHPUFTTjFIRVgsTD1HLmdldENoaWxkSWR4LHY9Ry5nZXRWLGQ9Ry5nZXRWYnlMaXN0LGM9S0pVUi5jcnlwdG8saT1jLkVDRFNBLEM9Yy5EU0Esdz1SU0FLZXksTT1wZW10b2hleCxGPUtFWVVUSUw7aWYodHlwZW9mIHchPVwidW5kZWZpbmVkXCImJmwgaW5zdGFuY2VvZiB3KXtyZXR1cm4gbH1pZih0eXBlb2YgaSE9XCJ1bmRlZmluZWRcIiYmbCBpbnN0YW5jZW9mIGkpe3JldHVybiBsfWlmKHR5cGVvZiBDIT1cInVuZGVmaW5lZFwiJiZsIGluc3RhbmNlb2YgQyl7cmV0dXJuIGx9aWYobC5jdXJ2ZSE9PXVuZGVmaW5lZCYmbC54eSE9PXVuZGVmaW5lZCYmbC5kPT09dW5kZWZpbmVkKXtyZXR1cm4gbmV3IGkoe3B1YjpsLnh5LGN1cnZlOmwuY3VydmV9KX1pZihsLmN1cnZlIT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQpe3JldHVybiBuZXcgaSh7cHJ2OmwuZCxjdXJ2ZTpsLmN1cnZlfSl9aWYobC5rdHk9PT11bmRlZmluZWQmJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQ9PT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQdWJsaWMobC5uLGwuZSk7cmV0dXJuIFB9aWYobC5rdHk9PT11bmRlZmluZWQmJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQhPT11bmRlZmluZWQmJmwucCE9PXVuZGVmaW5lZCYmbC5xIT09dW5kZWZpbmVkJiZsLmRwIT09dW5kZWZpbmVkJiZsLmRxIT09dW5kZWZpbmVkJiZsLmNvIT09dW5kZWZpbmVkJiZsLnFpPT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgdygpO1Auc2V0UHJpdmF0ZUV4KGwubixsLmUsbC5kLGwucCxsLnEsbC5kcCxsLmRxLGwuY28pO3JldHVybiBQfWlmKGwua3R5PT09dW5kZWZpbmVkJiZsLm4hPT11bmRlZmluZWQmJmwuZSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkJiZsLnA9PT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQcml2YXRlKGwubixsLmUsbC5kKTtyZXR1cm4gUH1pZihsLnAhPT11bmRlZmluZWQmJmwucSE9PXVuZGVmaW5lZCYmbC5nIT09dW5kZWZpbmVkJiZsLnkhPT11bmRlZmluZWQmJmwueD09PXVuZGVmaW5lZCl7dmFyIFA9bmV3IEMoKTtQLnNldFB1YmxpYyhsLnAsbC5xLGwuZyxsLnkpO3JldHVybiBQfWlmKGwucCE9PXVuZGVmaW5lZCYmbC5xIT09dW5kZWZpbmVkJiZsLmchPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC54IT09dW5kZWZpbmVkKXt2YXIgUD1uZXcgQygpO1Auc2V0UHJpdmF0ZShsLnAsbC5xLGwuZyxsLnksbC54KTtyZXR1cm4gUH1pZihsLmt0eT09PVwiUlNBXCImJmwubiE9PXVuZGVmaW5lZCYmbC5lIT09dW5kZWZpbmVkJiZsLmQ9PT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQdWJsaWMoYjY0dXRvaGV4KGwubiksYjY0dXRvaGV4KGwuZSkpO3JldHVybiBQfWlmKGwua3R5PT09XCJSU0FcIiYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCYmbC5wIT09dW5kZWZpbmVkJiZsLnEhPT11bmRlZmluZWQmJmwuZHAhPT11bmRlZmluZWQmJmwuZHEhPT11bmRlZmluZWQmJmwucWkhPT11bmRlZmluZWQpe3ZhciBQPW5ldyB3KCk7UC5zZXRQcml2YXRlRXgoYjY0dXRvaGV4KGwubiksYjY0dXRvaGV4KGwuZSksYjY0dXRvaGV4KGwuZCksYjY0dXRvaGV4KGwucCksYjY0dXRvaGV4KGwucSksYjY0dXRvaGV4KGwuZHApLGI2NHV0b2hleChsLmRxKSxiNjR1dG9oZXgobC5xaSkpO3JldHVybiBQfWlmKGwua3R5PT09XCJSU0FcIiYmbC5uIT09dW5kZWZpbmVkJiZsLmUhPT11bmRlZmluZWQmJmwuZCE9PXVuZGVmaW5lZCl7dmFyIFA9bmV3IHcoKTtQLnNldFByaXZhdGUoYjY0dXRvaGV4KGwubiksYjY0dXRvaGV4KGwuZSksYjY0dXRvaGV4KGwuZCkpO3JldHVybiBQfWlmKGwua3R5PT09XCJFQ1wiJiZsLmNydiE9PXVuZGVmaW5lZCYmbC54IT09dW5kZWZpbmVkJiZsLnkhPT11bmRlZmluZWQmJmwuZD09PXVuZGVmaW5lZCl7dmFyIGo9bmV3IGkoe2N1cnZlOmwuY3J2fSk7dmFyIHQ9ai5lY3BhcmFtcy5rZXljaGFybGVuO3ZhciBCPShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC54KSkuc2xpY2UoLXQpO3ZhciB6PShcIjAwMDAwMDAwMDBcIitiNjR1dG9oZXgobC55KSkuc2xpY2UoLXQpO3ZhciB1PVwiMDRcIitCK3o7ai5zZXRQdWJsaWNLZXlIZXgodSk7cmV0dXJuIGp9aWYobC5rdHk9PT1cIkVDXCImJmwuY3J2IT09dW5kZWZpbmVkJiZsLnghPT11bmRlZmluZWQmJmwueSE9PXVuZGVmaW5lZCYmbC5kIT09dW5kZWZpbmVkKXt2YXIgaj1uZXcgaSh7Y3VydmU6bC5jcnZ9KTt2YXIgdD1qLmVjcGFyYW1zLmtleWNoYXJsZW47dmFyIEI9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLngpKS5zbGljZSgtdCk7dmFyIHo9KFwiMDAwMDAwMDAwMFwiK2I2NHV0b2hleChsLnkpKS5zbGljZSgtdCk7dmFyIHU9XCIwNFwiK0Irejt2YXIgYj0oXCIwMDAwMDAwMDAwXCIrYjY0dXRvaGV4KGwuZCkpLnNsaWNlKC10KTtqLnNldFB1YmxpY0tleUhleCh1KTtqLnNldFByaXZhdGVLZXlIZXgoYik7cmV0dXJuIGp9aWYobj09PVwicGtjczVwcnZcIil7dmFyIEo9bCxHPUFTTjFIRVgsTixQO049TChKLDApO2lmKE4ubGVuZ3RoPT09OSl7UD1uZXcgdygpO1AucmVhZFBLQ1M1UHJ2S2V5SGV4KEopfWVsc2V7aWYoTi5sZW5ndGg9PT02KXtQPW5ldyBDKCk7UC5yZWFkUEtDUzVQcnZLZXlIZXgoSil9ZWxzZXtpZihOLmxlbmd0aD4yJiZKLnN1YnN0cihOWzFdLDIpPT09XCIwNFwiKXtQPW5ldyBpKCk7UC5yZWFkUEtDUzVQcnZLZXlIZXgoSil9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBQS0NTIzEvNSBoZXhhZGVjaW1hbCBrZXlcIil9fX1yZXR1cm4gUH1pZihuPT09XCJwa2NzOHBydlwiKXt2YXIgUD1GLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOEhleChsKTtyZXR1cm4gUH1pZihuPT09XCJwa2NzOHB1YlwiKXtyZXR1cm4gRi5fZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4KGwpfWlmKG49PT1cIng1MDlwdWJcIil7cmV0dXJuIFg1MDkuZ2V0UHVibGljS2V5RnJvbUNlcnRIZXgobCl9aWYobC5pbmRleE9mKFwiLUVORCBDRVJUSUZJQ0FURS1cIiwwKSE9LTF8fGwuaW5kZXhPZihcIi1FTkQgWDUwOSBDRVJUSUZJQ0FURS1cIiwwKSE9LTF8fGwuaW5kZXhPZihcIi1FTkQgVFJVU1RFRCBDRVJUSUZJQ0FURS1cIiwwKSE9LTEpe3JldHVybiBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0UEVNKGwpfWlmKGwuaW5kZXhPZihcIi1FTkQgUFVCTElDIEtFWS1cIikhPS0xKXt2YXIgTz1wZW10b2hleChsLFwiUFVCTElDIEtFWVwiKTtyZXR1cm4gRi5fZ2V0S2V5RnJvbVB1YmxpY1BLQ1M4SGV4KE8pfWlmKGwuaW5kZXhPZihcIi1FTkQgUlNBIFBSSVZBVEUgS0VZLVwiKSE9LTEmJmwuaW5kZXhPZihcIjQsRU5DUllQVEVEXCIpPT0tMSl7dmFyIG09TShsLFwiUlNBIFBSSVZBVEUgS0VZXCIpO3JldHVybiBGLmdldEtleShtLG51bGwsXCJwa2NzNXBydlwiKX1pZihsLmluZGV4T2YoXCItRU5EIERTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciBJPU0obCxcIkRTQSBQUklWQVRFIEtFWVwiKTt2YXIgRT1kKEksMCxbMV0sXCIwMlwiKTt2YXIgRD1kKEksMCxbMl0sXCIwMlwiKTt2YXIgSz1kKEksMCxbM10sXCIwMlwiKTt2YXIgcj1kKEksMCxbNF0sXCIwMlwiKTt2YXIgcz1kKEksMCxbNV0sXCIwMlwiKTt2YXIgUD1uZXcgQygpO1Auc2V0UHJpdmF0ZShuZXcgQmlnSW50ZWdlcihFLDE2KSxuZXcgQmlnSW50ZWdlcihELDE2KSxuZXcgQmlnSW50ZWdlcihLLDE2KSxuZXcgQmlnSW50ZWdlcihyLDE2KSxuZXcgQmlnSW50ZWdlcihzLDE2KSk7cmV0dXJuIFB9aWYobC5pbmRleE9mKFwiLUVORCBFQyBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKT09LTEpe3ZhciBtPU0obCxcIkVDIFBSSVZBVEUgS0VZXCIpO3JldHVybiBGLmdldEtleShtLG51bGwsXCJwa2NzNXBydlwiKX1pZihsLmluZGV4T2YoXCItRU5EIFBSSVZBVEUgS0VZLVwiKSE9LTEpe3JldHVybiBGLmdldEtleUZyb21QbGFpblByaXZhdGVQS0NTOFBFTShsKX1pZihsLmluZGV4T2YoXCItRU5EIFJTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSE9LTEpe3ZhciBvPUYuZ2V0RGVjcnlwdGVkS2V5SGV4KGwsayk7dmFyIEg9bmV3IFJTQUtleSgpO0gucmVhZFBLQ1M1UHJ2S2V5SGV4KG8pO3JldHVybiBIfWlmKGwuaW5kZXhPZihcIi1FTkQgRUMgUFJJVkFURSBLRVktXCIpIT0tMSYmbC5pbmRleE9mKFwiNCxFTkNSWVBURURcIikhPS0xKXt2YXIgST1GLmdldERlY3J5cHRlZEtleUhleChsLGspO3ZhciBQPWQoSSwwLFsxXSxcIjA0XCIpO3ZhciBmPWQoSSwwLFsyLDBdLFwiMDZcIik7dmFyIEE9ZChJLDAsWzMsMF0sXCIwM1wiKS5zdWJzdHIoMik7dmFyIGU9XCJcIjtpZihLSlVSLmNyeXB0by5PSUQub2lkaGV4Mm5hbWVbZl0hPT11bmRlZmluZWQpe2U9S0pVUi5jcnlwdG8uT0lELm9pZGhleDJuYW1lW2ZdfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwidW5kZWZpbmVkIE9JRChoZXgpIGluIEtKVVIuY3J5cHRvLk9JRDogXCIrZil9dmFyIGo9bmV3IGkoe2N1cnZlOmV9KTtqLnNldFB1YmxpY0tleUhleChBKTtqLnNldFByaXZhdGVLZXlIZXgoUCk7ai5pc1B1YmxpYz1mYWxzZTtyZXR1cm4gan1pZihsLmluZGV4T2YoXCItRU5EIERTQSBQUklWQVRFIEtFWS1cIikhPS0xJiZsLmluZGV4T2YoXCI0LEVOQ1JZUFRFRFwiKSE9LTEpe3ZhciBJPUYuZ2V0RGVjcnlwdGVkS2V5SGV4KGwsayk7dmFyIEU9ZChJLDAsWzFdLFwiMDJcIik7dmFyIEQ9ZChJLDAsWzJdLFwiMDJcIik7dmFyIEs9ZChJLDAsWzNdLFwiMDJcIik7dmFyIHI9ZChJLDAsWzRdLFwiMDJcIik7dmFyIHM9ZChJLDAsWzVdLFwiMDJcIik7dmFyIFA9bmV3IEMoKTtQLnNldFByaXZhdGUobmV3IEJpZ0ludGVnZXIoRSwxNiksbmV3IEJpZ0ludGVnZXIoRCwxNiksbmV3IEJpZ0ludGVnZXIoSywxNiksbmV3IEJpZ0ludGVnZXIociwxNiksbmV3IEJpZ0ludGVnZXIocywxNikpO3JldHVybiBQfWlmKGwuaW5kZXhPZihcIi1FTkQgRU5DUllQVEVEIFBSSVZBVEUgS0VZLVwiKSE9LTEpe3JldHVybiBGLmdldEtleUZyb21FbmNyeXB0ZWRQS0NTOFBFTShsLGspfXRocm93IG5ldyBFcnJvcihcIm5vdCBzdXBwb3J0ZWQgYXJndW1lbnRcIil9O0tFWVVUSUwuZ2VuZXJhdGVLZXlwYWlyPWZ1bmN0aW9uKGEsYyl7aWYoYT09XCJSU0FcIil7dmFyIGI9Yzt2YXIgaD1uZXcgUlNBS2V5KCk7aC5nZW5lcmF0ZShiLFwiMTAwMDFcIik7aC5pc1ByaXZhdGU9dHJ1ZTtoLmlzUHVibGljPXRydWU7dmFyIGY9bmV3IFJTQUtleSgpO3ZhciBlPWgubi50b1N0cmluZygxNik7dmFyIGk9aC5lLnRvU3RyaW5nKDE2KTtmLnNldFB1YmxpYyhlLGkpO2YuaXNQcml2YXRlPWZhbHNlO2YuaXNQdWJsaWM9dHJ1ZTt2YXIgaz17fTtrLnBydktleU9iaj1oO2sucHViS2V5T2JqPWY7cmV0dXJuIGt9ZWxzZXtpZihhPT1cIkVDXCIpe3ZhciBkPWM7dmFyIGc9bmV3IEtKVVIuY3J5cHRvLkVDRFNBKHtjdXJ2ZTpkfSk7dmFyIGo9Zy5nZW5lcmF0ZUtleVBhaXJIZXgoKTt2YXIgaD1uZXcgS0pVUi5jcnlwdG8uRUNEU0Eoe2N1cnZlOmR9KTtoLnNldFB1YmxpY0tleUhleChqLmVjcHViaGV4KTtoLnNldFByaXZhdGVLZXlIZXgoai5lY3BydmhleCk7aC5pc1ByaXZhdGU9dHJ1ZTtoLmlzUHVibGljPWZhbHNlO3ZhciBmPW5ldyBLSlVSLmNyeXB0by5FQ0RTQSh7Y3VydmU6ZH0pO2Yuc2V0UHVibGljS2V5SGV4KGouZWNwdWJoZXgpO2YuaXNQcml2YXRlPWZhbHNlO2YuaXNQdWJsaWM9dHJ1ZTt2YXIgaz17fTtrLnBydktleU9iaj1oO2sucHViS2V5T2JqPWY7cmV0dXJuIGt9ZWxzZXt0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIGFsZ29yaXRobTogXCIrYSl9fX07S0VZVVRJTC5nZXRQRU09ZnVuY3Rpb24oYixELHksbSxxLGope3ZhciBGPUtKVVIsaz1GLmFzbjEsej1rLkRFUk9iamVjdElkZW50aWZpZXIsZj1rLkRFUkludGVnZXIsbD1rLkFTTjFVdGlsLm5ld09iamVjdCxhPWsueDUwOSxDPWEuU3ViamVjdFB1YmxpY0tleUluZm8sZT1GLmNyeXB0byx1PWUuRFNBLHI9ZS5FQ0RTQSxuPVJTQUtleTtmdW5jdGlvbiBBKHMpe3ZhciBHPWwoe3NlcTpbe1wiaW50XCI6MH0se1wiaW50XCI6e2JpZ2ludDpzLm59fSx7XCJpbnRcIjpzLmV9LHtcImludFwiOntiaWdpbnQ6cy5kfX0se1wiaW50XCI6e2JpZ2ludDpzLnB9fSx7XCJpbnRcIjp7YmlnaW50OnMucX19LHtcImludFwiOntiaWdpbnQ6cy5kbXAxfX0se1wiaW50XCI6e2JpZ2ludDpzLmRtcTF9fSx7XCJpbnRcIjp7YmlnaW50OnMuY29lZmZ9fV19KTtyZXR1cm4gR31mdW5jdGlvbiBCKEcpe3ZhciBzPWwoe3NlcTpbe1wiaW50XCI6MX0se29jdHN0cjp7aGV4OkcucHJ2S2V5SGV4fX0se3RhZzpbXCJhMFwiLHRydWUse29pZDp7bmFtZTpHLmN1cnZlTmFtZX19XX0se3RhZzpbXCJhMVwiLHRydWUse2JpdHN0cjp7aGV4OlwiMDBcIitHLnB1YktleUhleH19XX1dfSk7cmV0dXJuIHN9ZnVuY3Rpb24geChzKXt2YXIgRz1sKHtzZXE6W3tcImludFwiOjB9LHtcImludFwiOntiaWdpbnQ6cy5wfX0se1wiaW50XCI6e2JpZ2ludDpzLnF9fSx7XCJpbnRcIjp7YmlnaW50OnMuZ319LHtcImludFwiOntiaWdpbnQ6cy55fX0se1wiaW50XCI6e2JpZ2ludDpzLnh9fV19KTtyZXR1cm4gR31pZigoKG4hPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiBuKXx8KHUhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiB1KXx8KHIhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiByKSkmJmIuaXNQdWJsaWM9PXRydWUmJihEPT09dW5kZWZpbmVkfHxEPT1cIlBLQ1M4UFVCXCIpKXt2YXIgRT1uZXcgQyhiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gaGV4dG9wZW0odyxcIlBVQkxJQyBLRVlcIil9aWYoRD09XCJQS0NTMVBSVlwiJiZuIT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgbiYmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9QShiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gaGV4dG9wZW0odyxcIlJTQSBQUklWQVRFIEtFWVwiKX1pZihEPT1cIlBLQ1MxUFJWXCImJnIhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiByJiYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgaT1uZXcgeih7bmFtZTpiLmN1cnZlTmFtZX0pO3ZhciB2PWkuZ2V0RW5jb2RlZEhleCgpO3ZhciBoPUIoYik7dmFyIHQ9aC5nZXRFbmNvZGVkSGV4KCk7dmFyIHA9XCJcIjtwKz1oZXh0b3BlbSh2LFwiRUMgUEFSQU1FVEVSU1wiKTtwKz1oZXh0b3BlbSh0LFwiRUMgUFJJVkFURSBLRVlcIik7cmV0dXJuIHB9aWYoRD09XCJQS0NTMVBSVlwiJiZ1IT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgdSYmKHk9PT11bmRlZmluZWR8fHk9PW51bGwpJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIEU9eChiKTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtyZXR1cm4gaGV4dG9wZW0odyxcIkRTQSBQUklWQVRFIEtFWVwiKX1pZihEPT1cIlBLQ1M1UFJWXCImJm4hPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiBuJiYoeSE9PXVuZGVmaW5lZCYmeSE9bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgRT1BKGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKG09PT11bmRlZmluZWQpe209XCJERVMtRURFMy1DQkNcIn1yZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJSU0FcIix3LHksbSxqKX1pZihEPT1cIlBLQ1M1UFJWXCImJnIhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiByJiYoeSE9PXVuZGVmaW5lZCYmeSE9bnVsbCkmJmIuaXNQcml2YXRlPT10cnVlKXt2YXIgRT1CKGIpO3ZhciB3PUUuZ2V0RW5jb2RlZEhleCgpO2lmKG09PT11bmRlZmluZWQpe209XCJERVMtRURFMy1DQkNcIn1yZXR1cm4gdGhpcy5nZXRFbmNyeXB0ZWRQS0NTNVBFTUZyb21QcnZLZXlIZXgoXCJFQ1wiLHcseSxtLGopfWlmKEQ9PVwiUEtDUzVQUlZcIiYmdSE9PXVuZGVmaW5lZCYmYiBpbnN0YW5jZW9mIHUmJih5IT09dW5kZWZpbmVkJiZ5IT1udWxsKSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBFPXgoYik7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYobT09PXVuZGVmaW5lZCl7bT1cIkRFUy1FREUzLUNCQ1wifXJldHVybiB0aGlzLmdldEVuY3J5cHRlZFBLQ1M1UEVNRnJvbVBydktleUhleChcIkRTQVwiLHcseSxtLGopfXZhciBvPWZ1bmN0aW9uKEcscyl7dmFyIEk9YyhHLHMpO3ZhciBIPW5ldyBsKHtzZXE6W3tzZXE6W3tvaWQ6e25hbWU6XCJwa2NzNVBCRVMyXCJ9fSx7c2VxOlt7c2VxOlt7b2lkOntuYW1lOlwicGtjczVQQktERjJcIn19LHtzZXE6W3tvY3RzdHI6e2hleDpJLnBia2RmMlNhbHR9fSx7XCJpbnRcIjpJLnBia2RmMkl0ZXJ9XX1dfSx7c2VxOlt7b2lkOntuYW1lOlwiZGVzLUVERTMtQ0JDXCJ9fSx7b2N0c3RyOntoZXg6SS5lbmNyeXB0aW9uU2NoZW1lSVZ9fV19XX1dfSx7b2N0c3RyOntoZXg6SS5jaXBoZXJ0ZXh0fX1dfSk7cmV0dXJuIEguZ2V0RW5jb2RlZEhleCgpfTt2YXIgYz1mdW5jdGlvbihOLE8pe3ZhciBIPTEwMDt2YXIgTT1DcnlwdG9KUy5saWIuV29yZEFycmF5LnJhbmRvbSg4KTt2YXIgTD1cIkRFUy1FREUzLUNCQ1wiO3ZhciBzPUNyeXB0b0pTLmxpYi5Xb3JkQXJyYXkucmFuZG9tKDgpO3ZhciBJPUNyeXB0b0pTLlBCS0RGMihPLE0se2tleVNpemU6MTkyLzMyLGl0ZXJhdGlvbnM6SH0pO3ZhciBKPUNyeXB0b0pTLmVuYy5IZXgucGFyc2UoTik7dmFyIEs9Q3J5cHRvSlMuVHJpcGxlREVTLmVuY3J5cHQoSixJLHtpdjpzfSkrXCJcIjt2YXIgRz17fTtHLmNpcGhlcnRleHQ9SztHLnBia2RmMlNhbHQ9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkoTSk7Ry5wYmtkZjJJdGVyPUg7Ry5lbmNyeXB0aW9uU2NoZW1lQWxnPUw7Ry5lbmNyeXB0aW9uU2NoZW1lSVY9Q3J5cHRvSlMuZW5jLkhleC5zdHJpbmdpZnkocyk7cmV0dXJuIEd9O2lmKEQ9PVwiUEtDUzhQUlZcIiYmbiE9dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgbiYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBnPUEoYik7dmFyIGQ9Zy5nZXRFbmNvZGVkSGV4KCk7dmFyIEU9bCh7c2VxOlt7XCJpbnRcIjowfSx7c2VxOlt7b2lkOntuYW1lOlwicnNhRW5jcnlwdGlvblwifX0se1wibnVsbFwiOnRydWV9XX0se29jdHN0cjp7aGV4OmR9fV19KTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZih5PT09dW5kZWZpbmVkfHx5PT1udWxsKXtyZXR1cm4gaGV4dG9wZW0odyxcIlBSSVZBVEUgS0VZXCIpfWVsc2V7dmFyIHQ9byh3LHkpO3JldHVybiBoZXh0b3BlbSh0LFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpfX1pZihEPT1cIlBLQ1M4UFJWXCImJnIhPT11bmRlZmluZWQmJmIgaW5zdGFuY2VvZiByJiZiLmlzUHJpdmF0ZT09dHJ1ZSl7dmFyIGc9bmV3IGwoe3NlcTpbe1wiaW50XCI6MX0se29jdHN0cjp7aGV4OmIucHJ2S2V5SGV4fX0se3RhZzpbXCJhMVwiLHRydWUse2JpdHN0cjp7aGV4OlwiMDBcIitiLnB1YktleUhleH19XX1dfSk7dmFyIGQ9Zy5nZXRFbmNvZGVkSGV4KCk7dmFyIEU9bCh7c2VxOlt7XCJpbnRcIjowfSx7c2VxOlt7b2lkOntuYW1lOlwiZWNQdWJsaWNLZXlcIn19LHtvaWQ6e25hbWU6Yi5jdXJ2ZU5hbWV9fV19LHtvY3RzdHI6e2hleDpkfX1dfSk7dmFyIHc9RS5nZXRFbmNvZGVkSGV4KCk7aWYoeT09PXVuZGVmaW5lZHx8eT09bnVsbCl7cmV0dXJuIGhleHRvcGVtKHcsXCJQUklWQVRFIEtFWVwiKX1lbHNle3ZhciB0PW8odyx5KTtyZXR1cm4gaGV4dG9wZW0odCxcIkVOQ1JZUFRFRCBQUklWQVRFIEtFWVwiKX19aWYoRD09XCJQS0NTOFBSVlwiJiZ1IT09dW5kZWZpbmVkJiZiIGluc3RhbmNlb2YgdSYmYi5pc1ByaXZhdGU9PXRydWUpe3ZhciBnPW5ldyBmKHtiaWdpbnQ6Yi54fSk7dmFyIGQ9Zy5nZXRFbmNvZGVkSGV4KCk7dmFyIEU9bCh7c2VxOlt7XCJpbnRcIjowfSx7c2VxOlt7b2lkOntuYW1lOlwiZHNhXCJ9fSx7c2VxOlt7XCJpbnRcIjp7YmlnaW50OmIucH19LHtcImludFwiOntiaWdpbnQ6Yi5xfX0se1wiaW50XCI6e2JpZ2ludDpiLmd9fV19XX0se29jdHN0cjp7aGV4OmR9fV19KTt2YXIgdz1FLmdldEVuY29kZWRIZXgoKTtpZih5PT09dW5kZWZpbmVkfHx5PT1udWxsKXtyZXR1cm4gaGV4dG9wZW0odyxcIlBSSVZBVEUgS0VZXCIpfWVsc2V7dmFyIHQ9byh3LHkpO3JldHVybiBoZXh0b3BlbSh0LFwiRU5DUllQVEVEIFBSSVZBVEUgS0VZXCIpfX10aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBvYmplY3Qgbm9yIGZvcm1hdFwiKX07S0VZVVRJTC5nZXRLZXlGcm9tQ1NSUEVNPWZ1bmN0aW9uKGIpe3ZhciBhPXBlbXRvaGV4KGIsXCJDRVJUSUZJQ0FURSBSRVFVRVNUXCIpO3ZhciBjPUtFWVVUSUwuZ2V0S2V5RnJvbUNTUkhleChhKTtyZXR1cm4gY307S0VZVVRJTC5nZXRLZXlGcm9tQ1NSSGV4PWZ1bmN0aW9uKGEpe3ZhciBjPUtFWVVUSUwucGFyc2VDU1JIZXgoYSk7dmFyIGI9S0VZVVRJTC5nZXRLZXkoYy5wOHB1YmtleWhleCxudWxsLFwicGtjczhwdWJcIik7cmV0dXJuIGJ9O0tFWVVUSUwucGFyc2VDU1JIZXg9ZnVuY3Rpb24oZCl7dmFyIGk9QVNOMUhFWDt2YXIgZj1pLmdldENoaWxkSWR4O3ZhciBjPWkuZ2V0VExWO3ZhciBiPXt9O3ZhciBnPWQ7aWYoZy5zdWJzdHIoMCwyKSE9XCIzMFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAxKVwiKX12YXIgZT1mKGcsMCk7aWYoZS5sZW5ndGg8MSl7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIENTUihjb2RlOjAwMilcIil9aWYoZy5zdWJzdHIoZVswXSwyKSE9XCIzMFwiKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgQ1NSKGNvZGU6MDAzKVwiKX12YXIgYT1mKGcsZVswXSk7aWYoYS5sZW5ndGg8Myl7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIENTUihjb2RlOjAwNClcIil9Yi5wOHB1YmtleWhleD1jKGcsYVsyXSk7cmV0dXJuIGJ9O0tFWVVUSUwuZ2V0S2V5SUQ9ZnVuY3Rpb24oZil7dmFyIGM9S0VZVVRJTDt2YXIgZT1BU04xSEVYO2lmKHR5cGVvZiBmPT09XCJzdHJpbmdcIiYmZi5pbmRleE9mKFwiQkVHSU4gXCIpIT0tMSl7Zj1jLmdldEtleShmKX12YXIgZD1wZW10b2hleChjLmdldFBFTShmKSk7dmFyIGI9ZS5nZXRJZHhieUxpc3QoZCwwLFsxXSk7dmFyIGE9ZS5nZXRWKGQsYikuc3Vic3RyaW5nKDIpO3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoYSxcInNoYTFcIil9O0tFWVVUSUwuZ2V0SldLPWZ1bmN0aW9uKGQsaCxnLGIsZil7dmFyIGk7dmFyIGs9e307dmFyIGU7dmFyIGM9S0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4O2lmKHR5cGVvZiBkPT1cInN0cmluZ1wiKXtpPUtFWVVUSUwuZ2V0S2V5KGQpO2lmKGQuaW5kZXhPZihcIkNFUlRJRklDQVRFXCIpIT0tMSl7ZT1wZW10b2hleChkKX19ZWxzZXtpZih0eXBlb2YgZD09XCJvYmplY3RcIil7aWYoZCBpbnN0YW5jZW9mIFg1MDkpe2k9ZC5nZXRQdWJsaWNLZXkoKTtlPWQuaGV4fWVsc2V7aT1kfX1lbHNle3Rocm93IG5ldyBFcnJvcihcInVuc3VwcG9ydGVkIGtleWluZm8gdHlwZVwiKX19aWYoaSBpbnN0YW5jZW9mIFJTQUtleSYmaS5pc1ByaXZhdGUpe2sua3R5PVwiUlNBXCI7ay5uPWhleHRvYjY0dShpLm4udG9TdHJpbmcoMTYpKTtrLmU9aGV4dG9iNjR1KGkuZS50b1N0cmluZygxNikpO2suZD1oZXh0b2I2NHUoaS5kLnRvU3RyaW5nKDE2KSk7ay5wPWhleHRvYjY0dShpLnAudG9TdHJpbmcoMTYpKTtrLnE9aGV4dG9iNjR1KGkucS50b1N0cmluZygxNikpO2suZHA9aGV4dG9iNjR1KGkuZG1wMS50b1N0cmluZygxNikpO2suZHE9aGV4dG9iNjR1KGkuZG1xMS50b1N0cmluZygxNikpO2sucWk9aGV4dG9iNjR1KGkuY29lZmYudG9TdHJpbmcoMTYpKX1lbHNle2lmKGkgaW5zdGFuY2VvZiBSU0FLZXkmJmkuaXNQdWJsaWMpe2sua3R5PVwiUlNBXCI7ay5uPWhleHRvYjY0dShpLm4udG9TdHJpbmcoMTYpKTtrLmU9aGV4dG9iNjR1KGkuZS50b1N0cmluZygxNikpfWVsc2V7aWYoaSBpbnN0YW5jZW9mIEtKVVIuY3J5cHRvLkVDRFNBJiZpLmlzUHJpdmF0ZSl7dmFyIGE9aS5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lKCk7aWYoYSE9PVwiUC0yNTZcIiYmYSE9PVwiUC0zODRcIiYmYSE9PVwiUC01MjFcIil7dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgY3VydmUgbmFtZSBmb3IgSldUOiBcIithKX12YXIgaj1pLmdldFB1YmxpY0tleVhZSGV4KCk7ay5rdHk9XCJFQ1wiO2suY3J2PWE7ay54PWhleHRvYjY0dShqLngpO2sueT1oZXh0b2I2NHUoai55KTtrLmQ9aGV4dG9iNjR1KGkucHJ2S2V5SGV4KX1lbHNle2lmKGkgaW5zdGFuY2VvZiBLSlVSLmNyeXB0by5FQ0RTQSYmaS5pc1B1YmxpYyl7dmFyIGE9aS5nZXRTaG9ydE5JU1RQQ3VydmVOYW1lKCk7aWYoYSE9PVwiUC0yNTZcIiYmYSE9PVwiUC0zODRcIiYmYSE9PVwiUC01MjFcIil7dGhyb3cgbmV3IEVycm9yKFwidW5zdXBwb3J0ZWQgY3VydmUgbmFtZSBmb3IgSldUOiBcIithKX12YXIgaj1pLmdldFB1YmxpY0tleVhZSGV4KCk7ay5rdHk9XCJFQ1wiO2suY3J2PWE7ay54PWhleHRvYjY0dShqLngpO2sueT1oZXh0b2I2NHUoai55KX19fX1pZihrLmt0eT09dW5kZWZpbmVkKXt0aHJvdyBuZXcgRXJyb3IoXCJ1bnN1cHBvcnRlZCBrZXlpbmZvXCIpfWlmKCghaS5pc1ByaXZhdGUpJiZoIT10cnVlKXtrLmtpZD1LSlVSLmp3cy5KV1MuZ2V0SldLdGh1bWJwcmludChrKX1pZihlIT11bmRlZmluZWQmJmchPXRydWUpe2sueDVjPVtoZXgyYjY0KGUpXX1pZihlIT11bmRlZmluZWQmJmIhPXRydWUpe2sueDV0PWI2NHRvYjY0dShoZXgyYjY0KGMoZSxcInNoYTFcIikpKX1pZihlIT11bmRlZmluZWQmJmYhPXRydWUpe2tbXCJ4NXQjUzI1NlwiXT1iNjR0b2I2NHUoaGV4MmI2NChjKGUsXCJzaGEyNTZcIikpKX1yZXR1cm4ga307S0VZVVRJTC5nZXRKV0tGcm9tS2V5PWZ1bmN0aW9uKGEpe3JldHVybiBLRVlVVElMLmdldEpXSyhhLHRydWUsdHJ1ZSx0cnVlLHRydWUpfTtcblxuUlNBS2V5LmdldFBvc0FycmF5T2ZDaGlsZHJlbkZyb21IZXg9ZnVuY3Rpb24oYSl7cmV0dXJuIEFTTjFIRVguZ2V0Q2hpbGRJZHgoYSwwKX07UlNBS2V5LmdldEhleFZhbHVlQXJyYXlPZkNoaWxkcmVuRnJvbUhleD1mdW5jdGlvbihmKXt2YXIgbj1BU04xSEVYO3ZhciBpPW4uZ2V0Vjt2YXIgaz1SU0FLZXkuZ2V0UG9zQXJyYXlPZkNoaWxkcmVuRnJvbUhleChmKTt2YXIgZT1pKGYsa1swXSk7dmFyIGo9aShmLGtbMV0pO3ZhciBiPWkoZixrWzJdKTt2YXIgYz1pKGYsa1szXSk7dmFyIGg9aShmLGtbNF0pO3ZhciBnPWkoZixrWzVdKTt2YXIgbT1pKGYsa1s2XSk7dmFyIGw9aShmLGtbN10pO3ZhciBkPWkoZixrWzhdKTt2YXIgaz1uZXcgQXJyYXkoKTtrLnB1c2goZSxqLGIsYyxoLGcsbSxsLGQpO3JldHVybiBrfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQcml2YXRlS2V5RnJvbVBFTVN0cmluZz1mdW5jdGlvbihkKXt2YXIgYz1wZW10b2hleChkKTt2YXIgYj1SU0FLZXkuZ2V0SGV4VmFsdWVBcnJheU9mQ2hpbGRyZW5Gcm9tSGV4KGMpO3RoaXMuc2V0UHJpdmF0ZUV4KGJbMV0sYlsyXSxiWzNdLGJbNF0sYls1XSxiWzZdLGJbN10sYls4XSl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M1UHJ2S2V5SGV4PWZ1bmN0aW9uKGMpe3ZhciBiPVJTQUtleS5nZXRIZXhWYWx1ZUFycmF5T2ZDaGlsZHJlbkZyb21IZXgoYyk7dGhpcy5zZXRQcml2YXRlRXgoYlsxXSxiWzJdLGJbM10sYls0XSxiWzVdLGJbNl0sYls3XSxiWzhdKX07UlNBS2V5LnByb3RvdHlwZS5yZWFkUEtDUzhQcnZLZXlIZXg9ZnVuY3Rpb24oZSl7dmFyIGMsaSxrLGIsYSxmLGQsajt2YXIgbT1BU04xSEVYO3ZhciBsPW0uZ2V0VmJ5TGlzdEV4O2lmKG0uaXNBU04xSEVYKGUpPT09ZmFsc2Upe3Rocm93IG5ldyBFcnJvcihcIm5vdCBBU04uMSBoZXggc3RyaW5nXCIpfXRyeXtjPWwoZSwwLFsyLDAsMV0sXCIwMlwiKTtpPWwoZSwwLFsyLDAsMl0sXCIwMlwiKTtrPWwoZSwwLFsyLDAsM10sXCIwMlwiKTtiPWwoZSwwLFsyLDAsNF0sXCIwMlwiKTthPWwoZSwwLFsyLDAsNV0sXCIwMlwiKTtmPWwoZSwwLFsyLDAsNl0sXCIwMlwiKTtkPWwoZSwwLFsyLDAsN10sXCIwMlwiKTtqPWwoZSwwLFsyLDAsOF0sXCIwMlwiKX1jYXRjaChnKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgUEtDUyM4IHBsYWluIFJTQSBwcml2YXRlIGtleVwiKX10aGlzLnNldFByaXZhdGVFeChjLGksayxiLGEsZixkLGopfTtSU0FLZXkucHJvdG90eXBlLnJlYWRQS0NTNVB1YktleUhleD1mdW5jdGlvbihjKXt2YXIgZT1BU04xSEVYO3ZhciBiPWUuZ2V0VjtpZihlLmlzQVNOMUhFWChjKT09PWZhbHNlKXt0aHJvdyBuZXcgRXJyb3IoXCJrZXlIZXggaXMgbm90IEFTTi4xIGhleCBzdHJpbmdcIil9dmFyIGE9ZS5nZXRDaGlsZElkeChjLDApO2lmKGEubGVuZ3RoIT09Mnx8Yy5zdWJzdHIoYVswXSwyKSE9PVwiMDJcInx8Yy5zdWJzdHIoYVsxXSwyKSE9PVwiMDJcIil7dGhyb3cgbmV3IEVycm9yKFwid3JvbmcgaGV4IGZvciBQS0NTIzUgcHVibGljIGtleVwiKX12YXIgZj1iKGMsYVswXSk7dmFyIGQ9YihjLGFbMV0pO3RoaXMuc2V0UHVibGljKGYsZCl9O1JTQUtleS5wcm90b3R5cGUucmVhZFBLQ1M4UHViS2V5SGV4PWZ1bmN0aW9uKGIpe3ZhciBjPUFTTjFIRVg7aWYoYy5pc0FTTjFIRVgoYik9PT1mYWxzZSl7dGhyb3cgbmV3IEVycm9yKFwibm90IEFTTi4xIGhleCBzdHJpbmdcIil9aWYoYy5nZXRUTFZieUxpc3RFeChiLDAsWzAsMF0pIT09XCIwNjA5MmE4NjQ4ODZmNzBkMDEwMTAxXCIpe3Rocm93IG5ldyBFcnJvcihcIm5vdCBQS0NTOCBSU0EgcHVibGljIGtleVwiKX12YXIgYT1jLmdldFRMVmJ5TGlzdEV4KGIsMCxbMSwwXSk7dGhpcy5yZWFkUEtDUzVQdWJLZXlIZXgoYSl9O1JTQUtleS5wcm90b3R5cGUucmVhZENlcnRQdWJLZXlIZXg9ZnVuY3Rpb24oYixkKXt2YXIgYSxjO2E9bmV3IFg1MDkoKTthLnJlYWRDZXJ0SGV4KGIpO2M9YS5nZXRQdWJsaWNLZXlIZXgoKTt0aGlzLnJlYWRQS0NTOFB1YktleUhleChjKX07XG5cbnZhciBfUkVfSEVYREVDT05MWT1uZXcgUmVnRXhwKFwiW14wLTlhLWZdXCIsXCJnaVwiKTtmdW5jdGlvbiBfcnNhc2lnbl9nZXRIZXhQYWRkZWREaWdlc3RJbmZvRm9yU3RyaW5nKGQsZSxhKXt2YXIgYj1mdW5jdGlvbihmKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoU3RyaW5nKGYsYSl9O3ZhciBjPWIoZCk7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuZ2V0UGFkZGVkRGlnZXN0SW5mb0hleChjLGEsZSl9ZnVuY3Rpb24gX3plcm9QYWRkaW5nT2ZTaWduYXR1cmUoZSxkKXt2YXIgYz1cIlwiO3ZhciBhPWQvNC1lLmxlbmd0aDtmb3IodmFyIGI9MDtiPGE7YisrKXtjPWMrXCIwXCJ9cmV0dXJuIGMrZX1SU0FLZXkucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oZCxhKXt2YXIgYj1mdW5jdGlvbihlKXtyZXR1cm4gS0pVUi5jcnlwdG8uVXRpbC5oYXNoU3RyaW5nKGUsYSl9O3ZhciBjPWIoZCk7cmV0dXJuIHRoaXMuc2lnbldpdGhNZXNzYWdlSGFzaChjLGEpfTtSU0FLZXkucHJvdG90eXBlLnNpZ25XaXRoTWVzc2FnZUhhc2g9ZnVuY3Rpb24oZSxjKXt2YXIgZj1LSlVSLmNyeXB0by5VdGlsLmdldFBhZGRlZERpZ2VzdEluZm9IZXgoZSxjLHRoaXMubi5iaXRMZW5ndGgoKSk7dmFyIGI9cGFyc2VCaWdJbnQoZiwxNik7dmFyIGQ9dGhpcy5kb1ByaXZhdGUoYik7dmFyIGE9ZC50b1N0cmluZygxNik7cmV0dXJuIF96ZXJvUGFkZGluZ09mU2lnbmF0dXJlKGEsdGhpcy5uLmJpdExlbmd0aCgpKX07ZnVuY3Rpb24gcHNzX21nZjFfc3RyKGMsYSxlKXt2YXIgYj1cIlwiLGQ9MDt3aGlsZShiLmxlbmd0aDxhKXtiKz1oZXh0b3JzdHIoZShyc3RydG9oZXgoYytTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZyxbKGQmNDI3ODE5MDA4MCk+PjI0LChkJjE2NzExNjgwKT4+MTYsKGQmNjUyODApPj44LGQmMjU1XSkpKSk7ZCs9MX1yZXR1cm4gYn1SU0FLZXkucHJvdG90eXBlLnNpZ25QU1M9ZnVuY3Rpb24oZSxhLGQpe3ZhciBjPWZ1bmN0aW9uKGYpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoZixhKX07dmFyIGI9Yyhyc3RydG9oZXgoZSkpO2lmKGQ9PT11bmRlZmluZWQpe2Q9LTF9cmV0dXJuIHRoaXMuc2lnbldpdGhNZXNzYWdlSGFzaFBTUyhiLGEsZCl9O1JTQUtleS5wcm90b3R5cGUuc2lnbldpdGhNZXNzYWdlSGFzaFBTUz1mdW5jdGlvbihsLGEsayl7dmFyIGI9aGV4dG9yc3RyKGwpO3ZhciBnPWIubGVuZ3RoO3ZhciBtPXRoaXMubi5iaXRMZW5ndGgoKS0xO3ZhciBjPU1hdGguY2VpbChtLzgpO3ZhciBkO3ZhciBvPWZ1bmN0aW9uKGkpe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hIZXgoaSxhKX07aWYoaz09PS0xfHxrPT09dW5kZWZpbmVkKXtrPWd9ZWxzZXtpZihrPT09LTIpe2s9Yy1nLTJ9ZWxzZXtpZihrPC0yKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNhbHQgbGVuZ3RoXCIpfX19aWYoYzwoZytrKzIpKXt0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIHRvbyBsb25nXCIpfXZhciBmPVwiXCI7aWYoaz4wKXtmPW5ldyBBcnJheShrKTtuZXcgU2VjdXJlUmFuZG9tKCkubmV4dEJ5dGVzKGYpO2Y9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsZil9dmFyIG49aGV4dG9yc3RyKG8ocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2IrZikpKTt2YXIgaj1bXTtmb3IoZD0wO2Q8Yy1rLWctMjtkKz0xKXtqW2RdPTB9dmFyIGU9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsaikrXCJcXHgwMVwiK2Y7dmFyIGg9cHNzX21nZjFfc3RyKG4sZS5sZW5ndGgsbyk7dmFyIHE9W107Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrPTEpe3FbZF09ZS5jaGFyQ29kZUF0KGQpXmguY2hhckNvZGVBdChkKX12YXIgcD0oNjUyODA+Pig4KmMtbSkpJjI1NTtxWzBdJj1+cDtmb3IoZD0wO2Q8ZztkKyspe3EucHVzaChuLmNoYXJDb2RlQXQoZCkpfXEucHVzaCgxODgpO3JldHVybiBfemVyb1BhZGRpbmdPZlNpZ25hdHVyZSh0aGlzLmRvUHJpdmF0ZShuZXcgQmlnSW50ZWdlcihxKSkudG9TdHJpbmcoMTYpLHRoaXMubi5iaXRMZW5ndGgoKSl9O2Z1bmN0aW9uIF9yc2FzaWduX2dldERlY3J5cHRTaWduYXR1cmVCSShhLGQsYyl7dmFyIGI9bmV3IFJTQUtleSgpO2Iuc2V0UHVibGljKGQsYyk7dmFyIGU9Yi5kb1B1YmxpYyhhKTtyZXR1cm4gZX1mdW5jdGlvbiBfcnNhc2lnbl9nZXRIZXhEaWdlc3RJbmZvRnJvbVNpZyhhLGMsYil7dmFyIGU9X3JzYXNpZ25fZ2V0RGVjcnlwdFNpZ25hdHVyZUJJKGEsYyxiKTt2YXIgZD1lLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3JldHVybiBkfWZ1bmN0aW9uIF9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGYpe2Zvcih2YXIgZSBpbiBLSlVSLmNyeXB0by5VdGlsLkRJR0VTVElORk9IRUFEKXt2YXIgZD1LSlVSLmNyeXB0by5VdGlsLkRJR0VTVElORk9IRUFEW2VdO3ZhciBiPWQubGVuZ3RoO2lmKGYuc3Vic3RyaW5nKDAsYik9PWQpe3ZhciBjPVtlLGYuc3Vic3RyaW5nKGIpXTtyZXR1cm4gY319cmV0dXJuW119UlNBS2V5LnByb3RvdHlwZS52ZXJpZnk9ZnVuY3Rpb24oZixsKXtsPWwudG9Mb3dlckNhc2UoKTtpZihsLm1hdGNoKC9eWzAtOWEtZl0rJC8pPT1udWxsKXtyZXR1cm4gZmFsc2V9dmFyIGI9cGFyc2VCaWdJbnQobCwxNik7dmFyIGs9dGhpcy5uLmJpdExlbmd0aCgpO2lmKGIuYml0TGVuZ3RoKCk+ayl7cmV0dXJuIGZhbHNlfXZhciBqPXRoaXMuZG9QdWJsaWMoYik7dmFyIGk9ai50b1N0cmluZygxNik7aWYoaS5sZW5ndGgrMyE9ay80KXtyZXR1cm4gZmFsc2V9dmFyIGU9aS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBnPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGUpO2lmKGcubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Z1swXTt2YXIgaD1nWzFdO3ZhciBhPWZ1bmN0aW9uKG0pe3JldHVybiBLSlVSLmNyeXB0by5VdGlsLmhhc2hTdHJpbmcobSxkKX07dmFyIGM9YShmKTtyZXR1cm4oaD09Yyl9O1JTQUtleS5wcm90b3R5cGUudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoPWZ1bmN0aW9uKGUsYSl7aWYoYS5sZW5ndGghPU1hdGguY2VpbCh0aGlzLm4uYml0TGVuZ3RoKCkvNCkpe3JldHVybiBmYWxzZX12YXIgYj1wYXJzZUJpZ0ludChhLDE2KTtpZihiLmJpdExlbmd0aCgpPnRoaXMubi5iaXRMZW5ndGgoKSl7cmV0dXJuIDB9dmFyIGg9dGhpcy5kb1B1YmxpYyhiKTt2YXIgZz1oLnRvU3RyaW5nKDE2KS5yZXBsYWNlKC9eMWYrMDAvLFwiXCIpO3ZhciBjPV9yc2FzaWduX2dldEFsZ05hbWVBbmRIYXNoRnJvbUhleERpc2dlc3RJbmZvKGcpO2lmKGMubGVuZ3RoPT0wKXtyZXR1cm4gZmFsc2V9dmFyIGQ9Y1swXTt2YXIgZj1jWzFdO3JldHVybihmPT1lKX07UlNBS2V5LnByb3RvdHlwZS52ZXJpZnlQU1M9ZnVuY3Rpb24oYyxiLGEsZil7dmFyIGU9ZnVuY3Rpb24oZyl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChnLGEpfTt2YXIgZD1lKHJzdHJ0b2hleChjKSk7aWYoZj09PXVuZGVmaW5lZCl7Zj0tMX1yZXR1cm4gdGhpcy52ZXJpZnlXaXRoTWVzc2FnZUhhc2hQU1MoZCxiLGEsZil9O1JTQUtleS5wcm90b3R5cGUudmVyaWZ5V2l0aE1lc3NhZ2VIYXNoUFNTPWZ1bmN0aW9uKGYscyxsLGMpe2lmKHMubGVuZ3RoIT1NYXRoLmNlaWwodGhpcy5uLmJpdExlbmd0aCgpLzQpKXtyZXR1cm4gZmFsc2V9dmFyIGs9bmV3IEJpZ0ludGVnZXIocywxNik7dmFyIHI9ZnVuY3Rpb24oaSl7cmV0dXJuIEtKVVIuY3J5cHRvLlV0aWwuaGFzaEhleChpLGwpfTt2YXIgaj1oZXh0b3JzdHIoZik7dmFyIGg9ai5sZW5ndGg7dmFyIGc9dGhpcy5uLmJpdExlbmd0aCgpLTE7dmFyIG09TWF0aC5jZWlsKGcvOCk7dmFyIHE7aWYoYz09PS0xfHxjPT09dW5kZWZpbmVkKXtjPWh9ZWxzZXtpZihjPT09LTIpe2M9bS1oLTJ9ZWxzZXtpZihjPC0yKXt0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHNhbHQgbGVuZ3RoXCIpfX19aWYobTwoaCtjKzIpKXt0aHJvdyBuZXcgRXJyb3IoXCJkYXRhIHRvbyBsb25nXCIpfXZhciBhPXRoaXMuZG9QdWJsaWMoaykudG9CeXRlQXJyYXkoKTtmb3IocT0wO3E8YS5sZW5ndGg7cSs9MSl7YVtxXSY9MjU1fXdoaWxlKGEubGVuZ3RoPG0pe2EudW5zaGlmdCgwKX1pZihhW20tMV0hPT0xODgpe3Rocm93IG5ldyBFcnJvcihcImVuY29kZWQgbWVzc2FnZSBkb2VzIG5vdCBlbmQgaW4gMHhiY1wiKX1hPVN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLGEpO3ZhciBkPWEuc3Vic3RyKDAsbS1oLTEpO3ZhciBlPWEuc3Vic3RyKGQubGVuZ3RoLGgpO3ZhciBwPSg2NTI4MD4+KDgqbS1nKSkmMjU1O2lmKChkLmNoYXJDb2RlQXQoMCkmcCkhPT0wKXt0aHJvdyBuZXcgRXJyb3IoXCJiaXRzIGJleW9uZCBrZXlzaXplIG5vdCB6ZXJvXCIpfXZhciBuPXBzc19tZ2YxX3N0cihlLGQubGVuZ3RoLHIpO3ZhciBvPVtdO2ZvcihxPTA7cTxkLmxlbmd0aDtxKz0xKXtvW3FdPWQuY2hhckNvZGVBdChxKV5uLmNoYXJDb2RlQXQocSl9b1swXSY9fnA7dmFyIGI9bS1oLWMtMjtmb3IocT0wO3E8YjtxKz0xKXtpZihvW3FdIT09MCl7dGhyb3cgbmV3IEVycm9yKFwibGVmdG1vc3Qgb2N0ZXRzIG5vdCB6ZXJvXCIpfX1pZihvW2JdIT09MSl7dGhyb3cgbmV3IEVycm9yKFwiMHgwMSBtYXJrZXIgbm90IGZvdW5kXCIpfXJldHVybiBlPT09aGV4dG9yc3RyKHIocnN0cnRvaGV4KFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFxceDAwXFx4MDBcXHgwMFwiK2orU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsby5zbGljZSgtYykpKSkpfTtSU0FLZXkuU0FMVF9MRU5fSExFTj0tMTtSU0FLZXkuU0FMVF9MRU5fTUFYPS0yO1JTQUtleS5TQUxUX0xFTl9SRUNPVkVSPS0yO1xuXG5mdW5jdGlvbiBYNTA5KHIpe3ZhciBrPUFTTjFIRVgsbz1rLmdldENoaWxkSWR4LGg9ay5nZXRWLHU9ay5kdW1wLGc9ay5wYXJzZSxiPWsuZ2V0VExWLGM9ay5nZXRWYnlMaXN0LGw9ay5nZXRWYnlMaXN0RXgsYT1rLmdldFRMVmJ5TGlzdCxtPWsuZ2V0VExWYnlMaXN0RXgsaT1rLmdldElkeGJ5TGlzdCxlPWsuZ2V0SWR4YnlMaXN0RXgsaj1rLmdldFZpZHgsdD1rLmdldEludCxxPWsub2lkbmFtZSxuPWsuaGV4dG9vaWRzdHIsZD1YNTA5LHM9cGVtdG9oZXgsZjt0cnl7Zj1LSlVSLmFzbjEueDUwOS5BbGdvcml0aG1JZGVudGlmaWVyLlBTU05BTUUyQVNOMVRMVn1jYXRjaChwKXt9dGhpcy5IRVgyU1RBRz17XCIwY1wiOlwidXRmOFwiLFwiMTNcIjpcInByblwiLFwiMTZcIjpcImlhNVwiLFwiMWFcIjpcInZpc1wiLFwiMWVcIjpcImJtcFwifTt0aGlzLmhleD1udWxsO3RoaXMudmVyc2lvbj0wO3RoaXMuZm9mZnNldD0wO3RoaXMuYUV4dEluZm89bnVsbDt0aGlzLmdldFZlcnNpb249ZnVuY3Rpb24oKXtpZih0aGlzLmhleD09PW51bGx8fHRoaXMudmVyc2lvbiE9PTApe3JldHVybiB0aGlzLnZlcnNpb259dmFyIHc9YSh0aGlzLmhleCwwLFswLDBdKTtpZih3LnN1YnN0cigwLDIpPT1cImEwXCIpe3ZhciB4PWEodywwLFswXSk7dmFyIHY9dCh4LDApO2lmKHY8MHx8Mjx2KXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQgdmVyc2lvbiBmaWVsZFwiKX10aGlzLnZlcnNpb249disxO3JldHVybiB0aGlzLnZlcnNpb259ZWxzZXt0aGlzLnZlcnNpb249MTt0aGlzLmZvZmZzZXQ9LTE7cmV0dXJuIDF9fTt0aGlzLmdldFNlcmlhbE51bWJlckhleD1mdW5jdGlvbigpe3JldHVybiBsKHRoaXMuaGV4LDAsWzAsMF0sXCIwMlwiKX07dGhpcy5nZXRTaWduYXR1cmVBbGdvcml0aG1GaWVsZD1mdW5jdGlvbigpe3ZhciB2PW0odGhpcy5oZXgsMCxbMCwxXSk7cmV0dXJuIHRoaXMuZ2V0QWxnb3JpdGhtSWRlbnRpZmllck5hbWUodil9O3RoaXMuZ2V0QWxnb3JpdGhtSWRlbnRpZmllck5hbWU9ZnVuY3Rpb24odil7Zm9yKHZhciB3IGluIGYpe2lmKHY9PT1mW3ddKXtyZXR1cm4gd319cmV0dXJuIHEobCh2LDAsWzBdLFwiMDZcIikpfTt0aGlzLmdldElzc3Vlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFg1MDBOYW1lKHRoaXMuZ2V0SXNzdWVySGV4KCkpfTt0aGlzLmdldElzc3VlckhleD1mdW5jdGlvbigpe3JldHVybiBhKHRoaXMuaGV4LDAsWzAsMyt0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0SXNzdWVyU3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHY9dGhpcy5nZXRJc3N1ZXIoKTtyZXR1cm4gdi5zdHJ9O3RoaXMuZ2V0U3ViamVjdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFg1MDBOYW1lKHRoaXMuZ2V0U3ViamVjdEhleCgpKX07dGhpcy5nZXRTdWJqZWN0SGV4PWZ1bmN0aW9uKCl7cmV0dXJuIGEodGhpcy5oZXgsMCxbMCw1K3RoaXMuZm9mZnNldF0sXCIzMFwiKX07dGhpcy5nZXRTdWJqZWN0U3RyaW5nPWZ1bmN0aW9uKCl7dmFyIHY9dGhpcy5nZXRTdWJqZWN0KCk7cmV0dXJuIHYuc3RyfTt0aGlzLmdldE5vdEJlZm9yZT1mdW5jdGlvbigpe3ZhciB2PWModGhpcy5oZXgsMCxbMCw0K3RoaXMuZm9mZnNldCwwXSk7dj12LnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKTt2PWRlY29kZVVSSUNvbXBvbmVudCh2KTtyZXR1cm4gdn07dGhpcy5nZXROb3RBZnRlcj1mdW5jdGlvbigpe3ZhciB2PWModGhpcy5oZXgsMCxbMCw0K3RoaXMuZm9mZnNldCwxXSk7dj12LnJlcGxhY2UoLyguLikvZyxcIiUkMVwiKTt2PWRlY29kZVVSSUNvbXBvbmVudCh2KTtyZXR1cm4gdn07dGhpcy5nZXRQdWJsaWNLZXlIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRTUEtJKCl9O3RoaXMuZ2V0U1BLST1mdW5jdGlvbigpe3JldHVybiBhKHRoaXMuaGV4LDAsWzAsNit0aGlzLmZvZmZzZXRdLFwiMzBcIil9O3RoaXMuZ2V0U1BLSVZhbHVlPWZ1bmN0aW9uKCl7dmFyIHY9dGhpcy5nZXRTUEtJKCk7aWYodj09bnVsbCl7cmV0dXJuIG51bGx9cmV0dXJuIGModiwwLFsxXSxcIjAzXCIsdHJ1ZSl9O3RoaXMuZ2V0UHVibGljS2V5SWR4PWZ1bmN0aW9uKCl7cmV0dXJuIGkodGhpcy5oZXgsMCxbMCw2K3RoaXMuZm9mZnNldF0sXCIzMFwiKX07dGhpcy5nZXRQdWJsaWNLZXlDb250ZW50SWR4PWZ1bmN0aW9uKCl7dmFyIHY9dGhpcy5nZXRQdWJsaWNLZXlJZHgoKTtyZXR1cm4gaSh0aGlzLmhleCx2LFsxLDBdLFwiMzBcIil9O3RoaXMuZ2V0UHVibGljS2V5PWZ1bmN0aW9uKCl7cmV0dXJuIEtFWVVUSUwuZ2V0S2V5KHRoaXMuZ2V0UHVibGljS2V5SGV4KCksbnVsbCxcInBrY3M4cHViXCIpfTt0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobU5hbWU9ZnVuY3Rpb24oKXt2YXIgdj1hKHRoaXMuaGV4LDAsWzFdLFwiMzBcIik7cmV0dXJuIHRoaXMuZ2V0QWxnb3JpdGhtSWRlbnRpZmllck5hbWUodil9O3RoaXMuZ2V0U2lnbmF0dXJlVmFsdWVIZXg9ZnVuY3Rpb24oKXtyZXR1cm4gYyh0aGlzLmhleCwwLFsyXSxcIjAzXCIsdHJ1ZSl9O3RoaXMudmVyaWZ5U2lnbmF0dXJlPWZ1bmN0aW9uKHgpe3ZhciB5PXRoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQoKTt2YXIgdj10aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4KCk7dmFyIHc9YSh0aGlzLmhleCwwLFswXSxcIjMwXCIpO3ZhciB6PW5ldyBLSlVSLmNyeXB0by5TaWduYXR1cmUoe2FsZzp5fSk7ei5pbml0KHgpO3oudXBkYXRlSGV4KHcpO3JldHVybiB6LnZlcmlmeSh2KX07dGhpcy5wYXJzZUV4dD1mdW5jdGlvbihFKXt2YXIgeCx2LHo7aWYoRT09PXVuZGVmaW5lZCl7ej10aGlzLmhleDtpZih0aGlzLnZlcnNpb24hPT0zKXtyZXR1cm4gLTF9eD1pKHosMCxbMCw3LDBdLFwiMzBcIik7dj1vKHoseCl9ZWxzZXt6PXBlbXRvaGV4KEUpO3ZhciBBPWkoeiwwLFswLDMsMCwwXSxcIjA2XCIpO2lmKGgoeixBKSE9XCIyYTg2NDg4NmY3MGQwMTA5MGVcIil7dGhpcy5hRXh0SW5mbz1uZXcgQXJyYXkoKTtyZXR1cm59eD1pKHosMCxbMCwzLDAsMSwwXSxcIjMwXCIpO3Y9byh6LHgpO3RoaXMuaGV4PXp9dGhpcy5hRXh0SW5mbz1uZXcgQXJyYXkoKTtmb3IodmFyIHk9MDt5PHYubGVuZ3RoO3krKyl7dmFyIEM9e307Qy5jcml0aWNhbD1mYWxzZTt2YXIgQj1vKHosdlt5XSk7dmFyIHc9MDtpZihCLmxlbmd0aD09PTMpe0MuY3JpdGljYWw9dHJ1ZTt3PTF9Qy5vaWQ9ay5oZXh0b29pZHN0cihjKHosdlt5XSxbMF0sXCIwNlwiKSk7dmFyIEQ9aSh6LHZbeV0sWzErd10pO0MudmlkeD1qKHosRCk7dGhpcy5hRXh0SW5mby5wdXNoKEMpfX07dGhpcy5nZXRFeHRJbmZvPWZ1bmN0aW9uKHgpe3ZhciB2PXRoaXMuYUV4dEluZm87dmFyIHk9eDtpZigheC5tYXRjaCgvXlswLTkuXSskLykpe3k9S0pVUi5hc24xLng1MDkuT0lELm5hbWUyb2lkKHgpfWlmKHk9PT1cIlwiKXtyZXR1cm4gdW5kZWZpbmVkfWZvcih2YXIgdz0wO3c8di5sZW5ndGg7dysrKXtpZih2W3ddLm9pZD09PXkpe3JldHVybiB2W3ddfX1yZXR1cm4gdW5kZWZpbmVkfTt0aGlzLmdldEV4dEJhc2ljQ29uc3RyYWludHM9ZnVuY3Rpb24odyxBKXtpZih3PT09dW5kZWZpbmVkJiZBPT09dW5kZWZpbmVkKXt2YXIgeT10aGlzLmdldEV4dEluZm8oXCJiYXNpY0NvbnN0cmFpbnRzXCIpO2lmKHk9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9dz1iKHRoaXMuaGV4LHkudmlkeCk7QT15LmNyaXRpY2FsfXZhciB2PXtleHRuYW1lOlwiYmFzaWNDb25zdHJhaW50c1wifTtpZihBKXt2LmNyaXRpY2FsPXRydWV9aWYodz09PVwiMzAwMFwiKXtyZXR1cm4gdn1pZih3PT09XCIzMDAzMDEwMWZmXCIpe3YuY0E9dHJ1ZTtyZXR1cm4gdn1pZih3LnN1YnN0cigwLDEyKT09PVwiMzAwNjAxMDFmZjAyXCIpe3ZhciB6PWgodywxMCk7dmFyIHg9cGFyc2VJbnQoeiwxNik7di5jQT10cnVlO3YucGF0aExlbj14O3JldHVybiB2fXRocm93IG5ldyBFcnJvcihcImhFeHRWIHBhcnNlIGVycm9yOiBcIit3KX07dGhpcy5nZXRFeHRLZXlVc2FnZT1mdW5jdGlvbih3LHkpe2lmKHc9PT11bmRlZmluZWQmJnk9PT11bmRlZmluZWQpe3ZhciB4PXRoaXMuZ2V0RXh0SW5mbyhcImtleVVzYWdlXCIpO2lmKHg9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9dz1iKHRoaXMuaGV4LHgudmlkeCk7eT14LmNyaXRpY2FsfXZhciB2PXtleHRuYW1lOlwia2V5VXNhZ2VcIn07aWYoeSl7di5jcml0aWNhbD10cnVlfXYubmFtZXM9dGhpcy5nZXRFeHRLZXlVc2FnZVN0cmluZyh3KS5zcGxpdChcIixcIik7cmV0dXJuIHZ9O3RoaXMuZ2V0RXh0S2V5VXNhZ2VCaW49ZnVuY3Rpb24odyl7aWYodz09PXVuZGVmaW5lZCl7dmFyIHg9dGhpcy5nZXRFeHRJbmZvKFwia2V5VXNhZ2VcIik7aWYoeD09PXVuZGVmaW5lZCl7cmV0dXJuXCJcIn13PWIodGhpcy5oZXgseC52aWR4KX1pZih3Lmxlbmd0aCE9OCYmdy5sZW5ndGghPTEwKXt0aHJvdyBuZXcgRXJyb3IoXCJtYWxmb3JtZWQga2V5IHVzYWdlIHZhbHVlOiBcIit3KX12YXIgdj1cIjAwMDAwMDAwMDAwMDAwMFwiK3BhcnNlSW50KHcuc3Vic3RyKDYpLDE2KS50b1N0cmluZygyKTtpZih3Lmxlbmd0aD09OCl7dj12LnNsaWNlKC04KX1pZih3Lmxlbmd0aD09MTApe3Y9di5zbGljZSgtMTYpfXY9di5yZXBsYWNlKC8wKyQvLFwiXCIpO2lmKHY9PVwiXCIpe3Y9XCIwXCJ9cmV0dXJuIHZ9O3RoaXMuZ2V0RXh0S2V5VXNhZ2VTdHJpbmc9ZnVuY3Rpb24oeCl7dmFyIHk9dGhpcy5nZXRFeHRLZXlVc2FnZUJpbih4KTt2YXIgdj1uZXcgQXJyYXkoKTtmb3IodmFyIHc9MDt3PHkubGVuZ3RoO3crKyl7aWYoeS5zdWJzdHIodywxKT09XCIxXCIpe3YucHVzaChYNTA5LktFWVVTQUdFX05BTUVbd10pfX1yZXR1cm4gdi5qb2luKFwiLFwiKX07dGhpcy5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcj1mdW5jdGlvbih4LHope2lmKHg9PT11bmRlZmluZWQmJno9PT11bmRlZmluZWQpe3ZhciB5PXRoaXMuZ2V0RXh0SW5mbyhcInN1YmplY3RLZXlJZGVudGlmaWVyXCIpO2lmKHk9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9eD1iKHRoaXMuaGV4LHkudmlkeCk7ej15LmNyaXRpY2FsfXZhciB2PXtleHRuYW1lOlwic3ViamVjdEtleUlkZW50aWZpZXJcIn07aWYoeil7di5jcml0aWNhbD10cnVlfXZhciB3PWgoeCwwKTt2LmtpZD17aGV4Ond9O3JldHVybiB2fTt0aGlzLmdldEV4dEF1dGhvcml0eUtleUlkZW50aWZpZXI9ZnVuY3Rpb24oQix6KXtpZihCPT09dW5kZWZpbmVkJiZ6PT09dW5kZWZpbmVkKXt2YXIgdj10aGlzLmdldEV4dEluZm8oXCJhdXRob3JpdHlLZXlJZGVudGlmaWVyXCIpO2lmKHY9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9Qj1iKHRoaXMuaGV4LHYudmlkeCk7ej12LmNyaXRpY2FsfXZhciBDPXtleHRuYW1lOlwiYXV0aG9yaXR5S2V5SWRlbnRpZmllclwifTtpZih6KXtDLmNyaXRpY2FsPXRydWV9dmFyIEE9byhCLDApO2Zvcih2YXIgdz0wO3c8QS5sZW5ndGg7dysrKXt2YXIgRD1CLnN1YnN0cihBW3ddLDIpO2lmKEQ9PT1cIjgwXCIpe0Mua2lkPXtoZXg6aChCLEFbd10pfX1pZihEPT09XCJhMVwiKXt2YXIgeT1iKEIsQVt3XSk7dmFyIHg9dGhpcy5nZXRHZW5lcmFsTmFtZXMoeSk7Qy5pc3N1ZXI9eFswXVtcImRuXCJdfWlmKEQ9PT1cIjgyXCIpe0Muc249e2hleDpoKEIsQVt3XSl9fX1yZXR1cm4gQ307dGhpcy5nZXRFeHRFeHRLZXlVc2FnZT1mdW5jdGlvbih5LEEpe2lmKHk9PT11bmRlZmluZWQmJkE9PT11bmRlZmluZWQpe3ZhciB6PXRoaXMuZ2V0RXh0SW5mbyhcImV4dEtleVVzYWdlXCIpO2lmKHo9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9eT1iKHRoaXMuaGV4LHoudmlkeCk7QT16LmNyaXRpY2FsfXZhciB2PXtleHRuYW1lOlwiZXh0S2V5VXNhZ2VcIixhcnJheTpbXX07aWYoQSl7di5jcml0aWNhbD10cnVlfXZhciB3PW8oeSwwKTtmb3IodmFyIHg9MDt4PHcubGVuZ3RoO3grKyl7di5hcnJheS5wdXNoKHEoaCh5LHdbeF0pKSl9cmV0dXJuIHZ9O3RoaXMuZ2V0RXh0RXh0S2V5VXNhZ2VOYW1lPWZ1bmN0aW9uKCl7dmFyIHo9dGhpcy5nZXRFeHRJbmZvKFwiZXh0S2V5VXNhZ2VcIik7aWYoej09PXVuZGVmaW5lZCl7cmV0dXJuIHp9dmFyIHY9bmV3IEFycmF5KCk7dmFyIHk9Yih0aGlzLmhleCx6LnZpZHgpO2lmKHk9PT1cIlwiKXtyZXR1cm4gdn12YXIgdz1vKHksMCk7Zm9yKHZhciB4PTA7eDx3Lmxlbmd0aDt4Kyspe3YucHVzaChxKGgoeSx3W3hdKSkpfXJldHVybiB2fTt0aGlzLmdldEV4dFN1YmplY3RBbHROYW1lPWZ1bmN0aW9uKHcseSl7aWYodz09PXVuZGVmaW5lZCYmeT09PXVuZGVmaW5lZCl7dmFyIHg9dGhpcy5nZXRFeHRJbmZvKFwic3ViamVjdEFsdE5hbWVcIik7aWYoeD09PXVuZGVmaW5lZCl7cmV0dXJuIHVuZGVmaW5lZH13PWIodGhpcy5oZXgseC52aWR4KTt5PXguY3JpdGljYWx9dmFyIHY9e2V4dG5hbWU6XCJzdWJqZWN0QWx0TmFtZVwiLGFycmF5OltdfTtpZih5KXt2LmNyaXRpY2FsPXRydWV9di5hcnJheT10aGlzLmdldEdlbmVyYWxOYW1lcyh3KTtyZXR1cm4gdn07dGhpcy5nZXRFeHRJc3N1ZXJBbHROYW1lPWZ1bmN0aW9uKHcseSl7aWYodz09PXVuZGVmaW5lZCYmeT09PXVuZGVmaW5lZCl7dmFyIHg9dGhpcy5nZXRFeHRJbmZvKFwiaXNzdWVyQWx0TmFtZVwiKTtpZih4PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfXc9Yih0aGlzLmhleCx4LnZpZHgpO3k9eC5jcml0aWNhbH12YXIgdj17ZXh0bmFtZTpcImlzc3VlckFsdE5hbWVcIixhcnJheTpbXX07aWYoeSl7di5jcml0aWNhbD10cnVlfXYuYXJyYXk9dGhpcy5nZXRHZW5lcmFsTmFtZXModyk7cmV0dXJuIHZ9O3RoaXMuZ2V0R2VuZXJhbE5hbWVzPWZ1bmN0aW9uKHope3ZhciB4PW8oeiwwKTt2YXIgdj1bXTtmb3IodmFyIHk9MDt5PHgubGVuZ3RoO3krKyl7dmFyIHc9dGhpcy5nZXRHZW5lcmFsTmFtZShiKHoseFt5XSkpO2lmKHchPT11bmRlZmluZWQpe3YucHVzaCh3KX19cmV0dXJuIHZ9O3RoaXMuZ2V0R2VuZXJhbE5hbWU9ZnVuY3Rpb24odyl7dmFyIHY9dy5zdWJzdHIoMCwyKTt2YXIgeT1oKHcsMCk7dmFyIHg9aGV4dG9yc3RyKHkpO2lmKHY9PVwiODFcIil7cmV0dXJue3JmYzgyMjp4fX1pZih2PT1cIjgyXCIpe3JldHVybntkbnM6eH19aWYodj09XCI4NlwiKXtyZXR1cm57dXJpOnh9fWlmKHY9PVwiODdcIil7cmV0dXJue2lwOmhleHRvaXAoeSl9fWlmKHY9PVwiYTRcIil7cmV0dXJue2RuOnRoaXMuZ2V0WDUwME5hbWUoeSl9fWlmKHY9PVwiYTBcIil7cmV0dXJue290aGVyOnRoaXMuZ2V0T3RoZXJOYW1lKHcpfX1yZXR1cm4gdW5kZWZpbmVkfTt0aGlzLmdldEV4dFN1YmplY3RBbHROYW1lMj1mdW5jdGlvbigpe3ZhciB6LEMsQjt2YXIgQT10aGlzLmdldEV4dEluZm8oXCJzdWJqZWN0QWx0TmFtZVwiKTtpZihBPT09dW5kZWZpbmVkKXtyZXR1cm4gQX12YXIgdj1uZXcgQXJyYXkoKTt2YXIgeT1iKHRoaXMuaGV4LEEudmlkeCk7dmFyIHc9byh5LDApO2Zvcih2YXIgeD0wO3g8dy5sZW5ndGg7eCsrKXtCPXkuc3Vic3RyKHdbeF0sMik7ej1oKHksd1t4XSk7aWYoQj09PVwiODFcIil7Qz1oZXh0b3V0Zjgoeik7di5wdXNoKFtcIk1BSUxcIixDXSl9aWYoQj09PVwiODJcIil7Qz1oZXh0b3V0Zjgoeik7di5wdXNoKFtcIkROU1wiLENdKX1pZihCPT09XCI4NFwiKXtDPVg1MDkuaGV4MmRuKHosMCk7di5wdXNoKFtcIkROXCIsQ10pfWlmKEI9PT1cIjg2XCIpe0M9aGV4dG91dGY4KHopO3YucHVzaChbXCJVUklcIixDXSl9aWYoQj09PVwiODdcIil7Qz1oZXh0b2lwKHopO3YucHVzaChbXCJJUFwiLENdKX19cmV0dXJuIHZ9O3RoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzPWZ1bmN0aW9uKHosQil7aWYoej09PXVuZGVmaW5lZCYmQj09PXVuZGVmaW5lZCl7dmFyIEE9dGhpcy5nZXRFeHRJbmZvKFwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIpO2lmKEE9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9ej1iKHRoaXMuaGV4LEEudmlkeCk7Qj1BLmNyaXRpY2FsfXZhciB3PXtleHRuYW1lOlwiY1JMRGlzdHJpYnV0aW9uUG9pbnRzXCIsYXJyYXk6W119O2lmKEIpe3cuY3JpdGljYWw9dHJ1ZX12YXIgeD1vKHosMCk7Zm9yKHZhciB5PTA7eTx4Lmxlbmd0aDt5Kyspe3ZhciB2PWIoeix4W3ldKTt3LmFycmF5LnB1c2godGhpcy5nZXREaXN0cmlidXRpb25Qb2ludCh2KSl9cmV0dXJuIHd9O3RoaXMuZ2V0RGlzdHJpYnV0aW9uUG9pbnQ9ZnVuY3Rpb24oQSl7dmFyIHg9e307dmFyIHk9byhBLDApO2Zvcih2YXIgej0wO3o8eS5sZW5ndGg7eisrKXt2YXIgdz1BLnN1YnN0cih5W3pdLDIpO3ZhciB2PWIoQSx5W3pdKTtpZih3PT1cImEwXCIpe3guZHBuYW1lPXRoaXMuZ2V0RGlzdHJpYnV0aW9uUG9pbnROYW1lKHYpfX1yZXR1cm4geH07dGhpcy5nZXREaXN0cmlidXRpb25Qb2ludE5hbWU9ZnVuY3Rpb24oQSl7dmFyIHg9e307dmFyIHk9byhBLDApO2Zvcih2YXIgej0wO3o8eS5sZW5ndGg7eisrKXt2YXIgdz1BLnN1YnN0cih5W3pdLDIpO3ZhciB2PWIoQSx5W3pdKTtpZih3PT1cImEwXCIpe3guZnVsbD10aGlzLmdldEdlbmVyYWxOYW1lcyh2KX19cmV0dXJuIHh9O3RoaXMuZ2V0RXh0Q1JMRGlzdHJpYnV0aW9uUG9pbnRzVVJJPWZ1bmN0aW9uKCl7dmFyIHo9dGhpcy5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHMoKTt2YXIgdz16LmFycmF5O3ZhciB2PVtdO2Zvcih2YXIgeT0wO3k8dy5sZW5ndGg7eSsrKXt0cnl7aWYod1t5XS5kcG5hbWUuZnVsbFswXS51cmkhPXVuZGVmaW5lZCl7di5wdXNoKHdbeV0uZHBuYW1lLmZ1bGxbMF0udXJpKX19Y2F0Y2goeCl7fX1yZXR1cm4gdn07dGhpcy5nZXRFeHRBSUFJbmZvPWZ1bmN0aW9uKCl7dmFyIHo9dGhpcy5nZXRFeHRJbmZvKFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZih6PT09dW5kZWZpbmVkKXtyZXR1cm4gen12YXIgdj17b2NzcDpbXSxjYWlzc3VlcjpbXX07dmFyIHc9byh0aGlzLmhleCx6LnZpZHgpO2Zvcih2YXIgeD0wO3g8dy5sZW5ndGg7eCsrKXt2YXIgQT1jKHRoaXMuaGV4LHdbeF0sWzBdLFwiMDZcIik7dmFyIHk9Yyh0aGlzLmhleCx3W3hdLFsxXSxcIjg2XCIpO2lmKEE9PT1cIjJiMDYwMTA1MDUwNzMwMDFcIil7di5vY3NwLnB1c2goaGV4dG91dGY4KHkpKX1pZihBPT09XCIyYjA2MDEwNTA1MDczMDAyXCIpe3YuY2Fpc3N1ZXIucHVzaChoZXh0b3V0ZjgoeSkpfX1yZXR1cm4gdn07dGhpcy5nZXRFeHRBdXRob3JpdHlJbmZvQWNjZXNzPWZ1bmN0aW9uKEMsQSl7aWYoQz09PXVuZGVmaW5lZCYmQT09PXVuZGVmaW5lZCl7dmFyIHY9dGhpcy5nZXRFeHRJbmZvKFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZih2PT09dW5kZWZpbmVkKXtyZXR1cm4gdW5kZWZpbmVkfUM9Yih0aGlzLmhleCx2LnZpZHgpO0E9di5jcml0aWNhbH12YXIgRD17ZXh0bmFtZTpcImF1dGhvcml0eUluZm9BY2Nlc3NcIixhcnJheTpbXX07aWYoQSl7RC5jcml0aWNhbD10cnVlfXZhciBCPW8oQywwKTtmb3IodmFyIHc9MDt3PEIubGVuZ3RoO3crKyl7dmFyIHo9bChDLEJbd10sWzBdLFwiMDZcIik7dmFyIHg9YyhDLEJbd10sWzFdLFwiODZcIik7dmFyIHk9aGV4dG91dGY4KHgpO2lmKHo9PVwiMmIwNjAxMDUwNTA3MzAwMVwiKXtELmFycmF5LnB1c2goe29jc3A6eX0pfWVsc2V7aWYoej09XCIyYjA2MDEwNTA1MDczMDAyXCIpe0QuYXJyYXkucHVzaCh7Y2Fpc3N1ZXI6eX0pfWVsc2V7dGhyb3cgbmV3IEVycm9yKFwidW5rbm93biBtZXRob2Q6IFwiK3opfX19cmV0dXJuIER9O3RoaXMuZ2V0RXh0Q2VydGlmaWNhdGVQb2xpY2llcz1mdW5jdGlvbih6LEMpe2lmKHo9PT11bmRlZmluZWQmJkM9PT11bmRlZmluZWQpe3ZhciBCPXRoaXMuZ2V0RXh0SW5mbyhcImNlcnRpZmljYXRlUG9saWNpZXNcIik7aWYoQj09PXVuZGVmaW5lZCl7cmV0dXJuIHVuZGVmaW5lZH16PWIodGhpcy5oZXgsQi52aWR4KTtDPUIuY3JpdGljYWx9dmFyIHY9e2V4dG5hbWU6XCJjZXJ0aWZpY2F0ZVBvbGljaWVzXCIsYXJyYXk6W119O2lmKEMpe3YuY3JpdGljYWw9dHJ1ZX12YXIgdz1vKHosMCk7Zm9yKHZhciB4PTA7eDx3Lmxlbmd0aDt4Kyspe3ZhciBBPWIoeix3W3hdKTt2YXIgeT10aGlzLmdldFBvbGljeUluZm9ybWF0aW9uKEEpO3YuYXJyYXkucHVzaCh5KX1yZXR1cm4gdn07dGhpcy5nZXRQb2xpY3lJbmZvcm1hdGlvbj1mdW5jdGlvbih6KXt2YXIgdj17fTt2YXIgQj1jKHosMCxbMF0sXCIwNlwiKTt2LnBvbGljeW9pZD1xKEIpO3ZhciBDPWUoeiwwLFsxXSxcIjMwXCIpO2lmKEMhPS0xKXt2LmFycmF5PVtdO3ZhciB3PW8oeixDKTtmb3IodmFyIHg9MDt4PHcubGVuZ3RoO3grKyl7dmFyIEE9Yih6LHdbeF0pO3ZhciB5PXRoaXMuZ2V0UG9saWN5UXVhbGlmaWVySW5mbyhBKTt2LmFycmF5LnB1c2goeSl9fXJldHVybiB2fTt0aGlzLmdldE90aGVyTmFtZT1mdW5jdGlvbih4KXt2YXIgdj17fTt2YXIgdz1vKHgsMCk7dmFyIHo9Yyh4LHdbMF0sW10sXCIwNlwiKTt2YXIgeT1jKHgsd1sxXSxbXSk7di5vaWQ9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KHopO3Yub2JqPWcoeSk7cmV0dXJuIHZ9O3RoaXMuZ2V0UG9saWN5UXVhbGlmaWVySW5mbz1mdW5jdGlvbih3KXt2YXIgdj17fTt2YXIgeD1jKHcsMCxbMF0sXCIwNlwiKTtpZih4PT09XCIyYjA2MDEwNTA1MDcwMjAxXCIpe3ZhciB6PWwodywwLFsxXSxcIjE2XCIpO3YuY3BzPWhleHRvcnN0cih6KX1lbHNle2lmKHg9PT1cIjJiMDYwMTA1MDUwNzAyMDJcIil7dmFyIHk9YSh3LDAsWzFdLFwiMzBcIik7di51bm90aWNlPXRoaXMuZ2V0VXNlck5vdGljZSh5KX19cmV0dXJuIHZ9O3RoaXMuZ2V0VXNlck5vdGljZT1mdW5jdGlvbih6KXt2YXIgdz17fTt2YXIgeD1vKHosMCk7Zm9yKHZhciB5PTA7eTx4Lmxlbmd0aDt5Kyspe3ZhciB2PWIoeix4W3ldKTtpZih2LnN1YnN0cigwLDIpIT1cIjMwXCIpe3cuZXhwdGV4dD10aGlzLmdldERpc3BsYXlUZXh0KHYpfX1yZXR1cm4gd307dGhpcy5nZXREaXNwbGF5VGV4dD1mdW5jdGlvbih3KXt2YXIgeD17XCIwY1wiOlwidXRmOFwiLFwiMTZcIjpcImlhNVwiLFwiMWFcIjpcInZpc1wiLFwiMWVcIjpcImJtcFwifTt2YXIgdj17fTt2LnR5cGU9eFt3LnN1YnN0cigwLDIpXTt2LnN0cj1oZXh0b3JzdHIoaCh3LDApKTtyZXR1cm4gdn07dGhpcy5nZXRFeHRDUkxOdW1iZXI9ZnVuY3Rpb24odyx4KXt2YXIgdj17ZXh0bmFtZTpcImNSTE51bWJlclwifTtpZih4KXt2LmNyaXRpY2FsPXRydWV9aWYody5zdWJzdHIoMCwyKT09XCIwMlwiKXt2Lm51bT17aGV4OmgodywwKX07cmV0dXJuIHZ9dGhyb3cgbmV3IEVycm9yKFwiaEV4dFYgcGFyc2UgZXJyb3I6IFwiK3cpfTt0aGlzLmdldEV4dENSTFJlYXNvbj1mdW5jdGlvbih3LHgpe3ZhciB2PXtleHRuYW1lOlwiY1JMUmVhc29uXCJ9O2lmKHgpe3YuY3JpdGljYWw9dHJ1ZX1pZih3LnN1YnN0cigwLDIpPT1cIjBhXCIpe3YuY29kZT1wYXJzZUludChoKHcsMCksMTYpO3JldHVybiB2fXRocm93IG5ldyBFcnJvcihcImhFeHRWIHBhcnNlIGVycm9yOiBcIit3KX07dGhpcy5nZXRFeHRPY3NwTm9uY2U9ZnVuY3Rpb24odyx5KXt2YXIgdj17ZXh0bmFtZTpcIm9jc3BOb25jZVwifTtpZih5KXt2LmNyaXRpY2FsPXRydWV9dmFyIHg9aCh3LDApO3YuaGV4PXg7cmV0dXJuIHZ9O3RoaXMuZ2V0RXh0T2NzcE5vQ2hlY2s9ZnVuY3Rpb24odyx4KXt2YXIgdj17ZXh0bmFtZTpcIm9jc3BOb0NoZWNrXCJ9O2lmKHgpe3YuY3JpdGljYWw9dHJ1ZX1yZXR1cm4gdn07dGhpcy5nZXRFeHRBZG9iZVRpbWVTdGFtcD1mdW5jdGlvbih5LEIpe2lmKHk9PT11bmRlZmluZWQmJkI9PT11bmRlZmluZWQpe3ZhciBBPXRoaXMuZ2V0RXh0SW5mbyhcImFkb2JlVGltZVN0YW1wXCIpO2lmKEE9PT11bmRlZmluZWQpe3JldHVybiB1bmRlZmluZWR9eT1iKHRoaXMuaGV4LEEudmlkeCk7Qj1BLmNyaXRpY2FsfXZhciB2PXtleHRuYW1lOlwiYWRvYmVUaW1lU3RhbXBcIn07aWYoQil7di5jcml0aWNhbD10cnVlfXZhciB4PW8oeSwwKTtpZih4Lmxlbmd0aD4xKXt2YXIgQz1iKHkseFsxXSk7dmFyIHc9dGhpcy5nZXRHZW5lcmFsTmFtZShDKTtpZih3LnVyaSE9dW5kZWZpbmVkKXt2LnVyaT13LnVyaX19aWYoeC5sZW5ndGg+Mil7dmFyIHo9Yih5LHhbMl0pO2lmKHo9PVwiMDEwMWZmXCIpe3YucmVxYXV0aD10cnVlfWlmKHo9PVwiMDEwMTAwXCIpe3YucmVxYXV0aD1mYWxzZX19cmV0dXJuIHZ9O3RoaXMuZ2V0WDUwME5hbWVSdWxlPWZ1bmN0aW9uKHYpe3ZhciBDPXRydWU7dmFyIEc9dHJ1ZTt2YXIgRj1mYWxzZTt2YXIgdz1cIlwiO3ZhciB6PVwiXCI7dmFyIEk9bnVsbDt2YXIgRD1bXTtmb3IodmFyIHk9MDt5PHYubGVuZ3RoO3krKyl7dmFyIEE9dlt5XTtmb3IodmFyIHg9MDt4PEEubGVuZ3RoO3grKyl7RC5wdXNoKEFbeF0pfX1mb3IodmFyIHk9MDt5PEQubGVuZ3RoO3krKyl7dmFyIEg9RFt5XTt2YXIgSj1ILmRzO3ZhciBFPUgudmFsdWU7dmFyIEI9SC50eXBlO3crPVwiOlwiK0o7aWYoSiE9XCJwcm5cIiYmSiE9XCJ1dGY4XCImJkohPVwiaWE1XCIpe3JldHVyblwibWl4ZWRcIn1pZihKPT1cImlhNVwiKXtpZihCIT1cIkNOXCIpe3JldHVyblwibWl4ZWRcIn1lbHNle2lmKCFLSlVSLmxhbmcuU3RyaW5nLmlzTWFpbChFKSl7cmV0dXJuXCJtaXhlZFwifWVsc2V7Y29udGludWV9fX1pZihCPT1cIkNcIil7aWYoSj09XCJwcm5cIil7Y29udGludWV9ZWxzZXtyZXR1cm5cIm1peGVkXCJ9fXorPVwiOlwiK0o7aWYoST09bnVsbCl7ST1KfWVsc2V7aWYoSSE9PUope3JldHVyblwibWl4ZWRcIn19fWlmKEk9PW51bGwpe3JldHVyblwicHJuXCJ9ZWxzZXtyZXR1cm4gSX19O3RoaXMuZ2V0WDUwME5hbWU9ZnVuY3Rpb24oeCl7dmFyIHY9dGhpcy5nZXRYNTAwTmFtZUFycmF5KHgpO3ZhciB3PXRoaXMuZG5hcnJheXRvc3RyKHYpO3JldHVybnthcnJheTp2LHN0cjp3fX07dGhpcy5nZXRYNTAwTmFtZUFycmF5PWZ1bmN0aW9uKHkpe3ZhciB2PVtdO3ZhciB3PW8oeSwwKTtmb3IodmFyIHg9MDt4PHcubGVuZ3RoO3grKyl7di5wdXNoKHRoaXMuZ2V0UkROKGIoeSx3W3hdKSkpfXJldHVybiB2fTt0aGlzLmdldFJETj1mdW5jdGlvbih5KXt2YXIgdj1bXTt2YXIgdz1vKHksMCk7Zm9yKHZhciB4PTA7eDx3Lmxlbmd0aDt4Kyspe3YucHVzaCh0aGlzLmdldEF0dHJUeXBlQW5kVmFsdWUoYih5LHdbeF0pKSl9cmV0dXJuIHZ9O3RoaXMuZ2V0QXR0clR5cGVBbmRWYWx1ZT1mdW5jdGlvbih4KXt2YXIgdj17dHlwZTpudWxsLHZhbHVlOm51bGwsZHM6bnVsbH07dmFyIHc9byh4LDApO3ZhciBBPWMoeCx3WzBdLFtdLFwiMDZcIik7dmFyIHo9Yyh4LHdbMV0sW10pO3ZhciB5PUtKVVIuYXNuMS5BU04xVXRpbC5vaWRIZXhUb0ludChBKTt2LnR5cGU9S0pVUi5hc24xLng1MDkuT0lELm9pZDJhdHlwZSh5KTt2LmRzPXRoaXMuSEVYMlNUQUdbeC5zdWJzdHIod1sxXSwyKV07aWYodi5kcyE9XCJibXBcIil7di52YWx1ZT1oZXh0b3V0Zjgoeil9ZWxzZXt2LnZhbHVlPXVjczJoZXh0b3V0Zjgoeil9cmV0dXJuIHZ9O3RoaXMucmVhZENlcnRQRU09ZnVuY3Rpb24odil7dGhpcy5yZWFkQ2VydEhleChzKHYpKX07dGhpcy5yZWFkQ2VydEhleD1mdW5jdGlvbih2KXt0aGlzLmhleD12O3RoaXMuZ2V0VmVyc2lvbigpO3RyeXtpKHRoaXMuaGV4LDAsWzAsN10sXCJhM1wiKTt0aGlzLnBhcnNlRXh0KCl9Y2F0Y2godyl7fX07dGhpcy5nZXRQYXJhbT1mdW5jdGlvbigpe3ZhciB2PXt9O3YudmVyc2lvbj10aGlzLmdldFZlcnNpb24oKTt2LnNlcmlhbD17aGV4OnRoaXMuZ2V0U2VyaWFsTnVtYmVySGV4KCl9O3Yuc2lnYWxnPXRoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQoKTt2Lmlzc3Vlcj10aGlzLmdldElzc3VlcigpO3Yubm90YmVmb3JlPXRoaXMuZ2V0Tm90QmVmb3JlKCk7di5ub3RhZnRlcj10aGlzLmdldE5vdEFmdGVyKCk7di5zdWJqZWN0PXRoaXMuZ2V0U3ViamVjdCgpO3Yuc2JqcHVia2V5PWhleHRvcGVtKHRoaXMuZ2V0UHVibGljS2V5SGV4KCksXCJQVUJMSUMgS0VZXCIpO2lmKHRoaXMuYUV4dEluZm8ubGVuZ3RoPjApe3YuZXh0PXRoaXMuZ2V0RXh0UGFyYW1BcnJheSgpfXYuc2lnaGV4PXRoaXMuZ2V0U2lnbmF0dXJlVmFsdWVIZXgoKTtyZXR1cm4gdn07dGhpcy5nZXRFeHRQYXJhbUFycmF5PWZ1bmN0aW9uKHcpe2lmKHc9PXVuZGVmaW5lZCl7dmFyIHk9ZSh0aGlzLmhleCwwLFswLFwiWzNdXCJdKTtpZih5IT0tMSl7dz1tKHRoaXMuaGV4LDAsWzAsXCJbM11cIiwwXSxcIjMwXCIpfX12YXIgdj1bXTt2YXIgeD1vKHcsMCk7Zm9yKHZhciB6PTA7ejx4Lmxlbmd0aDt6Kyspe3ZhciBCPWIodyx4W3pdKTt2YXIgQT10aGlzLmdldEV4dFBhcmFtKEIpO2lmKEEhPW51bGwpe3YucHVzaChBKX19cmV0dXJuIHZ9O3RoaXMuZ2V0RXh0UGFyYW09ZnVuY3Rpb24odyl7dmFyIEQ9e307dmFyIHk9byh3LDApO3ZhciB6PXkubGVuZ3RoO2lmKHohPTImJnohPTMpe3Rocm93IG5ldyBFcnJvcihcIndyb25nIG51bWJlciBlbGVtZW50cyBpbiBFeHRlbnNpb246IFwiK3orXCIgXCIrdyl9dmFyIHg9bihjKHcsMCxbMF0sXCIwNlwiKSk7dmFyIEI9ZmFsc2U7aWYoej09MyYmYSh3LDAsWzFdKT09XCIwMTAxZmZcIil7Qj10cnVlfXZhciBDPWEodywwLFt6LTEsMF0pO3ZhciBBPXVuZGVmaW5lZDtpZih4PT1cIjIuNS4yOS4xNFwiKXtBPXRoaXMuZ2V0RXh0U3ViamVjdEtleUlkZW50aWZpZXIoQyxCKX1lbHNle2lmKHg9PVwiMi41LjI5LjE1XCIpe0E9dGhpcy5nZXRFeHRLZXlVc2FnZShDLEIpfWVsc2V7aWYoeD09XCIyLjUuMjkuMTdcIil7QT10aGlzLmdldEV4dFN1YmplY3RBbHROYW1lKEMsQil9ZWxzZXtpZih4PT1cIjIuNS4yOS4xOFwiKXtBPXRoaXMuZ2V0RXh0SXNzdWVyQWx0TmFtZShDLEIpfWVsc2V7aWYoeD09XCIyLjUuMjkuMTlcIil7QT10aGlzLmdldEV4dEJhc2ljQ29uc3RyYWludHMoQyxCKX1lbHNle2lmKHg9PVwiMi41LjI5LjMxXCIpe0E9dGhpcy5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHMoQyxCKX1lbHNle2lmKHg9PVwiMi41LjI5LjMyXCIpe0E9dGhpcy5nZXRFeHRDZXJ0aWZpY2F0ZVBvbGljaWVzKEMsQil9ZWxzZXtpZih4PT1cIjIuNS4yOS4zNVwiKXtBPXRoaXMuZ2V0RXh0QXV0aG9yaXR5S2V5SWRlbnRpZmllcihDLEIpfWVsc2V7aWYoeD09XCIyLjUuMjkuMzdcIil7QT10aGlzLmdldEV4dEV4dEtleVVzYWdlKEMsQil9ZWxzZXtpZih4PT1cIjEuMy42LjEuNS41LjcuMS4xXCIpe0E9dGhpcy5nZXRFeHRBdXRob3JpdHlJbmZvQWNjZXNzKEMsQil9ZWxzZXtpZih4PT1cIjIuNS4yOS4yMFwiKXtBPXRoaXMuZ2V0RXh0Q1JMTnVtYmVyKEMsQil9ZWxzZXtpZih4PT1cIjIuNS4yOS4yMVwiKXtBPXRoaXMuZ2V0RXh0Q1JMUmVhc29uKEMsQil9ZWxzZXtpZih4PT1cIjEuMy42LjEuNS41LjcuNDguMS4yXCIpe0E9dGhpcy5nZXRFeHRPY3NwTm9uY2UoQyxCKX1lbHNle2lmKHg9PVwiMS4zLjYuMS41LjUuNy40OC4xLjVcIil7QT10aGlzLmdldEV4dE9jc3BOb0NoZWNrKEMsQil9ZWxzZXtpZih4PT1cIjEuMi44NDAuMTEzNTgzLjEuMS45LjFcIil7QT10aGlzLmdldEV4dEFkb2JlVGltZVN0YW1wKEMsQil9fX19fX19fX19fX19fX1pZihBIT11bmRlZmluZWQpe3JldHVybiBBfXZhciB2PXtleHRuYW1lOngsZXh0bjpDfTtpZihCKXt2LmNyaXRpY2FsPXRydWV9cmV0dXJuIHZ9O3RoaXMuZmluZEV4dD1mdW5jdGlvbih3LHgpe2Zvcih2YXIgdj0wO3Y8dy5sZW5ndGg7disrKXtpZih3W3ZdLmV4dG5hbWU9PXgpe3JldHVybiB3W3ZdfX1yZXR1cm4gbnVsbH07dGhpcy51cGRhdGVFeHRDRFBGdWxsVVJJPWZ1bmN0aW9uKHosdil7dmFyIHk9dGhpcy5maW5kRXh0KHosXCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIik7aWYoeT09bnVsbCl7cmV0dXJufWlmKHkuYXJyYXk9PXVuZGVmaW5lZCl7cmV0dXJufXZhciBCPXkuYXJyYXk7Zm9yKHZhciB4PTA7eDxCLmxlbmd0aDt4Kyspe2lmKEJbeF0uZHBuYW1lPT11bmRlZmluZWQpe2NvbnRpbnVlfWlmKEJbeF0uZHBuYW1lLmZ1bGw9PXVuZGVmaW5lZCl7Y29udGludWV9dmFyIEM9Qlt4XS5kcG5hbWUuZnVsbDtmb3IodmFyIHc9MDt3PEMubGVuZ3RoO3crKyl7dmFyIEE9Q1t4XTtpZihBLnVyaT09dW5kZWZpbmVkKXtjb250aW51ZX1BLnVyaT12fX19O3RoaXMudXBkYXRlRXh0QUlBT0NTUD1mdW5jdGlvbih6LHcpe3ZhciB5PXRoaXMuZmluZEV4dCh6LFwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKTtpZih5PT1udWxsKXtyZXR1cm59aWYoeS5hcnJheT09dW5kZWZpbmVkKXtyZXR1cm59dmFyIHY9eS5hcnJheTtmb3IodmFyIHg9MDt4PHYubGVuZ3RoO3grKyl7aWYodlt4XS5vY3NwIT11bmRlZmluZWQpe3ZbeF0ub2NzcD13fX19O3RoaXMudXBkYXRlRXh0QUlBQ0FJc3N1ZXI9ZnVuY3Rpb24oeix3KXt2YXIgeT10aGlzLmZpbmRFeHQoeixcImF1dGhvcml0eUluZm9BY2Nlc3NcIik7aWYoeT09bnVsbCl7cmV0dXJufWlmKHkuYXJyYXk9PXVuZGVmaW5lZCl7cmV0dXJufXZhciB2PXkuYXJyYXk7Zm9yKHZhciB4PTA7eDx2Lmxlbmd0aDt4Kyspe2lmKHZbeF0uY2Fpc3N1ZXIhPXVuZGVmaW5lZCl7dlt4XS5jYWlzc3Vlcj13fX19O3RoaXMuZG5hcnJheXRvc3RyPWZ1bmN0aW9uKHgpe2Z1bmN0aW9uIHYoeSl7cmV0dXJuIHkubWFwKGZ1bmN0aW9uKHope3JldHVybiB3KHopLnJlcGxhY2UoL1xcKy8sXCJcXFxcK1wiKX0pLmpvaW4oXCIrXCIpfWZ1bmN0aW9uIHcoeSl7cmV0dXJuIHkudHlwZStcIj1cIit5LnZhbHVlfXJldHVyblwiL1wiK3gubWFwKGZ1bmN0aW9uKHkpe3JldHVybiB2KHkpLnJlcGxhY2UoL1xcLy8sXCJcXFxcL1wiKX0pLmpvaW4oXCIvXCIpfTt0aGlzLmdldEluZm89ZnVuY3Rpb24oKXt2YXIgdz1mdW5jdGlvbihPKXt2YXIgTj1KU09OLnN0cmluZ2lmeShPLmFycmF5KS5yZXBsYWNlKC9bXFxbXFxdXFx7XFx9XFxcIl0vZyxcIlwiKTtyZXR1cm4gTn07dmFyIEM9ZnVuY3Rpb24oVCl7dmFyIFI9XCJcIjt2YXIgTj1ULmFycmF5O2Zvcih2YXIgUT0wO1E8Ti5sZW5ndGg7USsrKXt2YXIgUz1OW1FdO1IrPVwiICAgIHBvbGljeSBvaWQ6IFwiK1MucG9saWN5b2lkK1wiXFxuXCI7aWYoUy5hcnJheT09PXVuZGVmaW5lZCl7Y29udGludWV9Zm9yKHZhciBQPTA7UDxTLmFycmF5Lmxlbmd0aDtQKyspe3ZhciBPPVMuYXJyYXlbUF07aWYoTy5jcHMhPT11bmRlZmluZWQpe1IrPVwiICAgIGNwczogXCIrTy5jcHMrXCJcXG5cIn19fXJldHVybiBSfTt2YXIgRj1mdW5jdGlvbihSKXt2YXIgUT1cIlwiO3ZhciBOPVIuYXJyYXk7Zm9yKHZhciBQPTA7UDxOLmxlbmd0aDtQKyspe3ZhciBTPU5bUF07dHJ5e2lmKFMuZHBuYW1lLmZ1bGxbMF0udXJpIT09dW5kZWZpbmVkKXtRKz1cIiAgICBcIitTLmRwbmFtZS5mdWxsWzBdLnVyaStcIlxcblwifX1jYXRjaChPKXt9dHJ5e2lmKFMuZG5hbWUuZnVsbFswXS5kbi5oZXghPT11bmRlZmluZWQpe1ErPVwiICAgIFwiK1g1MDkuaGV4MmRuKFMuZHBuYW1lLmZ1bGxbMF0uZG4uaGV4KStcIlxcblwifX1jYXRjaChPKXt9fXJldHVybiBRfTt2YXIgRD1mdW5jdGlvbihSKXt2YXIgUT1cIlwiO3ZhciBOPVIuYXJyYXk7Zm9yKHZhciBPPTA7TzxOLmxlbmd0aDtPKyspe3ZhciBQPU5bT107aWYoUC5jYWlzc3VlciE9PXVuZGVmaW5lZCl7USs9XCIgICAgY2Fpc3N1ZXI6IFwiK1AuY2Fpc3N1ZXIrXCJcXG5cIn1pZihQLm9jc3AhPT11bmRlZmluZWQpe1ErPVwiICAgIG9jc3A6IFwiK1Aub2NzcCtcIlxcblwifX1yZXR1cm4gUX07dmFyIHg9WDUwOTt2YXIgSCxHLE07SD1cIkJhc2ljIEZpZWxkc1xcblwiO0grPVwiICBzZXJpYWwgbnVtYmVyOiBcIit0aGlzLmdldFNlcmlhbE51bWJlckhleCgpK1wiXFxuXCI7SCs9XCIgIHNpZ25hdHVyZSBhbGdvcml0aG06IFwiK3RoaXMuZ2V0U2lnbmF0dXJlQWxnb3JpdGhtRmllbGQoKStcIlxcblwiO0grPVwiICBpc3N1ZXI6IFwiK3RoaXMuZ2V0SXNzdWVyU3RyaW5nKCkrXCJcXG5cIjtIKz1cIiAgbm90QmVmb3JlOiBcIit0aGlzLmdldE5vdEJlZm9yZSgpK1wiXFxuXCI7SCs9XCIgIG5vdEFmdGVyOiBcIit0aGlzLmdldE5vdEFmdGVyKCkrXCJcXG5cIjtIKz1cIiAgc3ViamVjdDogXCIrdGhpcy5nZXRTdWJqZWN0U3RyaW5nKCkrXCJcXG5cIjtIKz1cIiAgc3ViamVjdCBwdWJsaWMga2V5IGluZm86IFxcblwiO0c9dGhpcy5nZXRQdWJsaWNLZXkoKTtIKz1cIiAgICBrZXkgYWxnb3JpdGhtOiBcIitHLnR5cGUrXCJcXG5cIjtpZihHLnR5cGU9PT1cIlJTQVwiKXtIKz1cIiAgICBuPVwiK2hleHRvcG9zaGV4KEcubi50b1N0cmluZygxNikpLnN1YnN0cigwLDE2KStcIi4uLlxcblwiO0grPVwiICAgIGU9XCIraGV4dG9wb3NoZXgoRy5lLnRvU3RyaW5nKDE2KSkrXCJcXG5cIn1NPXRoaXMuYUV4dEluZm87aWYoTSE9PXVuZGVmaW5lZCYmTSE9PW51bGwpe0grPVwiWDUwOXYzIEV4dGVuc2lvbnM6XFxuXCI7Zm9yKHZhciBKPTA7SjxNLmxlbmd0aDtKKyspe3ZhciBMPU1bSl07dmFyIHY9S0pVUi5hc24xLng1MDkuT0lELm9pZDJuYW1lKEwub2lkKTtpZih2PT09XCJcIil7dj1MLm9pZH12YXIgST1cIlwiO2lmKEwuY3JpdGljYWw9PT10cnVlKXtJPVwiQ1JJVElDQUxcIn1IKz1cIiAgXCIrditcIiBcIitJK1wiOlxcblwiO2lmKHY9PT1cImJhc2ljQ29uc3RyYWludHNcIil7dmFyIHk9dGhpcy5nZXRFeHRCYXNpY0NvbnN0cmFpbnRzKCk7aWYoeS5jQT09PXVuZGVmaW5lZCl7SCs9XCIgICAge31cXG5cIn1lbHNle0grPVwiICAgIGNBPXRydWVcIjtpZih5LnBhdGhMZW4hPT11bmRlZmluZWQpe0grPVwiLCBwYXRoTGVuPVwiK3kucGF0aExlbn1IKz1cIlxcblwifX1lbHNle2lmKHY9PT1cImtleVVzYWdlXCIpe0grPVwiICAgIFwiK3RoaXMuZ2V0RXh0S2V5VXNhZ2VTdHJpbmcoKStcIlxcblwifWVsc2V7aWYodj09PVwic3ViamVjdEtleUlkZW50aWZpZXJcIil7SCs9XCIgICAgXCIrdGhpcy5nZXRFeHRTdWJqZWN0S2V5SWRlbnRpZmllcigpLmtpZC5oZXgrXCJcXG5cIn1lbHNle2lmKHY9PT1cImF1dGhvcml0eUtleUlkZW50aWZpZXJcIil7dmFyIHo9dGhpcy5nZXRFeHRBdXRob3JpdHlLZXlJZGVudGlmaWVyKCk7aWYoei5raWQhPT11bmRlZmluZWQpe0grPVwiICAgIGtpZD1cIit6LmtpZC5oZXgrXCJcXG5cIn19ZWxzZXtpZih2PT09XCJleHRLZXlVc2FnZVwiKXt2YXIgSz10aGlzLmdldEV4dEV4dEtleVVzYWdlKCkuYXJyYXk7SCs9XCIgICAgXCIrSy5qb2luKFwiLCBcIikrXCJcXG5cIn1lbHNle2lmKHY9PT1cInN1YmplY3RBbHROYW1lXCIpe3ZhciBBPXcodGhpcy5nZXRFeHRTdWJqZWN0QWx0TmFtZSgpKTtIKz1cIiAgICBcIitBK1wiXFxuXCJ9ZWxzZXtpZih2PT09XCJjUkxEaXN0cmlidXRpb25Qb2ludHNcIil7dmFyIEU9dGhpcy5nZXRFeHRDUkxEaXN0cmlidXRpb25Qb2ludHMoKTtIKz1GKEUpfWVsc2V7aWYodj09PVwiYXV0aG9yaXR5SW5mb0FjY2Vzc1wiKXt2YXIgQj10aGlzLmdldEV4dEF1dGhvcml0eUluZm9BY2Nlc3MoKTtIKz1EKEIpfWVsc2V7aWYodj09PVwiY2VydGlmaWNhdGVQb2xpY2llc1wiKXtIKz1DKHRoaXMuZ2V0RXh0Q2VydGlmaWNhdGVQb2xpY2llcygpKX19fX19fX19fX19SCs9XCJzaWduYXR1cmUgYWxnb3JpdGhtOiBcIit0aGlzLmdldFNpZ25hdHVyZUFsZ29yaXRobU5hbWUoKStcIlxcblwiO0grPVwic2lnbmF0dXJlOiBcIit0aGlzLmdldFNpZ25hdHVyZVZhbHVlSGV4KCkuc3Vic3RyKDAsMTYpK1wiLi4uXFxuXCI7cmV0dXJuIEh9O2lmKHR5cGVvZiByPT1cInN0cmluZ1wiKXtpZihyLmluZGV4T2YoXCItLS0tLUJFR0lOXCIpIT0tMSl7dGhpcy5yZWFkQ2VydFBFTShyKX1lbHNle2lmKEtKVVIubGFuZy5TdHJpbmcuaXNIZXgocikpe3RoaXMucmVhZENlcnRIZXgocil9fX19WDUwOS5oZXgyZG49ZnVuY3Rpb24oZSxiKXtpZihiPT09dW5kZWZpbmVkKXtiPTB9dmFyIGE9bmV3IFg1MDkoKTt2YXIgYz1BU04xSEVYLmdldFRMVihlLGIpO3ZhciBkPWEuZ2V0WDUwME5hbWUoZSk7cmV0dXJuIGQuc3RyfTtYNTA5LmhleDJyZG49ZnVuY3Rpb24oZixiKXtpZihiPT09dW5kZWZpbmVkKXtiPTB9aWYoZi5zdWJzdHIoYiwyKSE9PVwiMzFcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIFJETlwiKX12YXIgYz1uZXcgQXJyYXkoKTt2YXIgZD1BU04xSEVYLmdldENoaWxkSWR4KGYsYik7Zm9yKHZhciBlPTA7ZTxkLmxlbmd0aDtlKyspe2MucHVzaChYNTA5LmhleDJhdHRyVHlwZVZhbHVlKGYsZFtlXSkpfWM9Yy5tYXAoZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVwbGFjZShcIitcIixcIlxcXFwrXCIpfSk7cmV0dXJuIGMuam9pbihcIitcIil9O1g1MDkuaGV4MmF0dHJUeXBlVmFsdWU9ZnVuY3Rpb24oZCxpKXt2YXIgaj1BU04xSEVYO3ZhciBoPWouZ2V0VjtpZihpPT09dW5kZWZpbmVkKXtpPTB9aWYoZC5zdWJzdHIoaSwyKSE9PVwiMzBcIil7dGhyb3cgbmV3IEVycm9yKFwibWFsZm9ybWVkIGF0dHJpYnV0ZSB0eXBlIGFuZCB2YWx1ZVwiKX12YXIgZz1qLmdldENoaWxkSWR4KGQsaSk7aWYoZy5sZW5ndGghPT0yfHxkLnN1YnN0cihnWzBdLDIpIT09XCIwNlwiKXtcIm1hbGZvcm1lZCBhdHRyaWJ1dGUgdHlwZSBhbmQgdmFsdWVcIn12YXIgYj1oKGQsZ1swXSk7dmFyIGY9S0pVUi5hc24xLkFTTjFVdGlsLm9pZEhleFRvSW50KGIpO3ZhciBlPUtKVVIuYXNuMS54NTA5Lk9JRC5vaWQyYXR5cGUoZik7dmFyIGE9aChkLGdbMV0pO3ZhciBjPWhleHRvcnN0cihhKTtyZXR1cm4gZStcIj1cIitjfTtYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4PWZ1bmN0aW9uKGIpe3ZhciBhPW5ldyBYNTA5KCk7YS5yZWFkQ2VydEhleChiKTtyZXR1cm4gYS5nZXRQdWJsaWNLZXkoKX07WDUwOS5nZXRQdWJsaWNLZXlGcm9tQ2VydFBFTT1mdW5jdGlvbihiKXt2YXIgYT1uZXcgWDUwOSgpO2EucmVhZENlcnRQRU0oYik7cmV0dXJuIGEuZ2V0UHVibGljS2V5KCl9O1g1MDkuZ2V0UHVibGljS2V5SW5mb1Byb3BPZkNlcnRQRU09ZnVuY3Rpb24oYyl7dmFyIGU9QVNOMUhFWDt2YXIgZz1lLmdldFZieUxpc3Q7dmFyIGI9e307dmFyIGEsZixkO2IuYWxncGFyYW09bnVsbDthPW5ldyBYNTA5KCk7YS5yZWFkQ2VydFBFTShjKTtmPWEuZ2V0UHVibGljS2V5SGV4KCk7Yi5rZXloZXg9ZyhmLDAsWzFdLFwiMDNcIikuc3Vic3RyKDIpO2IuYWxnb2lkPWcoZiwwLFswLDBdLFwiMDZcIik7aWYoYi5hbGdvaWQ9PT1cIjJhODY0OGNlM2QwMjAxXCIpe2IuYWxncGFyYW09ZyhmLDAsWzAsMV0sXCIwNlwiKX1yZXR1cm4gYn07WDUwOS5LRVlVU0FHRV9OQU1FPVtcImRpZ2l0YWxTaWduYXR1cmVcIixcIm5vblJlcHVkaWF0aW9uXCIsXCJrZXlFbmNpcGhlcm1lbnRcIixcImRhdGFFbmNpcGhlcm1lbnRcIixcImtleUFncmVlbWVudFwiLFwia2V5Q2VydFNpZ25cIixcImNSTFNpZ25cIixcImVuY2lwaGVyT25seVwiLFwiZGVjaXBoZXJPbmx5XCJdO1xuXG5pZih0eXBlb2YgS0pVUj09XCJ1bmRlZmluZWRcInx8IUtKVVIpe0tKVVI9e319aWYodHlwZW9mIEtKVVIuandzPT1cInVuZGVmaW5lZFwifHwhS0pVUi5qd3Mpe0tKVVIuandzPXt9fUtKVVIuandzLkpXUz1mdW5jdGlvbigpe3ZhciBiPUtKVVIsYT1iLmp3cy5KV1MsYz1hLmlzU2FmZUpTT05TdHJpbmc7dGhpcy5wYXJzZUpXUz1mdW5jdGlvbihnLGope2lmKCh0aGlzLnBhcnNlZEpXUyE9PXVuZGVmaW5lZCkmJihqfHwodGhpcy5wYXJzZWRKV1Muc2lndmFsSCE9PXVuZGVmaW5lZCkpKXtyZXR1cm59dmFyIGk9Zy5tYXRjaCgvXihbXi5dKylcXC4oW14uXSspXFwuKFteLl0rKSQvKTtpZihpPT1udWxsKXt0aHJvd1wiSldTIHNpZ25hdHVyZSBpcyBub3QgYSBmb3JtIG9mICdIZWFkLlBheWxvYWQuU2lnVmFsdWUnLlwifXZhciBrPWlbMV07dmFyIGU9aVsyXTt2YXIgbD1pWzNdO3ZhciBuPWsrXCIuXCIrZTt0aGlzLnBhcnNlZEpXUz17fTt0aGlzLnBhcnNlZEpXUy5oZWFkQjY0VT1rO3RoaXMucGFyc2VkSldTLnBheWxvYWRCNjRVPWU7dGhpcy5wYXJzZWRKV1Muc2lndmFsQjY0VT1sO3RoaXMucGFyc2VkSldTLnNpPW47aWYoIWope3ZhciBoPWI2NHV0b2hleChsKTt2YXIgZj1wYXJzZUJpZ0ludChoLDE2KTt0aGlzLnBhcnNlZEpXUy5zaWd2YWxIPWg7dGhpcy5wYXJzZWRKV1Muc2lndmFsQkk9Zn12YXIgZD1iNjR1dG91dGY4KGspO3ZhciBtPWI2NHV0b3V0ZjgoZSk7dGhpcy5wYXJzZWRKV1MuaGVhZFM9ZDt0aGlzLnBhcnNlZEpXUy5wYXlsb2FkUz1tO2lmKCFjKGQsdGhpcy5wYXJzZWRKV1MsXCJoZWFkUFwiKSl7dGhyb3dcIm1hbGZvcm1lZCBKU09OIHN0cmluZyBmb3IgSldTIEhlYWQ6IFwiK2R9fX07S0pVUi5qd3MuSldTLnNpZ249ZnVuY3Rpb24oaix3LHosQSxhKXt2YXIgeD1LSlVSLG49eC5qd3Mscj1uLkpXUyxoPXIucmVhZFNhZmVKU09OU3RyaW5nLHE9ci5pc1NhZmVKU09OU3RyaW5nLGQ9eC5jcnlwdG8sbD1kLkVDRFNBLHA9ZC5NYWMsYz1kLlNpZ25hdHVyZSx1PUpTT047dmFyIHQsayxvO2lmKHR5cGVvZiB3IT1cInN0cmluZ1wiJiZ0eXBlb2YgdyE9XCJvYmplY3RcIil7dGhyb3dcInNwSGVhZGVyIG11c3QgYmUgSlNPTiBzdHJpbmcgb3Igb2JqZWN0OiBcIit3fWlmKHR5cGVvZiB3PT1cIm9iamVjdFwiKXtrPXc7dD11LnN0cmluZ2lmeShrKX1pZih0eXBlb2Ygdz09XCJzdHJpbmdcIil7dD13O2lmKCFxKHQpKXt0aHJvd1wiSldTIEhlYWQgaXMgbm90IHNhZmUgSlNPTiBzdHJpbmc6IFwiK3R9az1oKHQpfW89ejtpZih0eXBlb2Ygej09XCJvYmplY3RcIil7bz11LnN0cmluZ2lmeSh6KX1pZigoaj09XCJcInx8aj09bnVsbCkmJmsuYWxnIT09dW5kZWZpbmVkKXtqPWsuYWxnfWlmKChqIT1cIlwiJiZqIT1udWxsKSYmay5hbGc9PT11bmRlZmluZWQpe2suYWxnPWo7dD11LnN0cmluZ2lmeShrKX1pZihqIT09ay5hbGcpe3Rocm93XCJhbGcgYW5kIHNIZWFkZXIuYWxnIGRvZXNuJ3QgbWF0Y2g6IFwiK2orXCIhPVwiK2suYWxnfXZhciBzPW51bGw7aWYoci5qd3NhbGcyc2lnYWxnW2pdPT09dW5kZWZpbmVkKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnIG5hbWU6IFwiK2p9ZWxzZXtzPXIuandzYWxnMnNpZ2FsZ1tqXX12YXIgZT11dGY4dG9iNjR1KHQpO3ZhciBtPXV0Zjh0b2I2NHUobyk7dmFyIGI9ZStcIi5cIittO3ZhciB5PVwiXCI7aWYocy5zdWJzdHIoMCw0KT09XCJIbWFjXCIpe2lmKEE9PT11bmRlZmluZWQpe3Rocm93XCJtYWMga2V5IHNoYWxsIGJlIHNwZWNpZmllZCBmb3IgSFMqIGFsZ1wifXZhciBpPW5ldyBwKHthbGc6cyxwcm92OlwiY3J5cHRvanNcIixwYXNzOkF9KTtpLnVwZGF0ZVN0cmluZyhiKTt5PWkuZG9GaW5hbCgpfWVsc2V7aWYocy5pbmRleE9mKFwid2l0aEVDRFNBXCIpIT0tMSl7dmFyIGY9bmV3IGMoe2FsZzpzfSk7Zi5pbml0KEEsYSk7Zi51cGRhdGVTdHJpbmcoYik7dmFyIGc9Zi5zaWduKCk7eT1LSlVSLmNyeXB0by5FQ0RTQS5hc24xU2lnVG9Db25jYXRTaWcoZyl9ZWxzZXtpZihzIT1cIm5vbmVcIil7dmFyIGY9bmV3IGMoe2FsZzpzfSk7Zi5pbml0KEEsYSk7Zi51cGRhdGVTdHJpbmcoYik7eT1mLnNpZ24oKX19fXZhciB2PWhleHRvYjY0dSh5KTtyZXR1cm4gYitcIi5cIit2fTtLSlVSLmp3cy5KV1MudmVyaWZ5PWZ1bmN0aW9uKHcsQixuKXt2YXIgeD1LSlVSLHE9eC5qd3MsdD1xLkpXUyxpPXQucmVhZFNhZmVKU09OU3RyaW5nLGU9eC5jcnlwdG8scD1lLkVDRFNBLHM9ZS5NYWMsZD1lLlNpZ25hdHVyZSxtO2lmKHR5cGVvZiBSU0FLZXkhPT11bmRlZmluZWQpe209UlNBS2V5fXZhciB5PXcuc3BsaXQoXCIuXCIpO2lmKHkubGVuZ3RoIT09Myl7cmV0dXJuIGZhbHNlfXZhciBmPXlbMF07dmFyIHI9eVsxXTt2YXIgYz1mK1wiLlwiK3I7dmFyIEE9YjY0dXRvaGV4KHlbMl0pO3ZhciBsPWkoYjY0dXRvdXRmOCh5WzBdKSk7dmFyIGs9bnVsbDt2YXIgej1udWxsO2lmKGwuYWxnPT09dW5kZWZpbmVkKXt0aHJvd1wiYWxnb3JpdGhtIG5vdCBzcGVjaWZpZWQgaW4gaGVhZGVyXCJ9ZWxzZXtrPWwuYWxnO3o9ay5zdWJzdHIoMCwyKX1pZihuIT1udWxsJiZPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobik9PT1cIltvYmplY3QgQXJyYXldXCImJm4ubGVuZ3RoPjApe3ZhciBiPVwiOlwiK24uam9pbihcIjpcIikrXCI6XCI7aWYoYi5pbmRleE9mKFwiOlwiK2srXCI6XCIpPT0tMSl7dGhyb3dcImFsZ29yaXRobSAnXCIraytcIicgbm90IGFjY2VwdGVkIGluIHRoZSBsaXN0XCJ9fWlmKGshPVwibm9uZVwiJiZCPT09bnVsbCl7dGhyb3dcImtleSBzaGFsbCBiZSBzcGVjaWZpZWQgdG8gdmVyaWZ5LlwifWlmKHR5cGVvZiBCPT1cInN0cmluZ1wiJiZCLmluZGV4T2YoXCItLS0tLUJFR0lOIFwiKSE9LTEpe0I9S0VZVVRJTC5nZXRLZXkoQil9aWYoej09XCJSU1wifHx6PT1cIlBTXCIpe2lmKCEoQiBpbnN0YW5jZW9mIG0pKXt0aHJvd1wia2V5IHNoYWxsIGJlIGEgUlNBS2V5IG9iaiBmb3IgUlMqIGFuZCBQUyogYWxnc1wifX1pZih6PT1cIkVTXCIpe2lmKCEoQiBpbnN0YW5jZW9mIHApKXt0aHJvd1wia2V5IHNoYWxsIGJlIGEgRUNEU0Egb2JqIGZvciBFUyogYWxnc1wifX1pZihrPT1cIm5vbmVcIil7fXZhciB1PW51bGw7aWYodC5qd3NhbGcyc2lnYWxnW2wuYWxnXT09PXVuZGVmaW5lZCl7dGhyb3dcInVuc3VwcG9ydGVkIGFsZyBuYW1lOiBcIitrfWVsc2V7dT10Lmp3c2FsZzJzaWdhbGdba119aWYodT09XCJub25lXCIpe3Rocm93XCJub3Qgc3VwcG9ydGVkXCJ9ZWxzZXtpZih1LnN1YnN0cigwLDQpPT1cIkhtYWNcIil7dmFyIG89bnVsbDtpZihCPT09dW5kZWZpbmVkKXt0aHJvd1wiaGV4YWRlY2ltYWwga2V5IHNoYWxsIGJlIHNwZWNpZmllZCBmb3IgSE1BQ1wifXZhciBqPW5ldyBzKHthbGc6dSxwYXNzOkJ9KTtqLnVwZGF0ZVN0cmluZyhjKTtvPWouZG9GaW5hbCgpO3JldHVybiBBPT1vfWVsc2V7aWYodS5pbmRleE9mKFwid2l0aEVDRFNBXCIpIT0tMSl7dmFyIGg9bnVsbDt0cnl7aD1wLmNvbmNhdFNpZ1RvQVNOMVNpZyhBKX1jYXRjaCh2KXtyZXR1cm4gZmFsc2V9dmFyIGc9bmV3IGQoe2FsZzp1fSk7Zy5pbml0KEIpO2cudXBkYXRlU3RyaW5nKGMpO3JldHVybiBnLnZlcmlmeShoKX1lbHNle3ZhciBnPW5ldyBkKHthbGc6dX0pO2cuaW5pdChCKTtnLnVwZGF0ZVN0cmluZyhjKTtyZXR1cm4gZy52ZXJpZnkoQSl9fX19O0tKVVIuandzLkpXUy5wYXJzZT1mdW5jdGlvbihnKXt2YXIgYz1nLnNwbGl0KFwiLlwiKTt2YXIgYj17fTt2YXIgZixlLGQ7aWYoYy5sZW5ndGghPTImJmMubGVuZ3RoIT0zKXt0aHJvd1wibWFsZm9ybWVkIHNKV1M6IHdyb25nIG51bWJlciBvZiAnLicgc3BsaXR0ZWQgZWxlbWVudHNcIn1mPWNbMF07ZT1jWzFdO2lmKGMubGVuZ3RoPT0zKXtkPWNbMl19Yi5oZWFkZXJPYmo9S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZyhiNjR1dG91dGY4KGYpKTtiLnBheWxvYWRPYmo9S0pVUi5qd3MuSldTLnJlYWRTYWZlSlNPTlN0cmluZyhiNjR1dG91dGY4KGUpKTtiLmhlYWRlclBQPUpTT04uc3RyaW5naWZ5KGIuaGVhZGVyT2JqLG51bGwsXCIgIFwiKTtpZihiLnBheWxvYWRPYmo9PW51bGwpe2IucGF5bG9hZFBQPWI2NHV0b3V0ZjgoZSl9ZWxzZXtiLnBheWxvYWRQUD1KU09OLnN0cmluZ2lmeShiLnBheWxvYWRPYmosbnVsbCxcIiAgXCIpfWlmKGQhPT11bmRlZmluZWQpe2Iuc2lnSGV4PWI2NHV0b2hleChkKX1yZXR1cm4gYn07S0pVUi5qd3MuSldTLnZlcmlmeUpXVD1mdW5jdGlvbihlLGwscil7dmFyIGQ9S0pVUixqPWQuandzLG89ai5KV1Msbj1vLnJlYWRTYWZlSlNPTlN0cmluZyxwPW8uaW5BcnJheSxmPW8uaW5jbHVkZWRBcnJheTt2YXIgaz1lLnNwbGl0KFwiLlwiKTt2YXIgYz1rWzBdO3ZhciBpPWtbMV07dmFyIHE9YytcIi5cIitpO3ZhciBtPWI2NHV0b2hleChrWzJdKTt2YXIgaD1uKGI2NHV0b3V0ZjgoYykpO3ZhciBnPW4oYjY0dXRvdXRmOChpKSk7aWYoaC5hbGc9PT11bmRlZmluZWQpe3JldHVybiBmYWxzZX1pZihyLmFsZz09PXVuZGVmaW5lZCl7dGhyb3dcImFjY2VwdEZpZWxkLmFsZyBzaGFsbCBiZSBzcGVjaWZpZWRcIn1pZighcChoLmFsZyxyLmFsZykpe3JldHVybiBmYWxzZX1pZihnLmlzcyE9PXVuZGVmaW5lZCYmdHlwZW9mIHIuaXNzPT09XCJvYmplY3RcIil7aWYoIXAoZy5pc3Msci5pc3MpKXtyZXR1cm4gZmFsc2V9fWlmKGcuc3ViIT09dW5kZWZpbmVkJiZ0eXBlb2Ygci5zdWI9PT1cIm9iamVjdFwiKXtpZighcChnLnN1YixyLnN1Yikpe3JldHVybiBmYWxzZX19aWYoZy5hdWQhPT11bmRlZmluZWQmJnR5cGVvZiByLmF1ZD09PVwib2JqZWN0XCIpe2lmKHR5cGVvZiBnLmF1ZD09XCJzdHJpbmdcIil7aWYoIXAoZy5hdWQsci5hdWQpKXtyZXR1cm4gZmFsc2V9fWVsc2V7aWYodHlwZW9mIGcuYXVkPT1cIm9iamVjdFwiKXtpZighZihnLmF1ZCxyLmF1ZCkpe3JldHVybiBmYWxzZX19fX12YXIgYj1qLkludERhdGUuZ2V0Tm93KCk7aWYoci52ZXJpZnlBdCE9PXVuZGVmaW5lZCYmdHlwZW9mIHIudmVyaWZ5QXQ9PT1cIm51bWJlclwiKXtiPXIudmVyaWZ5QXR9aWYoci5ncmFjZVBlcmlvZD09PXVuZGVmaW5lZHx8dHlwZW9mIHIuZ3JhY2VQZXJpb2QhPT1cIm51bWJlclwiKXtyLmdyYWNlUGVyaW9kPTB9aWYoZy5leHAhPT11bmRlZmluZWQmJnR5cGVvZiBnLmV4cD09XCJudW1iZXJcIil7aWYoZy5leHArci5ncmFjZVBlcmlvZDxiKXtyZXR1cm4gZmFsc2V9fWlmKGcubmJmIT09dW5kZWZpbmVkJiZ0eXBlb2YgZy5uYmY9PVwibnVtYmVyXCIpe2lmKGI8Zy5uYmYtci5ncmFjZVBlcmlvZCl7cmV0dXJuIGZhbHNlfX1pZihnLmlhdCE9PXVuZGVmaW5lZCYmdHlwZW9mIGcuaWF0PT1cIm51bWJlclwiKXtpZihiPGcuaWF0LXIuZ3JhY2VQZXJpb2Qpe3JldHVybiBmYWxzZX19aWYoZy5qdGkhPT11bmRlZmluZWQmJnIuanRpIT09dW5kZWZpbmVkKXtpZihnLmp0aSE9PXIuanRpKXtyZXR1cm4gZmFsc2V9fWlmKCFvLnZlcmlmeShlLGwsci5hbGcpKXtyZXR1cm4gZmFsc2V9cmV0dXJuIHRydWV9O0tKVVIuandzLkpXUy5pbmNsdWRlZEFycmF5PWZ1bmN0aW9uKGIsYSl7dmFyIGM9S0pVUi5qd3MuSldTLmluQXJyYXk7aWYoYj09PW51bGwpe3JldHVybiBmYWxzZX1pZih0eXBlb2YgYiE9PVwib2JqZWN0XCIpe3JldHVybiBmYWxzZX1pZih0eXBlb2YgYi5sZW5ndGghPT1cIm51bWJlclwiKXtyZXR1cm4gZmFsc2V9Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe2lmKCFjKGJbZF0sYSkpe3JldHVybiBmYWxzZX19cmV0dXJuIHRydWV9O0tKVVIuandzLkpXUy5pbkFycmF5PWZ1bmN0aW9uKGQsYil7aWYoYj09PW51bGwpe3JldHVybiBmYWxzZX1pZih0eXBlb2YgYiE9PVwib2JqZWN0XCIpe3JldHVybiBmYWxzZX1pZih0eXBlb2YgYi5sZW5ndGghPT1cIm51bWJlclwiKXtyZXR1cm4gZmFsc2V9Zm9yKHZhciBjPTA7YzxiLmxlbmd0aDtjKyspe2lmKGJbY109PWQpe3JldHVybiB0cnVlfX1yZXR1cm4gZmFsc2V9O0tKVVIuandzLkpXUy5qd3NhbGcyc2lnYWxnPXtIUzI1NjpcIkhtYWNTSEEyNTZcIixIUzM4NDpcIkhtYWNTSEEzODRcIixIUzUxMjpcIkhtYWNTSEE1MTJcIixSUzI1NjpcIlNIQTI1NndpdGhSU0FcIixSUzM4NDpcIlNIQTM4NHdpdGhSU0FcIixSUzUxMjpcIlNIQTUxMndpdGhSU0FcIixFUzI1NjpcIlNIQTI1NndpdGhFQ0RTQVwiLEVTMzg0OlwiU0hBMzg0d2l0aEVDRFNBXCIsRVM1MTI6XCJTSEE1MTJ3aXRoRUNEU0FcIixQUzI1NjpcIlNIQTI1NndpdGhSU0FhbmRNR0YxXCIsUFMzODQ6XCJTSEEzODR3aXRoUlNBYW5kTUdGMVwiLFBTNTEyOlwiU0hBNTEyd2l0aFJTQWFuZE1HRjFcIixub25lOlwibm9uZVwiLH07S0pVUi5qd3MuSldTLmlzU2FmZUpTT05TdHJpbmc9ZnVuY3Rpb24oYyxiLGQpe3ZhciBlPW51bGw7dHJ5e2U9anNvblBhcnNlKGMpO2lmKHR5cGVvZiBlIT1cIm9iamVjdFwiKXtyZXR1cm4gMH1pZihlLmNvbnN0cnVjdG9yPT09QXJyYXkpe3JldHVybiAwfWlmKGIpe2JbZF09ZX1yZXR1cm4gMX1jYXRjaChhKXtyZXR1cm4gMH19O0tKVVIuandzLkpXUy5yZWFkU2FmZUpTT05TdHJpbmc9ZnVuY3Rpb24oYil7dmFyIGM9bnVsbDt0cnl7Yz1qc29uUGFyc2UoYik7aWYodHlwZW9mIGMhPVwib2JqZWN0XCIpe3JldHVybiBudWxsfWlmKGMuY29uc3RydWN0b3I9PT1BcnJheSl7cmV0dXJuIG51bGx9cmV0dXJuIGN9Y2F0Y2goYSl7cmV0dXJuIG51bGx9fTtLSlVSLmp3cy5KV1MuZ2V0RW5jb2RlZFNpZ25hdHVyZVZhbHVlRnJvbUpXUz1mdW5jdGlvbihiKXt2YXIgYT1iLm1hdGNoKC9eW14uXStcXC5bXi5dK1xcLihbXi5dKykkLyk7aWYoYT09bnVsbCl7dGhyb3dcIkpXUyBzaWduYXR1cmUgaXMgbm90IGEgZm9ybSBvZiAnSGVhZC5QYXlsb2FkLlNpZ1ZhbHVlJy5cIn1yZXR1cm4gYVsxXX07S0pVUi5qd3MuSldTLmdldEpXS3RodW1icHJpbnQ9ZnVuY3Rpb24oZCl7aWYoZC5rdHkhPT1cIlJTQVwiJiZkLmt0eSE9PVwiRUNcIiYmZC5rdHkhPT1cIm9jdFwiKXt0aHJvd1widW5zdXBwb3J0ZWQgYWxnb3JpdGhtIGZvciBKV0sgVGh1bXByaW50XCJ9dmFyIGE9XCJ7XCI7aWYoZC5rdHk9PT1cIlJTQVwiKXtpZih0eXBlb2YgZC5uIT1cInN0cmluZ1wifHx0eXBlb2YgZC5lIT1cInN0cmluZ1wiKXt0aHJvd1wid3JvbmcgbiBhbmQgZSB2YWx1ZSBmb3IgUlNBIGtleVwifWErPSdcImVcIjpcIicrZC5lKydcIiwnO2ErPSdcImt0eVwiOlwiJytkLmt0eSsnXCIsJzthKz0nXCJuXCI6XCInK2QubisnXCJ9J31lbHNle2lmKGQua3R5PT09XCJFQ1wiKXtpZih0eXBlb2YgZC5jcnYhPVwic3RyaW5nXCJ8fHR5cGVvZiBkLnghPVwic3RyaW5nXCJ8fHR5cGVvZiBkLnkhPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBjcnYsIHggYW5kIHkgdmFsdWUgZm9yIEVDIGtleVwifWErPSdcImNydlwiOlwiJytkLmNydisnXCIsJzthKz0nXCJrdHlcIjpcIicrZC5rdHkrJ1wiLCc7YSs9J1wieFwiOlwiJytkLngrJ1wiLCc7YSs9J1wieVwiOlwiJytkLnkrJ1wifSd9ZWxzZXtpZihkLmt0eT09PVwib2N0XCIpe2lmKHR5cGVvZiBkLmshPVwic3RyaW5nXCIpe3Rocm93XCJ3cm9uZyBrIHZhbHVlIGZvciBvY3Qoc3ltbWV0cmljKSBrZXlcIn1hKz0nXCJrdHlcIjpcIicrZC5rdHkrJ1wiLCc7YSs9J1wia1wiOlwiJytkLmsrJ1wifSd9fX12YXIgYj1yc3RydG9oZXgoYSk7dmFyIGM9S0pVUi5jcnlwdG8uVXRpbC5oYXNoSGV4KGIsXCJzaGEyNTZcIik7dmFyIGU9aGV4dG9iNjR1KGMpO3JldHVybiBlfTtLSlVSLmp3cy5JbnREYXRlPXt9O0tKVVIuandzLkludERhdGUuZ2V0PWZ1bmN0aW9uKGMpe3ZhciBiPUtKVVIuandzLkludERhdGUsZD1iLmdldE5vdyxhPWIuZ2V0WnVsdTtpZihjPT1cIm5vd1wiKXtyZXR1cm4gZCgpfWVsc2V7aWYoYz09XCJub3cgKyAxaG91clwiKXtyZXR1cm4gZCgpKzYwKjYwfWVsc2V7aWYoYz09XCJub3cgKyAxZGF5XCIpe3JldHVybiBkKCkrNjAqNjAqMjR9ZWxzZXtpZihjPT1cIm5vdyArIDFtb250aFwiKXtyZXR1cm4gZCgpKzYwKjYwKjI0KjMwfWVsc2V7aWYoYz09XCJub3cgKyAxeWVhclwiKXtyZXR1cm4gZCgpKzYwKjYwKjI0KjM2NX1lbHNle2lmKGMubWF0Y2goL1okLykpe3JldHVybiBhKGMpfWVsc2V7aWYoYy5tYXRjaCgvXlswLTldKyQvKSl7cmV0dXJuIHBhcnNlSW50KGMpfX19fX19fXRocm93XCJ1bnN1cHBvcnRlZCBmb3JtYXQ6IFwiK2N9O0tKVVIuandzLkludERhdGUuZ2V0WnVsdT1mdW5jdGlvbihhKXtyZXR1cm4genVsdXRvc2VjKGEpfTtLSlVSLmp3cy5JbnREYXRlLmdldE5vdz1mdW5jdGlvbigpe3ZhciBhPX5+KG5ldyBEYXRlKCkvMTAwMCk7cmV0dXJuIGF9O0tKVVIuandzLkludERhdGUuaW50RGF0ZTJVVENTdHJpbmc9ZnVuY3Rpb24oYSl7dmFyIGI9bmV3IERhdGUoYSoxMDAwKTtyZXR1cm4gYi50b1VUQ1N0cmluZygpfTtLSlVSLmp3cy5JbnREYXRlLmludERhdGUyWnVsdT1mdW5jdGlvbihlKXt2YXIgaT1uZXcgRGF0ZShlKjEwMDApLGg9KFwiMDAwMFwiK2kuZ2V0VVRDRnVsbFllYXIoKSkuc2xpY2UoLTQpLGc9KFwiMDBcIisoaS5nZXRVVENNb250aCgpKzEpKS5zbGljZSgtMiksYj0oXCIwMFwiK2kuZ2V0VVRDRGF0ZSgpKS5zbGljZSgtMiksYT0oXCIwMFwiK2kuZ2V0VVRDSG91cnMoKSkuc2xpY2UoLTIpLGM9KFwiMDBcIitpLmdldFVUQ01pbnV0ZXMoKSkuc2xpY2UoLTIpLGY9KFwiMDBcIitpLmdldFVUQ1NlY29uZHMoKSkuc2xpY2UoLTIpO3JldHVybiBoK2crYithK2MrZitcIlpcIn07XG5cbmV4cG9ydCB7IFNlY3VyZVJhbmRvbSB9O1xuZXhwb3J0IHsgcm5nX3NlZWRfdGltZSB9O1xuXG5leHBvcnQgeyBCaWdJbnRlZ2VyIH07XG5leHBvcnQgeyBSU0FLZXkgfTtcbmV4cG9ydCBjb25zdCB7IEVEU0EgfSA9IEtKVVIuY3J5cHRvO1xuZXhwb3J0IGNvbnN0IHsgRFNBIH0gPSBLSlVSLmNyeXB0bztcbmV4cG9ydCBjb25zdCB7IFNpZ25hdHVyZSB9ID0gS0pVUi5jcnlwdG87XG5leHBvcnQgY29uc3QgeyBNZXNzYWdlRGlnZXN0IH0gPSAgS0pVUi5jcnlwdG87XG5leHBvcnQgY29uc3QgeyBNYWMgfSA9IEtKVVIuY3J5cHRvO1xuZXhwb3J0IGNvbnN0IHsgQ2lwaGVyIH0gPSAgS0pVUi5jcnlwdG87XG5leHBvcnQgeyBLRVlVVElMIH07XG5leHBvcnQgeyBBU04xSEVYIH07XG5leHBvcnQgeyBYNTA5IH07XG5leHBvcnQgeyBDcnlwdG9KUyB9O1xuXG4vLyBleHQvYmFzZTY0LmpzXG5leHBvcnQgeyBiNjR0b2hleCB9O1xuZXhwb3J0IHsgYjY0dG9CQSB9O1xuXG4vLyBiYXNlNjR4LmpzXG5leHBvcnQgeyBzdG9CQSB9O1xuZXhwb3J0IHsgQkF0b3MgfTtcbmV4cG9ydCB7IEJBdG9oZXggfTtcbmV4cG9ydCB7IHN0b2hleCB9O1xuZXhwb3J0IHsgc3RvYjY0IH07XG5leHBvcnQgeyBzdG9iNjR1IH07XG5leHBvcnQgeyBiNjR1dG9zIH07XG5leHBvcnQgeyBiNjR0b2I2NHUgfTtcbmV4cG9ydCB7IGI2NHV0b2I2NCB9O1xuZXhwb3J0IHsgaGV4MmI2NCB9O1xuZXhwb3J0IHsgaGV4dG9iNjR1IH07XG5leHBvcnQgeyBiNjR1dG9oZXggfTtcbmV4cG9ydCB7IHV0Zjh0b2I2NHUgfTtcbmV4cG9ydCB7IGI2NHV0b3V0ZjggfTtcbmV4cG9ydCB7IHV0Zjh0b2I2NCB9O1xuZXhwb3J0IHsgYjY0dG91dGY4IH07XG5leHBvcnQgeyB1dGY4dG9oZXggfTtcbmV4cG9ydCB7IGhleHRvdXRmOCB9O1xuZXhwb3J0IHsgaGV4dG9yc3RyIH07XG5leHBvcnQgeyByc3RydG9oZXggfTtcbmV4cG9ydCB7IGhleHRvYjY0IH07XG5leHBvcnQgeyBoZXh0b2I2NG5sIH07XG5leHBvcnQgeyBiNjRubHRvaGV4IH07XG5leHBvcnQgeyBoZXh0b3BlbSB9O1xuZXhwb3J0IHsgcGVtdG9oZXggfTtcbmV4cG9ydCB7IGhleHRvQXJyYXlCdWZmZXIgfTtcbmV4cG9ydCB7IEFycmF5QnVmZmVydG9oZXggfTtcbmV4cG9ydCB7IHp1bHV0b21zZWMgfTtcbmV4cG9ydCB7IHp1bHV0b3NlYyB9O1xuZXhwb3J0IHsgenVsdXRvZGF0ZSB9O1xuZXhwb3J0IHsgZGF0ZXRvenVsdSB9O1xuZXhwb3J0IHsgdXJpY21wdG9oZXggfTtcbmV4cG9ydCB7IGhleHRvdXJpY21wIH07XG5leHBvcnQgeyBpcHY2dG9oZXggfTtcbmV4cG9ydCB7IGhleHRvaXB2NiB9O1xuZXhwb3J0IHsgaGV4dG9pcCB9O1xuZXhwb3J0IHsgaXB0b2hleCB9O1xuZXhwb3J0IHsgZW5jb2RlVVJJQ29tcG9uZW50QWxsIH07XG5leHBvcnQgeyBuZXdsaW5lX3RvVW5peCB9O1xuZXhwb3J0IHsgbmV3bGluZV90b0RvcyB9O1xuZXhwb3J0IHsgaGV4dG9wb3NoZXggfTtcbmV4cG9ydCB7IGludGFyeXN0cnRvaGV4IH07XG5leHBvcnQgeyBzdHJkaWZmaWR4IH07XG5cbi8vIG5hbWUgc3BhY2VzXG5leHBvcnQgeyBLSlVSIH07XG5jb25zdCBfY3J5cHRvID0gIEtKVVIuY3J5cHRvO1xuZXhwb3J0IHsgX2NyeXB0byBhcyBjcnlwdG8gfTtcbmV4cG9ydCBjb25zdCB7IGFzbjEgfSA9IEtKVVI7XG5leHBvcnQgY29uc3QgeyBqd3MgfSA9IEtKVVI7XG5leHBvcnQgY29uc3QgeyBsYW5nIH0gPSBLSlVSO1xuXG5cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8qISBpZWVlNzU0LiBCU0QtMy1DbGF1c2UgTGljZW5zZS4gRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnL29wZW5zb3VyY2U+ICovXG5leHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IFRpbWVyIH0gZnJvbSAnLi9UaW1lci5qcyc7XG5cbmNvbnN0IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IDYwOyAvLyBzZWNvbmRzXG5cbmV4cG9ydCBjbGFzcyBBY2Nlc3NUb2tlbkV2ZW50cyB7XG5cbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLFxuICAgICAgICBhY2Nlc3NUb2tlbkV4cGlyaW5nVGltZXIgPSBuZXcgVGltZXIoXCJBY2Nlc3MgdG9rZW4gZXhwaXJpbmdcIiksXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJlZFRpbWVyID0gbmV3IFRpbWVyKFwiQWNjZXNzIHRva2VuIGV4cGlyZWRcIilcbiAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUgPSBhY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcblxuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nID0gYWNjZXNzVG9rZW5FeHBpcmluZ1RpbWVyO1xuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQgPSBhY2Nlc3NUb2tlbkV4cGlyZWRUaW1lcjtcbiAgICB9XG5cbiAgICBsb2FkKGNvbnRhaW5lcikge1xuICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV2ZW50cyBpZiB0aGVyZSdzIGFuIGFjY2VzcyB0b2tlbiBhbmQgaXQgaGFzIGFuIGV4cGlyYXRpb25cbiAgICAgICAgaWYgKGNvbnRhaW5lci5hY2Nlc3NfdG9rZW4gJiYgY29udGFpbmVyLmV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbGV0IGR1cmF0aW9uID0gY29udGFpbmVyLmV4cGlyZXNfaW47XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJBY2Nlc3NUb2tlbkV2ZW50cy5sb2FkOiBhY2Nlc3MgdG9rZW4gcHJlc2VudCwgcmVtYWluaW5nIGR1cmF0aW9uOlwiLCBkdXJhdGlvbik7XG5cbiAgICAgICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgICAgICAvLyBvbmx5IHJlZ2lzdGVyIGV4cGlyaW5nIGlmIHdlIHN0aWxsIGhhdmUgdGltZVxuICAgICAgICAgICAgICAgIGxldCBleHBpcmluZyA9IGR1cmF0aW9uIC0gdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWU7XG4gICAgICAgICAgICAgICAgaWYgKGV4cGlyaW5nIDw9IDApe1xuICAgICAgICAgICAgICAgICAgICBleHBpcmluZyA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IHJlZ2lzdGVyaW5nIGV4cGlyaW5nIHRpbWVyIGluOlwiLCBleHBpcmluZyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5pbml0KGV4cGlyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLmxvYWQ6IGNhbmNlbGluZyBleGlzdGluZyBleHBpcmluZyB0aW1lciBiZWNhc2Ugd2UncmUgcGFzdCBleHBpcmF0aW9uLlwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiBpdCdzIG5lZ2F0aXZlLCBpdCB3aWxsIHN0aWxsIGZpcmVcbiAgICAgICAgICAgIGxldCBleHBpcmVkID0gZHVyYXRpb24gKyAxO1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQWNjZXNzVG9rZW5FdmVudHMubG9hZDogcmVnaXN0ZXJpbmcgZXhwaXJlZCB0aW1lciBpbjpcIiwgZXhwaXJlZCk7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuaW5pdChleHBpcmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyZWQuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bmxvYWQoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIkFjY2Vzc1Rva2VuRXZlbnRzLnVubG9hZDogY2FuY2VsaW5nIGV4aXN0aW5nIGFjY2VzcyB0b2tlbiB0aW1lcnNcIik7XG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuY2FuY2VsKCk7XG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJlZC5jYW5jZWwoKTtcbiAgICB9XG5cbiAgICBhZGRBY2Nlc3NUb2tlbkV4cGlyaW5nKGNiKSB7XG4gICAgICAgIHRoaXMuX2FjY2Vzc1Rva2VuRXhwaXJpbmcuYWRkSGFuZGxlcihjYik7XG4gICAgfVxuICAgIHJlbW92ZUFjY2Vzc1Rva2VuRXhwaXJpbmcoY2IpIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmluZy5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgICB9XG5cbiAgICBhZGRBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVBY2Nlc3NUb2tlbkV4cGlyZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fYWNjZXNzVG9rZW5FeHBpcmVkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuY29uc3QgRGVmYXVsdEludGVydmFsID0gMjAwMDtcblxuZXhwb3J0IGNsYXNzIENoZWNrU2Vzc2lvbklGcmFtZSB7XG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIGNsaWVudF9pZCwgdXJsLCBpbnRlcnZhbCwgc3RvcE9uRXJyb3IgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcbiAgICAgICAgdGhpcy5fdXJsID0gdXJsO1xuICAgICAgICB0aGlzLl9pbnRlcnZhbCA9IGludGVydmFsIHx8IERlZmF1bHRJbnRlcnZhbDtcbiAgICAgICAgdGhpcy5fc3RvcE9uRXJyb3IgPSBzdG9wT25FcnJvcjtcblxuICAgICAgICB2YXIgaWR4ID0gdXJsLmluZGV4T2YoXCIvXCIsIHVybC5pbmRleE9mKFwiLy9cIikgKyAyKTtcbiAgICAgICAgdGhpcy5fZnJhbWVfb3JpZ2luID0gdXJsLnN1YnN0cigwLCBpZHgpO1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpZnJhbWVcIik7XG5cbiAgICAgICAgLy8gc2hvdGd1biBhcHByb2FjaFxuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgICAgdGhpcy5fZnJhbWUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgdGhpcy5fZnJhbWUud2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSAwO1xuXG4gICAgICAgIHRoaXMuX2ZyYW1lLnNyYyA9IHVybDtcbiAgICB9XG4gICAgbG9hZCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0aGlzLl9mcmFtZSk7XG4gICAgICAgICAgICB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX21lc3NhZ2UoZSkge1xuICAgICAgICBpZiAoZS5vcmlnaW4gPT09IHRoaXMuX2ZyYW1lX29yaWdpbiAmJlxuICAgICAgICAgICAgZS5zb3VyY2UgPT09IHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3dcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoZS5kYXRhID09PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJDaGVja1Nlc3Npb25JRnJhbWU6IGVycm9yIG1lc3NhZ2UgZnJvbSBjaGVjayBzZXNzaW9uIG9wIGlmcmFtZVwiKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3RvcE9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZS5kYXRhID09PSBcImNoYW5nZWRcIikge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZTogY2hhbmdlZCBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2soKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZTogXCIgKyBlLmRhdGEgKyBcIiBtZXNzYWdlIGZyb20gY2hlY2sgc2Vzc2lvbiBvcCBpZnJhbWVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnQoc2Vzc2lvbl9zdGF0ZSkge1xuICAgICAgICBpZiAodGhpcy5fc2Vzc2lvbl9zdGF0ZSAhPT0gc2Vzc2lvbl9zdGF0ZSkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0XCIpO1xuXG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbl9zdGF0ZSA9IHNlc3Npb25fc3RhdGU7XG5cbiAgICAgICAgICAgIGxldCBzZW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UodGhpcy5fY2xpZW50X2lkICsgXCIgXCIgKyB0aGlzLl9zZXNzaW9uX3N0YXRlLCB0aGlzLl9mcmFtZV9vcmlnaW4pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gdHJpZ2dlciBub3dcbiAgICAgICAgICAgIHNlbmQoKTtcblxuICAgICAgICAgICAgLy8gYW5kIHNldHVwIHRpbWVyXG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChzZW5kLCB0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICB0aGlzLl9zZXNzaW9uX3N0YXRlID0gbnVsbDtcblxuICAgICAgICBpZiAodGhpcy5fdGltZXIpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkNoZWNrU2Vzc2lvbklGcmFtZS5zdG9wXCIpO1xuXG4gICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl90aW1lcik7XG4gICAgICAgICAgICB0aGlzLl90aW1lciA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJleHBvcnQgY2xhc3MgQ2xvY2tTZXJ2aWNlIHtcbiAgICBnZXRFcG9jaFRpbWUoKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoRGF0ZS5ub3coKSAvIDEwMDAgfCAwKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBDb3Jkb3ZhUG9wdXBXaW5kb3cgfSBmcm9tICcuL0NvcmRvdmFQb3B1cFdpbmRvdy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBDb3Jkb3ZhSUZyYW1lTmF2aWdhdG9yIHtcblxuICAgIHByZXBhcmUocGFyYW1zKSB7XG4gICAgICAgIHBhcmFtcy5wb3B1cFdpbmRvd0ZlYXR1cmVzID0gJ2hpZGRlbj15ZXMnO1xuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgQ29yZG92YVBvcHVwV2luZG93KHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IENvcmRvdmFQb3B1cFdpbmRvdyB9IGZyb20gJy4vQ29yZG92YVBvcHVwV2luZG93LmpzJztcblxuZXhwb3J0IGNsYXNzIENvcmRvdmFQb3B1cE5hdmlnYXRvciB7XG5cbiAgICBwcmVwYXJlKHBhcmFtcykge1xuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgQ29yZG92YVBvcHVwV2luZG93KHBhcmFtcyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocG9wdXApO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuY29uc3QgRGVmYXVsdFBvcHVwRmVhdHVyZXMgPSAnbG9jYXRpb249bm8sdG9vbGJhcj1ubyx6b29tPW5vJztcbmNvbnN0IERlZmF1bHRQb3B1cFRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbmV4cG9ydCBjbGFzcyBDb3Jkb3ZhUG9wdXBXaW5kb3cge1xuXG4gICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdCA9IHJlamVjdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5mZWF0dXJlcyA9IHBhcmFtcy5wb3B1cFdpbmRvd0ZlYXR1cmVzIHx8IERlZmF1bHRQb3B1cEZlYXR1cmVzO1xuICAgICAgICB0aGlzLnRhcmdldCA9IHBhcmFtcy5wb3B1cFdpbmRvd1RhcmdldCB8fCBEZWZhdWx0UG9wdXBUYXJnZXQ7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnJlZGlyZWN0X3VyaSA9IHBhcmFtcy5zdGFydFVybDtcbiAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93LmN0b3I6IHJlZGlyZWN0X3VyaTogXCIgKyB0aGlzLnJlZGlyZWN0X3VyaSk7XG4gICAgfVxuXG4gICAgX2lzSW5BcHBCcm93c2VySW5zdGFsbGVkKGNvcmRvdmFNZXRhZGF0YSkge1xuICAgICAgICByZXR1cm4gW1wiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyXCIsIFwiY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyLmluYXBwYnJvd3NlclwiLCBcIm9yZy5hcGFjaGUuY29yZG92YS5pbmFwcGJyb3dzZXJcIl0uc29tZShmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIGNvcmRvdmFNZXRhZGF0YS5oYXNPd25Qcm9wZXJ0eShuYW1lKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCF3aW5kb3cuY29yZG92YSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcihcImNvcmRvdmEgaXMgdW5kZWZpbmVkXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjb3Jkb3ZhTWV0YWRhdGEgPSB3aW5kb3cuY29yZG92YS5yZXF1aXJlKFwiY29yZG92YS9wbHVnaW5fbGlzdFwiKS5tZXRhZGF0YTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0luQXBwQnJvd3Nlckluc3RhbGxlZChjb3Jkb3ZhTWV0YWRhdGEpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9lcnJvcihcIkluQXBwQnJvd3NlciBwbHVnaW4gbm90IGZvdW5kXCIpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9wb3B1cCA9IGNvcmRvdmEuSW5BcHBCcm93c2VyLm9wZW4ocGFyYW1zLnVybCwgdGhpcy50YXJnZXQsIHRoaXMuZmVhdHVyZXMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93Lm5hdmlnYXRlOiBwb3B1cCBzdWNjZXNzZnVsbHkgY3JlYXRlZFwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCA9IHRoaXMuX2V4aXRDYWxsYmFjay5iaW5kKHRoaXMpOyBcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkU3RhcnRDYWxsYmFja0V2ZW50ID0gdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2suYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB0aGlzLl9wb3B1cC5hZGRFdmVudExpc3RlbmVyKFwiZXhpdFwiLCB0aGlzLl9leGl0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3BvcHVwLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2Fkc3RhcnRcIiwgdGhpcy5fbG9hZFN0YXJ0Q2FsbGJhY2tFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9lcnJvcihcIkVycm9yIG9wZW5pbmcgcG9wdXAgd2luZG93XCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cblxuICAgIF9sb2FkU3RhcnRDYWxsYmFjayhldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudXJsLmluZGV4T2YodGhpcy5yZWRpcmVjdF91cmkpID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiBldmVudC51cmwgfSk7XG4gICAgICAgIH0gICAgXG4gICAgfVxuICAgIF9leGl0Q2FsbGJhY2sobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9lcnJvcihtZXNzYWdlKTsgICAgXG4gICAgfVxuICAgIFxuICAgIF9zdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXG4gICAgICAgIExvZy5kZWJ1ZyhcIkNvcmRvdmFQb3B1cFdpbmRvdzogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIGNvcmRvdmEgcG9wdXAgd2luZG93XCIpO1xuICAgICAgICB0aGlzLl9yZXNvbHZlKGRhdGEpO1xuICAgIH1cbiAgICBfZXJyb3IobWVzc2FnZSkge1xuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XG5cbiAgICAgICAgTG9nLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICB0aGlzLl9yZWplY3QobmV3IEVycm9yKG1lc3NhZ2UpKTtcbiAgICB9XG5cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuICAgIH1cblxuICAgIF9jbGVhbnVwKCkge1xuICAgICAgICBpZiAodGhpcy5fcG9wdXApe1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiQ29yZG92YVBvcHVwV2luZG93OiBjbGVhbmluZyB1cCBwb3B1cFwiKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJleGl0XCIsIHRoaXMuX2V4aXRDYWxsYmFja0V2ZW50LCBmYWxzZSk7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZHN0YXJ0XCIsIHRoaXMuX2xvYWRTdGFydENhbGxiYWNrRXZlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmNsb3NlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcG9wdXAgPSBudWxsO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuZXhwb3J0IGNsYXNzIEVycm9yUmVzcG9uc2UgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3Ioe2Vycm9yLCBlcnJvcl9kZXNjcmlwdGlvbiwgZXJyb3JfdXJpLCBzdGF0ZSwgc2Vzc2lvbl9zdGF0ZX09e31cbiAgICApIHtcbiAgICAgICAgIGlmICghZXJyb3Ipe1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiTm8gZXJyb3IgcGFzc2VkIHRvIEVycm9yUmVzcG9uc2VcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJlcnJvclwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN1cGVyKGVycm9yX2Rlc2NyaXB0aW9uIHx8IGVycm9yKTtcblxuICAgICAgICB0aGlzLm5hbWUgPSBcIkVycm9yUmVzcG9uc2VcIjtcblxuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSBlcnJvcl9kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5lcnJvcl91cmkgPSBlcnJvcl91cmk7XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnNlc3Npb25fc3RhdGUgPSBzZXNzaW9uX3N0YXRlO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuZXhwb3J0IGNsYXNzIEV2ZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcyA9IFtdO1xuICAgIH1cblxuICAgIGFkZEhhbmRsZXIoY2IpIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnB1c2goY2IpO1xuICAgIH1cblxuICAgIHJlbW92ZUhhbmRsZXIoY2IpIHtcbiAgICAgICAgdmFyIGlkeCA9IHRoaXMuX2NhbGxiYWNrcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSBjYik7XG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzLnNwbGljZShpZHgsIDEpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmFpc2UoLi4ucGFyYW1zKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIkV2ZW50OiBSYWlzaW5nIGV2ZW50OiBcIiArIHRoaXMuX25hbWUpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX2NhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzW2ldKC4uLnBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5jb25zdCB0aW1lciA9IHtcbiAgICBzZXRJbnRlcnZhbDogZnVuY3Rpb24gKGNiLCBkdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gc2V0SW50ZXJ2YWwoY2IsIGR1cmF0aW9uKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFySW50ZXJ2YWwoaGFuZGxlKTtcbiAgICB9XG59O1xuXG5sZXQgdGVzdGluZyA9IGZhbHNlO1xubGV0IHJlcXVlc3QgPSBudWxsO1xuXG5leHBvcnQgY2xhc3MgR2xvYmFsIHtcblxuICAgIHN0YXRpYyBfdGVzdGluZygpIHtcbiAgICAgICAgdGVzdGluZyA9IHRydWU7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBsb2NhdGlvbigpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYXRpb247XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IGxvY2FsU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9jYWxTdG9yYWdlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBzZXNzaW9uU3RvcmFnZSgpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nICYmIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2Vzc2lvblN0b3JhZ2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0WE1MSHR0cFJlcXVlc3QobmV3UmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0ID0gbmV3UmVxdWVzdDtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IFhNTEh0dHBSZXF1ZXN0KCkge1xuICAgICAgICBpZiAoIXRlc3RpbmcgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0IHx8IFhNTEh0dHBSZXF1ZXN0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCB0aW1lcigpIHtcbiAgICAgICAgaWYgKCF0ZXN0aW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gdGltZXI7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBJRnJhbWVXaW5kb3cgfSBmcm9tICcuL0lGcmFtZVdpbmRvdy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBJRnJhbWVOYXZpZ2F0b3Ige1xuXG4gICAgcHJlcGFyZShwYXJhbXMpIHtcbiAgICAgICAgbGV0IGZyYW1lID0gbmV3IElGcmFtZVdpbmRvdyhwYXJhbXMpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGZyYW1lKTtcbiAgICB9XG5cbiAgICBjYWxsYmFjayh1cmwpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lTmF2aWdhdG9yLmNhbGxiYWNrXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50KHVybCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuY29uc3QgRGVmYXVsdFRpbWVvdXQgPSAxMDAwMDtcblxuZXhwb3J0IGNsYXNzIElGcmFtZVdpbmRvdyB7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCA9IHRoaXMuX21lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50LCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5fZnJhbWUgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcblxuICAgICAgICAvLyBzaG90Z3VuIGFwcHJvYWNoXG4gICAgICAgIHRoaXMuX2ZyYW1lLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgICAgICB0aGlzLl9mcmFtZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICAgICAgdGhpcy5fZnJhbWUud2lkdGggPSAwO1xuICAgICAgICB0aGlzLl9mcmFtZS5oZWlnaHQgPSAwO1xuXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuX2ZyYW1lKTtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IHRpbWVvdXQgPSBwYXJhbXMuc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgRGVmYXVsdFRpbWVvdXQ7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubmF2aWdhdGU6IFVzaW5nIHRpbWVvdXQgb2Y6XCIsIHRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCh0aGlzLl90aW1lb3V0LmJpbmQodGhpcyksIHRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUuc3JjID0gcGFyYW1zLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnByb21pc2U7XG4gICAgfVxuXG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cblxuICAgIF9zdWNjZXNzKGRhdGEpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXG4gICAgICAgIExvZy5kZWJ1ZyhcIklGcmFtZVdpbmRvdzogU3VjY2Vzc2Z1bCByZXNwb25zZSBmcm9tIGZyYW1lIHdpbmRvd1wiKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuXG4gICAgICAgIExvZy5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICB9XG5cbiAgICBfY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lKSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3c6IGNsZWFudXBcIik7XG5cbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB0aGlzLl9ib3VuZE1lc3NhZ2VFdmVudCwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LmNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZCh0aGlzLl9mcmFtZSk7XG5cbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2JvdW5kTWVzc2FnZUV2ZW50ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90aW1lb3V0KCkge1xuICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cudGltZW91dFwiKTtcbiAgICAgICAgdGhpcy5fZXJyb3IoXCJGcmFtZSB3aW5kb3cgdGltZWQgb3V0XCIpO1xuICAgIH1cblxuICAgIF9tZXNzYWdlKGUpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93Lm1lc3NhZ2VcIik7XG5cbiAgICAgICAgaWYgKHRoaXMuX3RpbWVyICYmXG4gICAgICAgICAgICBlLm9yaWdpbiA9PT0gdGhpcy5fb3JpZ2luICYmXG4gICAgICAgICAgICBlLnNvdXJjZSA9PT0gdGhpcy5fZnJhbWUuY29udGVudFdpbmRvdyAmJlxuICAgICAgICAgICAgKHR5cGVvZiBlLmRhdGEgPT09ICdzdHJpbmcnICYmIChlLmRhdGEuc3RhcnRzV2l0aCgnaHR0cDovLycpIHx8IGUuZGF0YS5zdGFydHNXaXRoKCdodHRwczovLycpKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBsZXQgdXJsID0gZS5kYXRhO1xuICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1Y2Nlc3MoeyB1cmw6IHVybCB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiSW52YWxpZCByZXNwb25zZSBmcm9tIGZyYW1lXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IF9vcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gICAgfVxuXG4gICAgc3RhdGljIG5vdGlmeVBhcmVudCh1cmwpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiSUZyYW1lV2luZG93Lm5vdGlmeVBhcmVudFwiKTtcbiAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICBpZiAodXJsKSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJJRnJhbWVXaW5kb3cubm90aWZ5UGFyZW50OiBwb3N0aW5nIHVybCBtZXNzYWdlIHRvIHBhcmVudFwiKTtcbiAgICAgICAgICAgIHdpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UodXJsLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3QpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlXZWJTdG9yYWdle1xuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcbiAgICB9XG5cbiAgICBnZXRJdGVtKGtleSkge1xuICAgICAgICBMb2cuZGVidWcoXCJJbk1lbW9yeVdlYlN0b3JhZ2UuZ2V0SXRlbVwiLCBrZXkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xuICAgIH1cblxuICAgIHNldEl0ZW0oa2V5LCB2YWx1ZSl7XG4gICAgICAgIExvZy5kZWJ1ZyhcIkluTWVtb3J5V2ViU3RvcmFnZS5zZXRJdGVtXCIsIGtleSk7XG4gICAgICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJlbW92ZUl0ZW0oa2V5KXtcbiAgICAgICAgTG9nLmRlYnVnKFwiSW5NZW1vcnlXZWJTdG9yYWdlLnJlbW92ZUl0ZW1cIiwga2V5KTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2RhdGFba2V5XTtcbiAgICB9XG5cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSkubGVuZ3RoO1xuICAgIH1cblxuICAgIGtleShpbmRleCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcy5fZGF0YSlbaW5kZXhdO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGp3cywgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4LCBBbGxvd2VkU2lnbmluZ0FsZ3MgfSBmcm9tICcuL2NyeXB0by9qc3JzYXNpZ24nO1xuaW1wb3J0IGdldEpvc2VVdGlsIGZyb20gJy4vSm9zZVV0aWxJbXBsJztcblxuZXhwb3J0IGNvbnN0IEpvc2VVdGlsID0gZ2V0Sm9zZVV0aWwoeyBqd3MsIEtleVV0aWwsIFg1MDksIGNyeXB0bywgaGV4dG9iNjR1LCBiNjR0b2hleCwgQWxsb3dlZFNpZ25pbmdBbGdzIH0pO1xuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRKb3NlVXRpbCh7IGp3cywgS2V5VXRpbCwgWDUwOSwgY3J5cHRvLCBoZXh0b2I2NHUsIGI2NHRvaGV4LCBBbGxvd2VkU2lnbmluZ0FsZ3MgfSkge1xuICAgIHJldHVybiBjbGFzcyBKb3NlVXRpbCB7XG5cbiAgICAgICAgc3RhdGljIHBhcnNlSnd0KGp3dCkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiSm9zZVV0aWwucGFyc2VKd3RcIik7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciB0b2tlbiA9IGp3cy5KV1MucGFyc2Uoand0KTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IHRva2VuLmhlYWRlck9iaixcbiAgICAgICAgICAgICAgICAgICAgcGF5bG9hZDogdG9rZW4ucGF5bG9hZE9ialxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIkpvc2VVdGlsLnZhbGlkYXRlSnd0XCIpO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChrZXkua3R5ID09PSBcIlJTQVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkuZSAmJiBrZXkubikge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gS2V5VXRpbC5nZXRLZXkoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkueDVjICYmIGtleS54NWMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaGV4ID0gYjY0dG9oZXgoa2V5Lng1Y1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBYNTA5LmdldFB1YmxpY0tleUZyb21DZXJ0SGV4KGhleCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogUlNBIGtleSBtaXNzaW5nIGtleSBtYXRlcmlhbFwiLCBrZXkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlJTQSBrZXkgbWlzc2luZyBrZXkgbWF0ZXJpYWxcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkua3R5ID09PSBcIkVDXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleS5jcnYgJiYga2V5LnggJiYga2V5LnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IEtleVV0aWwuZ2V0S2V5KGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC52YWxpZGF0ZUp3dDogRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIsIGtleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRUMga2V5IG1pc3Npbmcga2V5IG1hdGVyaWFsXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLnZhbGlkYXRlSnd0OiBVbnN1cHBvcnRlZCBrZXkgdHlwZVwiLCBrZXkgJiYga2V5Lmt0eSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBrZXkgdHlwZTogXCIgKyBrZXkgJiYga2V5Lmt0eSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBKb3NlVXRpbC5fdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihlICYmIGUubWVzc2FnZSB8fCBlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJKV1QgdmFsaWRhdGlvbiBmYWlsZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0aWMgdmFsaWRhdGVKd3RBdHRyaWJ1dGVzKGp3dCwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3LCBub3csIHRpbWVJbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgaWYgKCFjbG9ja1NrZXcpIHtcbiAgICAgICAgICAgICAgICBjbG9ja1NrZXcgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIW5vdykge1xuICAgICAgICAgICAgICAgIG5vdyA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBKb3NlVXRpbC5wYXJzZUp3dChqd3QpLnBheWxvYWQ7XG5cbiAgICAgICAgICAgIGlmICghcGF5bG9hZC5pc3MpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGlzc3VlciB3YXMgbm90IHByb3ZpZGVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpc3N1ZXIgd2FzIG5vdCBwcm92aWRlZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGF5bG9hZC5pc3MgIT09IGlzc3Vlcikge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBpc3N1ZXIgaW4gdG9rZW5cIiwgcGF5bG9hZC5pc3MpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGlzc3VlciBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmlzcykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXBheWxvYWQuYXVkKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBhdWQgd2FzIG5vdCBwcm92aWRlZFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiYXVkIHdhcyBub3QgcHJvdmlkZWRcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHZhbGlkQXVkaWVuY2UgPSBwYXlsb2FkLmF1ZCA9PT0gYXVkaWVuY2UgfHwgKEFycmF5LmlzQXJyYXkocGF5bG9hZC5hdWQpICYmIHBheWxvYWQuYXVkLmluZGV4T2YoYXVkaWVuY2UpID49IDApO1xuICAgICAgICAgICAgaWYgKCF2YWxpZEF1ZGllbmNlKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBJbnZhbGlkIGF1ZGllbmNlIGluIHRva2VuXCIsIHBheWxvYWQuYXVkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBhdWRpZW5jZSBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmF1ZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBheWxvYWQuYXpwICYmIHBheWxvYWQuYXpwICE9PSBhdWRpZW5jZSkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogSW52YWxpZCBhenAgaW4gdG9rZW5cIiwgcGF5bG9hZC5henApO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJJbnZhbGlkIGF6cCBpbiB0b2tlbjogXCIgKyBwYXlsb2FkLmF6cCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXRpbWVJbnNlbnNpdGl2ZSkge1xuICAgICAgICAgICAgICAgIHZhciBsb3dlck5vdyA9IG5vdyArIGNsb2NrU2tldztcbiAgICAgICAgICAgICAgICB2YXIgdXBwZXJOb3cgPSBub3cgLSBjbG9ja1NrZXc7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXBheWxvYWQuaWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IHdhcyBub3QgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpYXQgd2FzIG5vdCBwcm92aWRlZFwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChsb3dlck5vdyA8IHBheWxvYWQuaWF0KSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpvc2VVdGlsLl92YWxpZGF0ZUp3dDogaWF0IGlzIGluIHRoZSBmdXR1cmVcIiwgcGF5bG9hZC5pYXQpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiaWF0IGlzIGluIHRoZSBmdXR1cmU6IFwiICsgcGF5bG9hZC5pYXQpKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5uYmYgJiYgbG93ZXJOb3cgPCBwYXlsb2FkLm5iZikge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IG5iZiBpcyBpbiB0aGUgZnV0dXJlXCIsIHBheWxvYWQubmJmKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIm5iZiBpcyBpbiB0aGUgZnV0dXJlOiBcIiArIHBheWxvYWQubmJmKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXlsb2FkLmV4cCkge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGV4cCB3YXMgbm90IHByb3ZpZGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiZXhwIHdhcyBub3QgcHJvdmlkZWRcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5leHAgPCB1cHBlck5vdykge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKb3NlVXRpbC5fdmFsaWRhdGVKd3Q6IGV4cCBpcyBpbiB0aGUgcGFzdFwiLCBwYXlsb2FkLmV4cCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJleHAgaXMgaW4gdGhlIHBhc3Q6XCIgKyBwYXlsb2FkLmV4cCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwYXlsb2FkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBfdmFsaWRhdGVKd3Qoand0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpIHtcblxuICAgICAgICAgICAgcmV0dXJuIEpvc2VVdGlsLnZhbGlkYXRlSnd0QXR0cmlidXRlcyhqd3QsIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tldywgbm93LCB0aW1lSW5zZW5zaXRpdmUpLnRoZW4ocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqd3MuSldTLnZlcmlmeShqd3QsIGtleSwgQWxsb3dlZFNpZ25pbmdBbGdzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSm9zZVV0aWwuX3ZhbGlkYXRlSnd0OiBzaWduYXR1cmUgdmFsaWRhdGlvbiBmYWlsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKGUgJiYgZS5tZXNzYWdlIHx8IGUpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwic2lnbmF0dXJlIHZhbGlkYXRpb24gZmFpbGVkXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRpYyBoYXNoU3RyaW5nKHZhbHVlLCBhbGcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyeXB0by5VdGlsLmhhc2hTdHJpbmcodmFsdWUsIGFsZyk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGljIGhleFRvQmFzZTY0VXJsKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoZXh0b2I2NHUodmFsdWUpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vR2xvYmFsLmpzJztcblxuZXhwb3J0IGNsYXNzIEpzb25TZXJ2aWNlIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYWRkaXRpb25hbENvbnRlbnRUeXBlcyA9IG51bGwsIFxuICAgICAgICBYTUxIdHRwUmVxdWVzdEN0b3IgPSBHbG9iYWwuWE1MSHR0cFJlcXVlc3QsIFxuICAgICAgICBqd3RIYW5kbGVyID0gbnVsbFxuICAgICkge1xuICAgICAgICBpZiAoYWRkaXRpb25hbENvbnRlbnRUeXBlcyAmJiBBcnJheS5pc0FycmF5KGFkZGl0aW9uYWxDb250ZW50VHlwZXMpKVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50VHlwZXMgPSBhZGRpdGlvbmFsQ29udGVudFR5cGVzLnNsaWNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICB7XG4gICAgICAgICAgICB0aGlzLl9jb250ZW50VHlwZXMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb250ZW50VHlwZXMucHVzaCgnYXBwbGljYXRpb24vanNvbicpO1xuICAgICAgICBpZiAoand0SGFuZGxlcikge1xuICAgICAgICAgICAgdGhpcy5fY29udGVudFR5cGVzLnB1c2goJ2FwcGxpY2F0aW9uL2p3dCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fWE1MSHR0cFJlcXVlc3QgPSBYTUxIdHRwUmVxdWVzdEN0b3I7XG4gICAgICAgIHRoaXMuX2p3dEhhbmRsZXIgPSBqd3RIYW5kbGVyO1xuICAgIH1cblxuICAgIGdldEpzb24odXJsLCB0b2tlbikge1xuICAgICAgICBpZiAoIXVybCl7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5nZXRKc29uOiBObyB1cmwgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiSnNvblNlcnZpY2UuZ2V0SnNvbiwgdXJsOiBcIiwgdXJsKTtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICB2YXIgcmVxID0gbmV3IHRoaXMuX1hNTEh0dHBSZXF1ZXN0KCk7XG4gICAgICAgICAgICByZXEub3BlbignR0VUJywgdXJsKTtcblxuICAgICAgICAgICAgdmFyIGFsbG93ZWRDb250ZW50VHlwZXMgPSB0aGlzLl9jb250ZW50VHlwZXM7XG4gICAgICAgICAgICB2YXIgand0SGFuZGxlciA9IHRoaXMuX2p3dEhhbmRsZXI7XG5cbiAgICAgICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiBIVFRQIHJlc3BvbnNlIHJlY2VpdmVkLCBzdGF0dXNcIiwgcmVxLnN0YXR1cyk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmVxLnN0YXR1cyA9PT0gMjAwKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlID0gcmVxLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUpIHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvdW5kID0gYWxsb3dlZENvbnRlbnRUeXBlcy5maW5kKGl0ZW09PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFR5cGUuc3RhcnRzV2l0aChpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kID09IFwiYXBwbGljYXRpb24vand0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqd3RIYW5kbGVyKHJlcSkudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShKU09OLnBhcnNlKHJlcS5yZXNwb25zZVRleHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5nZXRKc29uOiBFcnJvciBwYXJzaW5nIEpTT04gcmVzcG9uc2VcIiwgZS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiSW52YWxpZCByZXNwb25zZSBDb250ZW50LVR5cGU6IFwiICsgY29udGVudFR5cGUgKyBcIiwgZnJvbSBVUkw6IFwiICsgdXJsKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IocmVxLnN0YXR1c1RleHQgKyBcIiAoXCIgKyByZXEuc3RhdHVzICsgXCIpXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXEub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpzb25TZXJ2aWNlLmdldEpzb246IG5ldHdvcmsgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5nZXRKc29uOiB0b2tlbiBwYXNzZWQsIHNldHRpbmcgQXV0aG9yaXphdGlvbiBoZWFkZXJcIik7XG4gICAgICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXEuc2VuZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwb3N0Rm9ybSh1cmwsIHBheWxvYWQsIGJhc2ljQXV0aCkge1xuICAgICAgICBpZiAoIXVybCl7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJKc29uU2VydmljZS5wb3N0Rm9ybTogTm8gdXJsIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVybFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIExvZy5kZWJ1ZyhcIkpzb25TZXJ2aWNlLnBvc3RGb3JtLCB1cmw6IFwiLCB1cmwpO1xuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cbiAgICAgICAgICAgIHZhciByZXEgPSBuZXcgdGhpcy5fWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgICAgICAgIHJlcS5vcGVuKCdQT1NUJywgdXJsKTtcblxuICAgICAgICAgICAgdmFyIGFsbG93ZWRDb250ZW50VHlwZXMgPSB0aGlzLl9jb250ZW50VHlwZXM7XG5cbiAgICAgICAgICAgIHJlcS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJKc29uU2VydmljZS5wb3N0Rm9ybTogSFRUUCByZXNwb25zZSByZWNlaXZlZCwgc3RhdHVzXCIsIHJlcS5zdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJlcS5zdGF0dXMgPT09IDIwMCkge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50VHlwZSA9IHJlcS5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3VuZCA9IGFsbG93ZWRDb250ZW50VHlwZXMuZmluZChpdGVtPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlLnN0YXJ0c1dpdGgoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoSlNPTi5wYXJzZShyZXEucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIENvbnRlbnQtVHlwZTogXCIgKyBjb250ZW50VHlwZSArIFwiLCBmcm9tIFVSTDogXCIgKyB1cmwpKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChyZXEuc3RhdHVzID09PSA0MDApIHtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudFR5cGUgPSByZXEuZ2V0UmVzcG9uc2VIZWFkZXIoXCJDb250ZW50LVR5cGVcIik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBhbGxvd2VkQ29udGVudFR5cGVzLmZpbmQoaXRlbT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZS5zdGFydHNXaXRoKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF5bG9hZCA9IEpTT04ucGFyc2UocmVxLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXlsb2FkICYmIHBheWxvYWQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIkpzb25TZXJ2aWNlLnBvc3RGb3JtOiBFcnJvciBmcm9tIHNlcnZlcjogXCIsIHBheWxvYWQuZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihwYXlsb2FkLmVycm9yKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IEVycm9yIHBhcnNpbmcgSlNPTiByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IocmVxLnN0YXR1c1RleHQgKyBcIiAoXCIgKyByZXEuc3RhdHVzICsgXCIpXCIpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJlcS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiSnNvblNlcnZpY2UucG9zdEZvcm06IG5ldHdvcmsgZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgcmVqZWN0KEVycm9yKFwiTmV0d29yayBFcnJvclwiKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBsZXQgYm9keSA9IFwiXCI7XG4gICAgICAgICAgICBmb3IobGV0IGtleSBpbiBwYXlsb2FkKSB7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBwYXlsb2FkW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9IFwiJlwiO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBlbmNvZGVVUklDb21wb25lbnQoa2V5KTtcbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBcIj1cIjtcbiAgICAgICAgICAgICAgICAgICAgYm9keSArPSBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVxLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG5cbiAgICAgICAgICAgIGlmIChiYXNpY0F1dGggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByZXEuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCYXNpYyBcIiArIGJ0b2EoYmFzaWNBdXRoKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcS5zZW5kKGJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5sZXQgbm9wTG9nZ2VyID0ge1xuICAgIGRlYnVnKCl7fSxcbiAgICBpbmZvKCl7fSxcbiAgICB3YXJuKCl7fSxcbiAgICBlcnJvcigpe31cbn07XG5cbmNvbnN0IE5PTkUgPSAwO1xuY29uc3QgRVJST1IgPSAxO1xuY29uc3QgV0FSTiA9IDI7XG5jb25zdCBJTkZPID0gMztcbmNvbnN0IERFQlVHID0gNDtcblxubGV0IGxvZ2dlcjtcbmxldCBsZXZlbDtcblxuZXhwb3J0IGNsYXNzIExvZyB7XG4gICAgc3RhdGljIGdldCBOT05FKCkge3JldHVybiBOT05FfTtcbiAgICBzdGF0aWMgZ2V0IEVSUk9SKCkge3JldHVybiBFUlJPUn07XG4gICAgc3RhdGljIGdldCBXQVJOKCkge3JldHVybiBXQVJOfTtcbiAgICBzdGF0aWMgZ2V0IElORk8oKSB7cmV0dXJuIElORk99O1xuICAgIHN0YXRpYyBnZXQgREVCVUcoKSB7cmV0dXJuIERFQlVHfTtcbiAgICBcbiAgICBzdGF0aWMgcmVzZXQoKXtcbiAgICAgICAgbGV2ZWwgPSBJTkZPO1xuICAgICAgICBsb2dnZXIgPSBub3BMb2dnZXI7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgbGV2ZWwoKXtcbiAgICAgICAgcmV0dXJuIGxldmVsO1xuICAgIH1cbiAgICBzdGF0aWMgc2V0IGxldmVsKHZhbHVlKXtcbiAgICAgICAgaWYgKE5PTkUgPD0gdmFsdWUgJiYgdmFsdWUgPD0gREVCVUcpe1xuICAgICAgICAgICAgbGV2ZWwgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbG9nIGxldmVsXCIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBnZXQgbG9nZ2VyKCl7XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfVxuICAgIHN0YXRpYyBzZXQgbG9nZ2VyKHZhbHVlKXtcbiAgICAgICAgaWYgKCF2YWx1ZS5kZWJ1ZyAmJiB2YWx1ZS5pbmZvKSB7XG4gICAgICAgICAgICAvLyBqdXN0IHRvIHN0YXkgYmFja3dhcmRzIGNvbXBhdC4gY2FuIHJlbW92ZSBpbiAyLjBcbiAgICAgICAgICAgIHZhbHVlLmRlYnVnID0gdmFsdWUuaW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5kZWJ1ZyAmJiB2YWx1ZS5pbmZvICYmIHZhbHVlLndhcm4gJiYgdmFsdWUuZXJyb3Ipe1xuICAgICAgICAgICAgbG9nZ2VyID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGxvZ2dlclwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBzdGF0aWMgZGVidWcoLi4uYXJncyl7XG4gICAgICAgIGlmIChsZXZlbCA+PSBERUJVRyl7XG4gICAgICAgICAgICBsb2dnZXIuZGVidWcuYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgaW5mbyguLi5hcmdzKXtcbiAgICAgICAgaWYgKGxldmVsID49IElORk8pe1xuICAgICAgICAgICAgbG9nZ2VyLmluZm8uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgd2FybiguLi5hcmdzKXtcbiAgICAgICAgaWYgKGxldmVsID49IFdBUk4pe1xuICAgICAgICAgICAgbG9nZ2VyLndhcm4uYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZXJyb3IoLi4uYXJncyl7XG4gICAgICAgIGlmIChsZXZlbCA+PSBFUlJPUil7XG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IuYXBwbHkobG9nZ2VyLCBBcnJheS5mcm9tKGFyZ3MpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuTG9nLnJlc2V0KCk7XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBKc29uU2VydmljZSB9IGZyb20gJy4vSnNvblNlcnZpY2UuanMnO1xuXG5jb25zdCBPaWRjTWV0YWRhdGFVcmxQYXRoID0gJy53ZWxsLWtub3duL29wZW5pZC1jb25maWd1cmF0aW9uJztcblxuZXhwb3J0IGNsYXNzIE1ldGFkYXRhU2VydmljZSB7XG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk1ldGFkYXRhU2VydmljZTogTm8gc2V0dGluZ3MgcGFzc2VkIHRvIE1ldGFkYXRhU2VydmljZVwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKFsnYXBwbGljYXRpb24vandrLXNldCtqc29uJ10pO1xuICAgIH1cblxuICAgIGdldCBtZXRhZGF0YVVybCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tZXRhZGF0YVVybCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YVVybDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21ldGFkYXRhVXJsID0gdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5O1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9tZXRhZGF0YVVybFt0aGlzLl9tZXRhZGF0YVVybC5sZW5ndGggLSAxXSAhPT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSAnLyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgKz0gT2lkY01ldGFkYXRhVXJsUGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFVcmw7XG4gICAgfVxuXG4gICAgcmVzZXRTaWduaW5nS2V5cygpIHtcbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSB0aGlzLl9zZXR0aW5ncyB8fCB7fVxuICAgICAgICB0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cyA9IHVuZGVmaW5lZFxuICAgIH1cblxuICAgIGdldE1ldGFkYXRhKCkge1xuICAgICAgICBpZiAodGhpcy5fc2V0dGluZ3MubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YTogUmV0dXJuaW5nIG1ldGFkYXRhIGZyb20gc2V0dGluZ3NcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5tZXRhZGF0YVVybCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhOiBObyBhdXRob3JpdHkgb3IgbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBhdXRob3JpdHkgb3IgbWV0YWRhdGFVcmwgY29uZmlndXJlZCBvbiBzZXR0aW5nc1wiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBMb2cuZGVidWcoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0TWV0YWRhdGE6IGdldHRpbmcgbWV0YWRhdGEgZnJvbVwiLCB0aGlzLm1ldGFkYXRhVXJsKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih0aGlzLm1ldGFkYXRhVXJsKVxuICAgICAgICAgICAgLnRoZW4obWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YToganNvbiByZWNlaXZlZFwiKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2VlZCA9IHRoaXMuX3NldHRpbmdzLm1ldGFkYXRhU2VlZCB8fCB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5tZXRhZGF0YSA9IE9iamVjdC5hc3NpZ24oe30sIHNlZWQsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MubWV0YWRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJc3N1ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiaXNzdWVyXCIpO1xuICAgIH1cblxuICAgIGdldEF1dGhvcml6YXRpb25FbmRwb2ludCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJhdXRob3JpemF0aW9uX2VuZHBvaW50XCIpO1xuICAgIH1cblxuICAgIGdldFVzZXJJbmZvRW5kcG9pbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidXNlcmluZm9fZW5kcG9pbnRcIik7XG4gICAgfVxuXG4gICAgZ2V0VG9rZW5FbmRwb2ludChvcHRpb25hbD10cnVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwidG9rZW5fZW5kcG9pbnRcIiwgb3B0aW9uYWwpO1xuICAgIH1cblxuICAgIGdldENoZWNrU2Vzc2lvbklmcmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJjaGVja19zZXNzaW9uX2lmcmFtZVwiLCB0cnVlKTtcbiAgICB9XG5cbiAgICBnZXRFbmRTZXNzaW9uRW5kcG9pbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRNZXRhZGF0YVByb3BlcnR5KFwiZW5kX3Nlc3Npb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZ2V0UmV2b2NhdGlvbkVuZHBvaW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcInJldm9jYXRpb25fZW5kcG9pbnRcIiwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgZ2V0S2V5c0VuZHBvaW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0TWV0YWRhdGFQcm9wZXJ0eShcImp3a3NfdXJpXCIsIHRydWUpO1xuICAgIH1cblxuICAgIF9nZXRNZXRhZGF0YVByb3BlcnR5KG5hbWUsIG9wdGlvbmFsPWZhbHNlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVByb3BlcnR5IGZvcjogXCIgKyBuYW1lKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5nZXRNZXRhZGF0YSgpLnRoZW4obWV0YWRhdGEgPT4ge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IG1ldGFkYXRhIHJlY2lldmVkXCIpO1xuXG4gICAgICAgICAgICBpZiAobWV0YWRhdGFbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbmFsID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy53YXJuKFwiTWV0YWRhdGFTZXJ2aWNlLmdldE1ldGFkYXRhUHJvcGVydHk6IE1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gb3B0aW9uYWwgcHJvcGVydHkgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk1ldGFkYXRhU2VydmljZS5nZXRNZXRhZGF0YVByb3BlcnR5OiBNZXRhZGF0YSBkb2VzIG5vdCBjb250YWluIHByb3BlcnR5IFwiICsgbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGFkYXRhIGRvZXMgbm90IGNvbnRhaW4gcHJvcGVydHkgXCIgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBtZXRhZGF0YVtuYW1lXTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0U2lnbmluZ0tleXMoKSB7XG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5zaWduaW5nS2V5cykge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiTWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzOiBSZXR1cm5pbmcgc2lnbmluZ0tleXMgZnJvbSBzZXR0aW5nc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldE1ldGFkYXRhUHJvcGVydHkoXCJqd2tzX3VyaVwiKS50aGVuKGp3a3NfdXJpID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5czogandrc191cmkgcmVjZWl2ZWRcIiwgandrc191cmkpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbihqd2tzX3VyaSkudGhlbihrZXlTZXQgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk1ldGFkYXRhU2VydmljZS5nZXRTaWduaW5nS2V5czoga2V5IHNldCByZWNlaXZlZFwiLCBrZXlTZXQpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFrZXlTZXQua2V5cykge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJNZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXM6IE1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcga2V5cyBvbiBrZXlzZXRcIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXMgPSBrZXlTZXQua2V5cztcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3Muc2lnbmluZ0tleXM7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgRXJyb3JSZXNwb25zZSB9IGZyb20gJy4vRXJyb3JSZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTaWduaW5SZXF1ZXN0IH0gZnJvbSAnLi9TaWduaW5SZXF1ZXN0LmpzJztcbmltcG9ydCB7IFNpZ25pblJlc3BvbnNlIH0gZnJvbSAnLi9TaWduaW5SZXNwb25zZS5qcyc7XG5pbXBvcnQgeyBTaWdub3V0UmVxdWVzdCB9IGZyb20gJy4vU2lnbm91dFJlcXVlc3QuanMnO1xuaW1wb3J0IHsgU2lnbm91dFJlc3BvbnNlIH0gZnJvbSAnLi9TaWdub3V0UmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgU2lnbmluU3RhdGUgfSBmcm9tICcuL1NpZ25pblN0YXRlLmpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBPaWRjQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9KSB7XG4gICAgICAgIGlmIChzZXR0aW5ncyBpbnN0YW5jZW9mIE9pZGNDbGllbnRTZXR0aW5ncykge1xuICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzID0gbmV3IE9pZGNDbGllbnRTZXR0aW5ncyhzZXR0aW5ncyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgX3N0YXRlU3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnN0YXRlU3RvcmU7XG4gICAgfVxuICAgIGdldCBfdmFsaWRhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy52YWxpZGF0b3I7XG4gICAgfVxuICAgIGdldCBfbWV0YWRhdGFTZXJ2aWNlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5tZXRhZGF0YVNlcnZpY2U7XG4gICAgfVxuXG4gICAgZ2V0IHNldHRpbmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG4gICAgfVxuICAgIGdldCBtZXRhZGF0YVNlcnZpY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2U7XG4gICAgfVxuXG4gICAgY3JlYXRlU2lnbmluUmVxdWVzdCh7XG4gICAgICAgIHJlc3BvbnNlX3R5cGUsIHNjb3BlLCByZWRpcmVjdF91cmksXG4gICAgICAgIC8vIGRhdGEgd2FzIG1lYW50IHRvIGJlIHRoZSBwbGFjZSBhIGNhbGxlciBjb3VsZCBpbmRpY2F0ZSB0aGUgZGF0YSB0b1xuICAgICAgICAvLyBoYXZlIHJvdW5kIHRyaXBwZWQsIGJ1dCBwZW9wbGUgd2VyZSBnZXR0aW5nIGNvbmZ1c2VkLCBzbyBpIGFkZGVkIHN0YXRlIChzaW5jZSB0aGF0IG1hdGNoZXMgdGhlIHNwZWMpXG4gICAgICAgIC8vIGFuZCBzbyBub3cgaWYgZGF0YSBpcyBub3QgcGFzc2VkLCBidXQgc3RhdGUgaXMgdGhlbiBzdGF0ZSB3aWxsIGJlIHVzZWRcbiAgICAgICAgZGF0YSwgc3RhdGUsIHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcyxcbiAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCByZXNwb25zZV9tb2RlLCBleHRyYVF1ZXJ5UGFyYW1zLCBleHRyYVRva2VuUGFyYW1zLCByZXF1ZXN0X3R5cGUsIHNraXBVc2VySW5mbyB9ID0ge30sXG4gICAgICAgIHN0YXRlU3RvcmVcbiAgICApIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWduaW5SZXF1ZXN0XCIpO1xuXG4gICAgICAgIGxldCBjbGllbnRfaWQgPSB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XG4gICAgICAgIHJlc3BvbnNlX3R5cGUgPSByZXNwb25zZV90eXBlIHx8IHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGU7XG4gICAgICAgIHNjb3BlID0gc2NvcGUgfHwgdGhpcy5fc2V0dGluZ3Muc2NvcGU7XG4gICAgICAgIHJlZGlyZWN0X3VyaSA9IHJlZGlyZWN0X3VyaSB8fCB0aGlzLl9zZXR0aW5ncy5yZWRpcmVjdF91cmk7XG5cbiAgICAgICAgLy8gaWRfdG9rZW5faGludCwgbG9naW5faGludCBhcmVuJ3QgYWxsb3dlZCBvbiBfc2V0dGluZ3NcbiAgICAgICAgcHJvbXB0ID0gcHJvbXB0IHx8IHRoaXMuX3NldHRpbmdzLnByb21wdDtcbiAgICAgICAgZGlzcGxheSA9IGRpc3BsYXkgfHwgdGhpcy5fc2V0dGluZ3MuZGlzcGxheTtcbiAgICAgICAgbWF4X2FnZSA9IG1heF9hZ2UgfHwgdGhpcy5fc2V0dGluZ3MubWF4X2FnZTtcbiAgICAgICAgdWlfbG9jYWxlcyA9IHVpX2xvY2FsZXMgfHwgdGhpcy5fc2V0dGluZ3MudWlfbG9jYWxlcztcbiAgICAgICAgYWNyX3ZhbHVlcyA9IGFjcl92YWx1ZXMgfHwgdGhpcy5fc2V0dGluZ3MuYWNyX3ZhbHVlcztcbiAgICAgICAgcmVzb3VyY2UgPSByZXNvdXJjZSB8fCB0aGlzLl9zZXR0aW5ncy5yZXNvdXJjZTtcbiAgICAgICAgcmVzcG9uc2VfbW9kZSA9IHJlc3BvbnNlX21vZGUgfHwgdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfbW9kZTtcbiAgICAgICAgZXh0cmFRdWVyeVBhcmFtcyA9IGV4dHJhUXVlcnlQYXJhbXMgfHwgdGhpcy5fc2V0dGluZ3MuZXh0cmFRdWVyeVBhcmFtcztcbiAgICAgICAgZXh0cmFUb2tlblBhcmFtcyA9IGV4dHJhVG9rZW5QYXJhbXMgfHwgdGhpcy5fc2V0dGluZ3MuZXh0cmFUb2tlblBhcmFtcztcblxuICAgICAgICBsZXQgYXV0aG9yaXR5ID0gdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5O1xuXG4gICAgICAgIGlmIChTaWduaW5SZXF1ZXN0LmlzQ29kZShyZXNwb25zZV90eXBlKSAmJiByZXNwb25zZV90eXBlICE9PSBcImNvZGVcIikge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk9wZW5JRCBDb25uZWN0IGh5YnJpZCBmbG93IGlzIG5vdCBzdXBwb3J0ZWRcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRBdXRob3JpemF0aW9uRW5kcG9pbnQoKS50aGVuKHVybCA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25pblJlcXVlc3Q6IFJlY2VpdmVkIGF1dGhvcml6YXRpb24gZW5kcG9pbnRcIiwgdXJsKTtcblxuICAgICAgICAgICAgbGV0IHNpZ25pblJlcXVlc3QgPSBuZXcgU2lnbmluUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgICAgIGNsaWVudF9pZCxcbiAgICAgICAgICAgICAgICByZWRpcmVjdF91cmksXG4gICAgICAgICAgICAgICAgcmVzcG9uc2VfdHlwZSxcbiAgICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhIHx8IHN0YXRlLFxuICAgICAgICAgICAgICAgIGF1dGhvcml0eSxcbiAgICAgICAgICAgICAgICBwcm9tcHQsIGRpc3BsYXksIG1heF9hZ2UsIHVpX2xvY2FsZXMsIGlkX3Rva2VuX2hpbnQsIGxvZ2luX2hpbnQsIGFjcl92YWx1ZXMsXG4gICAgICAgICAgICAgICAgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCBleHRyYVF1ZXJ5UGFyYW1zLCBleHRyYVRva2VuUGFyYW1zLCByZXF1ZXN0X3R5cGUsIHJlc3BvbnNlX21vZGUsXG4gICAgICAgICAgICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5fc2V0dGluZ3MuY2xpZW50X3NlY3JldCxcbiAgICAgICAgICAgICAgICBza2lwVXNlckluZm9cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgc2lnbmluU3RhdGUgPSBzaWduaW5SZXF1ZXN0LnN0YXRlO1xuICAgICAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcblxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlU3RvcmUuc2V0KHNpZ25pblN0YXRlLmlkLCBzaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmcoKSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNpZ25pblJlcXVlc3Q7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsLCBzdGF0ZVN0b3JlLCByZW1vdmVTdGF0ZSA9IGZhbHNlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGVcIik7XG5cbiAgICAgICAgbGV0IHVzZVF1ZXJ5ID0gdGhpcy5fc2V0dGluZ3MucmVzcG9uc2VfbW9kZSA9PT0gXCJxdWVyeVwiIHx8IFxuICAgICAgICAgICAgKCF0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlICYmIFNpZ25pblJlcXVlc3QuaXNDb2RlKHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGUpKTtcbiAgICAgICAgbGV0IGRlbGltaXRlciA9IHVzZVF1ZXJ5ID8gXCI/XCIgOiBcIiNcIjtcblxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBuZXcgU2lnbmluUmVzcG9uc2UodXJsLCBkZWxpbWl0ZXIpO1xuXG4gICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGU6IE5vIHN0YXRlIGluIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN0YXRlIGluIHJlc3BvbnNlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XG5cbiAgICAgICAgdmFyIHN0YXRlQXBpID0gcmVtb3ZlU3RhdGUgPyBzdGF0ZVN0b3JlLnJlbW92ZS5iaW5kKHN0YXRlU3RvcmUpIDogc3RhdGVTdG9yZS5nZXQuYmluZChzdGF0ZVN0b3JlKTtcblxuICAgICAgICByZXR1cm4gc3RhdGVBcGkocmVzcG9uc2Uuc3RhdGUpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdG9yZWRTdGF0ZVN0cmluZykge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25pblJlc3BvbnNlU3RhdGU6IE5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbWF0Y2hpbmcgc3RhdGUgZm91bmQgaW4gc3RvcmFnZVwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHN0YXRlID0gU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmVkU3RhdGVTdHJpbmcpO1xuICAgICAgICAgICAgcmV0dXJuIHtzdGF0ZSwgcmVzcG9uc2V9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsLCBzdGF0ZVN0b3JlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlXCIpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRTaWduaW5SZXNwb25zZVN0YXRlKHVybCwgc3RhdGVTdG9yZSwgdHJ1ZSkudGhlbigoe3N0YXRlLCByZXNwb25zZX0pID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25pblJlc3BvbnNlOiBSZWNlaXZlZCBzdGF0ZSBmcm9tIHN0b3JhZ2U7IHZhbGlkYXRpbmcgcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY3JlYXRlU2lnbm91dFJlcXVlc3Qoe2lkX3Rva2VuX2hpbnQsIGRhdGEsIHN0YXRlLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksIGV4dHJhUXVlcnlQYXJhbXMsIHJlcXVlc3RfdHlwZSB9ID0ge30sXG4gICAgICAgIHN0YXRlU3RvcmVcbiAgICApIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jcmVhdGVTaWdub3V0UmVxdWVzdFwiKTtcblxuICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5fc2V0dGluZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xuICAgICAgICBleHRyYVF1ZXJ5UGFyYW1zID0gZXh0cmFRdWVyeVBhcmFtcyB8fCB0aGlzLl9zZXR0aW5ncy5leHRyYVF1ZXJ5UGFyYW1zO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0RW5kU2Vzc2lvbkVuZHBvaW50KCkudGhlbih1cmwgPT4ge1xuICAgICAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJPaWRjQ2xpZW50LmNyZWF0ZVNpZ25vdXRSZXF1ZXN0OiBObyBlbmQgc2Vzc2lvbiBlbmRwb2ludCB1cmwgcmV0dXJuZWRcIik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gZW5kIHNlc3Npb24gZW5kcG9pbnRcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFJlY2VpdmVkIGVuZCBzZXNzaW9uIGVuZHBvaW50XCIsIHVybCk7XG5cbiAgICAgICAgICAgIGxldCByZXF1ZXN0ID0gbmV3IFNpZ25vdXRSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgaWRfdG9rZW5faGludCxcbiAgICAgICAgICAgICAgICBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSB8fCBzdGF0ZSxcbiAgICAgICAgICAgICAgICBleHRyYVF1ZXJ5UGFyYW1zLFxuICAgICAgICAgICAgICAgIHJlcXVlc3RfdHlwZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBzaWdub3V0U3RhdGUgPSByZXF1ZXN0LnN0YXRlO1xuICAgICAgICAgICAgaWYgKHNpZ25vdXRTdGF0ZSkge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQuY3JlYXRlU2lnbm91dFJlcXVlc3Q6IFNpZ25vdXQgcmVxdWVzdCBoYXMgc3RhdGUgdG8gcGVyc2lzdFwiKTtcblxuICAgICAgICAgICAgICAgIHN0YXRlU3RvcmUgPSBzdGF0ZVN0b3JlIHx8IHRoaXMuX3N0YXRlU3RvcmU7XG4gICAgICAgICAgICAgICAgc3RhdGVTdG9yZS5zZXQoc2lnbm91dFN0YXRlLmlkLCBzaWdub3V0U3RhdGUudG9TdG9yYWdlU3RyaW5nKCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdDtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlKHVybCwgc3RhdGVTdG9yZSwgcmVtb3ZlU3RhdGUgPSBmYWxzZSkge1xuICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZVwiKTtcblxuICAgICAgICB2YXIgcmVzcG9uc2UgPSBuZXcgU2lnbm91dFJlc3BvbnNlKHVybCk7XG4gICAgICAgIGlmICghcmVzcG9uc2Uuc3RhdGUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlOiBObyBzdGF0ZSBpbiByZXNwb25zZVwiKTtcblxuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgTG9nLndhcm4oXCJPaWRjQ2xpZW50LnJlYWRTaWdub3V0UmVzcG9uc2VTdGF0ZTogUmVzcG9uc2Ugd2FzIGVycm9yOiBcIiwgcmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3JSZXNwb25zZShyZXNwb25zZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHtzdGF0ZTogdW5kZWZpbmVkLCByZXNwb25zZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXRlS2V5ID0gcmVzcG9uc2Uuc3RhdGU7XG5cbiAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcblxuICAgICAgICB2YXIgc3RhdGVBcGkgPSByZW1vdmVTdGF0ZSA/IHN0YXRlU3RvcmUucmVtb3ZlLmJpbmQoc3RhdGVTdG9yZSkgOiBzdGF0ZVN0b3JlLmdldC5iaW5kKHN0YXRlU3RvcmUpO1xuICAgICAgICByZXR1cm4gc3RhdGVBcGkoc3RhdGVLZXkpLnRoZW4oc3RvcmVkU3RhdGVTdHJpbmcgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdG9yZWRTdGF0ZVN0cmluZykge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnQucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlOiBObyBtYXRjaGluZyBzdGF0ZSBmb3VuZCBpbiBzdG9yYWdlXCIpO1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIG1hdGNoaW5nIHN0YXRlIGZvdW5kIGluIHN0b3JhZ2VcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBzdGF0ZSA9IFN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JlZFN0YXRlU3RyaW5nKTtcblxuICAgICAgICAgICAgcmV0dXJuIHtzdGF0ZSwgcmVzcG9uc2V9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcm9jZXNzU2lnbm91dFJlc3BvbnNlKHVybCwgc3RhdGVTdG9yZSkge1xuICAgICAgICBMb2cuZGVidWcoXCJPaWRjQ2xpZW50LnByb2Nlc3NTaWdub3V0UmVzcG9uc2VcIik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFNpZ25vdXRSZXNwb25zZVN0YXRlKHVybCwgc3RhdGVTdG9yZSwgdHJ1ZSkudGhlbigoe3N0YXRlLCByZXNwb25zZX0pID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZTogUmVjZWl2ZWQgc3RhdGUgZnJvbSBzdG9yYWdlOyB2YWxpZGF0aW5nIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIk9pZGNDbGllbnQucHJvY2Vzc1NpZ25vdXRSZXNwb25zZTogTm8gc3RhdGUgZnJvbSBzdG9yYWdlOyBza2lwcGluZyB2YWxpZGF0aW5nIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xlYXJTdGFsZVN0YXRlKHN0YXRlU3RvcmUpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiT2lkY0NsaWVudC5jbGVhclN0YWxlU3RhdGVcIik7XG5cbiAgICAgICAgc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmUgfHwgdGhpcy5fc3RhdGVTdG9yZTtcblxuICAgICAgICByZXR1cm4gU3RhdGUuY2xlYXJTdGFsZVN0YXRlKHN0YXRlU3RvcmUsIHRoaXMuc2V0dGluZ3Muc3RhbGVTdGF0ZUFnZSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgQ2xvY2tTZXJ2aWNlIH0gZnJvbSAnLi9DbG9ja1NlcnZpY2UuanMnO1xuaW1wb3J0IHsgV2ViU3RvcmFnZVN0YXRlU3RvcmUgfSBmcm9tICcuL1dlYlN0b3JhZ2VTdGF0ZVN0b3JlLmpzJztcbmltcG9ydCB7IFJlc3BvbnNlVmFsaWRhdG9yIH0gZnJvbSAnLi9SZXNwb25zZVZhbGlkYXRvci5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZS5qcyc7XG5cbmNvbnN0IE9pZGNNZXRhZGF0YVVybFBhdGggPSAnLndlbGwta25vd24vb3BlbmlkLWNvbmZpZ3VyYXRpb24nO1xuXG5jb25zdCBEZWZhdWx0UmVzcG9uc2VUeXBlID0gXCJpZF90b2tlblwiO1xuY29uc3QgRGVmYXVsdFNjb3BlID0gXCJvcGVuaWRcIjtcbmNvbnN0IERlZmF1bHRDbGllbnRBdXRoZW50aWNhdGlvbiA9IFwiY2xpZW50X3NlY3JldF9wb3N0XCIgLy8gVGhlIGRlZmF1bHQgdmFsdWUgbXVzdCBiZSBjbGllbnRfc2VjcmV0X2Jhc2ljLCBhcyBleHBsYWluZWQgaW4gaHR0cHM6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjQ2xpZW50QXV0aGVudGljYXRpb25cbmNvbnN0IERlZmF1bHRTdGFsZVN0YXRlQWdlID0gNjAgKiAxNTsgLy8gc2Vjb25kc1xuY29uc3QgRGVmYXVsdENsb2NrU2tld0luU2Vjb25kcyA9IDYwICogNTtcblxuZXhwb3J0IGNsYXNzIE9pZGNDbGllbnRTZXR0aW5ncyB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAvLyBtZXRhZGF0YSByZWxhdGVkXG4gICAgICAgIGF1dGhvcml0eSwgbWV0YWRhdGFVcmwsIG1ldGFkYXRhLCBzaWduaW5nS2V5cywgbWV0YWRhdGFTZWVkLFxuICAgICAgICAvLyBjbGllbnQgcmVsYXRlZFxuICAgICAgICBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIHJlc3BvbnNlX3R5cGUgPSBEZWZhdWx0UmVzcG9uc2VUeXBlLCBzY29wZSA9IERlZmF1bHRTY29wZSxcbiAgICAgICAgcmVkaXJlY3RfdXJpLCBwb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgICAgIGNsaWVudF9hdXRoZW50aWNhdGlvbiA9IERlZmF1bHRDbGllbnRBdXRoZW50aWNhdGlvbixcbiAgICAgICAgLy8gb3B0aW9uYWwgcHJvdG9jb2xcbiAgICAgICAgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBhY3JfdmFsdWVzLCByZXNvdXJjZSwgcmVzcG9uc2VfbW9kZSxcbiAgICAgICAgLy8gYmVoYXZpb3IgZmxhZ3NcbiAgICAgICAgZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSB0cnVlLCBsb2FkVXNlckluZm8gPSB0cnVlLFxuICAgICAgICBzdGFsZVN0YXRlQWdlID0gRGVmYXVsdFN0YWxlU3RhdGVBZ2UsIFxuICAgICAgICBjbG9ja1NrZXcgPSBEZWZhdWx0Q2xvY2tTa2V3SW5TZWNvbmRzLFxuICAgICAgICBjbG9ja1NlcnZpY2UgPSBuZXcgQ2xvY2tTZXJ2aWNlKCksXG4gICAgICAgIHVzZXJJbmZvSnd0SXNzdWVyID0gJ09QJyxcbiAgICAgICAgbWVyZ2VDbGFpbXMgPSBmYWxzZSxcbiAgICAgICAgLy8gb3RoZXIgYmVoYXZpb3JcbiAgICAgICAgc3RhdGVTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSgpLFxuICAgICAgICBSZXNwb25zZVZhbGlkYXRvckN0b3IgPSBSZXNwb25zZVZhbGlkYXRvcixcbiAgICAgICAgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IE1ldGFkYXRhU2VydmljZSxcbiAgICAgICAgLy8gZXh0cmEgcXVlcnkgcGFyYW1zXG4gICAgICAgIGV4dHJhUXVlcnlQYXJhbXMgPSB7fSxcbiAgICAgICAgZXh0cmFUb2tlblBhcmFtcyA9IHt9XG4gICAgfSA9IHt9KSB7XG5cbiAgICAgICAgdGhpcy5fYXV0aG9yaXR5ID0gYXV0aG9yaXR5O1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCA9IG1ldGFkYXRhVXJsO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlZWQgPSBtZXRhZGF0YVNlZWQ7XG4gICAgICAgIHRoaXMuX3NpZ25pbmdLZXlzID0gc2lnbmluZ0tleXM7XG5cbiAgICAgICAgdGhpcy5fY2xpZW50X2lkID0gY2xpZW50X2lkO1xuICAgICAgICB0aGlzLl9jbGllbnRfc2VjcmV0ID0gY2xpZW50X3NlY3JldDtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfdHlwZSA9IHJlc3BvbnNlX3R5cGU7XG4gICAgICAgIHRoaXMuX3Njb3BlID0gc2NvcGU7XG4gICAgICAgIHRoaXMuX3JlZGlyZWN0X3VyaSA9IHJlZGlyZWN0X3VyaTtcbiAgICAgICAgdGhpcy5fcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpID0gcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpO1xuICAgICAgICB0aGlzLl9jbGllbnRfYXV0aGVudGljYXRpb24gPSBjbGllbnRfYXV0aGVudGljYXRpb247XG5cbiAgICAgICAgdGhpcy5fcHJvbXB0ID0gcHJvbXB0O1xuICAgICAgICB0aGlzLl9kaXNwbGF5ID0gZGlzcGxheTtcbiAgICAgICAgdGhpcy5fbWF4X2FnZSA9IG1heF9hZ2U7XG4gICAgICAgIHRoaXMuX3VpX2xvY2FsZXMgPSB1aV9sb2NhbGVzO1xuICAgICAgICB0aGlzLl9hY3JfdmFsdWVzID0gYWNyX3ZhbHVlcztcbiAgICAgICAgdGhpcy5fcmVzb3VyY2UgPSByZXNvdXJjZTtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfbW9kZSA9IHJlc3BvbnNlX21vZGU7XG5cbiAgICAgICAgdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMgPSAhIWZpbHRlclByb3RvY29sQ2xhaW1zO1xuICAgICAgICB0aGlzLl9sb2FkVXNlckluZm8gPSAhIWxvYWRVc2VySW5mbztcbiAgICAgICAgdGhpcy5fc3RhbGVTdGF0ZUFnZSA9IHN0YWxlU3RhdGVBZ2U7XG4gICAgICAgIHRoaXMuX2Nsb2NrU2tldyA9IGNsb2NrU2tldztcbiAgICAgICAgdGhpcy5fY2xvY2tTZXJ2aWNlID0gY2xvY2tTZXJ2aWNlO1xuICAgICAgICB0aGlzLl91c2VySW5mb0p3dElzc3VlciA9IHVzZXJJbmZvSnd0SXNzdWVyO1xuICAgICAgICB0aGlzLl9tZXJnZUNsYWltcyA9ICEhbWVyZ2VDbGFpbXM7XG5cbiAgICAgICAgdGhpcy5fc3RhdGVTdG9yZSA9IHN0YXRlU3RvcmU7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRvciA9IG5ldyBSZXNwb25zZVZhbGlkYXRvckN0b3IodGhpcyk7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB0eXBlb2YgZXh0cmFRdWVyeVBhcmFtcyA9PT0gJ29iamVjdCcgPyBleHRyYVF1ZXJ5UGFyYW1zIDoge307XG4gICAgICAgIHRoaXMuX2V4dHJhVG9rZW5QYXJhbXMgPSB0eXBlb2YgZXh0cmFUb2tlblBhcmFtcyA9PT0gJ29iamVjdCcgPyBleHRyYVRva2VuUGFyYW1zIDoge307XG4gICAgfVxuXG4gICAgLy8gY2xpZW50IGNvbmZpZ1xuICAgIGdldCBjbGllbnRfaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jbGllbnRfaWQ7XG4gICAgfVxuICAgIHNldCBjbGllbnRfaWQodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jbGllbnRfaWQpIHtcbiAgICAgICAgICAgIC8vIG9uZS10aW1lIHNldCBvbmx5XG4gICAgICAgICAgICB0aGlzLl9jbGllbnRfaWQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnRTZXR0aW5ncy5zZXRfY2xpZW50X2lkOiBjbGllbnRfaWQgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImNsaWVudF9pZCBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBjbGllbnRfc2VjcmV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50X3NlY3JldDtcbiAgICB9XG4gICAgZ2V0IHJlc3BvbnNlX3R5cGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNwb25zZV90eXBlO1xuICAgIH1cbiAgICBnZXQgc2NvcGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zY29wZTtcbiAgICB9XG4gICAgZ2V0IHJlZGlyZWN0X3VyaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZGlyZWN0X3VyaTtcbiAgICB9XG4gICAgZ2V0IHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICB9XG4gICAgZ2V0IGNsaWVudF9hdXRoZW50aWNhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudF9hdXRoZW50aWNhdGlvbjtcbiAgICB9XG4gICAgXG5cbiAgICAvLyBvcHRpb25hbCBwcm90b2NvbCBwYXJhbXNcbiAgICBnZXQgcHJvbXB0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbXB0O1xuICAgIH1cbiAgICBnZXQgZGlzcGxheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Rpc3BsYXk7XG4gICAgfVxuICAgIGdldCBtYXhfYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWF4X2FnZTtcbiAgICB9XG4gICAgZ2V0IHVpX2xvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91aV9sb2NhbGVzO1xuICAgIH1cbiAgICBnZXQgYWNyX3ZhbHVlcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Fjcl92YWx1ZXM7XG4gICAgfVxuICAgIGdldCByZXNvdXJjZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc291cmNlO1xuICAgIH1cbiAgICBnZXQgcmVzcG9uc2VfbW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX21vZGU7XG4gICAgfVxuXG5cbiAgICAvLyBtZXRhZGF0YVxuICAgIGdldCBhdXRob3JpdHkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hdXRob3JpdHk7XG4gICAgfVxuICAgIHNldCBhdXRob3JpdHkodmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hdXRob3JpdHkpIHtcbiAgICAgICAgICAgIC8vIG9uZS10aW1lIHNldCBvbmx5XG4gICAgICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIk9pZGNDbGllbnRTZXR0aW5ncy5zZXRfYXV0aG9yaXR5OiBhdXRob3JpdHkgaGFzIGFscmVhZHkgYmVlbiBhc3NpZ25lZC5cIilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eSBoYXMgYWxyZWFkeSBiZWVuIGFzc2lnbmVkLlwiKVxuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBtZXRhZGF0YVVybCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tZXRhZGF0YVVybCkge1xuICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgPSB0aGlzLmF1dGhvcml0eTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsICYmIHRoaXMuX21ldGFkYXRhVXJsLmluZGV4T2YoT2lkY01ldGFkYXRhVXJsUGF0aCkgPCAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21ldGFkYXRhVXJsW3RoaXMuX21ldGFkYXRhVXJsLmxlbmd0aCAtIDFdICE9PSAnLycpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFVcmwgKz0gJy8nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9tZXRhZGF0YVVybCArPSBPaWRjTWV0YWRhdGFVcmxQYXRoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhVXJsO1xuICAgIH1cblxuICAgIC8vIHNldHRhYmxlL2NhY2hhYmxlIG1ldGFkYXRhIHZhbHVlc1xuICAgIGdldCBtZXRhZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhO1xuICAgIH1cbiAgICBzZXQgbWV0YWRhdGEodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fbWV0YWRhdGEgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhU2VlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VlZDtcbiAgICB9XG4gICAgc2V0IG1ldGFkYXRhU2VlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlZWQgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBnZXQgc2lnbmluZ0tleXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5nS2V5cztcbiAgICB9XG4gICAgc2V0IHNpZ25pbmdLZXlzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX3NpZ25pbmdLZXlzID0gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gYmVoYXZpb3IgZmxhZ3NcbiAgICBnZXQgZmlsdGVyUHJvdG9jb2xDbGFpbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9maWx0ZXJQcm90b2NvbENsYWltcztcbiAgICB9XG4gICAgZ2V0IGxvYWRVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VySW5mbztcbiAgICB9XG4gICAgZ2V0IHN0YWxlU3RhdGVBZ2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGFsZVN0YXRlQWdlO1xuICAgIH1cbiAgICBnZXQgY2xvY2tTa2V3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTa2V3O1xuICAgIH1cbiAgICBnZXQgdXNlckluZm9Kd3RJc3N1ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mb0p3dElzc3VlcjtcbiAgICB9XG4gICAgZ2V0IG1lcmdlQ2xhaW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWVyZ2VDbGFpbXM7XG4gICAgfVxuICAgIFxuICAgIGdldCBzdGF0ZVN0b3JlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVTdG9yZTtcbiAgICB9XG4gICAgZ2V0IHZhbGlkYXRvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRvcjtcbiAgICB9XG4gICAgZ2V0IG1ldGFkYXRhU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZTtcbiAgICB9XG5cbiAgICAvLyBleHRyYSBxdWVyeSBwYXJhbXNcbiAgICBnZXQgZXh0cmFRdWVyeVBhcmFtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXM7XG4gICAgfVxuICAgIHNldCBleHRyYVF1ZXJ5UGFyYW1zKHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKXtcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB2YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2V4dHJhUXVlcnlQYXJhbXMgPSB7fTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGV4dHJhIHRva2VuIHBhcmFtc1xuICAgIGdldCBleHRyYVRva2VuUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0cmFUb2tlblBhcmFtcztcbiAgICB9XG4gICAgc2V0IGV4dHJhVG9rZW5QYXJhbXModmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpe1xuICAgICAgICAgICAgdGhpcy5fZXh0cmFUb2tlblBhcmFtcyA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fZXh0cmFUb2tlblBhcmFtcyA9IHt9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2V0IHRoZSB0aW1lXG4gICAgZ2V0RXBvY2hUaW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvY2tTZXJ2aWNlLmdldEVwb2NoVGltZSgpO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IFBvcHVwV2luZG93IH0gZnJvbSAnLi9Qb3B1cFdpbmRvdy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cE5hdmlnYXRvciB7XG5cbiAgICBwcmVwYXJlKHBhcmFtcykge1xuICAgICAgICBsZXQgcG9wdXAgPSBuZXcgUG9wdXBXaW5kb3cocGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwb3B1cCk7XG4gICAgfVxuXG4gICAgY2FsbGJhY2sodXJsLCBrZWVwT3BlbiwgZGVsaW1pdGVyKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwTmF2aWdhdG9yLmNhbGxiYWNrXCIpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXIodXJsLCBrZWVwT3BlbiwgZGVsaW1pdGVyKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5cbmNvbnN0IENoZWNrRm9yUG9wdXBDbG9zZWRJbnRlcnZhbCA9IDUwMDtcbmNvbnN0IERlZmF1bHRQb3B1cEZlYXR1cmVzID0gJ2xvY2F0aW9uPW5vLHRvb2xiYXI9bm8sd2lkdGg9NTAwLGhlaWdodD01MDAsbGVmdD0xMDAsdG9wPTEwMDsnO1xuLy9jb25zdCBEZWZhdWx0UG9wdXBGZWF0dXJlcyA9ICdsb2NhdGlvbj1ubyx0b29sYmFyPW5vLHdpZHRoPTUwMCxoZWlnaHQ9NTAwLGxlZnQ9MTAwLHRvcD0xMDA7cmVzaXphYmxlPXllcyc7XG5cbmNvbnN0IERlZmF1bHRQb3B1cFRhcmdldCA9IFwiX2JsYW5rXCI7XG5cbmV4cG9ydCBjbGFzcyBQb3B1cFdpbmRvdyB7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXMpIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0ID0gcmVqZWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgdGFyZ2V0ID0gcGFyYW1zLnBvcHVwV2luZG93VGFyZ2V0IHx8IERlZmF1bHRQb3B1cFRhcmdldDtcbiAgICAgICAgbGV0IGZlYXR1cmVzID0gcGFyYW1zLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgRGVmYXVsdFBvcHVwRmVhdHVyZXM7XG5cbiAgICAgICAgdGhpcy5fcG9wdXAgPSB3aW5kb3cub3BlbignJywgdGFyZ2V0LCBmZWF0dXJlcyk7XG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUG9wdXBXaW5kb3cuY3RvcjogcG9wdXAgc3VjY2Vzc2Z1bGx5IGNyZWF0ZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9jaGVja0ZvclBvcHVwQ2xvc2VkVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZC5iaW5kKHRoaXMpLCBDaGVja0ZvclBvcHVwQ2xvc2VkSW50ZXJ2YWwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHByb21pc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICAgIH1cblxuICAgIG5hdmlnYXRlKHBhcmFtcykge1xuICAgICAgICBpZiAoIXRoaXMuX3BvcHVwKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBFcnJvciBvcGVuaW5nIHBvcHVwIHdpbmRvd1wiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghcGFyYW1zIHx8ICFwYXJhbXMudXJsKSB7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBubyB1cmwgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihcIk5vIHVybCBwcm92aWRlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93Lm5hdmlnYXRlOiBTZXR0aW5nIFVSTCBpbiBwb3B1cFwiKTtcblxuICAgICAgICAgICAgdGhpcy5faWQgPSBwYXJhbXMuaWQ7XG4gICAgICAgICAgICBpZiAodGhpcy5faWQpIHtcbiAgICAgICAgICAgICAgICB3aW5kb3dbXCJwb3B1cENhbGxiYWNrX1wiICsgcGFyYW1zLmlkXSA9IHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3BvcHVwLmZvY3VzKCk7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cC53aW5kb3cubG9jYXRpb24gPSBwYXJhbXMudXJsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZTtcbiAgICB9XG5cbiAgICBfc3VjY2VzcyhkYXRhKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrOiBTdWNjZXNzZnVsIHJlc3BvbnNlIGZyb20gcG9wdXAgd2luZG93XCIpO1xuXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZShkYXRhKTtcbiAgICB9XG4gICAgX2Vycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgTG9nLmVycm9yKFwiUG9wdXBXaW5kb3cuZXJyb3I6IFwiLCBtZXNzYWdlKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuX2NsZWFudXAoKTtcbiAgICAgICAgdGhpcy5fcmVqZWN0KG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xuICAgIH1cblxuICAgIF9jbGVhbnVwKGtlZXBPcGVuKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNsZWFudXBcIik7XG5cbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGb3JQb3B1cENsb3NlZFRpbWVyID0gbnVsbDtcblxuICAgICAgICBkZWxldGUgd2luZG93W1wicG9wdXBDYWxsYmFja19cIiArIHRoaXMuX2lkXTtcblxuICAgICAgICBpZiAodGhpcy5fcG9wdXAgJiYgIWtlZXBPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cC5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BvcHVwID0gbnVsbDtcbiAgICB9XG5cbiAgICBfY2hlY2tGb3JQb3B1cENsb3NlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9wb3B1cCB8fCB0aGlzLl9wb3B1cC5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKFwiUG9wdXAgd2luZG93IGNsb3NlZFwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jYWxsYmFjayh1cmwsIGtlZXBPcGVuKSB7XG4gICAgICAgIHRoaXMuX2NsZWFudXAoa2VlcE9wZW4pO1xuXG4gICAgICAgIGlmICh1cmwpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlBvcHVwV2luZG93LmNhbGxiYWNrIHN1Y2Nlc3NcIik7XG4gICAgICAgICAgICB0aGlzLl9zdWNjZXNzKHsgdXJsOiB1cmwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5jYWxsYmFjazogSW52YWxpZCByZXNwb25zZSBmcm9tIHBvcHVwXCIpO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoXCJJbnZhbGlkIHJlc3BvbnNlIGZyb20gcG9wdXBcIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgbm90aWZ5T3BlbmVyKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcikge1xuICAgICAgICBpZiAod2luZG93Lm9wZW5lcikge1xuICAgICAgICAgICAgdXJsID0gdXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gVXJsVXRpbGl0eS5wYXJzZVVybEZyYWdtZW50KHVybCwgZGVsaW1pdGVyKTtcblxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gXCJwb3B1cENhbGxiYWNrX1wiICsgZGF0YS5zdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gd2luZG93Lm9wZW5lcltuYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJQb3B1cFdpbmRvdy5ub3RpZnlPcGVuZXI6IHBhc3NpbmcgdXJsIG1lc3NhZ2UgdG8gb3BlbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodXJsLCBrZWVwT3Blbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gbWF0Y2hpbmcgY2FsbGJhY2sgZm91bmQgb24gb3BlbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2cud2FybihcIlBvcHVwV2luZG93Lm5vdGlmeU9wZW5lcjogbm8gc3RhdGUgZm91bmQgaW4gcmVzcG9uc2UgdXJsXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUG9wdXBXaW5kb3cubm90aWZ5T3BlbmVyOiBubyB3aW5kb3cub3BlbmVyLiBDYW4ndCBjb21wbGV0ZSBub3RpZmljYXRpb24uXCIpO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgY2xhc3MgUmVkaXJlY3ROYXZpZ2F0b3Ige1xuXG4gICAgcHJlcGFyZSgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgICB9XG5cbiAgICBuYXZpZ2F0ZShwYXJhbXMpIHtcbiAgICAgICAgaWYgKCFwYXJhbXMgfHwgIXBhcmFtcy51cmwpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlZGlyZWN0TmF2aWdhdG9yLm5hdmlnYXRlOiBObyB1cmwgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gdXJsIHByb3ZpZGVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJhbXMudXNlUmVwbGFjZVRvTmF2aWdhdGUpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHBhcmFtcy51cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uID0gcGFyYW1zLnVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICBnZXQgdXJsKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgTWV0YWRhdGFTZXJ2aWNlIH0gZnJvbSAnLi9NZXRhZGF0YVNlcnZpY2UuanMnO1xuaW1wb3J0IHsgVXNlckluZm9TZXJ2aWNlIH0gZnJvbSAnLi9Vc2VySW5mb1NlcnZpY2UuanMnO1xuaW1wb3J0IHsgVG9rZW5DbGllbnQgfSBmcm9tICcuL1Rva2VuQ2xpZW50LmpzJztcbmltcG9ydCB7IEVycm9yUmVzcG9uc2UgfSBmcm9tICcuL0Vycm9yUmVzcG9uc2UuanMnO1xuaW1wb3J0IHsgSm9zZVV0aWwgfSBmcm9tICcuL0pvc2VVdGlsLmpzJztcblxuY29uc3QgUHJvdG9jb2xDbGFpbXMgPSBbXCJub25jZVwiLCBcImF0X2hhc2hcIiwgXCJpYXRcIiwgXCJuYmZcIiwgXCJleHBcIiwgXCJhdWRcIiwgXCJpc3NcIiwgXCJjX2hhc2hcIl07XG5cbmV4cG9ydCBjbGFzcyBSZXNwb25zZVZhbGlkYXRvciB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncywgXG4gICAgICAgIE1ldGFkYXRhU2VydmljZUN0b3IgPSBNZXRhZGF0YVNlcnZpY2UsXG4gICAgICAgIFVzZXJJbmZvU2VydmljZUN0b3IgPSBVc2VySW5mb1NlcnZpY2UsIFxuICAgICAgICBqb3NlVXRpbCA9IEpvc2VVdGlsLFxuICAgICAgICBUb2tlbkNsaWVudEN0b3IgPSBUb2tlbkNsaWVudCkge1xuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5jdG9yOiBObyBzZXR0aW5ncyBwYXNzZWQgdG8gUmVzcG9uc2VWYWxpZGF0b3JcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzZXR0aW5nc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3NldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcbiAgICAgICAgdGhpcy5fdXNlckluZm9TZXJ2aWNlID0gbmV3IFVzZXJJbmZvU2VydmljZUN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9qb3NlVXRpbCA9IGpvc2VVdGlsO1xuICAgICAgICB0aGlzLl90b2tlbkNsaWVudCA9IG5ldyBUb2tlbkNsaWVudEN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgIH1cblxuICAgIHZhbGlkYXRlU2lnbmluUmVzcG9uc2Uoc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2VcIik7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NTaWduaW5QYXJhbXMoc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHN0YXRlIHByb2Nlc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbmluUmVzcG9uc2U6IHRva2VucyB2YWxpZGF0ZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NDbGFpbXMoc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWduaW5SZXNwb25zZTogY2xhaW1zIHByb2Nlc3NlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhbGlkYXRlU2lnbm91dFJlc3BvbnNlKHN0YXRlLCByZXNwb25zZSkge1xuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci52YWxpZGF0ZVNpZ25vdXRSZXNwb25zZTogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcbiAgICAgICAgLy8gYW5kIHNldCBpdCBpbnRvIHRoZSByZXNwb25zZSBzbyBjYWxsZXJzIGNhbiBnZXQgdGhlaXIgc3RhdGVcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLnZhbGlkYXRlU2lnbm91dFJlc3BvbnNlOiBzdGF0ZSB2YWxpZGF0ZWRcIik7XG4gICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcblxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2VWYWxpZGF0b3IudmFsaWRhdGVTaWdub3V0UmVzcG9uc2U6IFJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9wcm9jZXNzU2lnbmluUGFyYW1zKHN0YXRlLCByZXNwb25zZSkge1xuICAgICAgICBpZiAoc3RhdGUuaWQgIT09IHJlc3BvbnNlLnN0YXRlKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogU3RhdGUgZG9lcyBub3QgbWF0Y2hcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiU3RhdGUgZG9lcyBub3QgbWF0Y2hcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5jbGllbnRfaWQpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBObyBjbGllbnRfaWQgb24gc3RhdGVcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gY2xpZW50X2lkIG9uIHN0YXRlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3RhdGUuYXV0aG9yaXR5KSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogTm8gYXV0aG9yaXR5IG9uIHN0YXRlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGF1dGhvcml0eSBvbiBzdGF0ZVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIGFsbG93cyB0aGUgYXV0aG9yaXR5IHRvIGJlIGxvYWRlZCBmcm9tIHRoZSBzaWduaW4gc3RhdGVcbiAgICAgICAgaWYgKCF0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHRpbmdzLmF1dGhvcml0eSA9IHN0YXRlLmF1dGhvcml0eTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbnN1cmUgd2UncmUgdXNpbmcgdGhlIGNvcnJlY3QgYXV0aG9yaXR5IGlmIHRoZSBhdXRob3JpdHkgaXMgbm90IGxvYWRlZCBmcm9tIHNpZ25pbiBzdGF0ZVxuICAgICAgICBlbHNlIGlmICh0aGlzLl9zZXR0aW5ncy5hdXRob3JpdHkgJiYgdGhpcy5fc2V0dGluZ3MuYXV0aG9yaXR5ICE9PSBzdGF0ZS5hdXRob3JpdHkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBhdXRob3JpdHkgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhdXRob3JpdHkgbWlzbWF0Y2ggb24gc2V0dGluZ3MgdnMuIHNpZ25pbiBzdGF0ZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBhbGxvd3MgdGhlIGNsaWVudF9pZCB0byBiZSBsb2FkZWQgZnJvbSB0aGUgc2lnbmluIHN0YXRlXG4gICAgICAgIGlmICghdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkKSB7XG4gICAgICAgICAgICB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQgPSBzdGF0ZS5jbGllbnRfaWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZW5zdXJlIHdlJ3JlIHVzaW5nIHRoZSBjb3JyZWN0IGNsaWVudF9pZCBpZiB0aGUgY2xpZW50X2lkIGlzIG5vdCBsb2FkZWQgZnJvbSBzaWduaW4gc3RhdGVcbiAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkICYmIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCAhPT0gc3RhdGUuY2xpZW50X2lkKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc1NpZ25pblBhcmFtczogY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiY2xpZW50X2lkIG1pc21hdGNoIG9uIHNldHRpbmdzIHZzLiBzaWduaW4gc3RhdGVcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm93IHRoYXQgd2Uga25vdyB0aGUgc3RhdGUgbWF0Y2hlcywgdGFrZSB0aGUgc3RvcmVkIGRhdGFcbiAgICAgICAgLy8gYW5kIHNldCBpdCBpbnRvIHRoZSByZXNwb25zZSBzbyBjYWxsZXJzIGNhbiBnZXQgdGhlaXIgc3RhdGVcbiAgICAgICAgLy8gdGhpcyBpcyBpbXBvcnRhbnQgZm9yIGJvdGggc3VjY2VzcyAmIGVycm9yIG91dGNvbWVzXG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBzdGF0ZSB2YWxpZGF0ZWRcIik7XG4gICAgICAgIHJlc3BvbnNlLnN0YXRlID0gc3RhdGUuZGF0YTtcblxuICAgICAgICBpZiAocmVzcG9uc2UuZXJyb3IpIHtcbiAgICAgICAgICAgIExvZy53YXJuKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IFJlc3BvbnNlIHdhcyBlcnJvclwiLCByZXNwb25zZS5lcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yUmVzcG9uc2UocmVzcG9uc2UpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5ub25jZSAmJiAhcmVzcG9uc2UuaWRfdG9rZW4pIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBFeHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW4gaW4gcmVzcG9uc2VcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5ub25jZSAmJiByZXNwb25zZS5pZF90b2tlbikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IE5vdCBleHBlY3RpbmcgaWRfdG9rZW4gaW4gcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBpZF90b2tlbiBpbiByZXNwb25zZVwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdGUuY29kZV92ZXJpZmllciAmJiAhcmVzcG9uc2UuY29kZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NTaWduaW5QYXJhbXM6IEV4cGVjdGluZyBjb2RlIGluIHJlc3BvbnNlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGNvZGUgaW4gcmVzcG9uc2VcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzdGF0ZS5jb2RlX3ZlcmlmaWVyICYmIHJlc3BvbnNlLmNvZGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzU2lnbmluUGFyYW1zOiBOb3QgZXhwZWN0aW5nIGNvZGUgaW4gcmVzcG9uc2VcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiVW5leHBlY3RlZCBjb2RlIGluIHJlc3BvbnNlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcmVzcG9uc2Uuc2NvcGUpIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3Mgbm8gc2NvcGUgb24gdGhlIHJlc3BvbnNlLCB0aGVuIGFzc3VtZSBhbGwgc2NvcGVzIGdyYW50ZWQgKHBlci1zcGVjKSBhbmQgY29weSBvdmVyIHNjb3BlcyBmcm9tIG9yaWdpbmFsIHJlcXVlc3RcbiAgICAgICAgICAgIHJlc3BvbnNlLnNjb3BlID0gc3RhdGUuc2NvcGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICB9XG5cbiAgICBfcHJvY2Vzc0NsYWltcyhzdGF0ZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmlzT3BlbklkQ29ubmVjdCkge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDbGFpbXM6IHJlc3BvbnNlIGlzIE9JREMsIHByb2Nlc3NpbmcgY2xhaW1zXCIpO1xuXG4gICAgICAgICAgICByZXNwb25zZS5wcm9maWxlID0gdGhpcy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMocmVzcG9uc2UucHJvZmlsZSk7XG5cbiAgICAgICAgICAgIGlmIChzdGF0ZS5za2lwVXNlckluZm8gIT09IHRydWUgJiYgdGhpcy5fc2V0dGluZ3MubG9hZFVzZXJJbmZvICYmIHJlc3BvbnNlLmFjY2Vzc190b2tlbikge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBsb2FkaW5nIHVzZXIgaW5mb1wiKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VySW5mb1NlcnZpY2UuZ2V0Q2xhaW1zKHJlc3BvbnNlLmFjY2Vzc190b2tlbikudGhlbihjbGFpbXMgPT4ge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogdXNlciBpbmZvIGNsYWltcyByZWNlaXZlZCBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludFwiKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2xhaW1zLnN1YiAhPT0gcmVzcG9uc2UucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBzdWIgZnJvbSB1c2VyIGluZm8gZW5kcG9pbnQgZG9lcyBub3QgbWF0Y2ggc3ViIGluIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInN1YiBmcm9tIHVzZXIgaW5mbyBlbmRwb2ludCBkb2VzIG5vdCBtYXRjaCBzdWIgaW4gaWRfdG9rZW5cIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IHRoaXMuX21lcmdlQ2xhaW1zKHJlc3BvbnNlLnByb2ZpbGUsIGNsYWltcyk7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiB1c2VyIGluZm8gY2xhaW1zIHJlY2VpdmVkLCB1cGRhdGVkIHByb2ZpbGU6XCIsIHJlc3BvbnNlLnByb2ZpbGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ2xhaW1zOiBub3QgbG9hZGluZyB1c2VyIGluZm9cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fcHJvY2Vzc0NsYWltczogcmVzcG9uc2UgaXMgbm90IE9JREMsIG5vdCBwcm9jZXNzaW5nIGNsYWltc1wiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9tZXJnZUNsYWltcyhjbGFpbXMxLCBjbGFpbXMyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFpbXMxKTtcblxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIGNsYWltczIpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBjbGFpbXMyW25hbWVdO1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlcykpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbdmFsdWVzXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFyZXN1bHRbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0W25hbWVdKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0W25hbWVdLmluZGV4T2YodmFsdWUpIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdFtuYW1lXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdGhpcy5fc2V0dGluZ3MubWVyZ2VDbGFpbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtuYW1lXSA9IHRoaXMuX21lcmdlQ2xhaW1zKHJlc3VsdFtuYW1lXSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W25hbWVdID0gW3Jlc3VsdFtuYW1lXSwgdmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBfZmlsdGVyUHJvdG9jb2xDbGFpbXMoY2xhaW1zKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9maWx0ZXJQcm90b2NvbENsYWltcywgaW5jb21pbmcgY2xhaW1zOlwiLCBjbGFpbXMpO1xuXG4gICAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuYXNzaWduKHt9LCBjbGFpbXMpO1xuXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5fZmlsdGVyUHJvdG9jb2xDbGFpbXMpIHtcbiAgICAgICAgICAgIFByb3RvY29sQ2xhaW1zLmZvckVhY2godHlwZSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHJlc3VsdFt0eXBlXTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyUHJvdG9jb2xDbGFpbXM6IHByb3RvY29sIGNsYWltcyBmaWx0ZXJlZFwiLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlclByb3RvY29sQ2xhaW1zOiBwcm90b2NvbCBjbGFpbXMgbm90IGZpbHRlcmVkXCIpXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIF92YWxpZGF0ZVRva2VucyhzdGF0ZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmNvZGUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZVRva2VuczogVmFsaWRhdGluZyBjb2RlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Byb2Nlc3NDb2RlKHN0YXRlLCByZXNwb25zZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzcG9uc2UuaWRfdG9rZW4pIHtcbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVUb2tlbnM6IFZhbGlkYXRpbmcgaWRfdG9rZW4gYW5kIGFjY2Vzc190b2tlblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBWYWxpZGF0aW5nIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbGlkYXRlSWRUb2tlbihzdGF0ZSwgcmVzcG9uc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlVG9rZW5zOiBObyBjb2RlIHRvIHByb2Nlc3Mgb3IgaWRfdG9rZW4gdG8gdmFsaWRhdGVcIik7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzcG9uc2UpO1xuICAgIH1cblxuICAgIF9wcm9jZXNzQ29kZShzdGF0ZSwgcmVzcG9uc2UpIHtcbiAgICAgICAgdmFyIHJlcXVlc3QgPSB7XG4gICAgICAgICAgICBjbGllbnRfaWQ6IHN0YXRlLmNsaWVudF9pZCxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IHN0YXRlLmNsaWVudF9zZWNyZXQsXG4gICAgICAgICAgICBjb2RlIDogcmVzcG9uc2UuY29kZSxcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogc3RhdGUucmVkaXJlY3RfdXJpLFxuICAgICAgICAgICAgY29kZV92ZXJpZmllcjogc3RhdGUuY29kZV92ZXJpZmllclxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChzdGF0ZS5leHRyYVRva2VuUGFyYW1zICYmIHR5cGVvZihzdGF0ZS5leHRyYVRva2VuUGFyYW1zKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocmVxdWVzdCwgc3RhdGUuZXh0cmFUb2tlblBhcmFtcyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLl90b2tlbkNsaWVudC5leGNoYW5nZUNvZGUocmVxdWVzdCkudGhlbih0b2tlblJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yKHZhciBrZXkgaW4gdG9rZW5SZXNwb25zZSkge1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlW2tleV0gPSB0b2tlblJlc3BvbnNlW2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXNwb25zZS5pZF90b2tlbikge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl9wcm9jZXNzQ29kZTogdG9rZW4gcmVzcG9uc2Ugc3VjY2Vzc2Z1bCwgcHJvY2Vzc2luZyBpZF90b2tlblwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVJZFRva2VuQXR0cmlidXRlcyhzdGF0ZSwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3Byb2Nlc3NDb2RlOiB0b2tlbiByZXNwb25zZSBzdWNjZXNzZnVsLCByZXR1cm5pbmcgcmVzcG9uc2VcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXMoc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0SXNzdWVyKCkudGhlbihpc3N1ZXIgPT4ge1xuXG4gICAgICAgICAgICBsZXQgYXVkaWVuY2UgPSBzdGF0ZS5jbGllbnRfaWQ7XG4gICAgICAgICAgICBsZXQgY2xvY2tTa2V3SW5TZWNvbmRzID0gdGhpcy5fc2V0dGluZ3MuY2xvY2tTa2V3O1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbkF0dHJpYnV0ZXM6IFZhbGlkYWluZyBKV1QgYXR0cmlidXRlczsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLCBjbG9ja1NrZXdJblNlY29uZHMpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3MuZ2V0RXBvY2hUaW1lKCkudGhlbihub3cgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9qb3NlVXRpbC52YWxpZGF0ZUp3dEF0dHJpYnV0ZXMocmVzcG9uc2UuaWRfdG9rZW4sIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tld0luU2Vjb25kcywgbm93KS50aGVuKHBheWxvYWQgPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUubm9uY2UgJiYgc3RhdGUubm9uY2UgIT09IHBheWxvYWQubm9uY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzOiBJbnZhbGlkIG5vbmNlIGluIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW5BdHRyaWJ1dGVzOiBObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBzdWIgcHJlc2VudCBpbiBpZF90b2tlblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UucHJvZmlsZSA9IHBheWxvYWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfdmFsaWRhdGVJZFRva2VuQW5kQWNjZXNzVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKS50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92YWxpZGF0ZUFjY2Vzc1Rva2VuKHJlc3BvbnNlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2dldFNpZ25pbmdLZXlGb3JKd3Qoand0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0U2lnbmluZ0tleXMoKS50aGVuKGtleXMgPT4ge1xuICAgICAgICAgICAgY29uc3Qga2lkID0gand0LmhlYWRlci5raWQ7XG4gICAgICAgICAgICBpZiAoIWtleXMpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBzaWduaW5nIGtleXMgZnJvbSBtZXRhZGF0YVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lnbmluZyBrZXlzIGZyb20gbWV0YWRhdGFcIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBSZWNlaXZlZCBzaWduaW5nIGtleXNcIik7XG4gICAgICAgICAgICBsZXQga2V5O1xuICAgICAgICAgICAgaWYgKCFraWQpIHtcbiAgICAgICAgICAgICAgICBrZXlzID0gdGhpcy5fZmlsdGVyQnlBbGcoa2V5cywgand0LmhlYWRlci5hbGcpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBObyBraWQgZm91bmQgaW4gaWRfdG9rZW4gYW5kIG1vcmUgdGhhbiBvbmUga2V5IGZvdW5kIGluIG1ldGFkYXRhXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8ga2lkIGlzIG1hbmRhdG9yeSBvbmx5IHdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGtleXMgaW4gdGhlIHJlZmVyZW5jZWQgSldLIFNldCBkb2N1bWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaHR0cDovL29wZW5pZC5uZXQvc3BlY3Mvb3BlbmlkLWNvbm5lY3QtY29yZS0xXzAuaHRtbCNTaWduaW5nXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5LmtpZCA9PT0ga2lkO1xuICAgICAgICAgICAgICAgIH0pWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShrZXkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0U2lnbmluZ0tleUZvckp3dFdpdGhTaW5nbGVSZXRyeShqd3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFNpZ25pbmdLZXlGb3JKd3Qoand0KS50aGVuKGtleSA9PiB7XG4gICAgICAgICAgICAvLyBSZWZyZXNoaW5nIHNpZ25pbmdLZXlzIGlmIG5vIHN1aXRhYmxlIHZlcmlmaWNhdGlvbiBrZXkgaXMgcHJlc2VudCBmb3IgZ2l2ZW4gand0IGhlYWRlci5cbiAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgLy8gc2V0IHRvIHVuZGVmaW5lZCwgdG8gdHJpZ2dlciBuZXR3b3JrIGNhbGwgdG8gandrc191cmkuXG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLnJlc2V0U2lnbmluZ0tleXMoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0U2lnbmluZ0tleUZvckp3dChqd3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZUlkVG9rZW4oc3RhdGUsIHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghc3RhdGUubm9uY2UpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIG5vbmNlIG9uIHN0YXRlXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIG5vbmNlIG9uIHN0YXRlXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBqd3QgPSB0aGlzLl9qb3NlVXRpbC5wYXJzZUp3dChyZXNwb25zZS5pZF90b2tlbik7XG4gICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyIHx8ICFqd3QucGF5bG9hZCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlSWRUb2tlbjogRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIsIGp3dCk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHBhcnNlIGlkX3Rva2VuXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzdGF0ZS5ub25jZSAhPT0gand0LnBheWxvYWQubm9uY2UpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IEludmFsaWQgbm9uY2UgaW4gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiSW52YWxpZCBub25jZSBpbiBpZF90b2tlblwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldElzc3VlcigpLnRoZW4oaXNzdWVyID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IFJlY2VpdmVkIGlzc3VlclwiKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRTaWduaW5nS2V5Rm9ySnd0V2l0aFNpbmdsZVJldHJ5KGp3dCkudGhlbihrZXkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbGV0IGF1ZGllbmNlID0gc3RhdGUuY2xpZW50X2lkO1xuXG4gICAgICAgICAgICAgICAgbGV0IGNsb2NrU2tld0luU2Vjb25kcyA9IHRoaXMuX3NldHRpbmdzLmNsb2NrU2tldztcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVJZFRva2VuOiBWYWxpZGFpbmcgSldUOyB1c2luZyBjbG9jayBza2V3IChpbiBzZWNvbmRzKSBvZjogXCIsIGNsb2NrU2tld0luU2Vjb25kcyk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fam9zZVV0aWwudmFsaWRhdGVKd3QocmVzcG9uc2UuaWRfdG9rZW4sIGtleSwgaXNzdWVyLCBhdWRpZW5jZSwgY2xvY2tTa2V3SW5TZWNvbmRzKS50aGVuKCgpPT57XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IEpXVCB2YWxpZGF0aW9uIHN1Y2Nlc3NmdWxcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFqd3QucGF5bG9hZC5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUlkVG9rZW46IE5vIHN1YiBwcmVzZW50IGluIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHN1YiBwcmVzZW50IGluIGlkX3Rva2VuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLnByb2ZpbGUgPSBqd3QucGF5bG9hZDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX2ZpbHRlckJ5QWxnKGtleXMsIGFsZyl7XG4gICAgICAgIHZhciBrdHkgPSBudWxsO1xuICAgICAgICBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJSU1wiKSkge1xuICAgICAgICAgICAga3R5ID0gXCJSU0FcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGcuc3RhcnRzV2l0aChcIlBTXCIpKSB7XG4gICAgICAgICAgICBrdHkgPSBcIlBTXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJFU1wiKSkge1xuICAgICAgICAgICAga3R5ID0gXCJFQ1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlckJ5QWxnOiBhbGcgbm90IHN1cHBvcnRlZDogXCIsIGFsZyk7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cblxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fZmlsdGVyQnlBbGc6IExvb2tpbmcgZm9yIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHkpO1xuXG4gICAgICAgIGtleXMgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleS5rdHkgPT09IGt0eTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiUmVzcG9uc2VWYWxpZGF0b3IuX2ZpbHRlckJ5QWxnOiBOdW1iZXIgb2Yga2V5cyB0aGF0IG1hdGNoIGt0eTogXCIsIGt0eSwga2V5cy5sZW5ndGgpO1xuXG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZUFjY2Vzc1Rva2VuKHJlc3BvbnNlKSB7XG4gICAgICAgIGlmICghcmVzcG9uc2UucHJvZmlsZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIHByb2ZpbGUgbG9hZGVkIGZyb20gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gcHJvZmlsZSBsb2FkZWQgZnJvbSBpZF90b2tlblwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IE5vIGF0X2hhc2ggaW4gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gYXRfaGFzaCBpbiBpZF90b2tlblwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlc3BvbnNlLmlkX3Rva2VuKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogTm8gaWRfdG9rZW5cIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gaWRfdG9rZW5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGp3dCA9IHRoaXMuX2pvc2VVdGlsLnBhcnNlSnd0KHJlc3BvbnNlLmlkX3Rva2VuKTtcbiAgICAgICAgaWYgKCFqd3QgfHwgIWp3dC5oZWFkZXIpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIiwgand0KTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhc2hBbGcgPSBqd3QuaGVhZGVyLmFsZztcbiAgICAgICAgaWYgKCFoYXNoQWxnIHx8IGhhc2hBbGcubGVuZ3RoICE9PSA1KSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogVW5zdXBwb3J0ZWQgYWxnOlwiLCBoYXNoQWxnKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGhhc2hCaXRzID0gaGFzaEFsZy5zdWJzdHIoMiwgMyk7XG4gICAgICAgIGlmICghaGFzaEJpdHMpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBVbnN1cHBvcnRlZCBhbGc6XCIsIGhhc2hBbGcsIGhhc2hCaXRzKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBhbGc6IFwiICsgaGFzaEFsZykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFzaEJpdHMgPSBwYXJzZUludChoYXNoQml0cyk7XG4gICAgICAgIGlmIChoYXNoQml0cyAhPT0gMjU2ICYmIGhhc2hCaXRzICE9PSAzODQgJiYgaGFzaEJpdHMgIT09IDUxMikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IFVuc3VwcG9ydGVkIGFsZzpcIiwgaGFzaEFsZywgaGFzaEJpdHMpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGFsZzogXCIgKyBoYXNoQWxnKSk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc2hhID0gXCJzaGFcIiArIGhhc2hCaXRzO1xuICAgICAgICB2YXIgaGFzaCA9IHRoaXMuX2pvc2VVdGlsLmhhc2hTdHJpbmcocmVzcG9uc2UuYWNjZXNzX3Rva2VuLCBzaGEpO1xuICAgICAgICBpZiAoIWhhc2gpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlJlc3BvbnNlVmFsaWRhdG9yLl92YWxpZGF0ZUFjY2Vzc1Rva2VuOiBhY2Nlc3NfdG9rZW4gaGFzaCBmYWlsZWQ6XCIsIHNoYSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiRmFpbGVkIHRvIHZhbGlkYXRlIGF0X2hhc2hcIikpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxlZnQgPSBoYXNoLnN1YnN0cigwLCBoYXNoLmxlbmd0aCAvIDIpO1xuICAgICAgICB2YXIgbGVmdF9iNjR1ID0gdGhpcy5fam9zZVV0aWwuaGV4VG9CYXNlNjRVcmwobGVmdCk7XG4gICAgICAgIGlmIChsZWZ0X2I2NHUgIT09IHJlc3BvbnNlLnByb2ZpbGUuYXRfaGFzaCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiUmVzcG9uc2VWYWxpZGF0b3IuX3ZhbGlkYXRlQWNjZXNzVG9rZW46IEZhaWxlZCB0byB2YWxpZGF0ZSBhdF9oYXNoXCIsIGxlZnRfYjY0dSwgcmVzcG9uc2UucHJvZmlsZS5hdF9oYXNoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gdmFsaWRhdGUgYXRfaGFzaFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBMb2cuZGVidWcoXCJSZXNwb25zZVZhbGlkYXRvci5fdmFsaWRhdGVBY2Nlc3NUb2tlbjogc3VjY2Vzc1wiKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc3BvbnNlKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBDaGVja1Nlc3Npb25JRnJhbWUgfSBmcm9tICcuL0NoZWNrU2Vzc2lvbklGcmFtZS5qcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTZXNzaW9uTW9uaXRvciB7XG5cbiAgICBjb25zdHJ1Y3Rvcih1c2VyTWFuYWdlciwgQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciA9IENoZWNrU2Vzc2lvbklGcmFtZSwgdGltZXIgPSBHbG9iYWwudGltZXIpIHtcbiAgICAgICAgaWYgKCF1c2VyTWFuYWdlcikge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IuY3RvcjogTm8gdXNlciBtYW5hZ2VyIHBhc3NlZCB0byBTZXNzaW9uTW9uaXRvclwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVzZXJNYW5hZ2VyXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIgPSB1c2VyTWFuYWdlcjtcbiAgICAgICAgdGhpcy5fQ2hlY2tTZXNzaW9uSUZyYW1lQ3RvciA9IENoZWNrU2Vzc2lvbklGcmFtZUN0b3I7XG4gICAgICAgIHRoaXMuX3RpbWVyID0gdGltZXI7XG5cbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZFVzZXJMb2FkZWQodGhpcy5fc3RhcnQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5hZGRVc2VyVW5sb2FkZWQodGhpcy5fc3RvcC5iaW5kKHRoaXMpKTtcblxuICAgICAgICBQcm9taXNlLnJlc29sdmUodGhpcy5fdXNlck1hbmFnZXIuZ2V0VXNlcigpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICAvLyBkb2luZyB0aGlzIG1hbnVhbGx5IGhlcmUgc2luY2UgY2FsbGluZyBnZXRVc2VyIFxuICAgICAgICAgICAgLy8gZG9lc24ndCB0cmlnZ2VyIGxvYWQgZXZlbnQuXG4gICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHVzZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5fc2V0dGluZ3MubW9uaXRvckFub255bW91c1Nlc3Npb24pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXMoKS50aGVuKHNlc3Npb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wVXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGUgOiBzZXNzaW9uLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uc3ViICYmIHNlc3Npb24uc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBVc2VyLnByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBzZXNzaW9uLnN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWQ6IHNlc3Npb24uc2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHRtcFVzZXIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IgY3RvcjogZXJyb3IgZnJvbSBxdWVyeVNlc3Npb25TdGF0dXM6XCIsIGVyci5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yIGN0b3I6IGVycm9yIGZyb20gZ2V0VXNlcjpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICB9KSk7XG4gICAgfVxuXG4gICAgZ2V0IF9zZXR0aW5ncygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLnNldHRpbmdzO1xuICAgIH1cbiAgICBnZXQgX21ldGFkYXRhU2VydmljZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJNYW5hZ2VyLm1ldGFkYXRhU2VydmljZTtcbiAgICB9XG4gICAgZ2V0IF9jbGllbnRfaWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XG4gICAgfVxuICAgIGdldCBfY2hlY2tTZXNzaW9uSW50ZXJ2YWwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZXR0aW5ncy5jaGVja1Nlc3Npb25JbnRlcnZhbDtcbiAgICB9XG4gICAgZ2V0IF9zdG9wQ2hlY2tTZXNzaW9uT25FcnJvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NldHRpbmdzLnN0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xuICAgIH1cblxuICAgIF9zdGFydCh1c2VyKSB7XG4gICAgICAgIGxldCBzZXNzaW9uX3N0YXRlID0gdXNlci5zZXNzaW9uX3N0YXRlO1xuXG4gICAgICAgIGlmIChzZXNzaW9uX3N0YXRlKSB7XG4gICAgICAgICAgICBpZiAodXNlci5wcm9maWxlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3ViID0gdXNlci5wcm9maWxlLnN1YjtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaWQgPSB1c2VyLnByb2ZpbGUuc2lkO1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9zdGFydDogc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbl9zdGF0ZSwgXCIsIHN1YjpcIiwgdGhpcy5fc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaWQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uX3N0YXRlLCBcIiwgYW5vbnltb3VzIHVzZXJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldENoZWNrU2Vzc2lvbklmcmFtZSgpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBJbml0aWFsaXppbmcgY2hlY2sgc2Vzc2lvbiBpZnJhbWVcIilcblxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNsaWVudF9pZCA9IHRoaXMuX2NsaWVudF9pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpbnRlcnZhbCA9IHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0b3BPbkVycm9yID0gdGhpcy5fc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZSA9IG5ldyB0aGlzLl9DaGVja1Nlc3Npb25JRnJhbWVDdG9yKHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyksIGNsaWVudF9pZCwgdXJsLCBpbnRlcnZhbCwgc3RvcE9uRXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUuc3RhcnQoc2Vzc2lvbl9zdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy53YXJuKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBObyBjaGVjayBzZXNzaW9uIGlmcmFtZSBmb3VuZCBpbiB0aGUgbWV0YWRhdGFcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYXRjaCB0byBzdXBwcmVzcyBlcnJvcnMgc2luY2Ugd2UncmUgaW4gbm9uLXByb21pc2UgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiU2Vzc2lvbk1vbml0b3IuX3N0YXJ0OiBFcnJvciBmcm9tIGdldENoZWNrU2Vzc2lvbklmcmFtZTpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0YXJ0KHNlc3Npb25fc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3N0b3AoKSB7XG4gICAgICAgIHRoaXMuX3N1YiA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5fc2lkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmICh0aGlzLl9jaGVja1Nlc3Npb25JRnJhbWUpIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9zdG9wXCIpO1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tTZXNzaW9uSUZyYW1lLnN0b3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9zZXR0aW5ncy5tb25pdG9yQW5vbnltb3VzU2Vzc2lvbikge1xuICAgICAgICAgICAgLy8gdXNpbmcgYSB0aW1lciB0byBkZWxheSByZS1pbml0aWFsaXphdGlvbiB0byBhdm9pZCByYWNlIGNvbmRpdGlvbnMgZHVyaW5nIHNpZ25vdXRcbiAgICAgICAgICAgIGxldCB0aW1lckhhbmRsZSA9IHRoaXMuX3RpbWVyLnNldEludGVydmFsKCgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZXIuY2xlYXJJbnRlcnZhbCh0aW1lckhhbmRsZSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXMoKS50aGVuKHNlc3Npb24gPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgdG1wVXNlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGUgOiBzZXNzaW9uLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlc3Npb24uc3ViICYmIHNlc3Npb24uc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0bXBVc2VyLnByb2ZpbGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViOiBzZXNzaW9uLnN1YixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWQ6IHNlc3Npb24uc2lkXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0KHRtcFVzZXIpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlNlc3Npb25Nb25pdG9yOiBlcnJvciBmcm9tIHF1ZXJ5U2Vzc2lvblN0YXR1czpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9jYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzKCkudGhlbihzZXNzaW9uID0+IHtcbiAgICAgICAgICAgIHZhciByYWlzZUV2ZW50ID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKHNlc3Npb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdWIgPT09IHRoaXMuX3N1Yikge1xuICAgICAgICAgICAgICAgICAgICByYWlzZUV2ZW50ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbklGcmFtZS5zdGFydChzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXNzaW9uLnNpZCA9PT0gdGhpcy5fc2lkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNhbWUgc3ViIHN0aWxsIGxvZ2dlZCBpbiBhdCBPUCwgcmVzdGFydGluZyBjaGVjayBzZXNzaW9uIGlmcmFtZTsgc2Vzc2lvbl9zdGF0ZTpcIiwgc2Vzc2lvbi5zZXNzaW9uX3N0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2FtZSBzdWIgc3RpbGwgbG9nZ2VkIGluIGF0IE9QLCBzZXNzaW9uIHN0YXRlIGhhcyBjaGFuZ2VkLCByZXN0YXJ0aW5nIGNoZWNrIHNlc3Npb24gaWZyYW1lOyBzZXNzaW9uX3N0YXRlOlwiLCBzZXNzaW9uLnNlc3Npb25fc3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IERpZmZlcmVudCBzdWJqZWN0IHNpZ25lZCBpbnRvIE9QOlwiLCBzZXNzaW9uLnN1Yik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBTdWJqZWN0IG5vIGxvbmdlciBzaWduZWQgaW50byBPUFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJhaXNlRXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazogU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOyByYWlzaW5nIHNpZ25lZCBvdXQgZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkT3V0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTZXNzaW9uTW9uaXRvci5fY2FsbGJhY2s6IFNlc3Npb25Nb25pdG9yLl9jYWxsYmFjazsgcmFpc2luZyBzaWduZWQgaW4gZXZlbnRcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5fcmFpc2VVc2VyU2lnbmVkSW4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fc3ViKSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2Vzc2lvbk1vbml0b3IuX2NhbGxiYWNrOiBFcnJvciBjYWxsaW5nIHF1ZXJ5Q3VycmVudFNpZ25pblNlc3Npb247IHJhaXNpbmcgc2lnbmVkIG91dCBldmVudFwiLCBlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5pbXBvcnQgeyBTaWduaW5TdGF0ZSB9IGZyb20gJy4vU2lnbmluU3RhdGUuanMnO1xuXG5leHBvcnQgY2xhc3MgU2lnbmluUmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICAvLyBtYW5kYXRvcnlcbiAgICAgICAgdXJsLCBjbGllbnRfaWQsIHJlZGlyZWN0X3VyaSwgcmVzcG9uc2VfdHlwZSwgc2NvcGUsIGF1dGhvcml0eSxcbiAgICAgICAgLy8gb3B0aW9uYWxcbiAgICAgICAgZGF0YSwgcHJvbXB0LCBkaXNwbGF5LCBtYXhfYWdlLCB1aV9sb2NhbGVzLCBpZF90b2tlbl9oaW50LCBsb2dpbl9oaW50LCBhY3JfdmFsdWVzLCByZXNvdXJjZSwgcmVzcG9uc2VfbW9kZSxcbiAgICAgICAgcmVxdWVzdCwgcmVxdWVzdF91cmksIGV4dHJhUXVlcnlQYXJhbXMsIHJlcXVlc3RfdHlwZSwgY2xpZW50X3NlY3JldCwgZXh0cmFUb2tlblBhcmFtcywgc2tpcFVzZXJJbmZvXG4gICAgfSkge1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lnbmluUmVxdWVzdC5jdG9yOiBObyB1cmwgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY2xpZW50X2lkKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWduaW5SZXF1ZXN0LmN0b3I6IE5vIGNsaWVudF9pZCBwYXNzZWRcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjbGllbnRfaWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZWRpcmVjdF91cmkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVkaXJlY3RfdXJpIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInJlZGlyZWN0X3VyaVwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXJlc3BvbnNlX3R5cGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gcmVzcG9uc2VfdHlwZSBwYXNzZWRcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyZXNwb25zZV90eXBlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2NvcGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gc2NvcGUgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NvcGVcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhdXRob3JpdHkpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlNpZ25pblJlcXVlc3QuY3RvcjogTm8gYXV0aG9yaXR5IHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImF1dGhvcml0eVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBvaWRjID0gU2lnbmluUmVxdWVzdC5pc09pZGMocmVzcG9uc2VfdHlwZSk7XG4gICAgICAgIGxldCBjb2RlID0gU2lnbmluUmVxdWVzdC5pc0NvZGUocmVzcG9uc2VfdHlwZSk7XG5cbiAgICAgICAgaWYgKCFyZXNwb25zZV9tb2RlKSB7XG4gICAgICAgICAgICByZXNwb25zZV9tb2RlID0gU2lnbmluUmVxdWVzdC5pc0NvZGUocmVzcG9uc2VfdHlwZSkgPyBcInF1ZXJ5XCIgOiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTaWduaW5TdGF0ZSh7IG5vbmNlOiBvaWRjLCBcbiAgICAgICAgICAgIGRhdGEsIGNsaWVudF9pZCwgYXV0aG9yaXR5LCByZWRpcmVjdF91cmksIFxuICAgICAgICAgICAgY29kZV92ZXJpZmllcjogY29kZSwgXG4gICAgICAgICAgICByZXF1ZXN0X3R5cGUsIHJlc3BvbnNlX21vZGUsXG4gICAgICAgICAgICBjbGllbnRfc2VjcmV0LCBzY29wZSwgZXh0cmFUb2tlblBhcmFtcywgc2tpcFVzZXJJbmZvIH0pO1xuXG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwiY2xpZW50X2lkXCIsIGNsaWVudF9pZCk7XG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVkaXJlY3RfdXJpXCIsIHJlZGlyZWN0X3VyaSk7XG4gICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicmVzcG9uc2VfdHlwZVwiLCByZXNwb25zZV90eXBlKTtcbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJzY29wZVwiLCBzY29wZSk7XG5cbiAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwgXCJzdGF0ZVwiLCB0aGlzLnN0YXRlLmlkKTtcbiAgICAgICAgaWYgKG9pZGMpIHtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwibm9uY2VcIiwgdGhpcy5zdGF0ZS5ub25jZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZGUpIHtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwiY29kZV9jaGFsbGVuZ2VcIiwgdGhpcy5zdGF0ZS5jb2RlX2NoYWxsZW5nZSk7XG4gICAgICAgICAgICB1cmwgPSBVcmxVdGlsaXR5LmFkZFF1ZXJ5UGFyYW0odXJsLCBcImNvZGVfY2hhbGxlbmdlX21ldGhvZFwiLCBcIlMyNTZcIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3B0aW9uYWwgPSB7IHByb21wdCwgZGlzcGxheSwgbWF4X2FnZSwgdWlfbG9jYWxlcywgaWRfdG9rZW5faGludCwgbG9naW5faGludCwgYWNyX3ZhbHVlcywgcmVzb3VyY2UsIHJlcXVlc3QsIHJlcXVlc3RfdXJpLCByZXNwb25zZV9tb2RlIH07XG4gICAgICAgIGZvcihsZXQga2V5IGluIG9wdGlvbmFsKXtcbiAgICAgICAgICAgIGlmIChvcHRpb25hbFtrZXldKSB7XG4gICAgICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwga2V5LCBvcHRpb25hbFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvcihsZXQga2V5IGluIGV4dHJhUXVlcnlQYXJhbXMpe1xuICAgICAgICAgICAgdXJsID0gVXJsVXRpbGl0eS5hZGRRdWVyeVBhcmFtKHVybCwga2V5LCBleHRyYVF1ZXJ5UGFyYW1zW2tleV0pXG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNPaWRjKHJlc3BvbnNlX3R5cGUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlc3BvbnNlX3R5cGUuc3BsaXQoL1xccysvZykuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtID09PSBcImlkX3Rva2VuXCI7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gISEocmVzdWx0WzBdKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNPQXV0aChyZXNwb25zZV90eXBlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZXNwb25zZV90eXBlLnNwbGl0KC9cXHMrL2cpLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICByZXR1cm4gaXRlbSA9PT0gXCJ0b2tlblwiO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XG4gICAgfVxuICAgIFxuICAgIHN0YXRpYyBpc0NvZGUocmVzcG9uc2VfdHlwZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVzcG9uc2VfdHlwZS5zcGxpdCgvXFxzKy9nKS5maWx0ZXIoZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0gPT09IFwiY29kZVwiO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuICEhKHJlc3VsdFswXSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5cbmNvbnN0IE9pZGNTY29wZSA9IFwib3BlbmlkXCI7XG5cbmV4cG9ydCBjbGFzcyBTaWduaW5SZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IodXJsLCBkZWxpbWl0ZXIgPSBcIiNcIikge1xuXG4gICAgICAgIHZhciB2YWx1ZXMgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBkZWxpbWl0ZXIpO1xuXG4gICAgICAgIHRoaXMuZXJyb3IgPSB2YWx1ZXMuZXJyb3I7XG4gICAgICAgIHRoaXMuZXJyb3JfZGVzY3JpcHRpb24gPSB2YWx1ZXMuZXJyb3JfZGVzY3JpcHRpb247XG4gICAgICAgIHRoaXMuZXJyb3JfdXJpID0gdmFsdWVzLmVycm9yX3VyaTtcblxuICAgICAgICB0aGlzLmNvZGUgPSB2YWx1ZXMuY29kZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHZhbHVlcy5zdGF0ZTtcbiAgICAgICAgdGhpcy5pZF90b2tlbiA9IHZhbHVlcy5pZF90b2tlbjtcbiAgICAgICAgdGhpcy5zZXNzaW9uX3N0YXRlID0gdmFsdWVzLnNlc3Npb25fc3RhdGU7XG4gICAgICAgIHRoaXMuYWNjZXNzX3Rva2VuID0gdmFsdWVzLmFjY2Vzc190b2tlbjtcbiAgICAgICAgdGhpcy50b2tlbl90eXBlID0gdmFsdWVzLnRva2VuX3R5cGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSB2YWx1ZXMuc2NvcGU7XG4gICAgICAgIHRoaXMucHJvZmlsZSA9IHVuZGVmaW5lZDsgLy8gd2lsbCBiZSBzZXQgZnJvbSBSZXNwb25zZVZhbGlkYXRvclxuXG4gICAgICAgIHRoaXMuZXhwaXJlc19pbiA9IHZhbHVlcy5leHBpcmVzX2luO1xuICAgIH1cblxuICAgIGdldCBleHBpcmVzX2luKCkge1xuICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJlc19hdCAtIG5vdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzZXQgZXhwaXJlc19pbih2YWx1ZSl7XG4gICAgICAgIGxldCBleHBpcmVzX2luID0gcGFyc2VJbnQodmFsdWUpO1xuICAgICAgICBpZiAodHlwZW9mIGV4cGlyZXNfaW4gPT09ICdudW1iZXInICYmIGV4cGlyZXNfaW4gPiAwKSB7XG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICAgICAgdGhpcy5leHBpcmVzX2F0ID0gbm93ICsgZXhwaXJlc19pbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBleHBpcmVkKCkge1xuICAgICAgICBsZXQgZXhwaXJlc19pbiA9IHRoaXMuZXhwaXJlc19pbjtcbiAgICAgICAgaWYgKGV4cGlyZXNfaW4gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGlyZXNfaW4gPD0gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGdldCBzY29wZXMoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5zY29wZSB8fCBcIlwiKS5zcGxpdChcIiBcIik7XG4gICAgfVxuXG4gICAgZ2V0IGlzT3BlbklkQ29ubmVjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGVzLmluZGV4T2YoT2lkY1Njb3BlKSA+PSAwIHx8ICEhdGhpcy5pZF90b2tlbjtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vU3RhdGUuanMnO1xuaW1wb3J0IHsgSm9zZVV0aWwgfSBmcm9tICcuL0pvc2VVdGlsLmpzJztcbmltcG9ydCByYW5kb20gZnJvbSAnLi9yYW5kb20uanMnO1xuXG5leHBvcnQgY2xhc3MgU2lnbmluU3RhdGUgZXh0ZW5kcyBTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioe25vbmNlLCBhdXRob3JpdHksIGNsaWVudF9pZCwgcmVkaXJlY3RfdXJpLCBjb2RlX3ZlcmlmaWVyLCByZXNwb25zZV9tb2RlLCBjbGllbnRfc2VjcmV0LCBzY29wZSwgZXh0cmFUb2tlblBhcmFtcywgc2tpcFVzZXJJbmZvfSA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGFyZ3VtZW50c1swXSk7XG5cbiAgICAgICAgaWYgKG5vbmNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLl9ub25jZSA9IHJhbmRvbSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vbmNlKSB7XG4gICAgICAgICAgICB0aGlzLl9ub25jZSA9IG5vbmNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvZGVfdmVyaWZpZXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIHJhbmRvbSgpIHByb2R1Y2VzIDMyIGxlbmd0aFxuICAgICAgICAgICAgdGhpcy5fY29kZV92ZXJpZmllciA9IHJhbmRvbSgpICsgcmFuZG9tKCkgKyByYW5kb20oKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjb2RlX3ZlcmlmaWVyKSB7XG4gICAgICAgICAgICB0aGlzLl9jb2RlX3ZlcmlmaWVyID0gY29kZV92ZXJpZmllcjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHRoaXMuY29kZV92ZXJpZmllcikge1xuICAgICAgICAgICAgbGV0IGhhc2ggPSBKb3NlVXRpbC5oYXNoU3RyaW5nKHRoaXMuY29kZV92ZXJpZmllciwgXCJTSEEyNTZcIik7XG4gICAgICAgICAgICB0aGlzLl9jb2RlX2NoYWxsZW5nZSA9IEpvc2VVdGlsLmhleFRvQmFzZTY0VXJsKGhhc2gpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVkaXJlY3RfdXJpID0gcmVkaXJlY3RfdXJpO1xuICAgICAgICB0aGlzLl9hdXRob3JpdHkgPSBhdXRob3JpdHk7XG4gICAgICAgIHRoaXMuX2NsaWVudF9pZCA9IGNsaWVudF9pZDtcbiAgICAgICAgdGhpcy5fcmVzcG9uc2VfbW9kZSA9IHJlc3BvbnNlX21vZGU7XG4gICAgICAgIHRoaXMuX2NsaWVudF9zZWNyZXQgPSBjbGllbnRfc2VjcmV0O1xuICAgICAgICB0aGlzLl9zY29wZSA9IHNjb3BlO1xuICAgICAgICB0aGlzLl9leHRyYVRva2VuUGFyYW1zID0gZXh0cmFUb2tlblBhcmFtcztcbiAgICAgICAgdGhpcy5fc2tpcFVzZXJJbmZvID0gc2tpcFVzZXJJbmZvO1xuICAgIH1cblxuICAgIGdldCBub25jZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25vbmNlO1xuICAgIH1cbiAgICBnZXQgYXV0aG9yaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fYXV0aG9yaXR5O1xuICAgIH1cbiAgICBnZXQgY2xpZW50X2lkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50X2lkO1xuICAgIH1cbiAgICBnZXQgcmVkaXJlY3RfdXJpKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVkaXJlY3RfdXJpO1xuICAgIH1cbiAgICBnZXQgY29kZV92ZXJpZmllcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvZGVfdmVyaWZpZXI7XG4gICAgfVxuICAgIGdldCBjb2RlX2NoYWxsZW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvZGVfY2hhbGxlbmdlO1xuICAgIH1cbiAgICBnZXQgcmVzcG9uc2VfbW9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc3BvbnNlX21vZGU7XG4gICAgfVxuICAgIGdldCBjbGllbnRfc2VjcmV0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xpZW50X3NlY3JldDtcbiAgICB9XG4gICAgZ2V0IHNjb3BlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gICAgfVxuICAgIGdldCBleHRyYVRva2VuUGFyYW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0cmFUb2tlblBhcmFtcztcbiAgICB9XG4gICAgZ2V0IHNraXBVc2VySW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NraXBVc2VySW5mbztcbiAgICB9XG4gICAgXG4gICAgdG9TdG9yYWdlU3RyaW5nKCkge1xuICAgICAgICBMb2cuZGVidWcoXCJTaWduaW5TdGF0ZS50b1N0b3JhZ2VTdHJpbmdcIik7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIGRhdGE6IHRoaXMuZGF0YSxcbiAgICAgICAgICAgIGNyZWF0ZWQ6IHRoaXMuY3JlYXRlZCxcbiAgICAgICAgICAgIHJlcXVlc3RfdHlwZTogdGhpcy5yZXF1ZXN0X3R5cGUsXG4gICAgICAgICAgICBub25jZTogdGhpcy5ub25jZSxcbiAgICAgICAgICAgIGNvZGVfdmVyaWZpZXI6IHRoaXMuY29kZV92ZXJpZmllcixcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogdGhpcy5yZWRpcmVjdF91cmksXG4gICAgICAgICAgICBhdXRob3JpdHk6IHRoaXMuYXV0aG9yaXR5LFxuICAgICAgICAgICAgY2xpZW50X2lkOiB0aGlzLmNsaWVudF9pZCxcbiAgICAgICAgICAgIHJlc3BvbnNlX21vZGU6IHRoaXMucmVzcG9uc2VfbW9kZSxcbiAgICAgICAgICAgIGNsaWVudF9zZWNyZXQ6IHRoaXMuY2xpZW50X3NlY3JldCxcbiAgICAgICAgICAgIHNjb3BlOiB0aGlzLnNjb3BlLFxuICAgICAgICAgICAgZXh0cmFUb2tlblBhcmFtcyA6IHRoaXMuZXh0cmFUb2tlblBhcmFtcyxcbiAgICAgICAgICAgIHNraXBVc2VySW5mbzogdGhpcy5za2lwVXNlckluZm9cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiU2lnbmluU3RhdGUuZnJvbVN0b3JhZ2VTdHJpbmdcIik7XG4gICAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTaWduaW5TdGF0ZShkYXRhKTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBVcmxVdGlsaXR5IH0gZnJvbSAnLi9VcmxVdGlsaXR5LmpzJztcbmltcG9ydCB7IFN0YXRlIH0gZnJvbSAnLi9TdGF0ZS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTaWdub3V0UmVxdWVzdCB7XG4gICAgY29uc3RydWN0b3Ioe3VybCwgaWRfdG9rZW5faGludCwgcG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpLCBkYXRhLCBleHRyYVF1ZXJ5UGFyYW1zLCByZXF1ZXN0X3R5cGV9KSB7XG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWdub3V0UmVxdWVzdC5jdG9yOiBObyB1cmwgcGFzc2VkXCIpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidXJsXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlkX3Rva2VuX2hpbnQpIHtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwiaWRfdG9rZW5faGludFwiLCBpZF90b2tlbl9oaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3N0X2xvZ291dF9yZWRpcmVjdF91cmkpIHtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwicG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpXCIsIHBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSk7XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBTdGF0ZSh7IGRhdGEsIHJlcXVlc3RfdHlwZSB9KTtcblxuICAgICAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIFwic3RhdGVcIiwgdGhpcy5zdGF0ZS5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IobGV0IGtleSBpbiBleHRyYVF1ZXJ5UGFyYW1zKXtcbiAgICAgICAgICAgIHVybCA9IFVybFV0aWxpdHkuYWRkUXVlcnlQYXJhbSh1cmwsIGtleSwgZXh0cmFRdWVyeVBhcmFtc1trZXldKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgVXJsVXRpbGl0eSB9IGZyb20gJy4vVXJsVXRpbGl0eS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTaWdub3V0UmVzcG9uc2Uge1xuICAgIGNvbnN0cnVjdG9yKHVybCkge1xuXG4gICAgICAgIHZhciB2YWx1ZXMgPSBVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQodXJsLCBcIj9cIik7XG5cbiAgICAgICAgdGhpcy5lcnJvciA9IHZhbHVlcy5lcnJvcjtcbiAgICAgICAgdGhpcy5lcnJvcl9kZXNjcmlwdGlvbiA9IHZhbHVlcy5lcnJvcl9kZXNjcmlwdGlvbjtcbiAgICAgICAgdGhpcy5lcnJvcl91cmkgPSB2YWx1ZXMuZXJyb3JfdXJpO1xuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB2YWx1ZXMuc3RhdGU7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuXG5leHBvcnQgY2xhc3MgU2lsZW50UmVuZXdTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKHVzZXJNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyID0gdXNlck1hbmFnZXI7XG4gICAgfVxuXG4gICAgc3RhcnQoKSB7XG4gICAgICAgIGlmICghdGhpcy5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbGxiYWNrID0gdGhpcy5fdG9rZW5FeHBpcmluZy5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLmFkZEFjY2Vzc1Rva2VuRXhwaXJpbmcodGhpcy5fY2FsbGJhY2spO1xuXG4gICAgICAgICAgICAvLyB0aGlzIHdpbGwgdHJpZ2dlciBsb2FkaW5nIG9mIHRoZSB1c2VyIHNvIHRoZSBleHBpcmluZyBldmVudHMgY2FuIGJlIGluaXRpYWxpemVkXG4gICAgICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5nZXRVc2VyKCkudGhlbih1c2VyPT57XG4gICAgICAgICAgICAgICAgLy8gZGVsaWJlcmF0ZSBub3BcbiAgICAgICAgICAgIH0pLmNhdGNoKGVycj0+e1xuICAgICAgICAgICAgICAgIC8vIGNhdGNoIHRvIHN1cHByZXNzIGVycm9ycyBzaW5jZSB3ZSdyZSBpbiBhIGN0b3JcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJTaWxlbnRSZW5ld1NlcnZpY2Uuc3RhcnQ6IEVycm9yIGZyb20gZ2V0VXNlcjpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdG9wKCkge1xuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHRoaXMuX3VzZXJNYW5hZ2VyLmV2ZW50cy5yZW1vdmVBY2Nlc3NUb2tlbkV4cGlyaW5nKHRoaXMuX2NhbGxiYWNrKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9jYWxsYmFjaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF90b2tlbkV4cGlyaW5nKCkge1xuICAgICAgICB0aGlzLl91c2VyTWFuYWdlci5zaWduaW5TaWxlbnQoKS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU2lsZW50UmVuZXdTZXJ2aWNlLl90b2tlbkV4cGlyaW5nOiBTaWxlbnQgdG9rZW4gcmVuZXdhbCBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9LCBlcnIgPT4ge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiU2lsZW50UmVuZXdTZXJ2aWNlLl90b2tlbkV4cGlyaW5nOiBFcnJvciBmcm9tIHNpZ25pblNpbGVudDpcIiwgZXJyLm1lc3NhZ2UpO1xuICAgICAgICAgICAgdGhpcy5fdXNlck1hbmFnZXIuZXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHJhbmRvbSBmcm9tICcuL3JhbmRvbS5qcyc7XG5cbmV4cG9ydCBjbGFzcyBTdGF0ZSB7XG4gICAgY29uc3RydWN0b3Ioe2lkLCBkYXRhLCBjcmVhdGVkLCByZXF1ZXN0X3R5cGV9ID0ge30pIHtcbiAgICAgICAgdGhpcy5faWQgPSBpZCB8fCByYW5kb20oKTtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjcmVhdGVkID09PSAnbnVtYmVyJyAmJiBjcmVhdGVkID4gMCkge1xuICAgICAgICAgICAgdGhpcy5fY3JlYXRlZCA9IGNyZWF0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jcmVhdGVkID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlcXVlc3RfdHlwZSA9ICByZXF1ZXN0X3R5cGU7XG4gICAgfVxuXG4gICAgZ2V0IGlkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faWQ7XG4gICAgfVxuICAgIGdldCBkYXRhKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YTtcbiAgICB9XG4gICAgZ2V0IGNyZWF0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVkO1xuICAgIH1cbiAgICBnZXQgcmVxdWVzdF90eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVxdWVzdF90eXBlO1xuICAgIH1cblxuICAgIHRvU3RvcmFnZVN0cmluZygpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUudG9TdG9yYWdlU3RyaW5nXCIpO1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICAgICAgICBkYXRhOiB0aGlzLmRhdGEsXG4gICAgICAgICAgICBjcmVhdGVkOiB0aGlzLmNyZWF0ZWQsXG4gICAgICAgICAgICByZXF1ZXN0X3R5cGU6IHRoaXMucmVxdWVzdF90eXBlXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHN0YXRpYyBmcm9tU3RvcmFnZVN0cmluZyhzdG9yYWdlU3RyaW5nKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlN0YXRlLmZyb21TdG9yYWdlU3RyaW5nXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFN0YXRlKEpTT04ucGFyc2Uoc3RvcmFnZVN0cmluZykpO1xuICAgIH1cblxuICAgIHN0YXRpYyBjbGVhclN0YWxlU3RhdGUoc3RvcmFnZSwgYWdlKSB7XG5cbiAgICAgICAgdmFyIGN1dG9mZiA9IERhdGUubm93KCkgLyAxMDAwIC0gYWdlO1xuXG4gICAgICAgIHJldHVybiBzdG9yYWdlLmdldEFsbEtleXMoKS50aGVuKGtleXMgPT4ge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiBnb3Qga2V5c1wiLCBrZXlzKTtcblxuICAgICAgICAgICAgdmFyIHByb21pc2VzID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHN0b3JhZ2UuZ2V0KGtleSkudGhlbihpdGVtID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlbW92ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9IFN0YXRlLmZyb21TdG9yYWdlU3RyaW5nKGl0ZW0pXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IGdvdCBpdGVtIGZyb20ga2V5OiBcIiwga2V5LCBzdGF0ZS5jcmVhdGVkKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5jcmVhdGVkIDw9IGN1dG9mZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiU3RhdGUuY2xlYXJTdGFsZVN0YXRlOiBFcnJvciBwYXJzaW5nIHN0YXRlIGZvciBrZXlcIiwga2V5LCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IG5vIGl0ZW0gaW4gc3RvcmFnZSBmb3Iga2V5OiBcIiwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IHJlbW92ZWQgaXRlbSBmb3Iga2V5OiBcIiwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yYWdlLnJlbW92ZShrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBwcm9taXNlcy5wdXNoKHApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJTdGF0ZS5jbGVhclN0YWxlU3RhdGU6IHdhaXRpbmcgb24gcHJvbWlzZSBjb3VudDpcIiwgcHJvbWlzZXMubGVuZ3RoKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEdsb2JhbCB9IGZyb20gJy4vR2xvYmFsLmpzJztcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi9FdmVudC5qcyc7XG5cbmNvbnN0IFRpbWVyRHVyYXRpb24gPSA1OyAvLyBzZWNvbmRzXG5cbmV4cG9ydCBjbGFzcyBUaW1lciBleHRlbmRzIEV2ZW50IHtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHRpbWVyID0gR2xvYmFsLnRpbWVyLCBub3dGdW5jID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyKG5hbWUpO1xuICAgICAgICB0aGlzLl90aW1lciA9IHRpbWVyO1xuXG4gICAgICAgIGlmIChub3dGdW5jKSB7XG4gICAgICAgICAgICB0aGlzLl9ub3dGdW5jID0gbm93RnVuYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25vd0Z1bmMgPSAoKSA9PiBEYXRlLm5vdygpIC8gMTAwMDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBub3coKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCh0aGlzLl9ub3dGdW5jKCkpO1xuICAgIH1cblxuICAgIGluaXQoZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uIDw9IDApIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0gMTtcbiAgICAgICAgfVxuICAgICAgICBkdXJhdGlvbiA9IHBhcnNlSW50KGR1cmF0aW9uKTtcblxuICAgICAgICB2YXIgZXhwaXJhdGlvbiA9IHRoaXMubm93ICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0aGlzLmV4cGlyYXRpb24gPT09IGV4cGlyYXRpb24gJiYgdGhpcy5fdGltZXJIYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gcmVpbml0aWFsaXplIHRvIHNhbWUgZXhwaXJhdGlvbiwgc28gYmFpbCBvdXRcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRpbWVyLmluaXQgdGltZXIgXCIgKyB0aGlzLl9uYW1lICsgXCIgc2tpcHBpbmcgaW5pdGlhbGl6YXRpb24gc2luY2UgYWxyZWFkeSBpbml0aWFsaXplZCBmb3IgZXhwaXJhdGlvbjpcIiwgdGhpcy5leHBpcmF0aW9uKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FuY2VsKCk7XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiVGltZXIuaW5pdCB0aW1lciBcIiArIHRoaXMuX25hbWUgKyBcIiBmb3IgZHVyYXRpb246XCIsIGR1cmF0aW9uKTtcbiAgICAgICAgdGhpcy5fZXhwaXJhdGlvbiA9IGV4cGlyYXRpb247XG5cbiAgICAgICAgLy8gd2UncmUgdXNpbmcgYSBmYWlybHkgc2hvcnQgdGltZXIgYW5kIHRoZW4gY2hlY2tpbmcgdGhlIGV4cGlyYXRpb24gaW4gdGhlXG4gICAgICAgIC8vIGNhbGxiYWNrIHRvIGhhbmRsZSBzY2VuYXJpb3Mgd2hlcmUgdGhlIGJyb3dzZXIgZGV2aWNlIHNsZWVwcywgYW5kIHRoZW5cbiAgICAgICAgLy8gdGhlIHRpbWVycyBlbmQgdXAgZ2V0dGluZyBkZWxheWVkLlxuICAgICAgICB2YXIgdGltZXJEdXJhdGlvbiA9IFRpbWVyRHVyYXRpb247XG4gICAgICAgIGlmIChkdXJhdGlvbiA8IHRpbWVyRHVyYXRpb24pIHtcbiAgICAgICAgICAgIHRpbWVyRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aW1lckhhbmRsZSA9IHRoaXMuX3RpbWVyLnNldEludGVydmFsKHRoaXMuX2NhbGxiYWNrLmJpbmQodGhpcyksIHRpbWVyRHVyYXRpb24gKiAxMDAwKTtcbiAgICB9XG4gICAgXG4gICAgZ2V0IGV4cGlyYXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9leHBpcmF0aW9uO1xuICAgIH1cblxuICAgIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVySGFuZGxlKSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJUaW1lci5jYW5jZWw6IFwiLCB0aGlzLl9uYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyLmNsZWFySW50ZXJ2YWwodGhpcy5fdGltZXJIYW5kbGUpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXJIYW5kbGUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NhbGxiYWNrKCkge1xuICAgICAgICB2YXIgZGlmZiA9IHRoaXMuX2V4cGlyYXRpb24gLSB0aGlzLm5vdztcbiAgICAgICAgTG9nLmRlYnVnKFwiVGltZXIuY2FsbGJhY2s7IFwiICsgdGhpcy5fbmFtZSArIFwiIHRpbWVyIGV4cGlyZXMgaW46XCIsIGRpZmYpO1xuXG4gICAgICAgIGlmICh0aGlzLl9leHBpcmF0aW9uIDw9IHRoaXMubm93KSB7XG4gICAgICAgICAgICB0aGlzLmNhbmNlbCgpO1xuICAgICAgICAgICAgc3VwZXIucmFpc2UoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IEpzb25TZXJ2aWNlIH0gZnJvbSAnLi9Kc29uU2VydmljZS5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZS5qcyc7XG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5cbmV4cG9ydCBjbGFzcyBUb2tlbkNsaWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlLCBNZXRhZGF0YVNlcnZpY2VDdG9yID0gTWV0YWRhdGFTZXJ2aWNlKSB7XG4gICAgICAgIGlmICghc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmN0b3I6IE5vIHNldHRpbmdzIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKCk7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcbiAgICB9XG5cbiAgICBleGNoYW5nZUNvZGUoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLmdyYW50X3R5cGUgPSBhcmdzLmdyYW50X3R5cGUgfHwgXCJhdXRob3JpemF0aW9uX2NvZGVcIjtcbiAgICAgICAgYXJncy5jbGllbnRfaWQgPSBhcmdzLmNsaWVudF9pZCB8fCB0aGlzLl9zZXR0aW5ncy5jbGllbnRfaWQ7XG4gICAgICAgIGFyZ3MuY2xpZW50X3NlY3JldCA9IGFyZ3MuY2xpZW50X3NlY3JldCB8fCB0aGlzLl9zZXR0aW5ncy5jbGllbnRfc2VjcmV0O1xuICAgICAgICBhcmdzLnJlZGlyZWN0X3VyaSA9IGFyZ3MucmVkaXJlY3RfdXJpIHx8IHRoaXMuX3NldHRpbmdzLnJlZGlyZWN0X3VyaTtcblxuICAgICAgICB2YXIgYmFzaWNBdXRoID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgY2xpZW50X2F1dGhlbnRpY2F0aW9uID0gYXJncy5fY2xpZW50X2F1dGhlbnRpY2F0aW9uIHx8IHRoaXMuX3NldHRpbmdzLl9jbGllbnRfYXV0aGVudGljYXRpb247XG4gICAgICAgIGRlbGV0ZSBhcmdzLl9jbGllbnRfYXV0aGVudGljYXRpb247XG5cbiAgICAgICAgaWYgKCFhcmdzLmNvZGUpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogTm8gY29kZSBwYXNzZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSBjb2RlIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyZ3MucmVkaXJlY3RfdXJpKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZUNvZGU6IE5vIHJlZGlyZWN0X3VyaSBwYXNzZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSByZWRpcmVjdF91cmkgaXMgcmVxdWlyZWRcIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghYXJncy5jb2RlX3ZlcmlmaWVyKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZUNvZGU6IE5vIGNvZGVfdmVyaWZpZXIgcGFzc2VkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgY29kZV92ZXJpZmllciBpcyByZXF1aXJlZFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFhcmdzLmNsaWVudF9pZCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VDb2RlOiBObyBjbGllbnRfaWQgcGFzc2VkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkEgY2xpZW50X2lkIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyZ3MuY2xpZW50X3NlY3JldCAmJiBjbGllbnRfYXV0aGVudGljYXRpb24gPT0gXCJjbGllbnRfc2VjcmV0X2Jhc2ljXCIpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogTm8gY2xpZW50X3NlY3JldCBwYXNzZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSBjbGllbnRfc2VjcmV0IGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNlbmRpbmcgdGhlIGNsaWVudCBjcmVkZW50aWFscyB1c2luZyB0aGUgQmFzaWMgQXV0aCBtZXRob2RcbiAgICAgICAgaWYoY2xpZW50X2F1dGhlbnRpY2F0aW9uID09IFwiY2xpZW50X3NlY3JldF9iYXNpY1wiKVxuICAgICAgICB7XG4gICAgICAgICAgICBiYXNpY0F1dGggPSBhcmdzLmNsaWVudF9pZCArICc6JyArIGFyZ3MuY2xpZW50X3NlY3JldDtcbiAgICAgICAgICAgIGRlbGV0ZSBhcmdzLmNsaWVudF9pZDtcbiAgICAgICAgICAgIGRlbGV0ZSBhcmdzLmNsaWVudF9zZWNyZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFRva2VuRW5kcG9pbnQoZmFsc2UpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogUmVjZWl2ZWQgdG9rZW4gZW5kcG9pbnRcIik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UucG9zdEZvcm0odXJsLCBhcmdzLCBiYXNpY0F1dGgpLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRva2VuQ2xpZW50LmV4Y2hhbmdlQ29kZTogcmVzcG9uc2UgcmVjZWl2ZWRcIik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGV4Y2hhbmdlUmVmcmVzaFRva2VuKGFyZ3MgPSB7fSkge1xuICAgICAgICBhcmdzID0gT2JqZWN0LmFzc2lnbih7fSwgYXJncyk7XG5cbiAgICAgICAgYXJncy5ncmFudF90eXBlID0gYXJncy5ncmFudF90eXBlIHx8IFwicmVmcmVzaF90b2tlblwiO1xuICAgICAgICBhcmdzLmNsaWVudF9pZCA9IGFyZ3MuY2xpZW50X2lkIHx8IHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcbiAgICAgICAgYXJncy5jbGllbnRfc2VjcmV0ID0gYXJncy5jbGllbnRfc2VjcmV0IHx8IHRoaXMuX3NldHRpbmdzLmNsaWVudF9zZWNyZXQ7XG5cbiAgICAgICAgdmFyIGJhc2ljQXV0aCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIGNsaWVudF9hdXRoZW50aWNhdGlvbiA9IGFyZ3MuX2NsaWVudF9hdXRoZW50aWNhdGlvbiB8fCB0aGlzLl9zZXR0aW5ncy5fY2xpZW50X2F1dGhlbnRpY2F0aW9uO1xuICAgICAgICBkZWxldGUgYXJncy5fY2xpZW50X2F1dGhlbnRpY2F0aW9uO1xuXG4gICAgICAgIGlmICghYXJncy5yZWZyZXNoX3Rva2VuKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZVJlZnJlc2hUb2tlbjogTm8gcmVmcmVzaF90b2tlbiBwYXNzZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiQSByZWZyZXNoX3Rva2VuIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWFyZ3MuY2xpZW50X2lkKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlbkNsaWVudC5leGNoYW5nZVJlZnJlc2hUb2tlbjogTm8gY2xpZW50X2lkIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIGNsaWVudF9pZCBpcyByZXF1aXJlZFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZW5kaW5nIHRoZSBjbGllbnQgY3JlZGVudGlhbHMgdXNpbmcgdGhlIEJhc2ljIEF1dGggbWV0aG9kXG4gICAgICAgIGlmKGNsaWVudF9hdXRoZW50aWNhdGlvbiA9PSBcImNsaWVudF9zZWNyZXRfYmFzaWNcIilcbiAgICAgICAge1xuICAgICAgICAgICAgYmFzaWNBdXRoID0gYXJncy5jbGllbnRfaWQgKyAnOicgKyBhcmdzLmNsaWVudF9zZWNyZXQ7XG4gICAgICAgICAgICBkZWxldGUgYXJncy5jbGllbnRfaWQ7XG4gICAgICAgICAgICBkZWxldGUgYXJncy5jbGllbnRfc2VjcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRUb2tlbkVuZHBvaW50KGZhbHNlKS50aGVuKHVybCA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJUb2tlbkNsaWVudC5leGNoYW5nZVJlZnJlc2hUb2tlbjogUmVjZWl2ZWQgdG9rZW4gZW5kcG9pbnRcIik7XG5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9qc29uU2VydmljZS5wb3N0Rm9ybSh1cmwsIGFyZ3MsIGJhc2ljQXV0aCkudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVG9rZW5DbGllbnQuZXhjaGFuZ2VSZWZyZXNoVG9rZW46IHJlc3BvbnNlIHJlY2VpdmVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBNZXRhZGF0YVNlcnZpY2UgfSBmcm9tICcuL01ldGFkYXRhU2VydmljZS5qcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbC5qcyc7XG5cbmNvbnN0IEFjY2Vzc1Rva2VuVHlwZUhpbnQgPSBcImFjY2Vzc190b2tlblwiO1xuY29uc3QgUmVmcmVzaFRva2VuVHlwZUhpbnQgPSBcInJlZnJlc2hfdG9rZW5cIjtcblxuZXhwb3J0IGNsYXNzIFRva2VuUmV2b2NhdGlvbkNsaWVudCB7XG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3MsIFhNTEh0dHBSZXF1ZXN0Q3RvciA9IEdsb2JhbC5YTUxIdHRwUmVxdWVzdCwgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IE1ldGFkYXRhU2VydmljZSkge1xuICAgICAgICBpZiAoIXNldHRpbmdzKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQuY3RvcjogTm8gc2V0dGluZ3MgcHJvdmlkZWRcIik7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBzZXR0aW5ncyBwcm92aWRlZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICB0aGlzLl9YTUxIdHRwUmVxdWVzdEN0b3IgPSBYTUxIdHRwUmVxdWVzdEN0b3I7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhU2VydmljZSA9IG5ldyBNZXRhZGF0YVNlcnZpY2VDdG9yKHRoaXMuX3NldHRpbmdzKTtcbiAgICB9XG5cbiAgICByZXZva2UodG9rZW4sIHJlcXVpcmVkLCB0eXBlID0gXCJhY2Nlc3NfdG9rZW5cIikge1xuICAgICAgICBpZiAoIXRva2VuKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBObyB0b2tlbiBwcm92aWRlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk5vIHRva2VuIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlICE9PSBBY2Nlc3NUb2tlblR5cGVIaW50ICYmIHR5cGUgIT0gUmVmcmVzaFRva2VuVHlwZUhpbnQpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IEludmFsaWQgdG9rZW4gdHlwZVwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgdG9rZW4gdHlwZS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFJldm9jYXRpb25FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IFJldm9jYXRpb24gbm90IHN1cHBvcnRlZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmV2b2NhdGlvbiBub3Qgc3VwcG9ydGVkXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIG5vdCByZXF1aXJlZCwgc28gZG9uJ3QgZXJyb3IgYW5kIGp1c3QgcmV0dXJuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJUb2tlblJldm9jYXRpb25DbGllbnQucmV2b2tlOiBSZXZva2luZyBcIiArIHR5cGUpO1xuICAgICAgICAgICAgdmFyIGNsaWVudF9pZCA9IHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZDtcbiAgICAgICAgICAgIHZhciBjbGllbnRfc2VjcmV0ID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X3NlY3JldDtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZXZva2UodXJsLCBjbGllbnRfaWQsIGNsaWVudF9zZWNyZXQsIHRva2VuLCB0eXBlKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3Jldm9rZSh1cmwsIGNsaWVudF9pZCwgY2xpZW50X3NlY3JldCwgdG9rZW4sIHR5cGUpIHtcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuXG4gICAgICAgICAgICB2YXIgeGhyID0gbmV3IHRoaXMuX1hNTEh0dHBSZXF1ZXN0Q3RvcigpO1xuICAgICAgICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHVybCk7XG5cbiAgICAgICAgICAgIHhoci5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZTogSFRUUCByZXNwb25zZSByZWNlaXZlZCwgc3RhdHVzXCIsIHhoci5zdGF0dXMpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoRXJyb3IoeGhyLnN0YXR1c1RleHQgKyBcIiAoXCIgKyB4aHIuc3RhdHVzICsgXCIpXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeGhyLm9uZXJyb3IgPSAoKSA9PiB7IFxuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlRva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2U6IE5ldHdvcmsgRXJyb3IuXCIpXG4gICAgICAgICAgICAgICAgcmVqZWN0KFwiTmV0d29yayBFcnJvclwiKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBib2R5ID0gXCJjbGllbnRfaWQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoY2xpZW50X2lkKTtcbiAgICAgICAgICAgIGlmIChjbGllbnRfc2VjcmV0KSB7XG4gICAgICAgICAgICAgICAgYm9keSArPSBcIiZjbGllbnRfc2VjcmV0PVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGNsaWVudF9zZWNyZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYm9keSArPSBcIiZ0b2tlbl90eXBlX2hpbnQ9XCIgKyBlbmNvZGVVUklDb21wb25lbnQodHlwZSk7XG4gICAgICAgICAgICBib2R5ICs9IFwiJnRva2VuPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHRva2VuKTtcblxuICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIik7XG4gICAgICAgICAgICB4aHIuc2VuZChib2R5KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwuanMnO1xuXG5leHBvcnQgY2xhc3MgVXJsVXRpbGl0eSB7XG4gICAgc3RhdGljIGFkZFF1ZXJ5UGFyYW0odXJsLCBuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAodXJsLmluZGV4T2YoJz8nKSA8IDApIHtcbiAgICAgICAgICAgIHVybCArPSBcIj9cIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cmxbdXJsLmxlbmd0aCAtIDFdICE9PSBcIj9cIikge1xuICAgICAgICAgICAgdXJsICs9IFwiJlwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdXJsICs9IGVuY29kZVVSSUNvbXBvbmVudChuYW1lKTtcbiAgICAgICAgdXJsICs9IFwiPVwiO1xuICAgICAgICB1cmwgKz0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH1cblxuICAgIHN0YXRpYyBwYXJzZVVybEZyYWdtZW50KHZhbHVlLCBkZWxpbWl0ZXIgPSBcIiNcIiwgZ2xvYmFsID0gR2xvYmFsKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKXtcbiAgICAgICAgICAgIHZhbHVlID0gZ2xvYmFsLmxvY2F0aW9uLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaWR4ID0gdmFsdWUubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcbiAgICAgICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnN1YnN0cihpZHggKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWxpbWl0ZXIgPT09IFwiP1wiKSB7XG4gICAgICAgICAgICAvLyBpZiB3ZSdyZSBkb2luZyBxdWVyeSwgdGhlbiBzdHJpcCBvZmYgaGFzaCBmcmFnbWVudCBiZWZvcmUgd2UgcGFyc2VcbiAgICAgICAgICAgIGlkeCA9IHZhbHVlLmluZGV4T2YoJyMnKTtcbiAgICAgICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyKDAsIGlkeCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFyYW1zID0ge30sXG4gICAgICAgICAgICByZWdleCA9IC8oW14mPV0rKT0oW14mXSopL2csXG4gICAgICAgICAgICBtO1xuXG4gICAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgICAgd2hpbGUgKG0gPSByZWdleC5leGVjKHZhbHVlKSkge1xuICAgICAgICAgICAgcGFyYW1zW2RlY29kZVVSSUNvbXBvbmVudChtWzFdKV0gPSBkZWNvZGVVUklDb21wb25lbnQobVsyXS5yZXBsYWNlKC9cXCsvZywgJyAnKSk7XG4gICAgICAgICAgICBpZiAoY291bnRlcisrID4gNTApIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVcmxVdGlsaXR5LnBhcnNlVXJsRnJhZ21lbnQ6IHJlc3BvbnNlIGV4Y2VlZGVkIGV4cGVjdGVkIG51bWJlciBvZiBwYXJhbWV0ZXJzXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcjogXCJSZXNwb25zZSBleGNlZWRlZCBleHBlY3RlZCBudW1iZXIgb2YgcGFyYW1ldGVyc1wiXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gcGFyYW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyYW1zO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcblxuZXhwb3J0IGNsYXNzIFVzZXIge1xuICAgIGNvbnN0cnVjdG9yKHtpZF90b2tlbiwgc2Vzc2lvbl9zdGF0ZSwgYWNjZXNzX3Rva2VuLCByZWZyZXNoX3Rva2VuLCB0b2tlbl90eXBlLCBzY29wZSwgcHJvZmlsZSwgZXhwaXJlc19hdCwgc3RhdGV9KSB7XG4gICAgICAgIHRoaXMuaWRfdG9rZW4gPSBpZF90b2tlbjtcbiAgICAgICAgdGhpcy5zZXNzaW9uX3N0YXRlID0gc2Vzc2lvbl9zdGF0ZTtcbiAgICAgICAgdGhpcy5hY2Nlc3NfdG9rZW4gPSBhY2Nlc3NfdG9rZW47XG4gICAgICAgIHRoaXMucmVmcmVzaF90b2tlbiA9IHJlZnJlc2hfdG9rZW47XG4gICAgICAgIHRoaXMudG9rZW5fdHlwZSA9IHRva2VuX3R5cGU7XG4gICAgICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbiAgICAgICAgdGhpcy5wcm9maWxlID0gcHJvZmlsZTtcbiAgICAgICAgdGhpcy5leHBpcmVzX2F0ID0gZXhwaXJlc19hdDtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgIH1cblxuICAgIGdldCBleHBpcmVzX2luKCkge1xuICAgICAgICBpZiAodGhpcy5leHBpcmVzX2F0KSB7XG4gICAgICAgICAgICBsZXQgbm93ID0gcGFyc2VJbnQoRGF0ZS5ub3coKSAvIDEwMDApO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwaXJlc19hdCAtIG5vdztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBzZXQgZXhwaXJlc19pbih2YWx1ZSkge1xuICAgICAgICBsZXQgZXhwaXJlc19pbiA9IHBhcnNlSW50KHZhbHVlKTtcbiAgICAgICAgaWYgKHR5cGVvZiBleHBpcmVzX2luID09PSAnbnVtYmVyJyAmJiBleHBpcmVzX2luID4gMCkge1xuICAgICAgICAgICAgbGV0IG5vdyA9IHBhcnNlSW50KERhdGUubm93KCkgLyAxMDAwKTtcbiAgICAgICAgICAgIHRoaXMuZXhwaXJlc19hdCA9IG5vdyArIGV4cGlyZXNfaW47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZXhwaXJlZCgpIHtcbiAgICAgICAgbGV0IGV4cGlyZXNfaW4gPSB0aGlzLmV4cGlyZXNfaW47XG4gICAgICAgIGlmIChleHBpcmVzX2luICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBleHBpcmVzX2luIDw9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBnZXQgc2NvcGVzKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMuc2NvcGUgfHwgXCJcIikuc3BsaXQoXCIgXCIpO1xuICAgIH1cblxuICAgIHRvU3RvcmFnZVN0cmluZygpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlci50b1N0b3JhZ2VTdHJpbmdcIik7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBpZF90b2tlbjogdGhpcy5pZF90b2tlbixcbiAgICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHRoaXMuc2Vzc2lvbl9zdGF0ZSxcbiAgICAgICAgICAgIGFjY2Vzc190b2tlbjogdGhpcy5hY2Nlc3NfdG9rZW4sXG4gICAgICAgICAgICByZWZyZXNoX3Rva2VuOiB0aGlzLnJlZnJlc2hfdG9rZW4sXG4gICAgICAgICAgICB0b2tlbl90eXBlOiB0aGlzLnRva2VuX3R5cGUsXG4gICAgICAgICAgICBzY29wZTogdGhpcy5zY29wZSxcbiAgICAgICAgICAgIHByb2ZpbGU6IHRoaXMucHJvZmlsZSxcbiAgICAgICAgICAgIGV4cGlyZXNfYXQ6IHRoaXMuZXhwaXJlc19hdFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbVN0b3JhZ2VTdHJpbmcoc3RvcmFnZVN0cmluZykge1xuICAgICAgICBMb2cuZGVidWcoXCJVc2VyLmZyb21TdG9yYWdlU3RyaW5nXCIpO1xuICAgICAgICByZXR1cm4gbmV3IFVzZXIoSlNPTi5wYXJzZShzdG9yYWdlU3RyaW5nKSk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgSnNvblNlcnZpY2UgfSBmcm9tICcuL0pzb25TZXJ2aWNlLmpzJztcbmltcG9ydCB7IE1ldGFkYXRhU2VydmljZSB9IGZyb20gJy4vTWV0YWRhdGFTZXJ2aWNlLmpzJztcbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEpvc2VVdGlsIH0gZnJvbSAnLi9Kb3NlVXRpbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBVc2VySW5mb1NlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBzZXR0aW5ncywgXG4gICAgICAgIEpzb25TZXJ2aWNlQ3RvciA9IEpzb25TZXJ2aWNlLCBcbiAgICAgICAgTWV0YWRhdGFTZXJ2aWNlQ3RvciA9IE1ldGFkYXRhU2VydmljZSwgXG4gICAgICAgIGpvc2VVdGlsID0gSm9zZVV0aWxcbiAgICApIHtcbiAgICAgICAgaWYgKCFzZXR0aW5ncykge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLmN0b3I6IE5vIHNldHRpbmdzIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInNldHRpbmdzXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICAgICAgdGhpcy5fanNvblNlcnZpY2UgPSBuZXcgSnNvblNlcnZpY2VDdG9yKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0aGlzLl9nZXRDbGFpbXNGcm9tSnd0LmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YVNlcnZpY2UgPSBuZXcgTWV0YWRhdGFTZXJ2aWNlQ3Rvcih0aGlzLl9zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX2pvc2VVdGlsID0gam9zZVV0aWw7XG4gICAgfVxuXG4gICAgZ2V0Q2xhaW1zKHRva2VuKSB7XG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5nZXRDbGFpbXM6IE5vIHRva2VuIHBhc3NlZFwiKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJBIHRva2VuIGlzIHJlcXVpcmVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YVNlcnZpY2UuZ2V0VXNlckluZm9FbmRwb2ludCgpLnRoZW4odXJsID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5nZXRDbGFpbXM6IHJlY2VpdmVkIHVzZXJpbmZvIHVybFwiLCB1cmwpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fanNvblNlcnZpY2UuZ2V0SnNvbih1cmwsIHRva2VuKS50aGVuKGNsYWltcyA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLmdldENsYWltczogY2xhaW1zIHJlY2VpdmVkXCIsIGNsYWltcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfZ2V0Q2xhaW1zRnJvbUp3dChyZXEpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBqd3QgPSB0aGlzLl9qb3NlVXRpbC5wYXJzZUp3dChyZXEucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgIGlmICghand0IHx8ICFqd3QuaGVhZGVyIHx8ICFqd3QucGF5bG9hZCkge1xuICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogRmFpbGVkIHRvIHBhcnNlIEpXVFwiLCBqd3QpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJGYWlsZWQgdG8gcGFyc2UgaWRfdG9rZW5cIikpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIga2lkID0gand0LmhlYWRlci5raWQ7XG5cbiAgICAgICAgICAgIGxldCBpc3N1ZXJQcm9taXNlO1xuICAgICAgICAgICAgc3dpdGNoICh0aGlzLl9zZXR0aW5ncy51c2VySW5mb0p3dElzc3Vlcikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ09QJzpcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVyUHJvbWlzZSA9IHRoaXMuX21ldGFkYXRhU2VydmljZS5nZXRJc3N1ZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQU5ZJzpcbiAgICAgICAgICAgICAgICAgICAgaXNzdWVyUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShqd3QucGF5bG9hZC5pc3MpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpc3N1ZXJQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX3NldHRpbmdzLnVzZXJJbmZvSnd0SXNzdWVyKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBpc3N1ZXJQcm9taXNlLnRoZW4oaXNzdWVyID0+IHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IFJlY2VpdmVkIGlzc3VlcjpcIiArIGlzc3Vlcik7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldFNpZ25pbmdLZXlzKCkudGhlbihrZXlzID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IE5vIHNpZ25pbmcga2V5cyBmcm9tIG1ldGFkYXRhXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHNpZ25pbmcga2V5cyBmcm9tIG1ldGFkYXRhXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogUmVjZWl2ZWQgc2lnbmluZyBrZXlzXCIpO1xuICAgICAgICAgICAgICAgICAgICBsZXQga2V5O1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWtpZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5cyA9IHRoaXMuX2ZpbHRlckJ5QWxnKGtleXMsIGp3dC5oZWFkZXIuYWxnKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8ga2lkIGZvdW5kIGluIGlkX3Rva2VuIGFuZCBtb3JlIHRoYW4gb25lIGtleSBmb3VuZCBpbiBtZXRhZGF0YVwiKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraWQgaXMgbWFuZGF0b3J5IG9ubHkgd2hlbiB0aGVyZSBhcmUgbXVsdGlwbGUga2V5cyBpbiB0aGUgcmVmZXJlbmNlZCBKV0sgU2V0IGRvY3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VlIGh0dHA6Ly9vcGVuaWQubmV0L3NwZWNzL29wZW5pZC1jb25uZWN0LWNvcmUtMV8wLmh0bWwjU2lnbmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBrZXkua2lkID09PSBraWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVswXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VySW5mb1NlcnZpY2UuX2dldENsYWltc0Zyb21Kd3Q6IE5vIGtleSBtYXRjaGluZyBraWQgb3IgYWxnIGZvdW5kIGluIHNpZ25pbmcga2V5c1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJObyBrZXkgbWF0Y2hpbmcga2lkIG9yIGFsZyBmb3VuZCBpbiBzaWduaW5nIGtleXNcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IGF1ZGllbmNlID0gdGhpcy5fc2V0dGluZ3MuY2xpZW50X2lkO1xuXG4gICAgICAgICAgICAgICAgICAgIGxldCBjbG9ja1NrZXdJblNlY29uZHMgPSB0aGlzLl9zZXR0aW5ncy5jbG9ja1NrZXc7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogVmFsaWRhaW5nIEpXVDsgdXNpbmcgY2xvY2sgc2tldyAoaW4gc2Vjb25kcykgb2Y6IFwiLCBjbG9ja1NrZXdJblNlY29uZHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9qb3NlVXRpbC52YWxpZGF0ZUp3dChyZXEucmVzcG9uc2VUZXh0LCBrZXksIGlzc3VlciwgYXVkaWVuY2UsIGNsb2NrU2tld0luU2Vjb25kcywgdW5kZWZpbmVkLCB0cnVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZ2V0Q2xhaW1zRnJvbUp3dDogSldUIHZhbGlkYXRpb24gc3VjY2Vzc2Z1bFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBqd3QucGF5bG9hZDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlckluZm9TZXJ2aWNlLl9nZXRDbGFpbXNGcm9tSnd0OiBFcnJvciBwYXJzaW5nIEpXVCByZXNwb25zZVwiLCBlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2ZpbHRlckJ5QWxnKGtleXMsIGFsZykge1xuICAgICAgICB2YXIga3R5ID0gbnVsbDtcbiAgICAgICAgaWYgKGFsZy5zdGFydHNXaXRoKFwiUlNcIikpIHtcbiAgICAgICAgICAgIGt0eSA9IFwiUlNBXCI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxnLnN0YXJ0c1dpdGgoXCJQU1wiKSkge1xuICAgICAgICAgICAga3R5ID0gXCJQU1wiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGFsZy5zdGFydHNXaXRoKFwiRVNcIikpIHtcbiAgICAgICAgICAgIGt0eSA9IFwiRUNcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZmlsdGVyQnlBbGc6IGFsZyBub3Qgc3VwcG9ydGVkOiBcIiwgYWxnKTtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJJbmZvU2VydmljZS5fZmlsdGVyQnlBbGc6IExvb2tpbmcgZm9yIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHkpO1xuXG4gICAgICAgIGtleXMgPSBrZXlzLmZpbHRlcihrZXkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGtleS5rdHkgPT09IGt0eTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlckluZm9TZXJ2aWNlLl9maWx0ZXJCeUFsZzogTnVtYmVyIG9mIGtleXMgdGhhdCBtYXRjaCBrdHk6IFwiLCBrdHksIGtleXMubGVuZ3RoKTtcblxuICAgICAgICByZXR1cm4ga2V5cztcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBPaWRjQ2xpZW50IH0gZnJvbSAnLi9PaWRjQ2xpZW50LmpzJztcbmltcG9ydCB7IFVzZXJNYW5hZ2VyU2V0dGluZ3MgfSBmcm9tICcuL1VzZXJNYW5hZ2VyU2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgVXNlciB9IGZyb20gJy4vVXNlci5qcyc7XG5pbXBvcnQgeyBVc2VyTWFuYWdlckV2ZW50cyB9IGZyb20gJy4vVXNlck1hbmFnZXJFdmVudHMuanMnO1xuaW1wb3J0IHsgU2lsZW50UmVuZXdTZXJ2aWNlIH0gZnJvbSAnLi9TaWxlbnRSZW5ld1NlcnZpY2UuanMnO1xuaW1wb3J0IHsgU2Vzc2lvbk1vbml0b3IgfSBmcm9tICcuL1Nlc3Npb25Nb25pdG9yLmpzJztcbmltcG9ydCB7IFNpZ25pblJlcXVlc3QgfSBmcm9tIFwiLi9TaWduaW5SZXF1ZXN0XCI7XG5pbXBvcnQgeyBUb2tlblJldm9jYXRpb25DbGllbnQgfSBmcm9tICcuL1Rva2VuUmV2b2NhdGlvbkNsaWVudC5qcyc7XG5pbXBvcnQgeyBUb2tlbkNsaWVudCB9IGZyb20gJy4vVG9rZW5DbGllbnQuanMnO1xuaW1wb3J0IHsgSm9zZVV0aWwgfSBmcm9tICcuL0pvc2VVdGlsLmpzJztcblxuXG5leHBvcnQgY2xhc3MgVXNlck1hbmFnZXIgZXh0ZW5kcyBPaWRjQ2xpZW50IHtcbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9LFxuICAgICAgICBTaWxlbnRSZW5ld1NlcnZpY2VDdG9yID0gU2lsZW50UmVuZXdTZXJ2aWNlLFxuICAgICAgICBTZXNzaW9uTW9uaXRvckN0b3IgPSBTZXNzaW9uTW9uaXRvcixcbiAgICAgICAgVG9rZW5SZXZvY2F0aW9uQ2xpZW50Q3RvciA9IFRva2VuUmV2b2NhdGlvbkNsaWVudCxcbiAgICAgICAgVG9rZW5DbGllbnRDdG9yID0gVG9rZW5DbGllbnQsXG4gICAgICAgIGpvc2VVdGlsID0gSm9zZVV0aWxcbiAgICApIHtcblxuICAgICAgICBpZiAoIShzZXR0aW5ncyBpbnN0YW5jZW9mIFVzZXJNYW5hZ2VyU2V0dGluZ3MpKSB7XG4gICAgICAgICAgICBzZXR0aW5ncyA9IG5ldyBVc2VyTWFuYWdlclNldHRpbmdzKHNldHRpbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcihzZXR0aW5ncyk7XG5cbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IFVzZXJNYW5hZ2VyRXZlbnRzKHNldHRpbmdzKTtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdTZXJ2aWNlID0gbmV3IFNpbGVudFJlbmV3U2VydmljZUN0b3IodGhpcyk7XG5cbiAgICAgICAgLy8gb3JkZXIgaXMgaW1wb3J0YW50IGZvciB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM7IHRoZXNlIHNlcnZpY2VzIGRlcGVuZCB1cG9uIHRoZSBldmVudHMuXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmF1dG9tYXRpY1NpbGVudFJlbmV3KSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5jdG9yOiBhdXRvbWF0aWNTaWxlbnRSZW5ldyBpcyBjb25maWd1cmVkLCBzZXR0aW5nIHVwIHNpbGVudCByZW5ld1wiKTtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRTaWxlbnRSZW5ldygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MubW9uaXRvclNlc3Npb24pIHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLmN0b3I6IG1vbml0b3JTZXNzaW9uIGlzIGNvbmZpZ3VyZWQsIHNldHRpbmcgdXAgc2Vzc2lvbiBtb25pdG9yXCIpO1xuICAgICAgICAgICAgdGhpcy5fc2Vzc2lvbk1vbml0b3IgPSBuZXcgU2Vzc2lvbk1vbml0b3JDdG9yKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50ID0gbmV3IFRva2VuUmV2b2NhdGlvbkNsaWVudEN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl90b2tlbkNsaWVudCA9IG5ldyBUb2tlbkNsaWVudEN0b3IodGhpcy5fc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLl9qb3NlVXRpbCA9IGpvc2VVdGlsO1xuICAgIH1cblxuICAgIGdldCBfcmVkaXJlY3ROYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnJlZGlyZWN0TmF2aWdhdG9yO1xuICAgIH1cbiAgICBnZXQgX3BvcHVwTmF2aWdhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZXR0aW5ncy5wb3B1cE5hdmlnYXRvcjtcbiAgICB9XG4gICAgZ2V0IF9pZnJhbWVOYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmlmcmFtZU5hdmlnYXRvcjtcbiAgICB9XG4gICAgZ2V0IF91c2VyU3RvcmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLnVzZXJTdG9yZTtcbiAgICB9XG5cbiAgICBnZXQgZXZlbnRzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXZlbnRzO1xuICAgIH1cblxuICAgIGdldFVzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkVXNlcigpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuZ2V0VXNlcjogdXNlciBsb2FkZWRcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyLCBmYWxzZSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuZ2V0VXNlcjogdXNlciBub3QgZm91bmQgaW4gc3RvcmFnZVwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVXNlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVVc2VyKG51bGwpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5yZW1vdmVVc2VyOiB1c2VyIHJlbW92ZWQgZnJvbSBzdG9yYWdlXCIpO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzLnVubG9hZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaWduaW5SZWRpcmVjdChhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIGFyZ3MucmVxdWVzdF90eXBlID0gXCJzaTpyXCI7XG4gICAgICAgIGxldCBuYXZQYXJhbXMgPSB7XG4gICAgICAgICAgICB1c2VSZXBsYWNlVG9OYXZpZ2F0ZSA6IGFyZ3MudXNlUmVwbGFjZVRvTmF2aWdhdGVcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25pblN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLCBuYXZQYXJhbXMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3Q6IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluRW5kKHVybCB8fCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci51cmwpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25pblJlZGlyZWN0Q2FsbGJhY2s6IHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUmVkaXJlY3RDYWxsYmFjazogbm8gc3ViXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2lnbmluUG9wdXAoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLnJlcXVlc3RfdHlwZSA9IFwic2k6cFwiO1xuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5yZWRpcmVjdF91cmk7XG4gICAgICAgIGlmICghdXJsKSB7XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogTm8gcG9wdXBfcmVkaXJlY3RfdXJpIG9yIHJlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHBvcHVwX3JlZGlyZWN0X3VyaSBvciByZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzLnJlZGlyZWN0X3VyaSA9IHVybDtcbiAgICAgICAgYXJncy5kaXNwbGF5ID0gXCJwb3B1cFwiO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW4oYXJncywgdGhpcy5fcG9wdXBOYXZpZ2F0b3IsIHtcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXG4gICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgICAgICAgcG9wdXBXaW5kb3dUYXJnZXQ6IGFyZ3MucG9wdXBXaW5kb3dUYXJnZXQgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd1RhcmdldFxuICAgICAgICB9KS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogc2lnbmluUG9wdXAgc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cDogbm8gc3ViXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzaWduaW5Qb3B1cENhbGxiYWNrKHVybCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluQ2FsbGJhY2sodXJsLCB0aGlzLl9wb3B1cE5hdmlnYXRvcikudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluUG9wdXBDYWxsYmFjazogc3VjY2Vzc2Z1bCwgc2lnbmVkIGluIHN1YjogXCIsIHVzZXIucHJvZmlsZS5zdWIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrOiBubyBzdWJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfSkuY2F0Y2goZXJyPT57XG4gICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5zaWduaW5Qb3B1cENhbGxiYWNrIGVycm9yOiBcIiArIGVyciAmJiBlcnIubWVzc2FnZSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25pblNpbGVudChhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIC8vIGZpcnN0IGRldGVybWluZSBpZiB3ZSBoYXZlIGEgcmVmcmVzaCB0b2tlbiwgb3IgbmVlZCB0byB1c2UgaWZyYW1lXG4gICAgICAgIHJldHVybiB0aGlzLl9sb2FkVXNlcigpLnRoZW4odXNlciA9PiB7XG4gICAgICAgICAgICBpZiAodXNlciAmJiB1c2VyLnJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBhcmdzLnJlZnJlc2hfdG9rZW4gPSB1c2VyLnJlZnJlc2hfdG9rZW47XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZVJlZnJlc2hUb2tlbihhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGFyZ3MucmVxdWVzdF90eXBlID0gXCJzaTpzXCI7XG4gICAgICAgICAgICAgICAgYXJncy5pZF90b2tlbl9oaW50ID0gYXJncy5pZF90b2tlbl9oaW50IHx8ICh0aGlzLnNldHRpbmdzLmluY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyAmJiB1c2VyICYmIHVzZXIuaWRfdG9rZW4pO1xuICAgICAgICAgICAgICAgIGlmICh1c2VyICYmIHRoaXMuX3NldHRpbmdzLnZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldykge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQsIHN1YmplY3QgcHJpb3IgdG8gc2lsZW50IHJlbmV3OiBcIiwgdXNlci5wcm9maWxlLnN1Yik7XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MuY3VycmVudF9zdWIgPSB1c2VyLnByb2ZpbGUuc3ViO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU2lsZW50SWZyYW1lKGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfdXNlUmVmcmVzaFRva2VuKGFyZ3MgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5DbGllbnQuZXhjaGFuZ2VSZWZyZXNoVG9rZW4oYXJncykudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdXNlUmVmcmVzaFRva2VuOiBObyByZXNwb25zZSByZXR1cm5lZCBmcm9tIHRva2VuIGVuZHBvaW50XCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcIk5vIHJlc3BvbnNlIHJldHVybmVkIGZyb20gdG9rZW4gZW5kcG9pbnRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5hY2Nlc3NfdG9rZW4pIHtcbiAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdXNlUmVmcmVzaFRva2VuOiBObyBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQgZnJvbSB0b2tlbiBlbmRwb2ludFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXCJObyBhY2Nlc3MgdG9rZW4gcmV0dXJuZWQgZnJvbSB0b2tlbiBlbmRwb2ludFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VyKCkudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgICAgICAgICBsZXQgaWRUb2tlblZhbGlkYXRpb24gPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5pZF90b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRUb2tlblZhbGlkYXRpb24gPSB0aGlzLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW4odXNlci5wcm9maWxlLCByZXN1bHQuaWRfdG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkVG9rZW5WYWxpZGF0aW9uLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3VzZVJlZnJlc2hUb2tlbjogcmVmcmVzaCB0b2tlbiByZXNwb25zZSBzdWNjZXNzXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5pZF90b2tlbiA9IHJlc3VsdC5pZF90b2tlbiB8fCB1c2VyLmlkX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5hY2Nlc3NfdG9rZW4gPSByZXN1bHQuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5yZWZyZXNoX3Rva2VuID0gcmVzdWx0LnJlZnJlc2hfdG9rZW4gfHwgdXNlci5yZWZyZXNoX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlci5leHBpcmVzX2luID0gcmVzdWx0LmV4cGlyZXNfaW47XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0b3JlVXNlcih1c2VyKS50aGVuKCgpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzLmxvYWQodXNlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVzZXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbihwcm9maWxlLCBpZF90b2tlbikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFTZXJ2aWNlLmdldElzc3VlcigpLnRoZW4oaXNzdWVyID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldHRpbmdzLmdldEVwb2NoVGltZSgpLnRoZW4obm93ID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fam9zZVV0aWwudmFsaWRhdGVKd3RBdHRyaWJ1dGVzKGlkX3Rva2VuLCBpc3N1ZXIsIHRoaXMuX3NldHRpbmdzLmNsaWVudF9pZCwgdGhpcy5fc2V0dGluZ3MuY2xvY2tTa2V3LCBub3cpLnRoZW4ocGF5bG9hZCA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF5bG9hZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbjogRmFpbGVkIHRvIHZhbGlkYXRlIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIkZhaWxlZCB0byB2YWxpZGF0ZSBpZF90b2tlblwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuc3ViICE9PSBwcm9maWxlLnN1Yikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbjogc3ViIGluIGlkX3Rva2VuIGRvZXMgbm90IG1hdGNoIGN1cnJlbnQgc3ViXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcInN1YiBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBjdXJyZW50IHN1YlwiKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHBheWxvYWQuYXV0aF90aW1lICYmIHBheWxvYWQuYXV0aF90aW1lICE9PSBwcm9maWxlLmF1dGhfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuX3ZhbGlkYXRlSWRUb2tlbkZyb21Ub2tlblJlZnJlc2hUb2tlbjogYXV0aF90aW1lIGluIGlkX3Rva2VuIGRvZXMgbm90IG1hdGNoIG9yaWdpbmFsIGF1dGhfdGltZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJhdXRoX3RpbWUgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWwgYXV0aF90aW1lXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocGF5bG9hZC5henAgJiYgcGF5bG9hZC5henAgIT09IHByb2ZpbGUuYXpwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZXJyb3IoXCJVc2VyTWFuYWdlci5fdmFsaWRhdGVJZFRva2VuRnJvbVRva2VuUmVmcmVzaFRva2VuOiBhenAgaW4gaWRfdG9rZW4gZG9lcyBub3QgbWF0Y2ggb3JpZ2luYWwgYXpwXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF6cCBpbiBpZF90b2tlbiBkb2VzIG5vdCBtYXRjaCBvcmlnaW5hbCBhenBcIikpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGF5bG9hZC5henAgJiYgcHJvZmlsZS5henApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLl92YWxpZGF0ZUlkVG9rZW5Gcm9tVG9rZW5SZWZyZXNoVG9rZW46IGF6cCBub3QgaW4gaWRfdG9rZW4sIGJ1dCBwcmVzZW50IGluIG9yaWdpbmFsIGlkX3Rva2VuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImF6cCBub3QgaW4gaWRfdG9rZW4sIGJ1dCBwcmVzZW50IGluIG9yaWdpbmFsIGlkX3Rva2VuXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICBfc2lnbmluU2lsZW50SWZyYW1lKGFyZ3MgPSB7fSkge1xuICAgICAgICBsZXQgdXJsID0gYXJncy5yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRfcmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3MucmVkaXJlY3RfdXJpO1xuICAgICAgICBpZiAoIXVybCkge1xuICAgICAgICAgICAgTG9nLmVycm9yKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50OiBObyBzaWxlbnRfcmVkaXJlY3RfdXJpIGNvbmZpZ3VyZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKFwiTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFyZ3MucmVkaXJlY3RfdXJpID0gdXJsO1xuICAgICAgICBhcmdzLnByb21wdCA9IGFyZ3MucHJvbXB0IHx8IFwibm9uZVwiO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW4oYXJncywgdGhpcy5faWZyYW1lTmF2aWdhdG9yLCB7XG4gICAgICAgICAgICBzdGFydFVybDogdXJsLFxuICAgICAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQ6IGFyZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRSZXF1ZXN0VGltZW91dFxuICAgICAgICB9KS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgaWYgKHVzZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAodXNlci5wcm9maWxlICYmIHVzZXIucHJvZmlsZS5zdWIpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5zaWduaW5TaWxlbnQ6IHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50OiBubyBzdWJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2lnbmluU2lsZW50Q2FsbGJhY2sodXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5DYWxsYmFjayh1cmwsIHRoaXMuX2lmcmFtZU5hdmlnYXRvcikudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHVzZXIucHJvZmlsZSAmJiB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50Q2FsbGJhY2s6IHN1Y2Nlc3NmdWwsIHNpZ25lZCBpbiBzdWI6IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbmluU2lsZW50Q2FsbGJhY2s6IG5vIHN1YlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaWduaW5DYWxsYmFjayh1cmwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFNpZ25pblJlc3BvbnNlU3RhdGUodXJsKS50aGVuKCh7c3RhdGUsIHJlc3BvbnNlfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlcXVlc3RfdHlwZSA9PT0gXCJzaTpyXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zaWduaW5SZWRpcmVjdENhbGxiYWNrKHVybCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUucmVxdWVzdF90eXBlID09PSBcInNpOnBcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNpZ25pblBvcHVwQ2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZS5yZXF1ZXN0X3R5cGUgPT09IFwic2k6c1wiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmluU2lsZW50Q2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlX3R5cGUgaW4gc3RhdGVcIikpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaWdub3V0Q2FsbGJhY2sodXJsLCBrZWVwT3Blbikge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkU2lnbm91dFJlc3BvbnNlU3RhdGUodXJsKS50aGVuKCh7c3RhdGUsIHJlc3BvbnNlfSkgPT4ge1xuICAgICAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnJlcXVlc3RfdHlwZSA9PT0gXCJzbzpyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2sodXJsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHN0YXRlLnJlcXVlc3RfdHlwZSA9PT0gXCJzbzpwXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2lnbm91dFBvcHVwQ2FsbGJhY2sodXJsLCBrZWVwT3Blbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoXCJpbnZhbGlkIHJlc3BvbnNlX3R5cGUgaW4gc3RhdGVcIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBxdWVyeVNlc3Npb25TdGF0dXMoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLnJlcXVlc3RfdHlwZSA9IFwic2k6c1wiOyAvLyB0aGlzIGFjdHMgbGlrZSBhIHNpZ25pbiBzaWxlbnRcbiAgICAgICAgbGV0IHVybCA9IGFyZ3MucmVkaXJlY3RfdXJpIHx8IHRoaXMuc2V0dGluZ3Muc2lsZW50X3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnJlZGlyZWN0X3VyaTtcbiAgICAgICAgaWYgKCF1cmwpIHtcbiAgICAgICAgICAgIExvZy5lcnJvcihcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogTm8gc2lsZW50X3JlZGlyZWN0X3VyaSBjb25maWd1cmVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIk5vIHNpbGVudF9yZWRpcmVjdF91cmkgY29uZmlndXJlZFwiKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmdzLnJlZGlyZWN0X3VyaSA9IHVybDtcbiAgICAgICAgYXJncy5wcm9tcHQgPSBcIm5vbmVcIjtcbiAgICAgICAgYXJncy5yZXNwb25zZV90eXBlID0gYXJncy5yZXNwb25zZV90eXBlIHx8IHRoaXMuc2V0dGluZ3MucXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGU7XG4gICAgICAgIGFyZ3Muc2NvcGUgPSBhcmdzLnNjb3BlIHx8IFwib3BlbmlkXCI7XG4gICAgICAgIGFyZ3Muc2tpcFVzZXJJbmZvID0gdHJ1ZTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluU3RhcnQoYXJncywgdGhpcy5faWZyYW1lTmF2aWdhdG9yLCB7XG4gICAgICAgICAgICBzdGFydFVybDogdXJsLFxuICAgICAgICAgICAgc2lsZW50UmVxdWVzdFRpbWVvdXQ6IGFyZ3Muc2lsZW50UmVxdWVzdFRpbWVvdXQgfHwgdGhpcy5zZXR0aW5ncy5zaWxlbnRSZXF1ZXN0VGltZW91dFxuICAgICAgICB9KS50aGVuKG5hdlJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaWduaW5SZXNwb25zZShuYXZSZXNwb25zZS51cmwpLnRoZW4oc2lnbmluUmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLnF1ZXJ5U2Vzc2lvblN0YXR1czogZ290IHNpZ25pbiByZXNwb25zZVwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChzaWduaW5SZXNwb25zZS5zZXNzaW9uX3N0YXRlICYmIHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIucXVlcnlTZXNzaW9uU3RhdHVzOiBxdWVyeVNlc3Npb25TdGF0dXMgc3VjY2VzcyBmb3Igc3ViOiBcIiwgIHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb25fc3RhdGU6IHNpZ25pblJlc3BvbnNlLnNlc3Npb25fc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWI6IHNpZ25pblJlc3BvbnNlLnByb2ZpbGUuc3ViLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2lkOiBzaWduaW5SZXNwb25zZS5wcm9maWxlLnNpZFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJxdWVyeVNlc3Npb25TdGF0dXMgc3VjY2Vzc2Z1bCwgdXNlciBub3QgYXV0aGVudGljYXRlZFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGVyci5zZXNzaW9uX3N0YXRlICYmIHRoaXMuc2V0dGluZ3MubW9uaXRvckFub255bW91c1Nlc3Npb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVyci5tZXNzYWdlID09IFwibG9naW5fcmVxdWlyZWRcIiB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGVyci5tZXNzYWdlID09IFwiY29uc2VudF9yZXF1aXJlZFwiIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT0gXCJpbnRlcmFjdGlvbl9yZXF1aXJlZFwiIHx8IFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UgPT0gXCJhY2NvdW50X3NlbGVjdGlvbl9yZXF1aXJlZFwiXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmluZm8oXCJVc2VyTWFuYWdlci5xdWVyeVNlc3Npb25TdGF0dXM6IHF1ZXJ5U2Vzc2lvblN0YXR1cyBzdWNjZXNzIGZvciBhbm9ueW1vdXMgdXNlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbl9zdGF0ZTogZXJyLnNlc3Npb25fc3RhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3NpZ25pbihhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWduaW5TdGFydChhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcykudGhlbihuYXZSZXNwb25zZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc2lnbmluRW5kKG5hdlJlc3BvbnNlLnVybCwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc2lnbmluU3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMgPSB7fSkge1xuXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IucHJlcGFyZShuYXZpZ2F0b3JQYXJhbXMpLnRoZW4oaGFuZGxlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5TdGFydDogZ290IG5hdmlnYXRvciB3aW5kb3cgaGFuZGxlXCIpO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTaWduaW5SZXF1ZXN0KGFyZ3MpLnRoZW4oc2lnbmluUmVxdWVzdCA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pblN0YXJ0OiBnb3Qgc2lnbmluIHJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMudXJsID0gc2lnbmluUmVxdWVzdC51cmw7XG4gICAgICAgICAgICAgICAgbmF2aWdhdG9yUGFyYW1zLmlkID0gc2lnbmluUmVxdWVzdC5zdGF0ZS5pZDtcblxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUubmF2aWdhdGUobmF2aWdhdG9yUGFyYW1zKTtcbiAgICAgICAgICAgIH0pLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZS5jbG9zZSkge1xuICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbmluU3RhcnQ6IEVycm9yIGFmdGVyIHByZXBhcmluZyBuYXZpZ2F0b3IsIGNsb3NpbmcgbmF2aWdhdG9yIHdpbmRvd1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NpZ25pbkVuZCh1cmwsIGFyZ3MgPSB7fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzU2lnbmluUmVzcG9uc2UodXJsKS50aGVuKHNpZ25pblJlc3BvbnNlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGdvdCBzaWduaW4gcmVzcG9uc2VcIik7XG5cbiAgICAgICAgICAgIGxldCB1c2VyID0gbmV3IFVzZXIoc2lnbmluUmVzcG9uc2UpO1xuXG4gICAgICAgICAgICBpZiAoYXJncy5jdXJyZW50X3N1Yikge1xuICAgICAgICAgICAgICAgIGlmIChhcmdzLmN1cnJlbnRfc3ViICE9PSB1c2VyLnByb2ZpbGUuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGN1cnJlbnQgdXNlciBkb2VzIG5vdCBtYXRjaCB1c2VyIHJldHVybmVkIGZyb20gc2lnbmluLiBzdWIgZnJvbSBzaWduaW46IFwiLCB1c2VyLnByb2ZpbGUuc3ViKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcImxvZ2luX3JlcXVpcmVkXCIpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWduaW5FbmQ6IGN1cnJlbnQgdXNlciBtYXRjaGVzIHVzZXIgcmV0dXJuZWQgZnJvbSBzaWduaW5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkVuZDogdXNlciBzdG9yZWRcIik7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiB1c2VyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBfc2lnbmluQ2FsbGJhY2sodXJsLCBuYXZpZ2F0b3IpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25pbkNhbGxiYWNrXCIpO1xuICAgICAgICBsZXQgdXNlUXVlcnkgPSB0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlID09PSBcInF1ZXJ5XCIgfHwgKCF0aGlzLl9zZXR0aW5ncy5yZXNwb25zZV9tb2RlICYmIFNpZ25pblJlcXVlc3QuaXNDb2RlKHRoaXMuX3NldHRpbmdzLnJlc3BvbnNlX3R5cGUpKTtcbiAgICAgICAgbGV0IGRlbGltaXRlciA9IHVzZVF1ZXJ5ID8gXCI/XCIgOiBcIiNcIjtcbiAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5jYWxsYmFjayh1cmwsIHVuZGVmaW5lZCwgZGVsaW1pdGVyKTtcbiAgICB9XG5cbiAgICBzaWdub3V0UmVkaXJlY3QoYXJncyA9IHt9KSB7XG4gICAgICAgIGFyZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBhcmdzKTtcblxuICAgICAgICBhcmdzLnJlcXVlc3RfdHlwZSA9IFwic286clwiO1xuICAgICAgICBsZXQgcG9zdExvZ291dFJlZGlyZWN0VXJpID0gYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgfHwgdGhpcy5zZXR0aW5ncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgICAgIGlmIChwb3N0TG9nb3V0UmVkaXJlY3RVcmkpe1xuICAgICAgICAgICAgYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSBwb3N0TG9nb3V0UmVkaXJlY3RVcmk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5hdlBhcmFtcyA9IHtcbiAgICAgICAgICAgIHVzZVJlcGxhY2VUb05hdmlnYXRlIDogYXJncy51c2VSZXBsYWNlVG9OYXZpZ2F0ZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lnbm91dFN0YXJ0KGFyZ3MsIHRoaXMuX3JlZGlyZWN0TmF2aWdhdG9yLCBuYXZQYXJhbXMpLnRoZW4oKCk9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0OiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2sodXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0RW5kKHVybCB8fCB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvci51cmwpLnRoZW4ocmVzcG9uc2U9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFJlZGlyZWN0Q2FsbGJhY2s6IHN1Y2Nlc3NmdWxcIik7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHNpZ25vdXRQb3B1cChhcmdzID0ge30pIHtcbiAgICAgICAgYXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGFyZ3MpO1xuXG4gICAgICAgIGFyZ3MucmVxdWVzdF90eXBlID0gXCJzbzpwXCI7XG4gICAgICAgIGxldCB1cmwgPSBhcmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSB8fCB0aGlzLnNldHRpbmdzLnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICAgICAgYXJncy5wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkgPSB1cmw7XG4gICAgICAgIGFyZ3MuZGlzcGxheSA9IFwicG9wdXBcIjtcbiAgICAgICAgaWYgKGFyZ3MucG9zdF9sb2dvdXRfcmVkaXJlY3RfdXJpKXtcbiAgICAgICAgICAgIC8vIHdlJ3JlIHB1dHRpbmcgYSBkdW1teSBlbnRyeSBpbiBoZXJlIGJlY2F1c2Ugd2VcbiAgICAgICAgICAgIC8vIG5lZWQgYSB1bmlxdWUgaWQgZnJvbSB0aGUgc3RhdGUgZm9yIG5vdGlmaWNhdGlvblxuICAgICAgICAgICAgLy8gdG8gdGhlIHBhcmVudCB3aW5kb3csIHdoaWNoIGlzIG5lY2Vzc2FyeSBpZiB3ZVxuICAgICAgICAgICAgLy8gcGxhbiB0byByZXR1cm4gYmFjayB0byB0aGUgY2xpZW50IGFmdGVyIHNpZ25vdXRcbiAgICAgICAgICAgIC8vIGFuZCBzbyB3ZSBjYW4gY2xvc2UgdGhlIHBvcHVwIGFmdGVyIHNpZ25vdXRcbiAgICAgICAgICAgIGFyZ3Muc3RhdGUgPSBhcmdzLnN0YXRlIHx8IHt9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXQoYXJncywgdGhpcy5fcG9wdXBOYXZpZ2F0b3IsIHtcbiAgICAgICAgICAgIHN0YXJ0VXJsOiB1cmwsXG4gICAgICAgICAgICBwb3B1cFdpbmRvd0ZlYXR1cmVzOiBhcmdzLnBvcHVwV2luZG93RmVhdHVyZXMgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd0ZlYXR1cmVzLFxuICAgICAgICAgICAgcG9wdXBXaW5kb3dUYXJnZXQ6IGFyZ3MucG9wdXBXaW5kb3dUYXJnZXQgfHwgdGhpcy5zZXR0aW5ncy5wb3B1cFdpbmRvd1RhcmdldFxuICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIuc2lnbm91dFBvcHVwOiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgc2lnbm91dFBvcHVwQ2FsbGJhY2sodXJsLCBrZWVwT3Blbikge1xuICAgICAgICBpZiAodHlwZW9mKGtlZXBPcGVuKSA9PT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mKHVybCkgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAga2VlcE9wZW4gPSB1cmw7XG4gICAgICAgICAgICB1cmwgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGRlbGltaXRlciA9ICc/JztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwTmF2aWdhdG9yLmNhbGxiYWNrKHVybCwga2VlcE9wZW4sIGRlbGltaXRlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBMb2cuaW5mbyhcIlVzZXJNYW5hZ2VyLnNpZ25vdXRQb3B1cENhbGxiYWNrOiBzdWNjZXNzZnVsXCIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfc2lnbm91dChhcmdzLCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWdub3V0U3RhcnQoYXJncywgbmF2aWdhdG9yLCBuYXZpZ2F0b3JQYXJhbXMpLnRoZW4obmF2UmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NpZ25vdXRFbmQobmF2UmVzcG9uc2UudXJsKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIF9zaWdub3V0U3RhcnQoYXJncyA9IHt9LCBuYXZpZ2F0b3IsIG5hdmlnYXRvclBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IucHJlcGFyZShuYXZpZ2F0b3JQYXJhbXMpLnRoZW4oaGFuZGxlID0+IHtcbiAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IGdvdCBuYXZpZ2F0b3Igd2luZG93IGhhbmRsZVwiKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRVc2VyKCkudGhlbih1c2VyID0+IHtcbiAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dFN0YXJ0OiBsb2FkZWQgY3VycmVudCB1c2VyIGZyb20gc3RvcmFnZVwiKTtcblxuICAgICAgICAgICAgICAgIHZhciByZXZva2VQcm9taXNlID0gdGhpcy5fc2V0dGluZ3MucmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQgPyB0aGlzLl9yZXZva2VJbnRlcm5hbCh1c2VyKSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXZva2VQcm9taXNlLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBpZF90b2tlbiA9IGFyZ3MuaWRfdG9rZW5faGludCB8fCB1c2VyICYmIHVzZXIuaWRfdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGlmIChpZF90b2tlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogU2V0dGluZyBpZF90b2tlbiBpbnRvIHNpZ25vdXQgcmVxdWVzdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3MuaWRfdG9rZW5faGludCA9IGlkX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlVXNlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX3NpZ25vdXRTdGFydDogdXNlciByZW1vdmVkLCBjcmVhdGluZyBzaWdub3V0IHJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNpZ25vdXRSZXF1ZXN0KGFyZ3MpLnRoZW4oc2lnbm91dFJlcXVlc3QgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IGdvdCBzaWdub3V0IHJlcXVlc3RcIik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMudXJsID0gc2lnbm91dFJlcXVlc3QudXJsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaWdub3V0UmVxdWVzdC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0b3JQYXJhbXMuaWQgPSBzaWdub3V0UmVxdWVzdC5zdGF0ZS5pZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZS5uYXZpZ2F0ZShuYXZpZ2F0b3JQYXJhbXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlLmNsb3NlKSB7XG4gICAgICAgICAgICAgICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyLl9zaWdub3V0U3RhcnQ6IEVycm9yIGFmdGVyIHByZXBhcmluZyBuYXZpZ2F0b3IsIGNsb3NpbmcgbmF2aWdhdG9yIHdpbmRvd1wiKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgX3NpZ25vdXRFbmQodXJsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaWdub3V0UmVzcG9uc2UodXJsKS50aGVuKHNpZ25vdXRSZXNwb25zZSA9PiB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fc2lnbm91dEVuZDogZ290IHNpZ25vdXQgcmVzcG9uc2VcIik7XG5cbiAgICAgICAgICAgIHJldHVybiBzaWdub3V0UmVzcG9uc2U7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldm9rZUFjY2Vzc1Rva2VuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbG9hZFVzZXIoKS50aGVuKHVzZXIgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUludGVybmFsKHVzZXIsIHRydWUpLnRoZW4oc3VjY2VzcyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IHJlbW92aW5nIHRva2VuIHByb3BlcnRpZXMgZnJvbSB1c2VyIGFuZCByZS1zdG9yaW5nXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIHVzZXIuYWNjZXNzX3Rva2VuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXNlci5yZWZyZXNoX3Rva2VuID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXNlci5leHBpcmVzX2F0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgdXNlci50b2tlbl90eXBlID0gbnVsbDtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVVzZXIodXNlcikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5yZXZva2VBY2Nlc3NUb2tlbjogdXNlciBzdG9yZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ldmVudHMubG9hZCh1c2VyKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4oKCk9PntcbiAgICAgICAgICAgIExvZy5pbmZvKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IGFjY2VzcyB0b2tlbiByZXZva2VkIHN1Y2Nlc3NmdWxseVwiKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3Jldm9rZUludGVybmFsKHVzZXIsIHJlcXVpcmVkKSB7XG4gICAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgICAgICB2YXIgYWNjZXNzX3Rva2VuID0gdXNlci5hY2Nlc3NfdG9rZW47XG4gICAgICAgICAgICB2YXIgcmVmcmVzaF90b2tlbiA9IHVzZXIucmVmcmVzaF90b2tlbjtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jldm9rZUFjY2Vzc1Rva2VuSW50ZXJuYWwoYWNjZXNzX3Rva2VuLCByZXF1aXJlZClcbiAgICAgICAgICAgICAgICAudGhlbihhdFN1Y2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmV2b2tlUmVmcmVzaFRva2VuSW50ZXJuYWwocmVmcmVzaF90b2tlbiwgcmVxdWlyZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGhlbihydFN1Y2Nlc3MgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYXRTdWNjZXNzICYmICFydFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIucmV2b2tlQWNjZXNzVG9rZW46IG5vIG5lZWQgdG8gcmV2b2tlIGR1ZSB0byBubyB0b2tlbihzKSwgb3IgSldUIGZvcm1hdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF0U3VjY2VzcyB8fCBydFN1Y2Nlc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgIH1cblxuICAgIF9yZXZva2VBY2Nlc3NUb2tlbkludGVybmFsKGFjY2Vzc190b2tlbiwgcmVxdWlyZWQpIHtcbiAgICAgICAgLy8gY2hlY2sgZm9yIEpXVCB2cy4gcmVmZXJlbmNlIHRva2VuXG4gICAgICAgIGlmICghYWNjZXNzX3Rva2VuIHx8IGFjY2Vzc190b2tlbi5pbmRleE9mKCcuJykgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fdG9rZW5SZXZvY2F0aW9uQ2xpZW50LnJldm9rZShhY2Nlc3NfdG9rZW4sIHJlcXVpcmVkKS50aGVuKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIF9yZXZva2VSZWZyZXNoVG9rZW5JbnRlcm5hbChyZWZyZXNoX3Rva2VuLCByZXF1aXJlZCkge1xuICAgICAgICBpZiAoIXJlZnJlc2hfdG9rZW4pIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Rva2VuUmV2b2NhdGlvbkNsaWVudC5yZXZva2UocmVmcmVzaF90b2tlbiwgcmVxdWlyZWQsIFwicmVmcmVzaF90b2tlblwiKS50aGVuKCgpID0+IHRydWUpO1xuICAgIH1cblxuICAgIHN0YXJ0U2lsZW50UmVuZXcoKSB7XG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3U2VydmljZS5zdGFydCgpO1xuICAgIH1cblxuICAgIHN0b3BTaWxlbnRSZW5ldygpIHtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdTZXJ2aWNlLnN0b3AoKTtcbiAgICB9XG5cbiAgICBnZXQgX3VzZXJTdG9yZUtleSgpIHtcbiAgICAgICAgcmV0dXJuIGB1c2VyOiR7dGhpcy5zZXR0aW5ncy5hdXRob3JpdHl9OiR7dGhpcy5zZXR0aW5ncy5jbGllbnRfaWR9YDtcbiAgICB9XG5cbiAgICBfbG9hZFVzZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmUuZ2V0KHRoaXMuX3VzZXJTdG9yZUtleSkudGhlbihzdG9yYWdlU3RyaW5nID0+IHtcbiAgICAgICAgICAgIGlmIChzdG9yYWdlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuX2xvYWRVc2VyOiB1c2VyIHN0b3JhZ2VTdHJpbmcgbG9hZGVkXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBVc2VyLmZyb21TdG9yYWdlU3RyaW5nKHN0b3JhZ2VTdHJpbmcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBMb2cuZGVidWcoXCJVc2VyTWFuYWdlci5fbG9hZFVzZXI6IG5vIHVzZXIgc3RvcmFnZVN0cmluZ1wiKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzdG9yZVVzZXIodXNlcikge1xuICAgICAgICBpZiAodXNlcikge1xuICAgICAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXIuc3RvcmVVc2VyOiBzdG9yaW5nIHVzZXJcIik7XG5cbiAgICAgICAgICAgIHZhciBzdG9yYWdlU3RyaW5nID0gdXNlci50b1N0b3JhZ2VTdHJpbmcoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl91c2VyU3RvcmUuc2V0KHRoaXMuX3VzZXJTdG9yZUtleSwgc3RvcmFnZVN0cmluZyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBMb2cuZGVidWcoXCJzdG9yZVVzZXIuc3RvcmVVc2VyOiByZW1vdmluZyB1c2VyXCIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZS5yZW1vdmUodGhpcy5fdXNlclN0b3JlS2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8vIENvcHlyaWdodCAoYykgQnJvY2sgQWxsZW4gJiBEb21pbmljayBCYWllci4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAuIFNlZSBMSUNFTlNFIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG5cbmltcG9ydCB7IExvZyB9IGZyb20gJy4vTG9nLmpzJztcbmltcG9ydCB7IEFjY2Vzc1Rva2VuRXZlbnRzIH0gZnJvbSAnLi9BY2Nlc3NUb2tlbkV2ZW50cy5qcyc7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4vRXZlbnQuanMnO1xuXG5leHBvcnQgY2xhc3MgVXNlck1hbmFnZXJFdmVudHMgZXh0ZW5kcyBBY2Nlc3NUb2tlbkV2ZW50cyB7XG5cbiAgICBjb25zdHJ1Y3RvcihzZXR0aW5ncykge1xuICAgICAgICBzdXBlcihzZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQgPSBuZXcgRXZlbnQoXCJVc2VyIGxvYWRlZFwiKTtcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkID0gbmV3IEV2ZW50KFwiVXNlciB1bmxvYWRlZFwiKTtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvciA9IG5ldyBFdmVudChcIlNpbGVudCByZW5ldyBlcnJvclwiKTtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluID0gbmV3IEV2ZW50KFwiVXNlciBzaWduZWQgaW5cIik7XG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQgPSBuZXcgRXZlbnQoXCJVc2VyIHNpZ25lZCBvdXRcIik7XG4gICAgICAgIHRoaXMuX3VzZXJTZXNzaW9uQ2hhbmdlZCA9IG5ldyBFdmVudChcIlVzZXIgc2Vzc2lvbiBjaGFuZ2VkXCIpO1xuICAgIH1cblxuICAgIGxvYWQodXNlciwgcmFpc2VFdmVudD10cnVlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLmxvYWRcIik7XG4gICAgICAgIHN1cGVyLmxvYWQodXNlcik7XG4gICAgICAgIGlmIChyYWlzZUV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLl91c2VyTG9hZGVkLnJhaXNlKHVzZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHVubG9hZCgpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiVXNlck1hbmFnZXJFdmVudHMudW5sb2FkXCIpO1xuICAgICAgICBzdXBlci51bmxvYWQoKTtcbiAgICAgICAgdGhpcy5fdXNlclVubG9hZGVkLnJhaXNlKCk7XG4gICAgfVxuXG4gICAgYWRkVXNlckxvYWRlZChjYikge1xuICAgICAgICB0aGlzLl91c2VyTG9hZGVkLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyTG9hZGVkKGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJMb2FkZWQucmVtb3ZlSGFuZGxlcihjYik7XG4gICAgfVxuXG4gICAgYWRkVXNlclVubG9hZGVkKGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5hZGRIYW5kbGVyKGNiKTtcbiAgICB9XG4gICAgcmVtb3ZlVXNlclVubG9hZGVkKGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJVbmxvYWRlZC5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgICB9XG5cbiAgICBhZGRTaWxlbnRSZW5ld0Vycm9yKGNiKSB7XG4gICAgICAgIHRoaXMuX3NpbGVudFJlbmV3RXJyb3IuYWRkSGFuZGxlcihjYik7XG4gICAgfVxuICAgIHJlbW92ZVNpbGVudFJlbmV3RXJyb3IoY2IpIHtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yZW1vdmVIYW5kbGVyKGNiKTtcbiAgICB9XG4gICAgX3JhaXNlU2lsZW50UmVuZXdFcnJvcihlKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVNpbGVudFJlbmV3RXJyb3JcIiwgZS5tZXNzYWdlKTtcbiAgICAgICAgdGhpcy5fc2lsZW50UmVuZXdFcnJvci5yYWlzZShlKTtcbiAgICB9XG5cbiAgICBhZGRVc2VyU2lnbmVkSW4oY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyU2lnbmVkSW4oY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluLnJlbW92ZUhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICBfcmFpc2VVc2VyU2lnbmVkSW4oKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTaWduZWRJblwiKTtcbiAgICAgICAgdGhpcy5fdXNlclNpZ25lZEluLnJhaXNlKCk7XG4gICAgfVxuXG4gICAgYWRkVXNlclNpZ25lZE91dChjYikge1xuICAgICAgICB0aGlzLl91c2VyU2lnbmVkT3V0LmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyU2lnbmVkT3V0KGNiKSB7XG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmVtb3ZlSGFuZGxlcihjYik7XG4gICAgfVxuICAgIF9yYWlzZVVzZXJTaWduZWRPdXQoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTaWduZWRPdXRcIik7XG4gICAgICAgIHRoaXMuX3VzZXJTaWduZWRPdXQucmFpc2UoKTtcbiAgICB9XG5cbiAgICBhZGRVc2VyU2Vzc2lvbkNoYW5nZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLmFkZEhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICByZW1vdmVVc2VyU2Vzc2lvbkNoYW5nZWQoY2IpIHtcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJlbW92ZUhhbmRsZXIoY2IpO1xuICAgIH1cbiAgICBfcmFpc2VVc2VyU2Vzc2lvbkNoYW5nZWQoKSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIlVzZXJNYW5hZ2VyRXZlbnRzLl9yYWlzZVVzZXJTZXNzaW9uQ2hhbmdlZFwiKTtcbiAgICAgICAgdGhpcy5fdXNlclNlc3Npb25DaGFuZ2VkLnJhaXNlKCk7XG4gICAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IChjKSBCcm9jayBBbGxlbiAmIERvbWluaWNrIEJhaWVyLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuLy8gTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMC4gU2VlIExJQ0VOU0UgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cblxuaW1wb3J0IHsgTG9nIH0gZnJvbSAnLi9Mb2cuanMnO1xuaW1wb3J0IHsgT2lkY0NsaWVudFNldHRpbmdzIH0gZnJvbSAnLi9PaWRjQ2xpZW50U2V0dGluZ3MuanMnO1xuaW1wb3J0IHsgUmVkaXJlY3ROYXZpZ2F0b3IgfSBmcm9tICcuL1JlZGlyZWN0TmF2aWdhdG9yLmpzJztcbmltcG9ydCB7IFBvcHVwTmF2aWdhdG9yIH0gZnJvbSAnLi9Qb3B1cE5hdmlnYXRvci5qcyc7XG5pbXBvcnQgeyBJRnJhbWVOYXZpZ2F0b3IgfSBmcm9tICcuL0lGcmFtZU5hdmlnYXRvci5qcyc7XG5pbXBvcnQgeyBXZWJTdG9yYWdlU3RhdGVTdG9yZSB9IGZyb20gJy4vV2ViU3RvcmFnZVN0YXRlU3RvcmUuanMnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnLi9HbG9iYWwuanMnO1xuaW1wb3J0IHsgU2lnbmluUmVxdWVzdCB9IGZyb20gJy4vU2lnbmluUmVxdWVzdC5qcyc7XG5cbmNvbnN0IERlZmF1bHRBY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IDYwO1xuY29uc3QgRGVmYXVsdENoZWNrU2Vzc2lvbkludGVydmFsID0gMjAwMDtcblxuZXhwb3J0IGNsYXNzIFVzZXJNYW5hZ2VyU2V0dGluZ3MgZXh0ZW5kcyBPaWRjQ2xpZW50U2V0dGluZ3Mge1xuICAgIGNvbnN0cnVjdG9yKHtcbiAgICAgICAgcG9wdXBfcmVkaXJlY3RfdXJpLFxuICAgICAgICBwb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmksXG4gICAgICAgIHBvcHVwV2luZG93RmVhdHVyZXMsXG4gICAgICAgIHBvcHVwV2luZG93VGFyZ2V0LFxuICAgICAgICBzaWxlbnRfcmVkaXJlY3RfdXJpLFxuICAgICAgICBzaWxlbnRSZXF1ZXN0VGltZW91dCxcbiAgICAgICAgYXV0b21hdGljU2lsZW50UmVuZXcgPSBmYWxzZSxcbiAgICAgICAgdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3ID0gZmFsc2UsXG4gICAgICAgIGluY2x1ZGVJZFRva2VuSW5TaWxlbnRSZW5ldyA9IHRydWUsXG4gICAgICAgIG1vbml0b3JTZXNzaW9uID0gdHJ1ZSxcbiAgICAgICAgbW9uaXRvckFub255bW91c1Nlc3Npb24gPSBmYWxzZSxcbiAgICAgICAgY2hlY2tTZXNzaW9uSW50ZXJ2YWwgPSBEZWZhdWx0Q2hlY2tTZXNzaW9uSW50ZXJ2YWwsXG4gICAgICAgIHN0b3BDaGVja1Nlc3Npb25PbkVycm9yID0gdHJ1ZSxcbiAgICAgICAgcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUsXG4gICAgICAgIHJldm9rZUFjY2Vzc1Rva2VuT25TaWdub3V0ID0gZmFsc2UsXG4gICAgICAgIGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lID0gRGVmYXVsdEFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lLFxuICAgICAgICByZWRpcmVjdE5hdmlnYXRvciA9IG5ldyBSZWRpcmVjdE5hdmlnYXRvcigpLFxuICAgICAgICBwb3B1cE5hdmlnYXRvciA9IG5ldyBQb3B1cE5hdmlnYXRvcigpLFxuICAgICAgICBpZnJhbWVOYXZpZ2F0b3IgPSBuZXcgSUZyYW1lTmF2aWdhdG9yKCksXG4gICAgICAgIHVzZXJTdG9yZSA9IG5ldyBXZWJTdG9yYWdlU3RhdGVTdG9yZSh7IHN0b3JlOiBHbG9iYWwuc2Vzc2lvblN0b3JhZ2UgfSlcbiAgICB9ID0ge30pIHtcbiAgICAgICAgc3VwZXIoYXJndW1lbnRzWzBdKTtcblxuICAgICAgICB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmkgPSBwb3B1cF9yZWRpcmVjdF91cmk7XG4gICAgICAgIHRoaXMuX3BvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaSA9IHBvcHVwX3Bvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaTtcbiAgICAgICAgdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcyA9IHBvcHVwV2luZG93RmVhdHVyZXM7XG4gICAgICAgIHRoaXMuX3BvcHVwV2luZG93VGFyZ2V0ID0gcG9wdXBXaW5kb3dUYXJnZXQ7XG5cbiAgICAgICAgdGhpcy5fc2lsZW50X3JlZGlyZWN0X3VyaSA9IHNpbGVudF9yZWRpcmVjdF91cmk7XG4gICAgICAgIHRoaXMuX3NpbGVudFJlcXVlc3RUaW1lb3V0ID0gc2lsZW50UmVxdWVzdFRpbWVvdXQ7XG4gICAgICAgIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3ID0gYXV0b21hdGljU2lsZW50UmVuZXc7XG4gICAgICAgIHRoaXMuX3ZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldyA9IHZhbGlkYXRlU3ViT25TaWxlbnRSZW5ldztcbiAgICAgICAgdGhpcy5faW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3ID0gaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3O1xuICAgICAgICB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZSA9IGFjY2Vzc1Rva2VuRXhwaXJpbmdOb3RpZmljYXRpb25UaW1lO1xuXG4gICAgICAgIHRoaXMuX21vbml0b3JTZXNzaW9uID0gbW9uaXRvclNlc3Npb247XG4gICAgICAgIHRoaXMuX21vbml0b3JBbm9ueW1vdXNTZXNzaW9uID0gbW9uaXRvckFub255bW91c1Nlc3Npb247XG4gICAgICAgIHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsID0gY2hlY2tTZXNzaW9uSW50ZXJ2YWw7XG4gICAgICAgIHRoaXMuX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yID0gc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3I7XG4gICAgICAgIGlmIChxdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZSkge1xuICAgICAgICAgICAgdGhpcy5fcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUgPSBxdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZTtcbiAgICAgICAgfSBcbiAgICAgICAgZWxzZSBpZiAoYXJndW1lbnRzWzBdICYmIGFyZ3VtZW50c1swXS5yZXNwb25zZV90eXBlKSB7XG4gICAgICAgICAgICB0aGlzLl9xdWVyeV9zdGF0dXNfcmVzcG9uc2VfdHlwZSA9IFNpZ25pblJlcXVlc3QuaXNPaWRjKGFyZ3VtZW50c1swXS5yZXNwb25zZV90eXBlKSA/IFwiaWRfdG9rZW5cIiA6IFwiY29kZVwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUgPSBcImlkX3Rva2VuXCI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQgPSByZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dDtcblxuICAgICAgICB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvciA9IHJlZGlyZWN0TmF2aWdhdG9yO1xuICAgICAgICB0aGlzLl9wb3B1cE5hdmlnYXRvciA9IHBvcHVwTmF2aWdhdG9yO1xuICAgICAgICB0aGlzLl9pZnJhbWVOYXZpZ2F0b3IgPSBpZnJhbWVOYXZpZ2F0b3I7XG5cbiAgICAgICAgdGhpcy5fdXNlclN0b3JlID0gdXNlclN0b3JlO1xuICAgIH1cblxuICAgIGdldCBwb3B1cF9yZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9yZWRpcmVjdF91cmk7XG4gICAgfVxuICAgIGdldCBwb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb3B1cF9wb3N0X2xvZ291dF9yZWRpcmVjdF91cmk7XG4gICAgfVxuICAgIGdldCBwb3B1cFdpbmRvd0ZlYXR1cmVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dGZWF0dXJlcztcbiAgICB9XG4gICAgZ2V0IHBvcHVwV2luZG93VGFyZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBXaW5kb3dUYXJnZXQ7XG4gICAgfVxuXG4gICAgZ2V0IHNpbGVudF9yZWRpcmVjdF91cmkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zaWxlbnRfcmVkaXJlY3RfdXJpO1xuICAgIH1cbiAgICAgZ2V0IHNpbGVudFJlcXVlc3RUaW1lb3V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2lsZW50UmVxdWVzdFRpbWVvdXQ7XG4gICAgfVxuICAgIGdldCBhdXRvbWF0aWNTaWxlbnRSZW5ldygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2F1dG9tYXRpY1NpbGVudFJlbmV3O1xuICAgIH1cbiAgICBnZXQgdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGVTdWJPblNpbGVudFJlbmV3O1xuICAgIH1cbiAgICBnZXQgaW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faW5jbHVkZUlkVG9rZW5JblNpbGVudFJlbmV3O1xuICAgIH1cbiAgICBnZXQgYWNjZXNzVG9rZW5FeHBpcmluZ05vdGlmaWNhdGlvblRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hY2Nlc3NUb2tlbkV4cGlyaW5nTm90aWZpY2F0aW9uVGltZTtcbiAgICB9XG5cbiAgICBnZXQgbW9uaXRvclNlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb25pdG9yU2Vzc2lvbjtcbiAgICB9XG4gICAgZ2V0IG1vbml0b3JBbm9ueW1vdXNTZXNzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbW9uaXRvckFub255bW91c1Nlc3Npb247XG4gICAgfVxuICAgIGdldCBjaGVja1Nlc3Npb25JbnRlcnZhbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NoZWNrU2Vzc2lvbkludGVydmFsO1xuICAgIH1cbiAgICBnZXQgc3RvcENoZWNrU2Vzc2lvbk9uRXJyb3IoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0b3BDaGVja1Nlc3Npb25PbkVycm9yO1xuICAgIH1cbiAgICBnZXQgcXVlcnlfc3RhdHVzX3Jlc3BvbnNlX3R5cGUoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3F1ZXJ5X3N0YXR1c19yZXNwb25zZV90eXBlO1xuICAgIH1cbiAgICBnZXQgcmV2b2tlQWNjZXNzVG9rZW5PblNpZ25vdXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXZva2VBY2Nlc3NUb2tlbk9uU2lnbm91dDtcbiAgICB9XG5cbiAgICBnZXQgcmVkaXJlY3ROYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWRpcmVjdE5hdmlnYXRvcjtcbiAgICB9XG4gICAgZ2V0IHBvcHVwTmF2aWdhdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcG9wdXBOYXZpZ2F0b3I7XG4gICAgfVxuICAgIGdldCBpZnJhbWVOYXZpZ2F0b3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pZnJhbWVOYXZpZ2F0b3I7XG4gICAgfVxuXG4gICAgZ2V0IHVzZXJTdG9yZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VzZXJTdG9yZTtcbiAgICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgKGMpIEJyb2NrIEFsbGVuICYgRG9taW5pY2sgQmFpZXIuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4vLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wLiBTZWUgTElDRU5TRSBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuXG5pbXBvcnQgeyBMb2cgfSBmcm9tICcuL0xvZy5qcyc7XG5pbXBvcnQgeyBHbG9iYWwgfSBmcm9tICcuL0dsb2JhbC5qcyc7XG5cbmV4cG9ydCBjbGFzcyBXZWJTdG9yYWdlU3RhdGVTdG9yZSB7XG4gICAgY29uc3RydWN0b3Ioe3ByZWZpeCA9IFwib2lkYy5cIiwgc3RvcmUgPSBHbG9iYWwubG9jYWxTdG9yYWdlfSA9IHt9KSB7XG4gICAgICAgIHRoaXMuX3N0b3JlID0gc3RvcmU7XG4gICAgICAgIHRoaXMuX3ByZWZpeCA9IHByZWZpeDtcbiAgICB9XG5cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBMb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5zZXRcIiwga2V5KTtcblxuICAgICAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XG5cbiAgICAgICAgdGhpcy5fc3RvcmUuc2V0SXRlbShrZXksIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgZ2V0KGtleSkge1xuICAgICAgICBMb2cuZGVidWcoXCJXZWJTdG9yYWdlU3RhdGVTdG9yZS5nZXRcIiwga2V5KTtcblxuICAgICAgICBrZXkgPSB0aGlzLl9wcmVmaXggKyBrZXk7XG5cbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLl9zdG9yZS5nZXRJdGVtKGtleSk7XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShpdGVtKTtcbiAgICB9XG5cbiAgICByZW1vdmUoa2V5KSB7XG4gICAgICAgIExvZy5kZWJ1ZyhcIldlYlN0b3JhZ2VTdGF0ZVN0b3JlLnJlbW92ZVwiLCBrZXkpO1xuXG4gICAgICAgIGtleSA9IHRoaXMuX3ByZWZpeCArIGtleTtcblxuICAgICAgICBsZXQgaXRlbSA9IHRoaXMuX3N0b3JlLmdldEl0ZW0oa2V5KTtcbiAgICAgICAgdGhpcy5fc3RvcmUucmVtb3ZlSXRlbShrZXkpO1xuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoaXRlbSk7XG4gICAgfVxuXG4gICAgZ2V0QWxsS2V5cygpIHtcbiAgICAgICAgTG9nLmRlYnVnKFwiV2ViU3RvcmFnZVN0YXRlU3RvcmUuZ2V0QWxsS2V5c1wiKTtcblxuICAgICAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9zdG9yZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBrZXkgPSB0aGlzLl9zdG9yZS5rZXkoaW5kZXgpO1xuXG4gICAgICAgICAgICBpZiAoa2V5LmluZGV4T2YodGhpcy5fcHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGtleXMucHVzaChrZXkuc3Vic3RyKHRoaXMuX3ByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoa2V5cyk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgandzLCBLRVlVVElMIGFzIEtleVV0aWwsIFg1MDksIGNyeXB0bywgaGV4dG9iNjR1LCBiNjR0b2hleCB9IGZyb20gJy4uLy4uL2pzcnNhc2lnbi9kaXN0L2pzcnNhc2lnbi5qcyc7XG5cbmNvbnN0IEFsbG93ZWRTaWduaW5nQWxncyA9IFsnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInLCAnUFMyNTYnLCAnUFMzODQnLCAnUFM1MTInLCAnRVMyNTYnLCAnRVMzODQnLCAnRVM1MTInXTtcblxuZXhwb3J0IHtcbiAgICBqd3MsXG4gICAgS2V5VXRpbCxcbiAgICBYNTA5LFxuICAgIGNyeXB0byxcbiAgICBoZXh0b2I2NHUsXG4gICAgYjY0dG9oZXgsXG4gICAgQWxsb3dlZFNpZ25pbmdBbGdzXG59O1xuIiwiLyoqXG4gKiBHZW5lcmF0ZXMgUkZDNDEyMiB2ZXJzaW9uIDQgZ3VpZCAoKVxuICovXG5cbnZhciBjcnlwdG8gPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpID8gKHdpbmRvdy5jcnlwdG8gfHwgd2luZG93Lm1zQ3J5cHRvKSA6IG51bGw7XG5cbmZ1bmN0aW9uIF9jcnlwdG9VdWlkdjQoKSB7XG4gIHJldHVybiAoWzFlN10rLTFlMystNGUzKy04ZTMrLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIGMgPT5cbiAgICAoYyBeIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQ4QXJyYXkoMSkpWzBdICYgMTUgPj4gYyAvIDQpLnRvU3RyaW5nKDE2KVxuICApXG59XG5cbmZ1bmN0aW9uIF91dWlkdjQoKSB7XG4gICAgcmV0dXJuIChbMWU3XSstMWUzKy00ZTMrLThlMystMWUxMSkucmVwbGFjZSgvWzAxOF0vZywgYyA9PlxuICAgIChjIF4gTWF0aC5yYW5kb20oKSAqIDE2ID4+IGMgLyA0KS50b1N0cmluZygxNilcbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByYW5kb20oKSB7XG4gIHZhciBoYXNDcnlwdG8gPSBjcnlwdG8gIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvICE9PSBudWxsO1xuICB2YXIgaGFzUmFuZG9tVmFsdWVzID0gaGFzQ3J5cHRvICYmICh0eXBlb2YoY3J5cHRvLmdldFJhbmRvbVZhbHVlcykgIT0gJ3VuZGVmaW5lZCcpOyAgXG4gIHZhciB1dWlkID0gaGFzUmFuZG9tVmFsdWVzID8gX2NyeXB0b1V1aWR2NCA6IF91dWlkdjQ7XG4gIHJldHVybiB1dWlkKCkucmVwbGFjZSgvLS9nLCAnJyk7XG59XG4iLCJjb25zdCBWZXJzaW9uID0gXCIxLjExLjYtYmV0YS4xXCI7IGV4cG9ydCB7VmVyc2lvbn07Il0sInNvdXJjZVJvb3QiOiIifQ==